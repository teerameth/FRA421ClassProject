
h745LCDLegacy_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08107078  08107078  00017078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810746c  0810746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08107470  08107470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  10000000  08107474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  100001e8  0810765c  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000358  0810765c  00020358  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001862b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ac5  00000000  00000000  00038843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd8  00000000  00000000  0003b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ae0  00000000  00000000  0003bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039b89  00000000  00000000  0003c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000eb3b  00000000  00000000  00076549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001786e4  00000000  00000000  00085084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001fd768  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004084  00000000  00000000  001fd7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810705c 	.word	0x0810705c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810705c 	.word	0x0810705c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100d5c:	4b0b      	ldr	r3, [pc, #44]	; (8100d8c <SystemInit+0x34>)
 8100d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100d62:	4a0a      	ldr	r2, [pc, #40]	; (8100d8c <SystemInit+0x34>)
 8100d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100d6c:	4b07      	ldr	r3, [pc, #28]	; (8100d8c <SystemInit+0x34>)
 8100d6e:	691b      	ldr	r3, [r3, #16]
 8100d70:	4a06      	ldr	r2, [pc, #24]	; (8100d8c <SystemInit+0x34>)
 8100d72:	f043 0310 	orr.w	r3, r3, #16
 8100d76:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100d78:	4b04      	ldr	r3, [pc, #16]	; (8100d8c <SystemInit+0x34>)
 8100d7a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100d7e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100d80:	bf00      	nop
 8100d82:	46bd      	mov	sp, r7
 8100d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d88:	4770      	bx	lr
 8100d8a:	bf00      	nop
 8100d8c:	e000ed00 	.word	0xe000ed00

08100d90 <MPU6050_Init>:
ETH_HandleTypeDef heth;

I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8100d90:	b580      	push	{r7, lr}
 8100d92:	b088      	sub	sp, #32
 8100d94:	af04      	add	r7, sp, #16
 8100d96:	6078      	str	r0, [r7, #4]
    uint8_t check;	// buffer to store feedback
    uint8_t data;	// buffer to send configuration data

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8100d98:	2364      	movs	r3, #100	; 0x64
 8100d9a:	9302      	str	r3, [sp, #8]
 8100d9c:	2301      	movs	r3, #1
 8100d9e:	9301      	str	r3, [sp, #4]
 8100da0:	f107 030f 	add.w	r3, r7, #15
 8100da4:	9300      	str	r3, [sp, #0]
 8100da6:	2301      	movs	r3, #1
 8100da8:	2275      	movs	r2, #117	; 0x75
 8100daa:	21d0      	movs	r1, #208	; 0xd0
 8100dac:	6878      	ldr	r0, [r7, #4]
 8100dae:	f001 fc6b 	bl	8102688 <HAL_I2C_Mem_Read>

    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8100db2:	7bfb      	ldrb	r3, [r7, #15]
 8100db4:	2b68      	cmp	r3, #104	; 0x68
 8100db6:	d14c      	bne.n	8100e52 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
    	data = 0b00001000; // not sleep + disable temperature sensor + use internal 8MHz oscillator as clock source
 8100db8:	2308      	movs	r3, #8
 8100dba:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx,
 8100dbc:	2364      	movs	r3, #100	; 0x64
 8100dbe:	9302      	str	r3, [sp, #8]
 8100dc0:	2301      	movs	r3, #1
 8100dc2:	9301      	str	r3, [sp, #4]
 8100dc4:	f107 030e 	add.w	r3, r7, #14
 8100dc8:	9300      	str	r3, [sp, #0]
 8100dca:	2301      	movs	r3, #1
 8100dcc:	226b      	movs	r2, #107	; 0x6b
 8100dce:	21d0      	movs	r1, #208	; 0xd0
 8100dd0:	6878      	ldr	r0, [r7, #4]
 8100dd2:	f001 fb45 	bl	8102460 <HAL_I2C_Mem_Write>
				&data,
				1,
				i2c_timeout);

        // Disable digital low pass filter (Gyroscope Output Rate will = 8kHz)
        data = 0;
 8100dd6:	2300      	movs	r3, #0
 8100dd8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx,
 8100dda:	2364      	movs	r3, #100	; 0x64
 8100ddc:	9302      	str	r3, [sp, #8]
 8100dde:	2301      	movs	r3, #1
 8100de0:	9301      	str	r3, [sp, #4]
 8100de2:	f107 030e 	add.w	r3, r7, #14
 8100de6:	9300      	str	r3, [sp, #0]
 8100de8:	2301      	movs	r3, #1
 8100dea:	221a      	movs	r2, #26
 8100dec:	21d0      	movs	r1, #208	; 0xd0
 8100dee:	6878      	ldr	r0, [r7, #4]
 8100df0:	f001 fb36 	bl	8102460 <HAL_I2C_Mem_Write>
        		&data,
        		1,
        		i2c_timeout);

        // Set Sample Rate to 1KHz (Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV))
        data = 0x07;
 8100df4:	2307      	movs	r3, #7
 8100df6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx,
 8100df8:	2364      	movs	r3, #100	; 0x64
 8100dfa:	9302      	str	r3, [sp, #8]
 8100dfc:	2301      	movs	r3, #1
 8100dfe:	9301      	str	r3, [sp, #4]
 8100e00:	f107 030e 	add.w	r3, r7, #14
 8100e04:	9300      	str	r3, [sp, #0]
 8100e06:	2301      	movs	r3, #1
 8100e08:	2219      	movs	r2, #25
 8100e0a:	21d0      	movs	r1, #208	; 0xd0
 8100e0c:	6878      	ldr	r0, [r7, #4]
 8100e0e:	f001 fb27 	bl	8102460 <HAL_I2C_Mem_Write>
        		&data,
        		1,
        		i2c_timeout);

        // Set accelerometer configuration (+-2g)
        data = 0x00;
 8100e12:	2300      	movs	r3, #0
 8100e14:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx,
 8100e16:	2364      	movs	r3, #100	; 0x64
 8100e18:	9302      	str	r3, [sp, #8]
 8100e1a:	2301      	movs	r3, #1
 8100e1c:	9301      	str	r3, [sp, #4]
 8100e1e:	f107 030e 	add.w	r3, r7, #14
 8100e22:	9300      	str	r3, [sp, #0]
 8100e24:	2301      	movs	r3, #1
 8100e26:	221c      	movs	r2, #28
 8100e28:	21d0      	movs	r1, #208	; 0xd0
 8100e2a:	6878      	ldr	r0, [r7, #4]
 8100e2c:	f001 fb18 	bl	8102460 <HAL_I2C_Mem_Write>
        		&data,
        		1,
        		i2c_timeout);

        // Set Gyroscope configuration (+= 250deg)
        data = 0x00;
 8100e30:	2300      	movs	r3, #0
 8100e32:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx,
 8100e34:	2364      	movs	r3, #100	; 0x64
 8100e36:	9302      	str	r3, [sp, #8]
 8100e38:	2301      	movs	r3, #1
 8100e3a:	9301      	str	r3, [sp, #4]
 8100e3c:	f107 030e 	add.w	r3, r7, #14
 8100e40:	9300      	str	r3, [sp, #0]
 8100e42:	2301      	movs	r3, #1
 8100e44:	221b      	movs	r2, #27
 8100e46:	21d0      	movs	r1, #208	; 0xd0
 8100e48:	6878      	ldr	r0, [r7, #4]
 8100e4a:	f001 fb09 	bl	8102460 <HAL_I2C_Mem_Write>
				0x1B,			// GYRO_CONFIG Register
        		1,
        		&data,
        		1,
        		i2c_timeout);
        return 0;
 8100e4e:	2300      	movs	r3, #0
 8100e50:	e000      	b.n	8100e54 <MPU6050_Init+0xc4>
    }
    return 1;
 8100e52:	2301      	movs	r3, #1
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	3710      	adds	r7, #16
 8100e58:	46bd      	mov	sp, r7
 8100e5a:	bd80      	pop	{r7, pc}

08100e5c <MPU6050_Read_Accel>:
void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx) {
 8100e5c:	b580      	push	{r7, lr}
 8100e5e:	b088      	sub	sp, #32
 8100e60:	af04      	add	r7, sp, #16
 8100e62:	6078      	str	r0, [r7, #4]
    uint8_t data[6];		// buffer
    HAL_I2C_Mem_Read(I2Cx,
 8100e64:	2364      	movs	r3, #100	; 0x64
 8100e66:	9302      	str	r3, [sp, #8]
 8100e68:	2306      	movs	r3, #6
 8100e6a:	9301      	str	r3, [sp, #4]
 8100e6c:	f107 0308 	add.w	r3, r7, #8
 8100e70:	9300      	str	r3, [sp, #0]
 8100e72:	2301      	movs	r3, #1
 8100e74:	223b      	movs	r2, #59	; 0x3b
 8100e76:	21d0      	movs	r1, #208	; 0xd0
 8100e78:	6878      	ldr	r0, [r7, #4]
 8100e7a:	f001 fc05 	bl	8102688 <HAL_I2C_Mem_Read>
			1,
			data,
			6,
			i2c_timeout);

    a_x = (int16_t) (data[0] << 8 | data[1]) / 16384.0;
 8100e7e:	7a3b      	ldrb	r3, [r7, #8]
 8100e80:	021b      	lsls	r3, r3, #8
 8100e82:	b21a      	sxth	r2, r3
 8100e84:	7a7b      	ldrb	r3, [r7, #9]
 8100e86:	b21b      	sxth	r3, r3
 8100e88:	4313      	orrs	r3, r2
 8100e8a:	b21b      	sxth	r3, r3
 8100e8c:	4618      	mov	r0, r3
 8100e8e:	f7ff fbd1 	bl	8100634 <__aeabi_i2d>
 8100e92:	f04f 0200 	mov.w	r2, #0
 8100e96:	4b20      	ldr	r3, [pc, #128]	; (8100f18 <MPU6050_Read_Accel+0xbc>)
 8100e98:	f7ff fd60 	bl	810095c <__aeabi_ddiv>
 8100e9c:	4602      	mov	r2, r0
 8100e9e:	460b      	mov	r3, r1
 8100ea0:	4610      	mov	r0, r2
 8100ea2:	4619      	mov	r1, r3
 8100ea4:	f7ff ff08 	bl	8100cb8 <__aeabi_d2f>
 8100ea8:	4603      	mov	r3, r0
 8100eaa:	4a1c      	ldr	r2, [pc, #112]	; (8100f1c <MPU6050_Read_Accel+0xc0>)
 8100eac:	6013      	str	r3, [r2, #0]
    a_y = (int16_t) (data[2] << 8 | data[3]) / 16384.0;
 8100eae:	7abb      	ldrb	r3, [r7, #10]
 8100eb0:	021b      	lsls	r3, r3, #8
 8100eb2:	b21a      	sxth	r2, r3
 8100eb4:	7afb      	ldrb	r3, [r7, #11]
 8100eb6:	b21b      	sxth	r3, r3
 8100eb8:	4313      	orrs	r3, r2
 8100eba:	b21b      	sxth	r3, r3
 8100ebc:	4618      	mov	r0, r3
 8100ebe:	f7ff fbb9 	bl	8100634 <__aeabi_i2d>
 8100ec2:	f04f 0200 	mov.w	r2, #0
 8100ec6:	4b14      	ldr	r3, [pc, #80]	; (8100f18 <MPU6050_Read_Accel+0xbc>)
 8100ec8:	f7ff fd48 	bl	810095c <__aeabi_ddiv>
 8100ecc:	4602      	mov	r2, r0
 8100ece:	460b      	mov	r3, r1
 8100ed0:	4610      	mov	r0, r2
 8100ed2:	4619      	mov	r1, r3
 8100ed4:	f7ff fef0 	bl	8100cb8 <__aeabi_d2f>
 8100ed8:	4603      	mov	r3, r0
 8100eda:	4a11      	ldr	r2, [pc, #68]	; (8100f20 <MPU6050_Read_Accel+0xc4>)
 8100edc:	6013      	str	r3, [r2, #0]
    a_z = (int16_t) (data[4] << 8 | data[5]) / 16384.0;
 8100ede:	7b3b      	ldrb	r3, [r7, #12]
 8100ee0:	021b      	lsls	r3, r3, #8
 8100ee2:	b21a      	sxth	r2, r3
 8100ee4:	7b7b      	ldrb	r3, [r7, #13]
 8100ee6:	b21b      	sxth	r3, r3
 8100ee8:	4313      	orrs	r3, r2
 8100eea:	b21b      	sxth	r3, r3
 8100eec:	4618      	mov	r0, r3
 8100eee:	f7ff fba1 	bl	8100634 <__aeabi_i2d>
 8100ef2:	f04f 0200 	mov.w	r2, #0
 8100ef6:	4b08      	ldr	r3, [pc, #32]	; (8100f18 <MPU6050_Read_Accel+0xbc>)
 8100ef8:	f7ff fd30 	bl	810095c <__aeabi_ddiv>
 8100efc:	4602      	mov	r2, r0
 8100efe:	460b      	mov	r3, r1
 8100f00:	4610      	mov	r0, r2
 8100f02:	4619      	mov	r1, r3
 8100f04:	f7ff fed8 	bl	8100cb8 <__aeabi_d2f>
 8100f08:	4603      	mov	r3, r0
 8100f0a:	4a06      	ldr	r2, [pc, #24]	; (8100f24 <MPU6050_Read_Accel+0xc8>)
 8100f0c:	6013      	str	r3, [r2, #0]
}
 8100f0e:	bf00      	nop
 8100f10:	3710      	adds	r7, #16
 8100f12:	46bd      	mov	sp, r7
 8100f14:	bd80      	pop	{r7, pc}
 8100f16:	bf00      	nop
 8100f18:	40d00000 	.word	0x40d00000
 8100f1c:	10000278 	.word	0x10000278
 8100f20:	10000228 	.word	0x10000228
 8100f24:	10000280 	.word	0x10000280

08100f28 <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx) {
 8100f28:	b580      	push	{r7, lr}
 8100f2a:	b088      	sub	sp, #32
 8100f2c:	af04      	add	r7, sp, #16
 8100f2e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];		// buffer
    HAL_I2C_Mem_Read(I2Cx,
 8100f30:	2364      	movs	r3, #100	; 0x64
 8100f32:	9302      	str	r3, [sp, #8]
 8100f34:	2306      	movs	r3, #6
 8100f36:	9301      	str	r3, [sp, #4]
 8100f38:	f107 0308 	add.w	r3, r7, #8
 8100f3c:	9300      	str	r3, [sp, #0]
 8100f3e:	2301      	movs	r3, #1
 8100f40:	2243      	movs	r2, #67	; 0x43
 8100f42:	21d0      	movs	r1, #208	; 0xd0
 8100f44:	6878      	ldr	r0, [r7, #4]
 8100f46:	f001 fb9f 	bl	8102688 <HAL_I2C_Mem_Read>
    		1,
			data,
    		6,
    		i2c_timeout);

    w_x = (int16_t) (data[0] << 8 | data[1]) / 7509.87;
 8100f4a:	7a3b      	ldrb	r3, [r7, #8]
 8100f4c:	021b      	lsls	r3, r3, #8
 8100f4e:	b21a      	sxth	r2, r3
 8100f50:	7a7b      	ldrb	r3, [r7, #9]
 8100f52:	b21b      	sxth	r3, r3
 8100f54:	4313      	orrs	r3, r2
 8100f56:	b21b      	sxth	r3, r3
 8100f58:	4618      	mov	r0, r3
 8100f5a:	f7ff fb6b 	bl	8100634 <__aeabi_i2d>
 8100f5e:	a322      	add	r3, pc, #136	; (adr r3, 8100fe8 <MPU6050_Read_Gyro+0xc0>)
 8100f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100f64:	f7ff fcfa 	bl	810095c <__aeabi_ddiv>
 8100f68:	4602      	mov	r2, r0
 8100f6a:	460b      	mov	r3, r1
 8100f6c:	4610      	mov	r0, r2
 8100f6e:	4619      	mov	r1, r3
 8100f70:	f7ff fea2 	bl	8100cb8 <__aeabi_d2f>
 8100f74:	4603      	mov	r3, r0
 8100f76:	4a1e      	ldr	r2, [pc, #120]	; (8100ff0 <MPU6050_Read_Gyro+0xc8>)
 8100f78:	6013      	str	r3, [r2, #0]
    w_y = (int16_t) (data[2] << 8 | data[3]) / 7509.87;
 8100f7a:	7abb      	ldrb	r3, [r7, #10]
 8100f7c:	021b      	lsls	r3, r3, #8
 8100f7e:	b21a      	sxth	r2, r3
 8100f80:	7afb      	ldrb	r3, [r7, #11]
 8100f82:	b21b      	sxth	r3, r3
 8100f84:	4313      	orrs	r3, r2
 8100f86:	b21b      	sxth	r3, r3
 8100f88:	4618      	mov	r0, r3
 8100f8a:	f7ff fb53 	bl	8100634 <__aeabi_i2d>
 8100f8e:	a316      	add	r3, pc, #88	; (adr r3, 8100fe8 <MPU6050_Read_Gyro+0xc0>)
 8100f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100f94:	f7ff fce2 	bl	810095c <__aeabi_ddiv>
 8100f98:	4602      	mov	r2, r0
 8100f9a:	460b      	mov	r3, r1
 8100f9c:	4610      	mov	r0, r2
 8100f9e:	4619      	mov	r1, r3
 8100fa0:	f7ff fe8a 	bl	8100cb8 <__aeabi_d2f>
 8100fa4:	4603      	mov	r3, r0
 8100fa6:	4a13      	ldr	r2, [pc, #76]	; (8100ff4 <MPU6050_Read_Gyro+0xcc>)
 8100fa8:	6013      	str	r3, [r2, #0]
    w_z = (int16_t) (data[4] << 8 | data[5]) / 7509.87;
 8100faa:	7b3b      	ldrb	r3, [r7, #12]
 8100fac:	021b      	lsls	r3, r3, #8
 8100fae:	b21a      	sxth	r2, r3
 8100fb0:	7b7b      	ldrb	r3, [r7, #13]
 8100fb2:	b21b      	sxth	r3, r3
 8100fb4:	4313      	orrs	r3, r2
 8100fb6:	b21b      	sxth	r3, r3
 8100fb8:	4618      	mov	r0, r3
 8100fba:	f7ff fb3b 	bl	8100634 <__aeabi_i2d>
 8100fbe:	a30a      	add	r3, pc, #40	; (adr r3, 8100fe8 <MPU6050_Read_Gyro+0xc0>)
 8100fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100fc4:	f7ff fcca 	bl	810095c <__aeabi_ddiv>
 8100fc8:	4602      	mov	r2, r0
 8100fca:	460b      	mov	r3, r1
 8100fcc:	4610      	mov	r0, r2
 8100fce:	4619      	mov	r1, r3
 8100fd0:	f7ff fe72 	bl	8100cb8 <__aeabi_d2f>
 8100fd4:	4603      	mov	r3, r0
 8100fd6:	4a08      	ldr	r2, [pc, #32]	; (8100ff8 <MPU6050_Read_Gyro+0xd0>)
 8100fd8:	6013      	str	r3, [r2, #0]
}
 8100fda:	bf00      	nop
 8100fdc:	3710      	adds	r7, #16
 8100fde:	46bd      	mov	sp, r7
 8100fe0:	bd80      	pop	{r7, pc}
 8100fe2:	bf00      	nop
 8100fe4:	f3af 8000 	nop.w
 8100fe8:	b851eb85 	.word	0xb851eb85
 8100fec:	40bd55de 	.word	0x40bd55de
 8100ff0:	10000284 	.word	0x10000284
 8100ff4:	1000027c 	.word	0x1000027c
 8100ff8:	10000224 	.word	0x10000224
 8100ffc:	00000000 	.word	0x00000000

08101000 <filterUpdate>:
void filterUpdate()	// Update Sebastien Orientation Filter (copy from this paper https://www.samba.org/tridge/UAV/madgwick_internal_report.pdf)
{
 8101000:	b5b0      	push	{r4, r5, r7, lr}
 8101002:	b09a      	sub	sp, #104	; 0x68
 8101004:	af00      	add	r7, sp, #0
	float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; // quaternion derrivative from gyroscopes elements
	float f_1, f_2, f_3; // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; // estimated direction of the gyroscope error
	// Axulirary variables to avoid reapeated calcualtions
	float halfSEq_1 = 0.5f * SEq_1;
 8101006:	4be5      	ldr	r3, [pc, #916]	; (810139c <filterUpdate+0x39c>)
 8101008:	edd3 7a00 	vldr	s15, [r3]
 810100c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8101010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101014:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float halfSEq_2 = 0.5f * SEq_2;
 8101018:	4be1      	ldr	r3, [pc, #900]	; (81013a0 <filterUpdate+0x3a0>)
 810101a:	edd3 7a00 	vldr	s15, [r3]
 810101e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8101022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101026:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float halfSEq_3 = 0.5f * SEq_3;
 810102a:	4bde      	ldr	r3, [pc, #888]	; (81013a4 <filterUpdate+0x3a4>)
 810102c:	edd3 7a00 	vldr	s15, [r3]
 8101030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8101034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101038:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float halfSEq_4 = 0.5f * SEq_4;
 810103c:	4bda      	ldr	r3, [pc, #872]	; (81013a8 <filterUpdate+0x3a8>)
 810103e:	edd3 7a00 	vldr	s15, [r3]
 8101042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8101046:	ee67 7a87 	vmul.f32	s15, s15, s14
 810104a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float twoSEq_1 = 2.0f * SEq_1;
 810104e:	4bd3      	ldr	r3, [pc, #844]	; (810139c <filterUpdate+0x39c>)
 8101050:	edd3 7a00 	vldr	s15, [r3]
 8101054:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101058:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float twoSEq_2 = 2.0f * SEq_2;
 810105c:	4bd0      	ldr	r3, [pc, #832]	; (81013a0 <filterUpdate+0x3a0>)
 810105e:	edd3 7a00 	vldr	s15, [r3]
 8101062:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101066:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float twoSEq_3 = 2.0f * SEq_3;
 810106a:	4bce      	ldr	r3, [pc, #824]	; (81013a4 <filterUpdate+0x3a4>)
 810106c:	edd3 7a00 	vldr	s15, [r3]
 8101070:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101074:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	// Normalise the accelerometer measurement
	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 8101078:	4bcc      	ldr	r3, [pc, #816]	; (81013ac <filterUpdate+0x3ac>)
 810107a:	ed93 7a00 	vldr	s14, [r3]
 810107e:	4bcb      	ldr	r3, [pc, #812]	; (81013ac <filterUpdate+0x3ac>)
 8101080:	edd3 7a00 	vldr	s15, [r3]
 8101084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101088:	4bc9      	ldr	r3, [pc, #804]	; (81013b0 <filterUpdate+0x3b0>)
 810108a:	edd3 6a00 	vldr	s13, [r3]
 810108e:	4bc8      	ldr	r3, [pc, #800]	; (81013b0 <filterUpdate+0x3b0>)
 8101090:	edd3 7a00 	vldr	s15, [r3]
 8101094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101098:	ee37 7a27 	vadd.f32	s14, s14, s15
 810109c:	4bc5      	ldr	r3, [pc, #788]	; (81013b4 <filterUpdate+0x3b4>)
 810109e:	edd3 6a00 	vldr	s13, [r3]
 81010a2:	4bc4      	ldr	r3, [pc, #784]	; (81013b4 <filterUpdate+0x3b4>)
 81010a4:	edd3 7a00 	vldr	s15, [r3]
 81010a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 81010b0:	ee17 0a90 	vmov	r0, s15
 81010b4:	f7ff fad0 	bl	8100658 <__aeabi_f2d>
 81010b8:	4602      	mov	r2, r0
 81010ba:	460b      	mov	r3, r1
 81010bc:	ec43 2b10 	vmov	d0, r2, r3
 81010c0:	f003 f9e0 	bl	8104484 <sqrt>
 81010c4:	ec53 2b10 	vmov	r2, r3, d0
 81010c8:	4610      	mov	r0, r2
 81010ca:	4619      	mov	r1, r3
 81010cc:	f7ff fdf4 	bl	8100cb8 <__aeabi_d2f>
 81010d0:	4603      	mov	r3, r0
 81010d2:	64bb      	str	r3, [r7, #72]	; 0x48
	a_x /= norm;
 81010d4:	4bb5      	ldr	r3, [pc, #724]	; (81013ac <filterUpdate+0x3ac>)
 81010d6:	edd3 6a00 	vldr	s13, [r3]
 81010da:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 81010de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81010e2:	4bb2      	ldr	r3, [pc, #712]	; (81013ac <filterUpdate+0x3ac>)
 81010e4:	edc3 7a00 	vstr	s15, [r3]
	a_y /= norm;
 81010e8:	4bb1      	ldr	r3, [pc, #708]	; (81013b0 <filterUpdate+0x3b0>)
 81010ea:	edd3 6a00 	vldr	s13, [r3]
 81010ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 81010f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81010f6:	4bae      	ldr	r3, [pc, #696]	; (81013b0 <filterUpdate+0x3b0>)
 81010f8:	edc3 7a00 	vstr	s15, [r3]
	a_z /= norm;
 81010fc:	4bad      	ldr	r3, [pc, #692]	; (81013b4 <filterUpdate+0x3b4>)
 81010fe:	edd3 6a00 	vldr	s13, [r3]
 8101102:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8101106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810110a:	4baa      	ldr	r3, [pc, #680]	; (81013b4 <filterUpdate+0x3b4>)
 810110c:	edc3 7a00 	vstr	s15, [r3]
	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 8101110:	4ba5      	ldr	r3, [pc, #660]	; (81013a8 <filterUpdate+0x3a8>)
 8101112:	ed93 7a00 	vldr	s14, [r3]
 8101116:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 810111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 810111e:	4ba1      	ldr	r3, [pc, #644]	; (81013a4 <filterUpdate+0x3a4>)
 8101120:	edd3 6a00 	vldr	s13, [r3]
 8101124:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8101128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810112c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101130:	4b9e      	ldr	r3, [pc, #632]	; (81013ac <filterUpdate+0x3ac>)
 8101132:	edd3 7a00 	vldr	s15, [r3]
 8101136:	ee77 7a67 	vsub.f32	s15, s14, s15
 810113a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 810113e:	4b98      	ldr	r3, [pc, #608]	; (81013a0 <filterUpdate+0x3a0>)
 8101140:	ed93 7a00 	vldr	s14, [r3]
 8101144:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8101148:	ee27 7a27 	vmul.f32	s14, s14, s15
 810114c:	4b96      	ldr	r3, [pc, #600]	; (81013a8 <filterUpdate+0x3a8>)
 810114e:	edd3 6a00 	vldr	s13, [r3]
 8101152:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8101156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810115a:	ee37 7a27 	vadd.f32	s14, s14, s15
 810115e:	4b94      	ldr	r3, [pc, #592]	; (81013b0 <filterUpdate+0x3b0>)
 8101160:	edd3 7a00 	vldr	s15, [r3]
 8101164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101168:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 810116c:	4b8c      	ldr	r3, [pc, #560]	; (81013a0 <filterUpdate+0x3a0>)
 810116e:	ed93 7a00 	vldr	s14, [r3]
 8101172:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8101176:	ee67 7a27 	vmul.f32	s15, s14, s15
 810117a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810117e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101182:	4b88      	ldr	r3, [pc, #544]	; (81013a4 <filterUpdate+0x3a4>)
 8101184:	edd3 6a00 	vldr	s13, [r3]
 8101188:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 810118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101190:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101194:	4b87      	ldr	r3, [pc, #540]	; (81013b4 <filterUpdate+0x3b4>)
 8101196:	edd3 7a00 	vldr	s15, [r3]
 810119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 810119e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	J_11or24 = twoSEq_3; // J_11 negated in matrix multiplication
 81011a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81011a4:	63bb      	str	r3, [r7, #56]	; 0x38
	J_12or23 = 2.0f * SEq_4;
 81011a6:	4b80      	ldr	r3, [pc, #512]	; (81013a8 <filterUpdate+0x3a8>)
 81011a8:	edd3 7a00 	vldr	s15, [r3]
 81011ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81011b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	J_13or22 = twoSEq_1; // J_12 negated in matrix multiplication
 81011b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81011b6:	633b      	str	r3, [r7, #48]	; 0x30
	J_14or21 = twoSEq_2;
 81011b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	J_32 = 2.0f * J_14or21; // negated in matrix multiplication
 81011bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 81011c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81011c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	J_33 = 2.0f * J_11or24; // negated in matrix multiplication
 81011c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 81011cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81011d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 81011d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 81011d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 81011dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011e0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 81011e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81011e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 81011f0:	edc7 7a08 	vstr	s15, [r7, #32]
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 81011f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 81011f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101200:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8101204:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8101208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810120c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101210:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8101214:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8101218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810121c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101220:	edc7 7a07 	vstr	s15, [r7, #28]
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8101224:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8101228:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 810122c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101230:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8101234:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8101238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810123c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101240:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8101244:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8101248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101250:	edc7 7a06 	vstr	s15, [r7, #24]
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8101254:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8101258:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 810125c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101260:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8101264:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8101268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101270:	edc7 7a05 	vstr	s15, [r7, #20]
	// Normalise the gradient
	norm = sqrt(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8101274:	edd7 7a08 	vldr	s15, [r7, #32]
 8101278:	ee27 7aa7 	vmul.f32	s14, s15, s15
 810127c:	edd7 7a07 	vldr	s15, [r7, #28]
 8101280:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101288:	edd7 7a06 	vldr	s15, [r7, #24]
 810128c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101294:	edd7 7a05 	vldr	s15, [r7, #20]
 8101298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 81012a0:	ee17 0a90 	vmov	r0, s15
 81012a4:	f7ff f9d8 	bl	8100658 <__aeabi_f2d>
 81012a8:	4602      	mov	r2, r0
 81012aa:	460b      	mov	r3, r1
 81012ac:	ec43 2b10 	vmov	d0, r2, r3
 81012b0:	f003 f8e8 	bl	8104484 <sqrt>
 81012b4:	ec53 2b10 	vmov	r2, r3, d0
 81012b8:	4610      	mov	r0, r2
 81012ba:	4619      	mov	r1, r3
 81012bc:	f7ff fcfc 	bl	8100cb8 <__aeabi_d2f>
 81012c0:	4603      	mov	r3, r0
 81012c2:	64bb      	str	r3, [r7, #72]	; 0x48
	SEqHatDot_1 /= norm;
 81012c4:	edd7 6a08 	vldr	s13, [r7, #32]
 81012c8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 81012cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81012d0:	edc7 7a08 	vstr	s15, [r7, #32]
	SEqHatDot_2 /= norm;
 81012d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81012d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 81012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81012e0:	edc7 7a07 	vstr	s15, [r7, #28]
	SEqHatDot_3 /= norm;
 81012e4:	edd7 6a06 	vldr	s13, [r7, #24]
 81012e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 81012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81012f0:	edc7 7a06 	vstr	s15, [r7, #24]
	SEqHatDot_4 /= norm;
 81012f4:	edd7 6a05 	vldr	s13, [r7, #20]
 81012f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 81012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101300:	edc7 7a05 	vstr	s15, [r7, #20]
	// Compute the quaternion derrivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 8101304:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8101308:	eeb1 7a67 	vneg.f32	s14, s15
 810130c:	4b2a      	ldr	r3, [pc, #168]	; (81013b8 <filterUpdate+0x3b8>)
 810130e:	edd3 7a00 	vldr	s15, [r3]
 8101312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101316:	4b29      	ldr	r3, [pc, #164]	; (81013bc <filterUpdate+0x3bc>)
 8101318:	edd3 6a00 	vldr	s13, [r3]
 810131c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8101320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101328:	4b25      	ldr	r3, [pc, #148]	; (81013c0 <filterUpdate+0x3c0>)
 810132a:	edd3 6a00 	vldr	s13, [r3]
 810132e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8101332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101336:	ee77 7a67 	vsub.f32	s15, s14, s15
 810133a:	edc7 7a04 	vstr	s15, [r7, #16]
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 810133e:	4b1e      	ldr	r3, [pc, #120]	; (81013b8 <filterUpdate+0x3b8>)
 8101340:	ed93 7a00 	vldr	s14, [r3]
 8101344:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8101348:	ee27 7a27 	vmul.f32	s14, s14, s15
 810134c:	4b1c      	ldr	r3, [pc, #112]	; (81013c0 <filterUpdate+0x3c0>)
 810134e:	edd3 6a00 	vldr	s13, [r3]
 8101352:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8101356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 810135e:	4b17      	ldr	r3, [pc, #92]	; (81013bc <filterUpdate+0x3bc>)
 8101360:	edd3 6a00 	vldr	s13, [r3]
 8101364:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8101368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101370:	edc7 7a03 	vstr	s15, [r7, #12]
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 8101374:	4b11      	ldr	r3, [pc, #68]	; (81013bc <filterUpdate+0x3bc>)
 8101376:	ed93 7a00 	vldr	s14, [r3]
 810137a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 810137e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101382:	4b0f      	ldr	r3, [pc, #60]	; (81013c0 <filterUpdate+0x3c0>)
 8101384:	edd3 6a00 	vldr	s13, [r3]
 8101388:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 810138c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101390:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101394:	4b08      	ldr	r3, [pc, #32]	; (81013b8 <filterUpdate+0x3b8>)
 8101396:	edd3 6a00 	vldr	s13, [r3]
 810139a:	e013      	b.n	81013c4 <filterUpdate+0x3c4>
 810139c:	10000008 	.word	0x10000008
 81013a0:	10000204 	.word	0x10000204
 81013a4:	10000208 	.word	0x10000208
 81013a8:	1000020c 	.word	0x1000020c
 81013ac:	10000278 	.word	0x10000278
 81013b0:	10000228 	.word	0x10000228
 81013b4:	10000280 	.word	0x10000280
 81013b8:	10000284 	.word	0x10000284
 81013bc:	1000027c 	.word	0x1000027c
 81013c0:	10000224 	.word	0x10000224
 81013c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 81013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d0:	edc7 7a02 	vstr	s15, [r7, #8]
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 81013d4:	4bac      	ldr	r3, [pc, #688]	; (8101688 <filterUpdate+0x688>)
 81013d6:	ed93 7a00 	vldr	s14, [r3]
 81013da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 81013de:	ee27 7a27 	vmul.f32	s14, s14, s15
 81013e2:	4baa      	ldr	r3, [pc, #680]	; (810168c <filterUpdate+0x68c>)
 81013e4:	edd3 6a00 	vldr	s13, [r3]
 81013e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 81013ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81013f4:	4ba6      	ldr	r3, [pc, #664]	; (8101690 <filterUpdate+0x690>)
 81013f6:	edd3 6a00 	vldr	s13, [r3]
 81013fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81013fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101406:	edc7 7a01 	vstr	s15, [r7, #4]
	// Compute then integrate the estimated quaternion derrivative
	SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 810140a:	6938      	ldr	r0, [r7, #16]
 810140c:	f7ff f924 	bl	8100658 <__aeabi_f2d>
 8101410:	4604      	mov	r4, r0
 8101412:	460d      	mov	r5, r1
 8101414:	6a38      	ldr	r0, [r7, #32]
 8101416:	f7ff f91f 	bl	8100658 <__aeabi_f2d>
 810141a:	a397      	add	r3, pc, #604	; (adr r3, 8101678 <filterUpdate+0x678>)
 810141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101420:	f7ff f972 	bl	8100708 <__aeabi_dmul>
 8101424:	4602      	mov	r2, r0
 8101426:	460b      	mov	r3, r1
 8101428:	4620      	mov	r0, r4
 810142a:	4629      	mov	r1, r5
 810142c:	f7fe ffb4 	bl	8100398 <__aeabi_dsub>
 8101430:	4602      	mov	r2, r0
 8101432:	460b      	mov	r3, r1
 8101434:	4610      	mov	r0, r2
 8101436:	4619      	mov	r1, r3
 8101438:	a391      	add	r3, pc, #580	; (adr r3, 8101680 <filterUpdate+0x680>)
 810143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810143e:	f7ff f963 	bl	8100708 <__aeabi_dmul>
 8101442:	4602      	mov	r2, r0
 8101444:	460b      	mov	r3, r1
 8101446:	4614      	mov	r4, r2
 8101448:	461d      	mov	r5, r3
 810144a:	4b92      	ldr	r3, [pc, #584]	; (8101694 <filterUpdate+0x694>)
 810144c:	681b      	ldr	r3, [r3, #0]
 810144e:	4618      	mov	r0, r3
 8101450:	f7ff f902 	bl	8100658 <__aeabi_f2d>
 8101454:	4602      	mov	r2, r0
 8101456:	460b      	mov	r3, r1
 8101458:	4620      	mov	r0, r4
 810145a:	4629      	mov	r1, r5
 810145c:	f7fe ff9e 	bl	810039c <__adddf3>
 8101460:	4602      	mov	r2, r0
 8101462:	460b      	mov	r3, r1
 8101464:	4610      	mov	r0, r2
 8101466:	4619      	mov	r1, r3
 8101468:	f7ff fc26 	bl	8100cb8 <__aeabi_d2f>
 810146c:	4603      	mov	r3, r0
 810146e:	4a89      	ldr	r2, [pc, #548]	; (8101694 <filterUpdate+0x694>)
 8101470:	6013      	str	r3, [r2, #0]
	SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 8101472:	68f8      	ldr	r0, [r7, #12]
 8101474:	f7ff f8f0 	bl	8100658 <__aeabi_f2d>
 8101478:	4604      	mov	r4, r0
 810147a:	460d      	mov	r5, r1
 810147c:	69f8      	ldr	r0, [r7, #28]
 810147e:	f7ff f8eb 	bl	8100658 <__aeabi_f2d>
 8101482:	a37d      	add	r3, pc, #500	; (adr r3, 8101678 <filterUpdate+0x678>)
 8101484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101488:	f7ff f93e 	bl	8100708 <__aeabi_dmul>
 810148c:	4602      	mov	r2, r0
 810148e:	460b      	mov	r3, r1
 8101490:	4620      	mov	r0, r4
 8101492:	4629      	mov	r1, r5
 8101494:	f7fe ff80 	bl	8100398 <__aeabi_dsub>
 8101498:	4602      	mov	r2, r0
 810149a:	460b      	mov	r3, r1
 810149c:	4610      	mov	r0, r2
 810149e:	4619      	mov	r1, r3
 81014a0:	a377      	add	r3, pc, #476	; (adr r3, 8101680 <filterUpdate+0x680>)
 81014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014a6:	f7ff f92f 	bl	8100708 <__aeabi_dmul>
 81014aa:	4602      	mov	r2, r0
 81014ac:	460b      	mov	r3, r1
 81014ae:	4614      	mov	r4, r2
 81014b0:	461d      	mov	r5, r3
 81014b2:	4b79      	ldr	r3, [pc, #484]	; (8101698 <filterUpdate+0x698>)
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	4618      	mov	r0, r3
 81014b8:	f7ff f8ce 	bl	8100658 <__aeabi_f2d>
 81014bc:	4602      	mov	r2, r0
 81014be:	460b      	mov	r3, r1
 81014c0:	4620      	mov	r0, r4
 81014c2:	4629      	mov	r1, r5
 81014c4:	f7fe ff6a 	bl	810039c <__adddf3>
 81014c8:	4602      	mov	r2, r0
 81014ca:	460b      	mov	r3, r1
 81014cc:	4610      	mov	r0, r2
 81014ce:	4619      	mov	r1, r3
 81014d0:	f7ff fbf2 	bl	8100cb8 <__aeabi_d2f>
 81014d4:	4603      	mov	r3, r0
 81014d6:	4a70      	ldr	r2, [pc, #448]	; (8101698 <filterUpdate+0x698>)
 81014d8:	6013      	str	r3, [r2, #0]
	SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 81014da:	68b8      	ldr	r0, [r7, #8]
 81014dc:	f7ff f8bc 	bl	8100658 <__aeabi_f2d>
 81014e0:	4604      	mov	r4, r0
 81014e2:	460d      	mov	r5, r1
 81014e4:	69b8      	ldr	r0, [r7, #24]
 81014e6:	f7ff f8b7 	bl	8100658 <__aeabi_f2d>
 81014ea:	a363      	add	r3, pc, #396	; (adr r3, 8101678 <filterUpdate+0x678>)
 81014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014f0:	f7ff f90a 	bl	8100708 <__aeabi_dmul>
 81014f4:	4602      	mov	r2, r0
 81014f6:	460b      	mov	r3, r1
 81014f8:	4620      	mov	r0, r4
 81014fa:	4629      	mov	r1, r5
 81014fc:	f7fe ff4c 	bl	8100398 <__aeabi_dsub>
 8101500:	4602      	mov	r2, r0
 8101502:	460b      	mov	r3, r1
 8101504:	4610      	mov	r0, r2
 8101506:	4619      	mov	r1, r3
 8101508:	a35d      	add	r3, pc, #372	; (adr r3, 8101680 <filterUpdate+0x680>)
 810150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810150e:	f7ff f8fb 	bl	8100708 <__aeabi_dmul>
 8101512:	4602      	mov	r2, r0
 8101514:	460b      	mov	r3, r1
 8101516:	4614      	mov	r4, r2
 8101518:	461d      	mov	r5, r3
 810151a:	4b60      	ldr	r3, [pc, #384]	; (810169c <filterUpdate+0x69c>)
 810151c:	681b      	ldr	r3, [r3, #0]
 810151e:	4618      	mov	r0, r3
 8101520:	f7ff f89a 	bl	8100658 <__aeabi_f2d>
 8101524:	4602      	mov	r2, r0
 8101526:	460b      	mov	r3, r1
 8101528:	4620      	mov	r0, r4
 810152a:	4629      	mov	r1, r5
 810152c:	f7fe ff36 	bl	810039c <__adddf3>
 8101530:	4602      	mov	r2, r0
 8101532:	460b      	mov	r3, r1
 8101534:	4610      	mov	r0, r2
 8101536:	4619      	mov	r1, r3
 8101538:	f7ff fbbe 	bl	8100cb8 <__aeabi_d2f>
 810153c:	4603      	mov	r3, r0
 810153e:	4a57      	ldr	r2, [pc, #348]	; (810169c <filterUpdate+0x69c>)
 8101540:	6013      	str	r3, [r2, #0]
	SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 8101542:	6878      	ldr	r0, [r7, #4]
 8101544:	f7ff f888 	bl	8100658 <__aeabi_f2d>
 8101548:	4604      	mov	r4, r0
 810154a:	460d      	mov	r5, r1
 810154c:	6978      	ldr	r0, [r7, #20]
 810154e:	f7ff f883 	bl	8100658 <__aeabi_f2d>
 8101552:	a349      	add	r3, pc, #292	; (adr r3, 8101678 <filterUpdate+0x678>)
 8101554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101558:	f7ff f8d6 	bl	8100708 <__aeabi_dmul>
 810155c:	4602      	mov	r2, r0
 810155e:	460b      	mov	r3, r1
 8101560:	4620      	mov	r0, r4
 8101562:	4629      	mov	r1, r5
 8101564:	f7fe ff18 	bl	8100398 <__aeabi_dsub>
 8101568:	4602      	mov	r2, r0
 810156a:	460b      	mov	r3, r1
 810156c:	4610      	mov	r0, r2
 810156e:	4619      	mov	r1, r3
 8101570:	a343      	add	r3, pc, #268	; (adr r3, 8101680 <filterUpdate+0x680>)
 8101572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101576:	f7ff f8c7 	bl	8100708 <__aeabi_dmul>
 810157a:	4602      	mov	r2, r0
 810157c:	460b      	mov	r3, r1
 810157e:	4614      	mov	r4, r2
 8101580:	461d      	mov	r5, r3
 8101582:	4b47      	ldr	r3, [pc, #284]	; (81016a0 <filterUpdate+0x6a0>)
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	4618      	mov	r0, r3
 8101588:	f7ff f866 	bl	8100658 <__aeabi_f2d>
 810158c:	4602      	mov	r2, r0
 810158e:	460b      	mov	r3, r1
 8101590:	4620      	mov	r0, r4
 8101592:	4629      	mov	r1, r5
 8101594:	f7fe ff02 	bl	810039c <__adddf3>
 8101598:	4602      	mov	r2, r0
 810159a:	460b      	mov	r3, r1
 810159c:	4610      	mov	r0, r2
 810159e:	4619      	mov	r1, r3
 81015a0:	f7ff fb8a 	bl	8100cb8 <__aeabi_d2f>
 81015a4:	4603      	mov	r3, r0
 81015a6:	4a3e      	ldr	r2, [pc, #248]	; (81016a0 <filterUpdate+0x6a0>)
 81015a8:	6013      	str	r3, [r2, #0]
	// Normalise quaternion
	norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 81015aa:	4b3a      	ldr	r3, [pc, #232]	; (8101694 <filterUpdate+0x694>)
 81015ac:	ed93 7a00 	vldr	s14, [r3]
 81015b0:	4b38      	ldr	r3, [pc, #224]	; (8101694 <filterUpdate+0x694>)
 81015b2:	edd3 7a00 	vldr	s15, [r3]
 81015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81015ba:	4b37      	ldr	r3, [pc, #220]	; (8101698 <filterUpdate+0x698>)
 81015bc:	edd3 6a00 	vldr	s13, [r3]
 81015c0:	4b35      	ldr	r3, [pc, #212]	; (8101698 <filterUpdate+0x698>)
 81015c2:	edd3 7a00 	vldr	s15, [r3]
 81015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 81015ce:	4b33      	ldr	r3, [pc, #204]	; (810169c <filterUpdate+0x69c>)
 81015d0:	edd3 6a00 	vldr	s13, [r3]
 81015d4:	4b31      	ldr	r3, [pc, #196]	; (810169c <filterUpdate+0x69c>)
 81015d6:	edd3 7a00 	vldr	s15, [r3]
 81015da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81015de:	ee37 7a27 	vadd.f32	s14, s14, s15
 81015e2:	4b2f      	ldr	r3, [pc, #188]	; (81016a0 <filterUpdate+0x6a0>)
 81015e4:	edd3 6a00 	vldr	s13, [r3]
 81015e8:	4b2d      	ldr	r3, [pc, #180]	; (81016a0 <filterUpdate+0x6a0>)
 81015ea:	edd3 7a00 	vldr	s15, [r3]
 81015ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81015f6:	ee17 0a90 	vmov	r0, s15
 81015fa:	f7ff f82d 	bl	8100658 <__aeabi_f2d>
 81015fe:	4602      	mov	r2, r0
 8101600:	460b      	mov	r3, r1
 8101602:	ec43 2b10 	vmov	d0, r2, r3
 8101606:	f002 ff3d 	bl	8104484 <sqrt>
 810160a:	ec53 2b10 	vmov	r2, r3, d0
 810160e:	4610      	mov	r0, r2
 8101610:	4619      	mov	r1, r3
 8101612:	f7ff fb51 	bl	8100cb8 <__aeabi_d2f>
 8101616:	4603      	mov	r3, r0
 8101618:	64bb      	str	r3, [r7, #72]	; 0x48
	SEq_1 /= norm;
 810161a:	4b1e      	ldr	r3, [pc, #120]	; (8101694 <filterUpdate+0x694>)
 810161c:	edd3 6a00 	vldr	s13, [r3]
 8101620:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8101624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101628:	4b1a      	ldr	r3, [pc, #104]	; (8101694 <filterUpdate+0x694>)
 810162a:	edc3 7a00 	vstr	s15, [r3]
	SEq_2 /= norm;
 810162e:	4b1a      	ldr	r3, [pc, #104]	; (8101698 <filterUpdate+0x698>)
 8101630:	edd3 6a00 	vldr	s13, [r3]
 8101634:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8101638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810163c:	4b16      	ldr	r3, [pc, #88]	; (8101698 <filterUpdate+0x698>)
 810163e:	edc3 7a00 	vstr	s15, [r3]
	SEq_3 /= norm;
 8101642:	4b16      	ldr	r3, [pc, #88]	; (810169c <filterUpdate+0x69c>)
 8101644:	edd3 6a00 	vldr	s13, [r3]
 8101648:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 810164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101650:	4b12      	ldr	r3, [pc, #72]	; (810169c <filterUpdate+0x69c>)
 8101652:	edc3 7a00 	vstr	s15, [r3]
	SEq_4 /= norm;
 8101656:	4b12      	ldr	r3, [pc, #72]	; (81016a0 <filterUpdate+0x6a0>)
 8101658:	edd3 6a00 	vldr	s13, [r3]
 810165c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8101660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101664:	4b0e      	ldr	r3, [pc, #56]	; (81016a0 <filterUpdate+0x6a0>)
 8101666:	edc3 7a00 	vstr	s15, [r3]
}
 810166a:	bf00      	nop
 810166c:	3768      	adds	r7, #104	; 0x68
 810166e:	46bd      	mov	sp, r7
 8101670:	bdb0      	pop	{r4, r5, r7, pc}
 8101672:	bf00      	nop
 8101674:	f3af 8000 	nop.w
 8101678:	b3124c54 	.word	0xb3124c54
 810167c:	3fb358e1 	.word	0x3fb358e1
 8101680:	40000000 	.word	0x40000000
 8101684:	3f947ae1 	.word	0x3f947ae1
 8101688:	10000224 	.word	0x10000224
 810168c:	1000027c 	.word	0x1000027c
 8101690:	10000284 	.word	0x10000284
 8101694:	10000008 	.word	0x10000008
 8101698:	10000204 	.word	0x10000204
 810169c:	10000208 	.word	0x10000208
 81016a0:	1000020c 	.word	0x1000020c

081016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81016a4:	b580      	push	{r7, lr}
 81016a6:	b082      	sub	sp, #8
 81016a8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81016aa:	4b43      	ldr	r3, [pc, #268]	; (81017b8 <main+0x114>)
 81016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016b0:	4a41      	ldr	r2, [pc, #260]	; (81017b8 <main+0x114>)
 81016b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016ba:	4b3f      	ldr	r3, [pc, #252]	; (81017b8 <main+0x114>)
 81016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81016c4:	607b      	str	r3, [r7, #4]
 81016c6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016c8:	2001      	movs	r0, #1
 81016ca:	f000 fe27 	bl	810231c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81016ce:	f001 fcad 	bl	810302c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81016d2:	2201      	movs	r2, #1
 81016d4:	2102      	movs	r1, #2
 81016d6:	2000      	movs	r0, #0
 81016d8:	f001 fc2e 	bl	8102f38 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016dc:	4b37      	ldr	r3, [pc, #220]	; (81017bc <main+0x118>)
 81016de:	681b      	ldr	r3, [r3, #0]
 81016e0:	091b      	lsrs	r3, r3, #4
 81016e2:	f003 030f 	and.w	r3, r3, #15
 81016e6:	2b07      	cmp	r3, #7
 81016e8:	d108      	bne.n	81016fc <main+0x58>
 81016ea:	4b35      	ldr	r3, [pc, #212]	; (81017c0 <main+0x11c>)
 81016ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016f0:	4a33      	ldr	r2, [pc, #204]	; (81017c0 <main+0x11c>)
 81016f2:	f043 0301 	orr.w	r3, r3, #1
 81016f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016fa:	e007      	b.n	810170c <main+0x68>
 81016fc:	4b30      	ldr	r3, [pc, #192]	; (81017c0 <main+0x11c>)
 81016fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101702:	4a2f      	ldr	r2, [pc, #188]	; (81017c0 <main+0x11c>)
 8101704:	f043 0301 	orr.w	r3, r3, #1
 8101708:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810170c:	f000 fa7c 	bl	8101c08 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8101710:	f000 f8a8 	bl	8101864 <MX_DMA_Init>
  MX_GPIO_Init();
 8101714:	f000 f8c0 	bl	8101898 <MX_GPIO_Init>
  MX_I2C1_Init();
 8101718:	f000 f864 	bl	81017e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t MSG[35] = {'\0'};				// Message buffer for debug
//  int len;		// Length of debug message
//  len = sprintf(MSG, "aaa");	// Read quaternion from shared memory to print out
//  HAL_UART_Transmit(&huart3, MSG, len, 100);	// Print quaternion for debug (via serial)
    while (MPU6050_Init(&hi2c1) == 1);		// Wait for sensor to ready
 810171c:	bf00      	nop
 810171e:	4829      	ldr	r0, [pc, #164]	; (81017c4 <main+0x120>)
 8101720:	f7ff fb36 	bl	8100d90 <MPU6050_Init>
 8101724:	4603      	mov	r3, r0
 8101726:	2b01      	cmp	r3, #1
 8101728:	d0f9      	beq.n	810171e <main+0x7a>
//    len = sprintf(MSG, "bbb");	// Read quaternion from shared memory to print out
//      HAL_UART_Transmit(&huart3, MSG, len, 100);	// Print quaternion for debug (via serial)
    MPU6050_Read_Accel(&hi2c1);				// Read accelerometer for first time (initial guess)
 810172a:	4826      	ldr	r0, [pc, #152]	; (81017c4 <main+0x120>)
 810172c:	f7ff fb96 	bl	8100e5c <MPU6050_Read_Accel>
    MPU6050_Read_Gyro(&hi2c1);				// Read gyroscope for first time (initial guess)
 8101730:	4824      	ldr	r0, [pc, #144]	; (81017c4 <main+0x120>)
 8101732:	f7ff fbf9 	bl	8100f28 <MPU6050_Read_Gyro>
    HAL_HSEM_FastTake(1);		// Lock shared variable (quaternion)
 8101736:	2001      	movs	r0, #1
 8101738:	f000 fdc2 	bl	81022c0 <HAL_HSEM_FastTake>
    /// TODO: Initial guess ///
    HAL_HSEM_Release(1, 0);	// Unlock shared variable
 810173c:	2100      	movs	r1, #0
 810173e:	2001      	movs	r0, #1
 8101740:	f000 fdd8 	bl	81022f4 <HAL_HSEM_Release>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  presentTime = HAL_GetTick();
 8101744:	f000 fb08 	bl	8101d58 <HAL_GetTick>
 8101748:	4603      	mov	r3, r0
 810174a:	4a1f      	ldr	r2, [pc, #124]	; (81017c8 <main+0x124>)
 810174c:	6013      	str	r3, [r2, #0]
	  if (presentTime - lastTime >= 20){	// update filter using frequency <= 50 Hz
 810174e:	4b1e      	ldr	r3, [pc, #120]	; (81017c8 <main+0x124>)
 8101750:	681a      	ldr	r2, [r3, #0]
 8101752:	4b1e      	ldr	r3, [pc, #120]	; (81017cc <main+0x128>)
 8101754:	681b      	ldr	r3, [r3, #0]
 8101756:	1ad3      	subs	r3, r2, r3
 8101758:	2b13      	cmp	r3, #19
 810175a:	d9f3      	bls.n	8101744 <main+0xa0>
		  lastTime = presentTime;
 810175c:	4b1a      	ldr	r3, [pc, #104]	; (81017c8 <main+0x124>)
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	4a1a      	ldr	r2, [pc, #104]	; (81017cc <main+0x128>)
 8101762:	6013      	str	r3, [r2, #0]
		  MPU6050_Read_Accel(&hi2c1);	// Read accelerometer
 8101764:	4817      	ldr	r0, [pc, #92]	; (81017c4 <main+0x120>)
 8101766:	f7ff fb79 	bl	8100e5c <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro(&hi2c1);	// Read gyroscope
 810176a:	4816      	ldr	r0, [pc, #88]	; (81017c4 <main+0x120>)
 810176c:	f7ff fbdc 	bl	8100f28 <MPU6050_Read_Gyro>
		  filterUpdate();				// Update filter (update variables SEq_1, SEq_2, SEq_3, SEq_4)
 8101770:	f7ff fc46 	bl	8101000 <filterUpdate>
		  while(1){
			  if (HAL_HSEM_FastTake(1) == HAL_OK)break;	// Wait until memory is unlocked then lock it (quaternion)
 8101774:	2001      	movs	r0, #1
 8101776:	f000 fda3 	bl	81022c0 <HAL_HSEM_FastTake>
 810177a:	4603      	mov	r3, r0
 810177c:	2b00      	cmp	r3, #0
 810177e:	d000      	beq.n	8101782 <main+0xde>
 8101780:	e7f8      	b.n	8101774 <main+0xd0>
 8101782:	bf00      	nop
		  }
		  // Update shared quaternion components (x, y, z, w)
		  q->x = SEq_1;
 8101784:	4b12      	ldr	r3, [pc, #72]	; (81017d0 <main+0x12c>)
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	4a12      	ldr	r2, [pc, #72]	; (81017d4 <main+0x130>)
 810178a:	6812      	ldr	r2, [r2, #0]
 810178c:	601a      	str	r2, [r3, #0]
		  q->y = SEq_2;
 810178e:	4b10      	ldr	r3, [pc, #64]	; (81017d0 <main+0x12c>)
 8101790:	681b      	ldr	r3, [r3, #0]
 8101792:	4a11      	ldr	r2, [pc, #68]	; (81017d8 <main+0x134>)
 8101794:	6812      	ldr	r2, [r2, #0]
 8101796:	605a      	str	r2, [r3, #4]
		  q->z = SEq_3;
 8101798:	4b0d      	ldr	r3, [pc, #52]	; (81017d0 <main+0x12c>)
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	4a0f      	ldr	r2, [pc, #60]	; (81017dc <main+0x138>)
 810179e:	6812      	ldr	r2, [r2, #0]
 81017a0:	609a      	str	r2, [r3, #8]
		  q->w = SEq_4;
 81017a2:	4b0b      	ldr	r3, [pc, #44]	; (81017d0 <main+0x12c>)
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	4a0e      	ldr	r2, [pc, #56]	; (81017e0 <main+0x13c>)
 81017a8:	6812      	ldr	r2, [r2, #0]
 81017aa:	60da      	str	r2, [r3, #12]
		  HAL_HSEM_Release(1, 0);				// Unlock shared variable
 81017ac:	2100      	movs	r1, #0
 81017ae:	2001      	movs	r0, #1
 81017b0:	f000 fda0 	bl	81022f4 <HAL_HSEM_Release>
	  presentTime = HAL_GetTick();
 81017b4:	e7c6      	b.n	8101744 <main+0xa0>
 81017b6:	bf00      	nop
 81017b8:	58024400 	.word	0x58024400
 81017bc:	e000ed00 	.word	0xe000ed00
 81017c0:	58026400 	.word	0x58026400
 81017c4:	1000022c 	.word	0x1000022c
 81017c8:	10000214 	.word	0x10000214
 81017cc:	10000210 	.word	0x10000210
 81017d0:	1000000c 	.word	0x1000000c
 81017d4:	10000008 	.word	0x10000008
 81017d8:	10000204 	.word	0x10000204
 81017dc:	10000208 	.word	0x10000208
 81017e0:	1000020c 	.word	0x1000020c

081017e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81017e4:	b580      	push	{r7, lr}
 81017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81017e8:	4b1b      	ldr	r3, [pc, #108]	; (8101858 <MX_I2C1_Init+0x74>)
 81017ea:	4a1c      	ldr	r2, [pc, #112]	; (810185c <MX_I2C1_Init+0x78>)
 81017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 81017ee:	4b1a      	ldr	r3, [pc, #104]	; (8101858 <MX_I2C1_Init+0x74>)
 81017f0:	4a1b      	ldr	r2, [pc, #108]	; (8101860 <MX_I2C1_Init+0x7c>)
 81017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81017f4:	4b18      	ldr	r3, [pc, #96]	; (8101858 <MX_I2C1_Init+0x74>)
 81017f6:	2200      	movs	r2, #0
 81017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81017fa:	4b17      	ldr	r3, [pc, #92]	; (8101858 <MX_I2C1_Init+0x74>)
 81017fc:	2201      	movs	r2, #1
 81017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101800:	4b15      	ldr	r3, [pc, #84]	; (8101858 <MX_I2C1_Init+0x74>)
 8101802:	2200      	movs	r2, #0
 8101804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101806:	4b14      	ldr	r3, [pc, #80]	; (8101858 <MX_I2C1_Init+0x74>)
 8101808:	2200      	movs	r2, #0
 810180a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810180c:	4b12      	ldr	r3, [pc, #72]	; (8101858 <MX_I2C1_Init+0x74>)
 810180e:	2200      	movs	r2, #0
 8101810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101812:	4b11      	ldr	r3, [pc, #68]	; (8101858 <MX_I2C1_Init+0x74>)
 8101814:	2200      	movs	r2, #0
 8101816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101818:	4b0f      	ldr	r3, [pc, #60]	; (8101858 <MX_I2C1_Init+0x74>)
 810181a:	2200      	movs	r2, #0
 810181c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810181e:	480e      	ldr	r0, [pc, #56]	; (8101858 <MX_I2C1_Init+0x74>)
 8101820:	f000 fd8e 	bl	8102340 <HAL_I2C_Init>
 8101824:	4603      	mov	r3, r0
 8101826:	2b00      	cmp	r3, #0
 8101828:	d001      	beq.n	810182e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810182a:	f000 f84f 	bl	81018cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810182e:	2100      	movs	r1, #0
 8101830:	4809      	ldr	r0, [pc, #36]	; (8101858 <MX_I2C1_Init+0x74>)
 8101832:	f001 fae9 	bl	8102e08 <HAL_I2CEx_ConfigAnalogFilter>
 8101836:	4603      	mov	r3, r0
 8101838:	2b00      	cmp	r3, #0
 810183a:	d001      	beq.n	8101840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810183c:	f000 f846 	bl	81018cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101840:	2100      	movs	r1, #0
 8101842:	4805      	ldr	r0, [pc, #20]	; (8101858 <MX_I2C1_Init+0x74>)
 8101844:	f001 fb2b 	bl	8102e9e <HAL_I2CEx_ConfigDigitalFilter>
 8101848:	4603      	mov	r3, r0
 810184a:	2b00      	cmp	r3, #0
 810184c:	d001      	beq.n	8101852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810184e:	f000 f83d 	bl	81018cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101852:	bf00      	nop
 8101854:	bd80      	pop	{r7, pc}
 8101856:	bf00      	nop
 8101858:	1000022c 	.word	0x1000022c
 810185c:	40005400 	.word	0x40005400
 8101860:	307075b1 	.word	0x307075b1

08101864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101864:	b480      	push	{r7}
 8101866:	b083      	sub	sp, #12
 8101868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810186a:	4b0a      	ldr	r3, [pc, #40]	; (8101894 <MX_DMA_Init+0x30>)
 810186c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101870:	4a08      	ldr	r2, [pc, #32]	; (8101894 <MX_DMA_Init+0x30>)
 8101872:	f043 0301 	orr.w	r3, r3, #1
 8101876:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810187a:	4b06      	ldr	r3, [pc, #24]	; (8101894 <MX_DMA_Init+0x30>)
 810187c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101880:	f003 0301 	and.w	r3, r3, #1
 8101884:	607b      	str	r3, [r7, #4]
 8101886:	687b      	ldr	r3, [r7, #4]

}
 8101888:	bf00      	nop
 810188a:	370c      	adds	r7, #12
 810188c:	46bd      	mov	sp, r7
 810188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101892:	4770      	bx	lr
 8101894:	58024400 	.word	0x58024400

08101898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101898:	b480      	push	{r7}
 810189a:	b083      	sub	sp, #12
 810189c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810189e:	4b0a      	ldr	r3, [pc, #40]	; (81018c8 <MX_GPIO_Init+0x30>)
 81018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018a4:	4a08      	ldr	r2, [pc, #32]	; (81018c8 <MX_GPIO_Init+0x30>)
 81018a6:	f043 0302 	orr.w	r3, r3, #2
 81018aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018ae:	4b06      	ldr	r3, [pc, #24]	; (81018c8 <MX_GPIO_Init+0x30>)
 81018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018b4:	f003 0302 	and.w	r3, r3, #2
 81018b8:	607b      	str	r3, [r7, #4]
 81018ba:	687b      	ldr	r3, [r7, #4]

}
 81018bc:	bf00      	nop
 81018be:	370c      	adds	r7, #12
 81018c0:	46bd      	mov	sp, r7
 81018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c6:	4770      	bx	lr
 81018c8:	58024400 	.word	0x58024400

081018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81018cc:	b480      	push	{r7}
 81018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81018d0:	b672      	cpsid	i
}
 81018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81018d4:	e7fe      	b.n	81018d4 <Error_Handler+0x8>
	...

081018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81018d8:	b480      	push	{r7}
 81018da:	b083      	sub	sp, #12
 81018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81018de:	4b0a      	ldr	r3, [pc, #40]	; (8101908 <HAL_MspInit+0x30>)
 81018e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018e4:	4a08      	ldr	r2, [pc, #32]	; (8101908 <HAL_MspInit+0x30>)
 81018e6:	f043 0302 	orr.w	r3, r3, #2
 81018ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81018ee:	4b06      	ldr	r3, [pc, #24]	; (8101908 <HAL_MspInit+0x30>)
 81018f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018f4:	f003 0302 	and.w	r3, r3, #2
 81018f8:	607b      	str	r3, [r7, #4]
 81018fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81018fc:	bf00      	nop
 81018fe:	370c      	adds	r7, #12
 8101900:	46bd      	mov	sp, r7
 8101902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101906:	4770      	bx	lr
 8101908:	58024400 	.word	0x58024400

0810190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810190c:	b580      	push	{r7, lr}
 810190e:	b0b8      	sub	sp, #224	; 0xe0
 8101910:	af00      	add	r7, sp, #0
 8101912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101914:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101918:	2200      	movs	r2, #0
 810191a:	601a      	str	r2, [r3, #0]
 810191c:	605a      	str	r2, [r3, #4]
 810191e:	609a      	str	r2, [r3, #8]
 8101920:	60da      	str	r2, [r3, #12]
 8101922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101924:	f107 0310 	add.w	r3, r7, #16
 8101928:	22bc      	movs	r2, #188	; 0xbc
 810192a:	2100      	movs	r1, #0
 810192c:	4618      	mov	r0, r3
 810192e:	f002 febb 	bl	81046a8 <memset>
  if(hi2c->Instance==I2C1)
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	681b      	ldr	r3, [r3, #0]
 8101936:	4a24      	ldr	r2, [pc, #144]	; (81019c8 <HAL_I2C_MspInit+0xbc>)
 8101938:	4293      	cmp	r3, r2
 810193a:	d141      	bne.n	81019c0 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810193c:	2308      	movs	r3, #8
 810193e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101940:	2300      	movs	r3, #0
 8101942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101946:	f107 0310 	add.w	r3, r7, #16
 810194a:	4618      	mov	r0, r3
 810194c:	f001 fcf6 	bl	810333c <HAL_RCCEx_PeriphCLKConfig>
 8101950:	4603      	mov	r3, r0
 8101952:	2b00      	cmp	r3, #0
 8101954:	d001      	beq.n	810195a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101956:	f7ff ffb9 	bl	81018cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810195a:	4b1c      	ldr	r3, [pc, #112]	; (81019cc <HAL_I2C_MspInit+0xc0>)
 810195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101960:	4a1a      	ldr	r2, [pc, #104]	; (81019cc <HAL_I2C_MspInit+0xc0>)
 8101962:	f043 0302 	orr.w	r3, r3, #2
 8101966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810196a:	4b18      	ldr	r3, [pc, #96]	; (81019cc <HAL_I2C_MspInit+0xc0>)
 810196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101970:	f003 0302 	and.w	r3, r3, #2
 8101974:	60fb      	str	r3, [r7, #12]
 8101976:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101978:	23c0      	movs	r3, #192	; 0xc0
 810197a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810197e:	2312      	movs	r3, #18
 8101980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101984:	2300      	movs	r3, #0
 8101986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810198a:	2300      	movs	r3, #0
 810198c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101990:	2304      	movs	r3, #4
 8101992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101996:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810199a:	4619      	mov	r1, r3
 810199c:	480c      	ldr	r0, [pc, #48]	; (81019d0 <HAL_I2C_MspInit+0xc4>)
 810199e:	f000 fadf 	bl	8101f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81019a2:	4b0a      	ldr	r3, [pc, #40]	; (81019cc <HAL_I2C_MspInit+0xc0>)
 81019a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019a8:	4a08      	ldr	r2, [pc, #32]	; (81019cc <HAL_I2C_MspInit+0xc0>)
 81019aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81019ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81019b2:	4b06      	ldr	r3, [pc, #24]	; (81019cc <HAL_I2C_MspInit+0xc0>)
 81019b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81019bc:	60bb      	str	r3, [r7, #8]
 81019be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 81019c0:	bf00      	nop
 81019c2:	37e0      	adds	r7, #224	; 0xe0
 81019c4:	46bd      	mov	sp, r7
 81019c6:	bd80      	pop	{r7, pc}
 81019c8:	40005400 	.word	0x40005400
 81019cc:	58024400 	.word	0x58024400
 81019d0:	58020400 	.word	0x58020400

081019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81019d4:	b480      	push	{r7}
 81019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81019d8:	e7fe      	b.n	81019d8 <NMI_Handler+0x4>

081019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81019da:	b480      	push	{r7}
 81019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81019de:	e7fe      	b.n	81019de <HardFault_Handler+0x4>

081019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81019e0:	b480      	push	{r7}
 81019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81019e4:	e7fe      	b.n	81019e4 <MemManage_Handler+0x4>

081019e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81019e6:	b480      	push	{r7}
 81019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81019ea:	e7fe      	b.n	81019ea <BusFault_Handler+0x4>

081019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81019ec:	b480      	push	{r7}
 81019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81019f0:	e7fe      	b.n	81019f0 <UsageFault_Handler+0x4>

081019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81019f2:	b480      	push	{r7}
 81019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81019f6:	bf00      	nop
 81019f8:	46bd      	mov	sp, r7
 81019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fe:	4770      	bx	lr

08101a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101a00:	b480      	push	{r7}
 8101a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101a04:	bf00      	nop
 8101a06:	46bd      	mov	sp, r7
 8101a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a0c:	4770      	bx	lr

08101a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101a0e:	b480      	push	{r7}
 8101a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101a12:	bf00      	nop
 8101a14:	46bd      	mov	sp, r7
 8101a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a1a:	4770      	bx	lr

08101a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101a1c:	b580      	push	{r7, lr}
 8101a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101a20:	f000 f986 	bl	8101d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101a24:	bf00      	nop
 8101a26:	bd80      	pop	{r7, pc}

08101a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101a28:	b480      	push	{r7}
 8101a2a:	af00      	add	r7, sp, #0
	return 1;
 8101a2c:	2301      	movs	r3, #1
}
 8101a2e:	4618      	mov	r0, r3
 8101a30:	46bd      	mov	sp, r7
 8101a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a36:	4770      	bx	lr

08101a38 <_kill>:

int _kill(int pid, int sig)
{
 8101a38:	b580      	push	{r7, lr}
 8101a3a:	b082      	sub	sp, #8
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	6078      	str	r0, [r7, #4]
 8101a40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101a42:	f002 fe07 	bl	8104654 <__errno>
 8101a46:	4603      	mov	r3, r0
 8101a48:	2216      	movs	r2, #22
 8101a4a:	601a      	str	r2, [r3, #0]
	return -1;
 8101a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101a50:	4618      	mov	r0, r3
 8101a52:	3708      	adds	r7, #8
 8101a54:	46bd      	mov	sp, r7
 8101a56:	bd80      	pop	{r7, pc}

08101a58 <_exit>:

void _exit (int status)
{
 8101a58:	b580      	push	{r7, lr}
 8101a5a:	b082      	sub	sp, #8
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101a60:	f04f 31ff 	mov.w	r1, #4294967295
 8101a64:	6878      	ldr	r0, [r7, #4]
 8101a66:	f7ff ffe7 	bl	8101a38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101a6a:	e7fe      	b.n	8101a6a <_exit+0x12>

08101a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101a6c:	b580      	push	{r7, lr}
 8101a6e:	b086      	sub	sp, #24
 8101a70:	af00      	add	r7, sp, #0
 8101a72:	60f8      	str	r0, [r7, #12]
 8101a74:	60b9      	str	r1, [r7, #8]
 8101a76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101a78:	2300      	movs	r3, #0
 8101a7a:	617b      	str	r3, [r7, #20]
 8101a7c:	e00a      	b.n	8101a94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101a7e:	f3af 8000 	nop.w
 8101a82:	4601      	mov	r1, r0
 8101a84:	68bb      	ldr	r3, [r7, #8]
 8101a86:	1c5a      	adds	r2, r3, #1
 8101a88:	60ba      	str	r2, [r7, #8]
 8101a8a:	b2ca      	uxtb	r2, r1
 8101a8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101a8e:	697b      	ldr	r3, [r7, #20]
 8101a90:	3301      	adds	r3, #1
 8101a92:	617b      	str	r3, [r7, #20]
 8101a94:	697a      	ldr	r2, [r7, #20]
 8101a96:	687b      	ldr	r3, [r7, #4]
 8101a98:	429a      	cmp	r2, r3
 8101a9a:	dbf0      	blt.n	8101a7e <_read+0x12>
	}

return len;
 8101a9c:	687b      	ldr	r3, [r7, #4]
}
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	3718      	adds	r7, #24
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	bd80      	pop	{r7, pc}

08101aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101aa6:	b580      	push	{r7, lr}
 8101aa8:	b086      	sub	sp, #24
 8101aaa:	af00      	add	r7, sp, #0
 8101aac:	60f8      	str	r0, [r7, #12]
 8101aae:	60b9      	str	r1, [r7, #8]
 8101ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ab2:	2300      	movs	r3, #0
 8101ab4:	617b      	str	r3, [r7, #20]
 8101ab6:	e009      	b.n	8101acc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101ab8:	68bb      	ldr	r3, [r7, #8]
 8101aba:	1c5a      	adds	r2, r3, #1
 8101abc:	60ba      	str	r2, [r7, #8]
 8101abe:	781b      	ldrb	r3, [r3, #0]
 8101ac0:	4618      	mov	r0, r3
 8101ac2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ac6:	697b      	ldr	r3, [r7, #20]
 8101ac8:	3301      	adds	r3, #1
 8101aca:	617b      	str	r3, [r7, #20]
 8101acc:	697a      	ldr	r2, [r7, #20]
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	429a      	cmp	r2, r3
 8101ad2:	dbf1      	blt.n	8101ab8 <_write+0x12>
	}
	return len;
 8101ad4:	687b      	ldr	r3, [r7, #4]
}
 8101ad6:	4618      	mov	r0, r3
 8101ad8:	3718      	adds	r7, #24
 8101ada:	46bd      	mov	sp, r7
 8101adc:	bd80      	pop	{r7, pc}

08101ade <_close>:

int _close(int file)
{
 8101ade:	b480      	push	{r7}
 8101ae0:	b083      	sub	sp, #12
 8101ae2:	af00      	add	r7, sp, #0
 8101ae4:	6078      	str	r0, [r7, #4]
	return -1;
 8101ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101aea:	4618      	mov	r0, r3
 8101aec:	370c      	adds	r7, #12
 8101aee:	46bd      	mov	sp, r7
 8101af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af4:	4770      	bx	lr

08101af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101af6:	b480      	push	{r7}
 8101af8:	b083      	sub	sp, #12
 8101afa:	af00      	add	r7, sp, #0
 8101afc:	6078      	str	r0, [r7, #4]
 8101afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101b00:	683b      	ldr	r3, [r7, #0]
 8101b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101b06:	605a      	str	r2, [r3, #4]
	return 0;
 8101b08:	2300      	movs	r3, #0
}
 8101b0a:	4618      	mov	r0, r3
 8101b0c:	370c      	adds	r7, #12
 8101b0e:	46bd      	mov	sp, r7
 8101b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b14:	4770      	bx	lr

08101b16 <_isatty>:

int _isatty(int file)
{
 8101b16:	b480      	push	{r7}
 8101b18:	b083      	sub	sp, #12
 8101b1a:	af00      	add	r7, sp, #0
 8101b1c:	6078      	str	r0, [r7, #4]
	return 1;
 8101b1e:	2301      	movs	r3, #1
}
 8101b20:	4618      	mov	r0, r3
 8101b22:	370c      	adds	r7, #12
 8101b24:	46bd      	mov	sp, r7
 8101b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b2a:	4770      	bx	lr

08101b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101b2c:	b480      	push	{r7}
 8101b2e:	b085      	sub	sp, #20
 8101b30:	af00      	add	r7, sp, #0
 8101b32:	60f8      	str	r0, [r7, #12]
 8101b34:	60b9      	str	r1, [r7, #8]
 8101b36:	607a      	str	r2, [r7, #4]
	return 0;
 8101b38:	2300      	movs	r3, #0
}
 8101b3a:	4618      	mov	r0, r3
 8101b3c:	3714      	adds	r7, #20
 8101b3e:	46bd      	mov	sp, r7
 8101b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b44:	4770      	bx	lr
	...

08101b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101b48:	b580      	push	{r7, lr}
 8101b4a:	b086      	sub	sp, #24
 8101b4c:	af00      	add	r7, sp, #0
 8101b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101b50:	4a14      	ldr	r2, [pc, #80]	; (8101ba4 <_sbrk+0x5c>)
 8101b52:	4b15      	ldr	r3, [pc, #84]	; (8101ba8 <_sbrk+0x60>)
 8101b54:	1ad3      	subs	r3, r2, r3
 8101b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101b58:	697b      	ldr	r3, [r7, #20]
 8101b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101b5c:	4b13      	ldr	r3, [pc, #76]	; (8101bac <_sbrk+0x64>)
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	2b00      	cmp	r3, #0
 8101b62:	d102      	bne.n	8101b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101b64:	4b11      	ldr	r3, [pc, #68]	; (8101bac <_sbrk+0x64>)
 8101b66:	4a12      	ldr	r2, [pc, #72]	; (8101bb0 <_sbrk+0x68>)
 8101b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101b6a:	4b10      	ldr	r3, [pc, #64]	; (8101bac <_sbrk+0x64>)
 8101b6c:	681a      	ldr	r2, [r3, #0]
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	4413      	add	r3, r2
 8101b72:	693a      	ldr	r2, [r7, #16]
 8101b74:	429a      	cmp	r2, r3
 8101b76:	d207      	bcs.n	8101b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101b78:	f002 fd6c 	bl	8104654 <__errno>
 8101b7c:	4603      	mov	r3, r0
 8101b7e:	220c      	movs	r2, #12
 8101b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101b82:	f04f 33ff 	mov.w	r3, #4294967295
 8101b86:	e009      	b.n	8101b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101b88:	4b08      	ldr	r3, [pc, #32]	; (8101bac <_sbrk+0x64>)
 8101b8a:	681b      	ldr	r3, [r3, #0]
 8101b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101b8e:	4b07      	ldr	r3, [pc, #28]	; (8101bac <_sbrk+0x64>)
 8101b90:	681a      	ldr	r2, [r3, #0]
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	4413      	add	r3, r2
 8101b96:	4a05      	ldr	r2, [pc, #20]	; (8101bac <_sbrk+0x64>)
 8101b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101b9a:	68fb      	ldr	r3, [r7, #12]
}
 8101b9c:	4618      	mov	r0, r3
 8101b9e:	3718      	adds	r7, #24
 8101ba0:	46bd      	mov	sp, r7
 8101ba2:	bd80      	pop	{r7, pc}
 8101ba4:	10048000 	.word	0x10048000
 8101ba8:	00000400 	.word	0x00000400
 8101bac:	10000218 	.word	0x10000218
 8101bb0:	10000358 	.word	0x10000358

08101bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101bec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101bb8:	f7ff f8ce 	bl	8100d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101bbc:	480c      	ldr	r0, [pc, #48]	; (8101bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101bbe:	490d      	ldr	r1, [pc, #52]	; (8101bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101bc0:	4a0d      	ldr	r2, [pc, #52]	; (8101bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101bc4:	e002      	b.n	8101bcc <LoopCopyDataInit>

08101bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101bca:	3304      	adds	r3, #4

08101bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101bd0:	d3f9      	bcc.n	8101bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101bd2:	4a0a      	ldr	r2, [pc, #40]	; (8101bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101bd4:	4c0a      	ldr	r4, [pc, #40]	; (8101c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101bd8:	e001      	b.n	8101bde <LoopFillZerobss>

08101bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101bdc:	3204      	adds	r2, #4

08101bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101be0:	d3fb      	bcc.n	8101bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101be2:	f002 fd3d 	bl	8104660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101be6:	f7ff fd5d 	bl	81016a4 <main>
  bx  lr
 8101bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101bec:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101bf0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101bf4:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 8101bf8:	08107474 	.word	0x08107474
  ldr r2, =_sbss
 8101bfc:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8101c00:	10000358 	.word	0x10000358

08101c04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101c04:	e7fe      	b.n	8101c04 <ADC3_IRQHandler>
	...

08101c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101c08:	b580      	push	{r7, lr}
 8101c0a:	b082      	sub	sp, #8
 8101c0c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101c0e:	4b28      	ldr	r3, [pc, #160]	; (8101cb0 <HAL_Init+0xa8>)
 8101c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c14:	4a26      	ldr	r2, [pc, #152]	; (8101cb0 <HAL_Init+0xa8>)
 8101c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101c1e:	4b24      	ldr	r3, [pc, #144]	; (8101cb0 <HAL_Init+0xa8>)
 8101c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101c28:	603b      	str	r3, [r7, #0]
 8101c2a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101c2c:	4b21      	ldr	r3, [pc, #132]	; (8101cb4 <HAL_Init+0xac>)
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101c34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101c38:	4a1e      	ldr	r2, [pc, #120]	; (8101cb4 <HAL_Init+0xac>)
 8101c3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101c3e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101c40:	4b1c      	ldr	r3, [pc, #112]	; (8101cb4 <HAL_Init+0xac>)
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	4a1b      	ldr	r2, [pc, #108]	; (8101cb4 <HAL_Init+0xac>)
 8101c46:	f043 0301 	orr.w	r3, r3, #1
 8101c4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101c4c:	2003      	movs	r0, #3
 8101c4e:	f000 f941 	bl	8101ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101c52:	f001 f9f9 	bl	8103048 <HAL_RCC_GetSysClockFreq>
 8101c56:	4602      	mov	r2, r0
 8101c58:	4b15      	ldr	r3, [pc, #84]	; (8101cb0 <HAL_Init+0xa8>)
 8101c5a:	699b      	ldr	r3, [r3, #24]
 8101c5c:	0a1b      	lsrs	r3, r3, #8
 8101c5e:	f003 030f 	and.w	r3, r3, #15
 8101c62:	4915      	ldr	r1, [pc, #84]	; (8101cb8 <HAL_Init+0xb0>)
 8101c64:	5ccb      	ldrb	r3, [r1, r3]
 8101c66:	f003 031f 	and.w	r3, r3, #31
 8101c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8101c6e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101c70:	4b0f      	ldr	r3, [pc, #60]	; (8101cb0 <HAL_Init+0xa8>)
 8101c72:	699b      	ldr	r3, [r3, #24]
 8101c74:	f003 030f 	and.w	r3, r3, #15
 8101c78:	4a0f      	ldr	r2, [pc, #60]	; (8101cb8 <HAL_Init+0xb0>)
 8101c7a:	5cd3      	ldrb	r3, [r2, r3]
 8101c7c:	f003 031f 	and.w	r3, r3, #31
 8101c80:	687a      	ldr	r2, [r7, #4]
 8101c82:	fa22 f303 	lsr.w	r3, r2, r3
 8101c86:	4a0d      	ldr	r2, [pc, #52]	; (8101cbc <HAL_Init+0xb4>)
 8101c88:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101c8a:	4b0c      	ldr	r3, [pc, #48]	; (8101cbc <HAL_Init+0xb4>)
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	4a0c      	ldr	r2, [pc, #48]	; (8101cc0 <HAL_Init+0xb8>)
 8101c90:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101c92:	2000      	movs	r0, #0
 8101c94:	f000 f816 	bl	8101cc4 <HAL_InitTick>
 8101c98:	4603      	mov	r3, r0
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d001      	beq.n	8101ca2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101c9e:	2301      	movs	r3, #1
 8101ca0:	e002      	b.n	8101ca8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101ca2:	f7ff fe19 	bl	81018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101ca6:	2300      	movs	r3, #0
}
 8101ca8:	4618      	mov	r0, r3
 8101caa:	3708      	adds	r7, #8
 8101cac:	46bd      	mov	sp, r7
 8101cae:	bd80      	pop	{r7, pc}
 8101cb0:	58024400 	.word	0x58024400
 8101cb4:	40024400 	.word	0x40024400
 8101cb8:	08107078 	.word	0x08107078
 8101cbc:	10000004 	.word	0x10000004
 8101cc0:	10000000 	.word	0x10000000

08101cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101cc4:	b580      	push	{r7, lr}
 8101cc6:	b082      	sub	sp, #8
 8101cc8:	af00      	add	r7, sp, #0
 8101cca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101ccc:	4b15      	ldr	r3, [pc, #84]	; (8101d24 <HAL_InitTick+0x60>)
 8101cce:	781b      	ldrb	r3, [r3, #0]
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d101      	bne.n	8101cd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101cd4:	2301      	movs	r3, #1
 8101cd6:	e021      	b.n	8101d1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101cd8:	4b13      	ldr	r3, [pc, #76]	; (8101d28 <HAL_InitTick+0x64>)
 8101cda:	681a      	ldr	r2, [r3, #0]
 8101cdc:	4b11      	ldr	r3, [pc, #68]	; (8101d24 <HAL_InitTick+0x60>)
 8101cde:	781b      	ldrb	r3, [r3, #0]
 8101ce0:	4619      	mov	r1, r3
 8101ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8101cee:	4618      	mov	r0, r3
 8101cf0:	f000 f915 	bl	8101f1e <HAL_SYSTICK_Config>
 8101cf4:	4603      	mov	r3, r0
 8101cf6:	2b00      	cmp	r3, #0
 8101cf8:	d001      	beq.n	8101cfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101cfa:	2301      	movs	r3, #1
 8101cfc:	e00e      	b.n	8101d1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	2b0f      	cmp	r3, #15
 8101d02:	d80a      	bhi.n	8101d1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101d04:	2200      	movs	r2, #0
 8101d06:	6879      	ldr	r1, [r7, #4]
 8101d08:	f04f 30ff 	mov.w	r0, #4294967295
 8101d0c:	f000 f8ed 	bl	8101eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101d10:	4a06      	ldr	r2, [pc, #24]	; (8101d2c <HAL_InitTick+0x68>)
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101d16:	2300      	movs	r3, #0
 8101d18:	e000      	b.n	8101d1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101d1a:	2301      	movs	r3, #1
}
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	3708      	adds	r7, #8
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	10000014 	.word	0x10000014
 8101d28:	10000000 	.word	0x10000000
 8101d2c:	10000010 	.word	0x10000010

08101d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101d30:	b480      	push	{r7}
 8101d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101d34:	4b06      	ldr	r3, [pc, #24]	; (8101d50 <HAL_IncTick+0x20>)
 8101d36:	781b      	ldrb	r3, [r3, #0]
 8101d38:	461a      	mov	r2, r3
 8101d3a:	4b06      	ldr	r3, [pc, #24]	; (8101d54 <HAL_IncTick+0x24>)
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	4413      	add	r3, r2
 8101d40:	4a04      	ldr	r2, [pc, #16]	; (8101d54 <HAL_IncTick+0x24>)
 8101d42:	6013      	str	r3, [r2, #0]
}
 8101d44:	bf00      	nop
 8101d46:	46bd      	mov	sp, r7
 8101d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d4c:	4770      	bx	lr
 8101d4e:	bf00      	nop
 8101d50:	10000014 	.word	0x10000014
 8101d54:	10000344 	.word	0x10000344

08101d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101d58:	b480      	push	{r7}
 8101d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8101d5c:	4b03      	ldr	r3, [pc, #12]	; (8101d6c <HAL_GetTick+0x14>)
 8101d5e:	681b      	ldr	r3, [r3, #0]
}
 8101d60:	4618      	mov	r0, r3
 8101d62:	46bd      	mov	sp, r7
 8101d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d68:	4770      	bx	lr
 8101d6a:	bf00      	nop
 8101d6c:	10000344 	.word	0x10000344

08101d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101d70:	b480      	push	{r7}
 8101d72:	b085      	sub	sp, #20
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	f003 0307 	and.w	r3, r3, #7
 8101d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101d80:	4b0c      	ldr	r3, [pc, #48]	; (8101db4 <__NVIC_SetPriorityGrouping+0x44>)
 8101d82:	68db      	ldr	r3, [r3, #12]
 8101d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d86:	68ba      	ldr	r2, [r7, #8]
 8101d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101d8c:	4013      	ands	r3, r2
 8101d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101d90:	68fb      	ldr	r3, [r7, #12]
 8101d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d94:	68bb      	ldr	r3, [r7, #8]
 8101d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101da2:	4a04      	ldr	r2, [pc, #16]	; (8101db4 <__NVIC_SetPriorityGrouping+0x44>)
 8101da4:	68bb      	ldr	r3, [r7, #8]
 8101da6:	60d3      	str	r3, [r2, #12]
}
 8101da8:	bf00      	nop
 8101daa:	3714      	adds	r7, #20
 8101dac:	46bd      	mov	sp, r7
 8101dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db2:	4770      	bx	lr
 8101db4:	e000ed00 	.word	0xe000ed00

08101db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101db8:	b480      	push	{r7}
 8101dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101dbc:	4b04      	ldr	r3, [pc, #16]	; (8101dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8101dbe:	68db      	ldr	r3, [r3, #12]
 8101dc0:	0a1b      	lsrs	r3, r3, #8
 8101dc2:	f003 0307 	and.w	r3, r3, #7
}
 8101dc6:	4618      	mov	r0, r3
 8101dc8:	46bd      	mov	sp, r7
 8101dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dce:	4770      	bx	lr
 8101dd0:	e000ed00 	.word	0xe000ed00

08101dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101dd4:	b480      	push	{r7}
 8101dd6:	b083      	sub	sp, #12
 8101dd8:	af00      	add	r7, sp, #0
 8101dda:	4603      	mov	r3, r0
 8101ddc:	6039      	str	r1, [r7, #0]
 8101dde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101de4:	2b00      	cmp	r3, #0
 8101de6:	db0a      	blt.n	8101dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101de8:	683b      	ldr	r3, [r7, #0]
 8101dea:	b2da      	uxtb	r2, r3
 8101dec:	490c      	ldr	r1, [pc, #48]	; (8101e20 <__NVIC_SetPriority+0x4c>)
 8101dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101df2:	0112      	lsls	r2, r2, #4
 8101df4:	b2d2      	uxtb	r2, r2
 8101df6:	440b      	add	r3, r1
 8101df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101dfc:	e00a      	b.n	8101e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101dfe:	683b      	ldr	r3, [r7, #0]
 8101e00:	b2da      	uxtb	r2, r3
 8101e02:	4908      	ldr	r1, [pc, #32]	; (8101e24 <__NVIC_SetPriority+0x50>)
 8101e04:	88fb      	ldrh	r3, [r7, #6]
 8101e06:	f003 030f 	and.w	r3, r3, #15
 8101e0a:	3b04      	subs	r3, #4
 8101e0c:	0112      	lsls	r2, r2, #4
 8101e0e:	b2d2      	uxtb	r2, r2
 8101e10:	440b      	add	r3, r1
 8101e12:	761a      	strb	r2, [r3, #24]
}
 8101e14:	bf00      	nop
 8101e16:	370c      	adds	r7, #12
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr
 8101e20:	e000e100 	.word	0xe000e100
 8101e24:	e000ed00 	.word	0xe000ed00

08101e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e28:	b480      	push	{r7}
 8101e2a:	b089      	sub	sp, #36	; 0x24
 8101e2c:	af00      	add	r7, sp, #0
 8101e2e:	60f8      	str	r0, [r7, #12]
 8101e30:	60b9      	str	r1, [r7, #8]
 8101e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101e34:	68fb      	ldr	r3, [r7, #12]
 8101e36:	f003 0307 	and.w	r3, r3, #7
 8101e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101e3c:	69fb      	ldr	r3, [r7, #28]
 8101e3e:	f1c3 0307 	rsb	r3, r3, #7
 8101e42:	2b04      	cmp	r3, #4
 8101e44:	bf28      	it	cs
 8101e46:	2304      	movcs	r3, #4
 8101e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101e4a:	69fb      	ldr	r3, [r7, #28]
 8101e4c:	3304      	adds	r3, #4
 8101e4e:	2b06      	cmp	r3, #6
 8101e50:	d902      	bls.n	8101e58 <NVIC_EncodePriority+0x30>
 8101e52:	69fb      	ldr	r3, [r7, #28]
 8101e54:	3b03      	subs	r3, #3
 8101e56:	e000      	b.n	8101e5a <NVIC_EncodePriority+0x32>
 8101e58:	2300      	movs	r3, #0
 8101e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8101e60:	69bb      	ldr	r3, [r7, #24]
 8101e62:	fa02 f303 	lsl.w	r3, r2, r3
 8101e66:	43da      	mvns	r2, r3
 8101e68:	68bb      	ldr	r3, [r7, #8]
 8101e6a:	401a      	ands	r2, r3
 8101e6c:	697b      	ldr	r3, [r7, #20]
 8101e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101e70:	f04f 31ff 	mov.w	r1, #4294967295
 8101e74:	697b      	ldr	r3, [r7, #20]
 8101e76:	fa01 f303 	lsl.w	r3, r1, r3
 8101e7a:	43d9      	mvns	r1, r3
 8101e7c:	687b      	ldr	r3, [r7, #4]
 8101e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e80:	4313      	orrs	r3, r2
         );
}
 8101e82:	4618      	mov	r0, r3
 8101e84:	3724      	adds	r7, #36	; 0x24
 8101e86:	46bd      	mov	sp, r7
 8101e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e8c:	4770      	bx	lr
	...

08101e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101e90:	b580      	push	{r7, lr}
 8101e92:	b082      	sub	sp, #8
 8101e94:	af00      	add	r7, sp, #0
 8101e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	3b01      	subs	r3, #1
 8101e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101ea0:	d301      	bcc.n	8101ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101ea2:	2301      	movs	r3, #1
 8101ea4:	e00f      	b.n	8101ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101ea6:	4a0a      	ldr	r2, [pc, #40]	; (8101ed0 <SysTick_Config+0x40>)
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	3b01      	subs	r3, #1
 8101eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101eae:	210f      	movs	r1, #15
 8101eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8101eb4:	f7ff ff8e 	bl	8101dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101eb8:	4b05      	ldr	r3, [pc, #20]	; (8101ed0 <SysTick_Config+0x40>)
 8101eba:	2200      	movs	r2, #0
 8101ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101ebe:	4b04      	ldr	r3, [pc, #16]	; (8101ed0 <SysTick_Config+0x40>)
 8101ec0:	2207      	movs	r2, #7
 8101ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101ec4:	2300      	movs	r3, #0
}
 8101ec6:	4618      	mov	r0, r3
 8101ec8:	3708      	adds	r7, #8
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}
 8101ece:	bf00      	nop
 8101ed0:	e000e010 	.word	0xe000e010

08101ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ed4:	b580      	push	{r7, lr}
 8101ed6:	b082      	sub	sp, #8
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101edc:	6878      	ldr	r0, [r7, #4]
 8101ede:	f7ff ff47 	bl	8101d70 <__NVIC_SetPriorityGrouping>
}
 8101ee2:	bf00      	nop
 8101ee4:	3708      	adds	r7, #8
 8101ee6:	46bd      	mov	sp, r7
 8101ee8:	bd80      	pop	{r7, pc}

08101eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101eea:	b580      	push	{r7, lr}
 8101eec:	b086      	sub	sp, #24
 8101eee:	af00      	add	r7, sp, #0
 8101ef0:	4603      	mov	r3, r0
 8101ef2:	60b9      	str	r1, [r7, #8]
 8101ef4:	607a      	str	r2, [r7, #4]
 8101ef6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ef8:	f7ff ff5e 	bl	8101db8 <__NVIC_GetPriorityGrouping>
 8101efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101efe:	687a      	ldr	r2, [r7, #4]
 8101f00:	68b9      	ldr	r1, [r7, #8]
 8101f02:	6978      	ldr	r0, [r7, #20]
 8101f04:	f7ff ff90 	bl	8101e28 <NVIC_EncodePriority>
 8101f08:	4602      	mov	r2, r0
 8101f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101f0e:	4611      	mov	r1, r2
 8101f10:	4618      	mov	r0, r3
 8101f12:	f7ff ff5f 	bl	8101dd4 <__NVIC_SetPriority>
}
 8101f16:	bf00      	nop
 8101f18:	3718      	adds	r7, #24
 8101f1a:	46bd      	mov	sp, r7
 8101f1c:	bd80      	pop	{r7, pc}

08101f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101f1e:	b580      	push	{r7, lr}
 8101f20:	b082      	sub	sp, #8
 8101f22:	af00      	add	r7, sp, #0
 8101f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101f26:	6878      	ldr	r0, [r7, #4]
 8101f28:	f7ff ffb2 	bl	8101e90 <SysTick_Config>
 8101f2c:	4603      	mov	r3, r0
}
 8101f2e:	4618      	mov	r0, r3
 8101f30:	3708      	adds	r7, #8
 8101f32:	46bd      	mov	sp, r7
 8101f34:	bd80      	pop	{r7, pc}
	...

08101f38 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101f38:	b480      	push	{r7}
 8101f3a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101f3c:	4b07      	ldr	r3, [pc, #28]	; (8101f5c <HAL_GetCurrentCPUID+0x24>)
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	091b      	lsrs	r3, r3, #4
 8101f42:	f003 030f 	and.w	r3, r3, #15
 8101f46:	2b07      	cmp	r3, #7
 8101f48:	d101      	bne.n	8101f4e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101f4a:	2303      	movs	r3, #3
 8101f4c:	e000      	b.n	8101f50 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101f4e:	2301      	movs	r3, #1
  }
}
 8101f50:	4618      	mov	r0, r3
 8101f52:	46bd      	mov	sp, r7
 8101f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f58:	4770      	bx	lr
 8101f5a:	bf00      	nop
 8101f5c:	e000ed00 	.word	0xe000ed00

08101f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101f60:	b480      	push	{r7}
 8101f62:	b089      	sub	sp, #36	; 0x24
 8101f64:	af00      	add	r7, sp, #0
 8101f66:	6078      	str	r0, [r7, #4]
 8101f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101f6a:	2300      	movs	r3, #0
 8101f6c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101f6e:	4b89      	ldr	r3, [pc, #548]	; (8102194 <HAL_GPIO_Init+0x234>)
 8101f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f72:	e194      	b.n	810229e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101f74:	683b      	ldr	r3, [r7, #0]
 8101f76:	681a      	ldr	r2, [r3, #0]
 8101f78:	2101      	movs	r1, #1
 8101f7a:	69fb      	ldr	r3, [r7, #28]
 8101f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8101f80:	4013      	ands	r3, r2
 8101f82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101f84:	693b      	ldr	r3, [r7, #16]
 8101f86:	2b00      	cmp	r3, #0
 8101f88:	f000 8186 	beq.w	8102298 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101f8c:	683b      	ldr	r3, [r7, #0]
 8101f8e:	685b      	ldr	r3, [r3, #4]
 8101f90:	f003 0303 	and.w	r3, r3, #3
 8101f94:	2b01      	cmp	r3, #1
 8101f96:	d005      	beq.n	8101fa4 <HAL_GPIO_Init+0x44>
 8101f98:	683b      	ldr	r3, [r7, #0]
 8101f9a:	685b      	ldr	r3, [r3, #4]
 8101f9c:	f003 0303 	and.w	r3, r3, #3
 8101fa0:	2b02      	cmp	r3, #2
 8101fa2:	d130      	bne.n	8102006 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	689b      	ldr	r3, [r3, #8]
 8101fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101faa:	69fb      	ldr	r3, [r7, #28]
 8101fac:	005b      	lsls	r3, r3, #1
 8101fae:	2203      	movs	r2, #3
 8101fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8101fb4:	43db      	mvns	r3, r3
 8101fb6:	69ba      	ldr	r2, [r7, #24]
 8101fb8:	4013      	ands	r3, r2
 8101fba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101fbc:	683b      	ldr	r3, [r7, #0]
 8101fbe:	68da      	ldr	r2, [r3, #12]
 8101fc0:	69fb      	ldr	r3, [r7, #28]
 8101fc2:	005b      	lsls	r3, r3, #1
 8101fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8101fc8:	69ba      	ldr	r2, [r7, #24]
 8101fca:	4313      	orrs	r3, r2
 8101fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	69ba      	ldr	r2, [r7, #24]
 8101fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	685b      	ldr	r3, [r3, #4]
 8101fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101fda:	2201      	movs	r2, #1
 8101fdc:	69fb      	ldr	r3, [r7, #28]
 8101fde:	fa02 f303 	lsl.w	r3, r2, r3
 8101fe2:	43db      	mvns	r3, r3
 8101fe4:	69ba      	ldr	r2, [r7, #24]
 8101fe6:	4013      	ands	r3, r2
 8101fe8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101fea:	683b      	ldr	r3, [r7, #0]
 8101fec:	685b      	ldr	r3, [r3, #4]
 8101fee:	091b      	lsrs	r3, r3, #4
 8101ff0:	f003 0201 	and.w	r2, r3, #1
 8101ff4:	69fb      	ldr	r3, [r7, #28]
 8101ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8101ffa:	69ba      	ldr	r2, [r7, #24]
 8101ffc:	4313      	orrs	r3, r2
 8101ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	69ba      	ldr	r2, [r7, #24]
 8102004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102006:	683b      	ldr	r3, [r7, #0]
 8102008:	685b      	ldr	r3, [r3, #4]
 810200a:	f003 0303 	and.w	r3, r3, #3
 810200e:	2b03      	cmp	r3, #3
 8102010:	d017      	beq.n	8102042 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	68db      	ldr	r3, [r3, #12]
 8102016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102018:	69fb      	ldr	r3, [r7, #28]
 810201a:	005b      	lsls	r3, r3, #1
 810201c:	2203      	movs	r2, #3
 810201e:	fa02 f303 	lsl.w	r3, r2, r3
 8102022:	43db      	mvns	r3, r3
 8102024:	69ba      	ldr	r2, [r7, #24]
 8102026:	4013      	ands	r3, r2
 8102028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810202a:	683b      	ldr	r3, [r7, #0]
 810202c:	689a      	ldr	r2, [r3, #8]
 810202e:	69fb      	ldr	r3, [r7, #28]
 8102030:	005b      	lsls	r3, r3, #1
 8102032:	fa02 f303 	lsl.w	r3, r2, r3
 8102036:	69ba      	ldr	r2, [r7, #24]
 8102038:	4313      	orrs	r3, r2
 810203a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	69ba      	ldr	r2, [r7, #24]
 8102040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102042:	683b      	ldr	r3, [r7, #0]
 8102044:	685b      	ldr	r3, [r3, #4]
 8102046:	f003 0303 	and.w	r3, r3, #3
 810204a:	2b02      	cmp	r3, #2
 810204c:	d123      	bne.n	8102096 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810204e:	69fb      	ldr	r3, [r7, #28]
 8102050:	08da      	lsrs	r2, r3, #3
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	3208      	adds	r2, #8
 8102056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810205c:	69fb      	ldr	r3, [r7, #28]
 810205e:	f003 0307 	and.w	r3, r3, #7
 8102062:	009b      	lsls	r3, r3, #2
 8102064:	220f      	movs	r2, #15
 8102066:	fa02 f303 	lsl.w	r3, r2, r3
 810206a:	43db      	mvns	r3, r3
 810206c:	69ba      	ldr	r2, [r7, #24]
 810206e:	4013      	ands	r3, r2
 8102070:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102072:	683b      	ldr	r3, [r7, #0]
 8102074:	691a      	ldr	r2, [r3, #16]
 8102076:	69fb      	ldr	r3, [r7, #28]
 8102078:	f003 0307 	and.w	r3, r3, #7
 810207c:	009b      	lsls	r3, r3, #2
 810207e:	fa02 f303 	lsl.w	r3, r2, r3
 8102082:	69ba      	ldr	r2, [r7, #24]
 8102084:	4313      	orrs	r3, r2
 8102086:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102088:	69fb      	ldr	r3, [r7, #28]
 810208a:	08da      	lsrs	r2, r3, #3
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	3208      	adds	r2, #8
 8102090:	69b9      	ldr	r1, [r7, #24]
 8102092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810209c:	69fb      	ldr	r3, [r7, #28]
 810209e:	005b      	lsls	r3, r3, #1
 81020a0:	2203      	movs	r2, #3
 81020a2:	fa02 f303 	lsl.w	r3, r2, r3
 81020a6:	43db      	mvns	r3, r3
 81020a8:	69ba      	ldr	r2, [r7, #24]
 81020aa:	4013      	ands	r3, r2
 81020ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81020ae:	683b      	ldr	r3, [r7, #0]
 81020b0:	685b      	ldr	r3, [r3, #4]
 81020b2:	f003 0203 	and.w	r2, r3, #3
 81020b6:	69fb      	ldr	r3, [r7, #28]
 81020b8:	005b      	lsls	r3, r3, #1
 81020ba:	fa02 f303 	lsl.w	r3, r2, r3
 81020be:	69ba      	ldr	r2, [r7, #24]
 81020c0:	4313      	orrs	r3, r2
 81020c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	69ba      	ldr	r2, [r7, #24]
 81020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81020ca:	683b      	ldr	r3, [r7, #0]
 81020cc:	685b      	ldr	r3, [r3, #4]
 81020ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	f000 80e0 	beq.w	8102298 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81020d8:	4b2f      	ldr	r3, [pc, #188]	; (8102198 <HAL_GPIO_Init+0x238>)
 81020da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81020de:	4a2e      	ldr	r2, [pc, #184]	; (8102198 <HAL_GPIO_Init+0x238>)
 81020e0:	f043 0302 	orr.w	r3, r3, #2
 81020e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81020e8:	4b2b      	ldr	r3, [pc, #172]	; (8102198 <HAL_GPIO_Init+0x238>)
 81020ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81020ee:	f003 0302 	and.w	r3, r3, #2
 81020f2:	60fb      	str	r3, [r7, #12]
 81020f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81020f6:	4a29      	ldr	r2, [pc, #164]	; (810219c <HAL_GPIO_Init+0x23c>)
 81020f8:	69fb      	ldr	r3, [r7, #28]
 81020fa:	089b      	lsrs	r3, r3, #2
 81020fc:	3302      	adds	r3, #2
 81020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102104:	69fb      	ldr	r3, [r7, #28]
 8102106:	f003 0303 	and.w	r3, r3, #3
 810210a:	009b      	lsls	r3, r3, #2
 810210c:	220f      	movs	r2, #15
 810210e:	fa02 f303 	lsl.w	r3, r2, r3
 8102112:	43db      	mvns	r3, r3
 8102114:	69ba      	ldr	r2, [r7, #24]
 8102116:	4013      	ands	r3, r2
 8102118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	4a20      	ldr	r2, [pc, #128]	; (81021a0 <HAL_GPIO_Init+0x240>)
 810211e:	4293      	cmp	r3, r2
 8102120:	d052      	beq.n	81021c8 <HAL_GPIO_Init+0x268>
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	4a1f      	ldr	r2, [pc, #124]	; (81021a4 <HAL_GPIO_Init+0x244>)
 8102126:	4293      	cmp	r3, r2
 8102128:	d031      	beq.n	810218e <HAL_GPIO_Init+0x22e>
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	4a1e      	ldr	r2, [pc, #120]	; (81021a8 <HAL_GPIO_Init+0x248>)
 810212e:	4293      	cmp	r3, r2
 8102130:	d02b      	beq.n	810218a <HAL_GPIO_Init+0x22a>
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	4a1d      	ldr	r2, [pc, #116]	; (81021ac <HAL_GPIO_Init+0x24c>)
 8102136:	4293      	cmp	r3, r2
 8102138:	d025      	beq.n	8102186 <HAL_GPIO_Init+0x226>
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	4a1c      	ldr	r2, [pc, #112]	; (81021b0 <HAL_GPIO_Init+0x250>)
 810213e:	4293      	cmp	r3, r2
 8102140:	d01f      	beq.n	8102182 <HAL_GPIO_Init+0x222>
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	4a1b      	ldr	r2, [pc, #108]	; (81021b4 <HAL_GPIO_Init+0x254>)
 8102146:	4293      	cmp	r3, r2
 8102148:	d019      	beq.n	810217e <HAL_GPIO_Init+0x21e>
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	4a1a      	ldr	r2, [pc, #104]	; (81021b8 <HAL_GPIO_Init+0x258>)
 810214e:	4293      	cmp	r3, r2
 8102150:	d013      	beq.n	810217a <HAL_GPIO_Init+0x21a>
 8102152:	687b      	ldr	r3, [r7, #4]
 8102154:	4a19      	ldr	r2, [pc, #100]	; (81021bc <HAL_GPIO_Init+0x25c>)
 8102156:	4293      	cmp	r3, r2
 8102158:	d00d      	beq.n	8102176 <HAL_GPIO_Init+0x216>
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	4a18      	ldr	r2, [pc, #96]	; (81021c0 <HAL_GPIO_Init+0x260>)
 810215e:	4293      	cmp	r3, r2
 8102160:	d007      	beq.n	8102172 <HAL_GPIO_Init+0x212>
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	4a17      	ldr	r2, [pc, #92]	; (81021c4 <HAL_GPIO_Init+0x264>)
 8102166:	4293      	cmp	r3, r2
 8102168:	d101      	bne.n	810216e <HAL_GPIO_Init+0x20e>
 810216a:	2309      	movs	r3, #9
 810216c:	e02d      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 810216e:	230a      	movs	r3, #10
 8102170:	e02b      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 8102172:	2308      	movs	r3, #8
 8102174:	e029      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 8102176:	2307      	movs	r3, #7
 8102178:	e027      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 810217a:	2306      	movs	r3, #6
 810217c:	e025      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 810217e:	2305      	movs	r3, #5
 8102180:	e023      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 8102182:	2304      	movs	r3, #4
 8102184:	e021      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 8102186:	2303      	movs	r3, #3
 8102188:	e01f      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 810218a:	2302      	movs	r3, #2
 810218c:	e01d      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 810218e:	2301      	movs	r3, #1
 8102190:	e01b      	b.n	81021ca <HAL_GPIO_Init+0x26a>
 8102192:	bf00      	nop
 8102194:	580000c0 	.word	0x580000c0
 8102198:	58024400 	.word	0x58024400
 810219c:	58000400 	.word	0x58000400
 81021a0:	58020000 	.word	0x58020000
 81021a4:	58020400 	.word	0x58020400
 81021a8:	58020800 	.word	0x58020800
 81021ac:	58020c00 	.word	0x58020c00
 81021b0:	58021000 	.word	0x58021000
 81021b4:	58021400 	.word	0x58021400
 81021b8:	58021800 	.word	0x58021800
 81021bc:	58021c00 	.word	0x58021c00
 81021c0:	58022000 	.word	0x58022000
 81021c4:	58022400 	.word	0x58022400
 81021c8:	2300      	movs	r3, #0
 81021ca:	69fa      	ldr	r2, [r7, #28]
 81021cc:	f002 0203 	and.w	r2, r2, #3
 81021d0:	0092      	lsls	r2, r2, #2
 81021d2:	4093      	lsls	r3, r2
 81021d4:	69ba      	ldr	r2, [r7, #24]
 81021d6:	4313      	orrs	r3, r2
 81021d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81021da:	4938      	ldr	r1, [pc, #224]	; (81022bc <HAL_GPIO_Init+0x35c>)
 81021dc:	69fb      	ldr	r3, [r7, #28]
 81021de:	089b      	lsrs	r3, r3, #2
 81021e0:	3302      	adds	r3, #2
 81021e2:	69ba      	ldr	r2, [r7, #24]
 81021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81021f0:	693b      	ldr	r3, [r7, #16]
 81021f2:	43db      	mvns	r3, r3
 81021f4:	69ba      	ldr	r2, [r7, #24]
 81021f6:	4013      	ands	r3, r2
 81021f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81021fa:	683b      	ldr	r3, [r7, #0]
 81021fc:	685b      	ldr	r3, [r3, #4]
 81021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102202:	2b00      	cmp	r3, #0
 8102204:	d003      	beq.n	810220e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102206:	69ba      	ldr	r2, [r7, #24]
 8102208:	693b      	ldr	r3, [r7, #16]
 810220a:	4313      	orrs	r3, r2
 810220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810220e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102212:	69bb      	ldr	r3, [r7, #24]
 8102214:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810221a:	685b      	ldr	r3, [r3, #4]
 810221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810221e:	693b      	ldr	r3, [r7, #16]
 8102220:	43db      	mvns	r3, r3
 8102222:	69ba      	ldr	r2, [r7, #24]
 8102224:	4013      	ands	r3, r2
 8102226:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102228:	683b      	ldr	r3, [r7, #0]
 810222a:	685b      	ldr	r3, [r3, #4]
 810222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102230:	2b00      	cmp	r3, #0
 8102232:	d003      	beq.n	810223c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102234:	69ba      	ldr	r2, [r7, #24]
 8102236:	693b      	ldr	r3, [r7, #16]
 8102238:	4313      	orrs	r3, r2
 810223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810223c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102240:	69bb      	ldr	r3, [r7, #24]
 8102242:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102244:	697b      	ldr	r3, [r7, #20]
 8102246:	685b      	ldr	r3, [r3, #4]
 8102248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810224a:	693b      	ldr	r3, [r7, #16]
 810224c:	43db      	mvns	r3, r3
 810224e:	69ba      	ldr	r2, [r7, #24]
 8102250:	4013      	ands	r3, r2
 8102252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102254:	683b      	ldr	r3, [r7, #0]
 8102256:	685b      	ldr	r3, [r3, #4]
 8102258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810225c:	2b00      	cmp	r3, #0
 810225e:	d003      	beq.n	8102268 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102260:	69ba      	ldr	r2, [r7, #24]
 8102262:	693b      	ldr	r3, [r7, #16]
 8102264:	4313      	orrs	r3, r2
 8102266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102268:	697b      	ldr	r3, [r7, #20]
 810226a:	69ba      	ldr	r2, [r7, #24]
 810226c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810226e:	697b      	ldr	r3, [r7, #20]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102274:	693b      	ldr	r3, [r7, #16]
 8102276:	43db      	mvns	r3, r3
 8102278:	69ba      	ldr	r2, [r7, #24]
 810227a:	4013      	ands	r3, r2
 810227c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810227e:	683b      	ldr	r3, [r7, #0]
 8102280:	685b      	ldr	r3, [r3, #4]
 8102282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102286:	2b00      	cmp	r3, #0
 8102288:	d003      	beq.n	8102292 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810228a:	69ba      	ldr	r2, [r7, #24]
 810228c:	693b      	ldr	r3, [r7, #16]
 810228e:	4313      	orrs	r3, r2
 8102290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102292:	697b      	ldr	r3, [r7, #20]
 8102294:	69ba      	ldr	r2, [r7, #24]
 8102296:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102298:	69fb      	ldr	r3, [r7, #28]
 810229a:	3301      	adds	r3, #1
 810229c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810229e:	683b      	ldr	r3, [r7, #0]
 81022a0:	681a      	ldr	r2, [r3, #0]
 81022a2:	69fb      	ldr	r3, [r7, #28]
 81022a4:	fa22 f303 	lsr.w	r3, r2, r3
 81022a8:	2b00      	cmp	r3, #0
 81022aa:	f47f ae63 	bne.w	8101f74 <HAL_GPIO_Init+0x14>
  }
}
 81022ae:	bf00      	nop
 81022b0:	bf00      	nop
 81022b2:	3724      	adds	r7, #36	; 0x24
 81022b4:	46bd      	mov	sp, r7
 81022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ba:	4770      	bx	lr
 81022bc:	58000400 	.word	0x58000400

081022c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81022c0:	b480      	push	{r7}
 81022c2:	b083      	sub	sp, #12
 81022c4:	af00      	add	r7, sp, #0
 81022c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81022c8:	4a08      	ldr	r2, [pc, #32]	; (81022ec <HAL_HSEM_FastTake+0x2c>)
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	3320      	adds	r3, #32
 81022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81022d2:	4a07      	ldr	r2, [pc, #28]	; (81022f0 <HAL_HSEM_FastTake+0x30>)
 81022d4:	4293      	cmp	r3, r2
 81022d6:	d101      	bne.n	81022dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81022d8:	2300      	movs	r3, #0
 81022da:	e000      	b.n	81022de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81022dc:	2301      	movs	r3, #1
}
 81022de:	4618      	mov	r0, r3
 81022e0:	370c      	adds	r7, #12
 81022e2:	46bd      	mov	sp, r7
 81022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e8:	4770      	bx	lr
 81022ea:	bf00      	nop
 81022ec:	58026400 	.word	0x58026400
 81022f0:	80000100 	.word	0x80000100

081022f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81022f4:	b480      	push	{r7}
 81022f6:	b083      	sub	sp, #12
 81022f8:	af00      	add	r7, sp, #0
 81022fa:	6078      	str	r0, [r7, #4]
 81022fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81022fe:	4906      	ldr	r1, [pc, #24]	; (8102318 <HAL_HSEM_Release+0x24>)
 8102300:	683b      	ldr	r3, [r7, #0]
 8102302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810230c:	bf00      	nop
 810230e:	370c      	adds	r7, #12
 8102310:	46bd      	mov	sp, r7
 8102312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102316:	4770      	bx	lr
 8102318:	58026400 	.word	0x58026400

0810231c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810231c:	b480      	push	{r7}
 810231e:	b083      	sub	sp, #12
 8102320:	af00      	add	r7, sp, #0
 8102322:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102324:	4b05      	ldr	r3, [pc, #20]	; (810233c <HAL_HSEM_ActivateNotification+0x20>)
 8102326:	681a      	ldr	r2, [r3, #0]
 8102328:	4904      	ldr	r1, [pc, #16]	; (810233c <HAL_HSEM_ActivateNotification+0x20>)
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	4313      	orrs	r3, r2
 810232e:	600b      	str	r3, [r1, #0]
#endif
}
 8102330:	bf00      	nop
 8102332:	370c      	adds	r7, #12
 8102334:	46bd      	mov	sp, r7
 8102336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810233a:	4770      	bx	lr
 810233c:	58026510 	.word	0x58026510

08102340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102340:	b580      	push	{r7, lr}
 8102342:	b082      	sub	sp, #8
 8102344:	af00      	add	r7, sp, #0
 8102346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	2b00      	cmp	r3, #0
 810234c:	d101      	bne.n	8102352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810234e:	2301      	movs	r3, #1
 8102350:	e081      	b.n	8102456 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102358:	b2db      	uxtb	r3, r3
 810235a:	2b00      	cmp	r3, #0
 810235c:	d106      	bne.n	810236c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	2200      	movs	r2, #0
 8102362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102366:	6878      	ldr	r0, [r7, #4]
 8102368:	f7ff fad0 	bl	810190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	2224      	movs	r2, #36	; 0x24
 8102370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	681a      	ldr	r2, [r3, #0]
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	681b      	ldr	r3, [r3, #0]
 810237e:	f022 0201 	bic.w	r2, r2, #1
 8102382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	685a      	ldr	r2, [r3, #4]
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
 8102396:	689a      	ldr	r2, [r3, #8]
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81023a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	68db      	ldr	r3, [r3, #12]
 81023a6:	2b01      	cmp	r3, #1
 81023a8:	d107      	bne.n	81023ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81023aa:	687b      	ldr	r3, [r7, #4]
 81023ac:	689a      	ldr	r2, [r3, #8]
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81023b6:	609a      	str	r2, [r3, #8]
 81023b8:	e006      	b.n	81023c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	689a      	ldr	r2, [r3, #8]
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	681b      	ldr	r3, [r3, #0]
 81023c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81023c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	68db      	ldr	r3, [r3, #12]
 81023cc:	2b02      	cmp	r3, #2
 81023ce:	d104      	bne.n	81023da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81023d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	685b      	ldr	r3, [r3, #4]
 81023e0:	687a      	ldr	r2, [r7, #4]
 81023e2:	6812      	ldr	r2, [r2, #0]
 81023e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81023e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81023ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	68da      	ldr	r2, [r3, #12]
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81023fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	691a      	ldr	r2, [r3, #16]
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	695b      	ldr	r3, [r3, #20]
 8102406:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	699b      	ldr	r3, [r3, #24]
 810240e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	430a      	orrs	r2, r1
 8102416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	69d9      	ldr	r1, [r3, #28]
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	6a1a      	ldr	r2, [r3, #32]
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	430a      	orrs	r2, r1
 8102426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	681a      	ldr	r2, [r3, #0]
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	f042 0201 	orr.w	r2, r2, #1
 8102436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	2200      	movs	r2, #0
 810243c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	2220      	movs	r2, #32
 8102442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	2200      	movs	r2, #0
 810244a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	2200      	movs	r2, #0
 8102450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102454:	2300      	movs	r3, #0
}
 8102456:	4618      	mov	r0, r3
 8102458:	3708      	adds	r7, #8
 810245a:	46bd      	mov	sp, r7
 810245c:	bd80      	pop	{r7, pc}
	...

08102460 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102460:	b580      	push	{r7, lr}
 8102462:	b088      	sub	sp, #32
 8102464:	af02      	add	r7, sp, #8
 8102466:	60f8      	str	r0, [r7, #12]
 8102468:	4608      	mov	r0, r1
 810246a:	4611      	mov	r1, r2
 810246c:	461a      	mov	r2, r3
 810246e:	4603      	mov	r3, r0
 8102470:	817b      	strh	r3, [r7, #10]
 8102472:	460b      	mov	r3, r1
 8102474:	813b      	strh	r3, [r7, #8]
 8102476:	4613      	mov	r3, r2
 8102478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810247a:	68fb      	ldr	r3, [r7, #12]
 810247c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102480:	b2db      	uxtb	r3, r3
 8102482:	2b20      	cmp	r3, #32
 8102484:	f040 80f9 	bne.w	810267a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102488:	6a3b      	ldr	r3, [r7, #32]
 810248a:	2b00      	cmp	r3, #0
 810248c:	d002      	beq.n	8102494 <HAL_I2C_Mem_Write+0x34>
 810248e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102490:	2b00      	cmp	r3, #0
 8102492:	d105      	bne.n	81024a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102494:	68fb      	ldr	r3, [r7, #12]
 8102496:	f44f 7200 	mov.w	r2, #512	; 0x200
 810249a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810249c:	2301      	movs	r3, #1
 810249e:	e0ed      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81024a6:	2b01      	cmp	r3, #1
 81024a8:	d101      	bne.n	81024ae <HAL_I2C_Mem_Write+0x4e>
 81024aa:	2302      	movs	r3, #2
 81024ac:	e0e6      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
 81024ae:	68fb      	ldr	r3, [r7, #12]
 81024b0:	2201      	movs	r2, #1
 81024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81024b6:	f7ff fc4f 	bl	8101d58 <HAL_GetTick>
 81024ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81024bc:	697b      	ldr	r3, [r7, #20]
 81024be:	9300      	str	r3, [sp, #0]
 81024c0:	2319      	movs	r3, #25
 81024c2:	2201      	movs	r2, #1
 81024c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81024c8:	68f8      	ldr	r0, [r7, #12]
 81024ca:	f000 fac3 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 81024ce:	4603      	mov	r3, r0
 81024d0:	2b00      	cmp	r3, #0
 81024d2:	d001      	beq.n	81024d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81024d4:	2301      	movs	r3, #1
 81024d6:	e0d1      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81024d8:	68fb      	ldr	r3, [r7, #12]
 81024da:	2221      	movs	r2, #33	; 0x21
 81024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81024e0:	68fb      	ldr	r3, [r7, #12]
 81024e2:	2240      	movs	r2, #64	; 0x40
 81024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81024e8:	68fb      	ldr	r3, [r7, #12]
 81024ea:	2200      	movs	r2, #0
 81024ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81024ee:	68fb      	ldr	r3, [r7, #12]
 81024f0:	6a3a      	ldr	r2, [r7, #32]
 81024f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81024f4:	68fb      	ldr	r3, [r7, #12]
 81024f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81024fa:	68fb      	ldr	r3, [r7, #12]
 81024fc:	2200      	movs	r2, #0
 81024fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102500:	88f8      	ldrh	r0, [r7, #6]
 8102502:	893a      	ldrh	r2, [r7, #8]
 8102504:	8979      	ldrh	r1, [r7, #10]
 8102506:	697b      	ldr	r3, [r7, #20]
 8102508:	9301      	str	r3, [sp, #4]
 810250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810250c:	9300      	str	r3, [sp, #0]
 810250e:	4603      	mov	r3, r0
 8102510:	68f8      	ldr	r0, [r7, #12]
 8102512:	f000 f9d3 	bl	81028bc <I2C_RequestMemoryWrite>
 8102516:	4603      	mov	r3, r0
 8102518:	2b00      	cmp	r3, #0
 810251a:	d005      	beq.n	8102528 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810251c:	68fb      	ldr	r3, [r7, #12]
 810251e:	2200      	movs	r2, #0
 8102520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102524:	2301      	movs	r3, #1
 8102526:	e0a9      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102528:	68fb      	ldr	r3, [r7, #12]
 810252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810252c:	b29b      	uxth	r3, r3
 810252e:	2bff      	cmp	r3, #255	; 0xff
 8102530:	d90e      	bls.n	8102550 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102532:	68fb      	ldr	r3, [r7, #12]
 8102534:	22ff      	movs	r2, #255	; 0xff
 8102536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102538:	68fb      	ldr	r3, [r7, #12]
 810253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810253c:	b2da      	uxtb	r2, r3
 810253e:	8979      	ldrh	r1, [r7, #10]
 8102540:	2300      	movs	r3, #0
 8102542:	9300      	str	r3, [sp, #0]
 8102544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102548:	68f8      	ldr	r0, [r7, #12]
 810254a:	f000 fc2b 	bl	8102da4 <I2C_TransferConfig>
 810254e:	e00f      	b.n	8102570 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102554:	b29a      	uxth	r2, r3
 8102556:	68fb      	ldr	r3, [r7, #12]
 8102558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810255e:	b2da      	uxtb	r2, r3
 8102560:	8979      	ldrh	r1, [r7, #10]
 8102562:	2300      	movs	r3, #0
 8102564:	9300      	str	r3, [sp, #0]
 8102566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810256a:	68f8      	ldr	r0, [r7, #12]
 810256c:	f000 fc1a 	bl	8102da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102570:	697a      	ldr	r2, [r7, #20]
 8102572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102574:	68f8      	ldr	r0, [r7, #12]
 8102576:	f000 faad 	bl	8102ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 810257a:	4603      	mov	r3, r0
 810257c:	2b00      	cmp	r3, #0
 810257e:	d001      	beq.n	8102584 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102580:	2301      	movs	r3, #1
 8102582:	e07b      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102584:	68fb      	ldr	r3, [r7, #12]
 8102586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102588:	781a      	ldrb	r2, [r3, #0]
 810258a:	68fb      	ldr	r3, [r7, #12]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102594:	1c5a      	adds	r2, r3, #1
 8102596:	68fb      	ldr	r3, [r7, #12]
 8102598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810259a:	68fb      	ldr	r3, [r7, #12]
 810259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810259e:	b29b      	uxth	r3, r3
 81025a0:	3b01      	subs	r3, #1
 81025a2:	b29a      	uxth	r2, r3
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81025a8:	68fb      	ldr	r3, [r7, #12]
 81025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025ac:	3b01      	subs	r3, #1
 81025ae:	b29a      	uxth	r2, r3
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81025b4:	68fb      	ldr	r3, [r7, #12]
 81025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025b8:	b29b      	uxth	r3, r3
 81025ba:	2b00      	cmp	r3, #0
 81025bc:	d034      	beq.n	8102628 <HAL_I2C_Mem_Write+0x1c8>
 81025be:	68fb      	ldr	r3, [r7, #12]
 81025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025c2:	2b00      	cmp	r3, #0
 81025c4:	d130      	bne.n	8102628 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81025c6:	697b      	ldr	r3, [r7, #20]
 81025c8:	9300      	str	r3, [sp, #0]
 81025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81025cc:	2200      	movs	r2, #0
 81025ce:	2180      	movs	r1, #128	; 0x80
 81025d0:	68f8      	ldr	r0, [r7, #12]
 81025d2:	f000 fa3f 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 81025d6:	4603      	mov	r3, r0
 81025d8:	2b00      	cmp	r3, #0
 81025da:	d001      	beq.n	81025e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81025dc:	2301      	movs	r3, #1
 81025de:	e04d      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81025e0:	68fb      	ldr	r3, [r7, #12]
 81025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025e4:	b29b      	uxth	r3, r3
 81025e6:	2bff      	cmp	r3, #255	; 0xff
 81025e8:	d90e      	bls.n	8102608 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	22ff      	movs	r2, #255	; 0xff
 81025ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81025f0:	68fb      	ldr	r3, [r7, #12]
 81025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025f4:	b2da      	uxtb	r2, r3
 81025f6:	8979      	ldrh	r1, [r7, #10]
 81025f8:	2300      	movs	r3, #0
 81025fa:	9300      	str	r3, [sp, #0]
 81025fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102600:	68f8      	ldr	r0, [r7, #12]
 8102602:	f000 fbcf 	bl	8102da4 <I2C_TransferConfig>
 8102606:	e00f      	b.n	8102628 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102608:	68fb      	ldr	r3, [r7, #12]
 810260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810260c:	b29a      	uxth	r2, r3
 810260e:	68fb      	ldr	r3, [r7, #12]
 8102610:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102612:	68fb      	ldr	r3, [r7, #12]
 8102614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102616:	b2da      	uxtb	r2, r3
 8102618:	8979      	ldrh	r1, [r7, #10]
 810261a:	2300      	movs	r3, #0
 810261c:	9300      	str	r3, [sp, #0]
 810261e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102622:	68f8      	ldr	r0, [r7, #12]
 8102624:	f000 fbbe 	bl	8102da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810262c:	b29b      	uxth	r3, r3
 810262e:	2b00      	cmp	r3, #0
 8102630:	d19e      	bne.n	8102570 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102632:	697a      	ldr	r2, [r7, #20]
 8102634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102636:	68f8      	ldr	r0, [r7, #12]
 8102638:	f000 fa8c 	bl	8102b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 810263c:	4603      	mov	r3, r0
 810263e:	2b00      	cmp	r3, #0
 8102640:	d001      	beq.n	8102646 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102642:	2301      	movs	r3, #1
 8102644:	e01a      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102646:	68fb      	ldr	r3, [r7, #12]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	2220      	movs	r2, #32
 810264c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	6859      	ldr	r1, [r3, #4]
 8102654:	68fb      	ldr	r3, [r7, #12]
 8102656:	681a      	ldr	r2, [r3, #0]
 8102658:	4b0a      	ldr	r3, [pc, #40]	; (8102684 <HAL_I2C_Mem_Write+0x224>)
 810265a:	400b      	ands	r3, r1
 810265c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	2220      	movs	r2, #32
 8102662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	2200      	movs	r2, #0
 810266a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	2200      	movs	r2, #0
 8102672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102676:	2300      	movs	r3, #0
 8102678:	e000      	b.n	810267c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810267a:	2302      	movs	r3, #2
  }
}
 810267c:	4618      	mov	r0, r3
 810267e:	3718      	adds	r7, #24
 8102680:	46bd      	mov	sp, r7
 8102682:	bd80      	pop	{r7, pc}
 8102684:	fe00e800 	.word	0xfe00e800

08102688 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102688:	b580      	push	{r7, lr}
 810268a:	b088      	sub	sp, #32
 810268c:	af02      	add	r7, sp, #8
 810268e:	60f8      	str	r0, [r7, #12]
 8102690:	4608      	mov	r0, r1
 8102692:	4611      	mov	r1, r2
 8102694:	461a      	mov	r2, r3
 8102696:	4603      	mov	r3, r0
 8102698:	817b      	strh	r3, [r7, #10]
 810269a:	460b      	mov	r3, r1
 810269c:	813b      	strh	r3, [r7, #8]
 810269e:	4613      	mov	r3, r2
 81026a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81026a2:	68fb      	ldr	r3, [r7, #12]
 81026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81026a8:	b2db      	uxtb	r3, r3
 81026aa:	2b20      	cmp	r3, #32
 81026ac:	f040 80fd 	bne.w	81028aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81026b0:	6a3b      	ldr	r3, [r7, #32]
 81026b2:	2b00      	cmp	r3, #0
 81026b4:	d002      	beq.n	81026bc <HAL_I2C_Mem_Read+0x34>
 81026b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d105      	bne.n	81026c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81026bc:	68fb      	ldr	r3, [r7, #12]
 81026be:	f44f 7200 	mov.w	r2, #512	; 0x200
 81026c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81026c4:	2301      	movs	r3, #1
 81026c6:	e0f1      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81026c8:	68fb      	ldr	r3, [r7, #12]
 81026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81026ce:	2b01      	cmp	r3, #1
 81026d0:	d101      	bne.n	81026d6 <HAL_I2C_Mem_Read+0x4e>
 81026d2:	2302      	movs	r3, #2
 81026d4:	e0ea      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	2201      	movs	r2, #1
 81026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81026de:	f7ff fb3b 	bl	8101d58 <HAL_GetTick>
 81026e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81026e4:	697b      	ldr	r3, [r7, #20]
 81026e6:	9300      	str	r3, [sp, #0]
 81026e8:	2319      	movs	r3, #25
 81026ea:	2201      	movs	r2, #1
 81026ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81026f0:	68f8      	ldr	r0, [r7, #12]
 81026f2:	f000 f9af 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 81026f6:	4603      	mov	r3, r0
 81026f8:	2b00      	cmp	r3, #0
 81026fa:	d001      	beq.n	8102700 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81026fc:	2301      	movs	r3, #1
 81026fe:	e0d5      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	2222      	movs	r2, #34	; 0x22
 8102704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	2240      	movs	r2, #64	; 0x40
 810270c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	2200      	movs	r2, #0
 8102714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102716:	68fb      	ldr	r3, [r7, #12]
 8102718:	6a3a      	ldr	r2, [r7, #32]
 810271a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102722:	68fb      	ldr	r3, [r7, #12]
 8102724:	2200      	movs	r2, #0
 8102726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102728:	88f8      	ldrh	r0, [r7, #6]
 810272a:	893a      	ldrh	r2, [r7, #8]
 810272c:	8979      	ldrh	r1, [r7, #10]
 810272e:	697b      	ldr	r3, [r7, #20]
 8102730:	9301      	str	r3, [sp, #4]
 8102732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102734:	9300      	str	r3, [sp, #0]
 8102736:	4603      	mov	r3, r0
 8102738:	68f8      	ldr	r0, [r7, #12]
 810273a:	f000 f913 	bl	8102964 <I2C_RequestMemoryRead>
 810273e:	4603      	mov	r3, r0
 8102740:	2b00      	cmp	r3, #0
 8102742:	d005      	beq.n	8102750 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102744:	68fb      	ldr	r3, [r7, #12]
 8102746:	2200      	movs	r2, #0
 8102748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810274c:	2301      	movs	r3, #1
 810274e:	e0ad      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102750:	68fb      	ldr	r3, [r7, #12]
 8102752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102754:	b29b      	uxth	r3, r3
 8102756:	2bff      	cmp	r3, #255	; 0xff
 8102758:	d90e      	bls.n	8102778 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810275a:	68fb      	ldr	r3, [r7, #12]
 810275c:	22ff      	movs	r2, #255	; 0xff
 810275e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102760:	68fb      	ldr	r3, [r7, #12]
 8102762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102764:	b2da      	uxtb	r2, r3
 8102766:	8979      	ldrh	r1, [r7, #10]
 8102768:	4b52      	ldr	r3, [pc, #328]	; (81028b4 <HAL_I2C_Mem_Read+0x22c>)
 810276a:	9300      	str	r3, [sp, #0]
 810276c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102770:	68f8      	ldr	r0, [r7, #12]
 8102772:	f000 fb17 	bl	8102da4 <I2C_TransferConfig>
 8102776:	e00f      	b.n	8102798 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810277c:	b29a      	uxth	r2, r3
 810277e:	68fb      	ldr	r3, [r7, #12]
 8102780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102782:	68fb      	ldr	r3, [r7, #12]
 8102784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102786:	b2da      	uxtb	r2, r3
 8102788:	8979      	ldrh	r1, [r7, #10]
 810278a:	4b4a      	ldr	r3, [pc, #296]	; (81028b4 <HAL_I2C_Mem_Read+0x22c>)
 810278c:	9300      	str	r3, [sp, #0]
 810278e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102792:	68f8      	ldr	r0, [r7, #12]
 8102794:	f000 fb06 	bl	8102da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	9300      	str	r3, [sp, #0]
 810279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810279e:	2200      	movs	r2, #0
 81027a0:	2104      	movs	r1, #4
 81027a2:	68f8      	ldr	r0, [r7, #12]
 81027a4:	f000 f956 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 81027a8:	4603      	mov	r3, r0
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d001      	beq.n	81027b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81027ae:	2301      	movs	r3, #1
 81027b0:	e07c      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81027b2:	68fb      	ldr	r3, [r7, #12]
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81027b8:	68fb      	ldr	r3, [r7, #12]
 81027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027bc:	b2d2      	uxtb	r2, r2
 81027be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027c4:	1c5a      	adds	r2, r3, #1
 81027c6:	68fb      	ldr	r3, [r7, #12]
 81027c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81027ca:	68fb      	ldr	r3, [r7, #12]
 81027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027ce:	3b01      	subs	r3, #1
 81027d0:	b29a      	uxth	r2, r3
 81027d2:	68fb      	ldr	r3, [r7, #12]
 81027d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81027d6:	68fb      	ldr	r3, [r7, #12]
 81027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027da:	b29b      	uxth	r3, r3
 81027dc:	3b01      	subs	r3, #1
 81027de:	b29a      	uxth	r2, r3
 81027e0:	68fb      	ldr	r3, [r7, #12]
 81027e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81027e4:	68fb      	ldr	r3, [r7, #12]
 81027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027e8:	b29b      	uxth	r3, r3
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	d034      	beq.n	8102858 <HAL_I2C_Mem_Read+0x1d0>
 81027ee:	68fb      	ldr	r3, [r7, #12]
 81027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027f2:	2b00      	cmp	r3, #0
 81027f4:	d130      	bne.n	8102858 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81027f6:	697b      	ldr	r3, [r7, #20]
 81027f8:	9300      	str	r3, [sp, #0]
 81027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027fc:	2200      	movs	r2, #0
 81027fe:	2180      	movs	r1, #128	; 0x80
 8102800:	68f8      	ldr	r0, [r7, #12]
 8102802:	f000 f927 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 8102806:	4603      	mov	r3, r0
 8102808:	2b00      	cmp	r3, #0
 810280a:	d001      	beq.n	8102810 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810280c:	2301      	movs	r3, #1
 810280e:	e04d      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102814:	b29b      	uxth	r3, r3
 8102816:	2bff      	cmp	r3, #255	; 0xff
 8102818:	d90e      	bls.n	8102838 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	22ff      	movs	r2, #255	; 0xff
 810281e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102824:	b2da      	uxtb	r2, r3
 8102826:	8979      	ldrh	r1, [r7, #10]
 8102828:	2300      	movs	r3, #0
 810282a:	9300      	str	r3, [sp, #0]
 810282c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102830:	68f8      	ldr	r0, [r7, #12]
 8102832:	f000 fab7 	bl	8102da4 <I2C_TransferConfig>
 8102836:	e00f      	b.n	8102858 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810283c:	b29a      	uxth	r2, r3
 810283e:	68fb      	ldr	r3, [r7, #12]
 8102840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102842:	68fb      	ldr	r3, [r7, #12]
 8102844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102846:	b2da      	uxtb	r2, r3
 8102848:	8979      	ldrh	r1, [r7, #10]
 810284a:	2300      	movs	r3, #0
 810284c:	9300      	str	r3, [sp, #0]
 810284e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102852:	68f8      	ldr	r0, [r7, #12]
 8102854:	f000 faa6 	bl	8102da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102858:	68fb      	ldr	r3, [r7, #12]
 810285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810285c:	b29b      	uxth	r3, r3
 810285e:	2b00      	cmp	r3, #0
 8102860:	d19a      	bne.n	8102798 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102862:	697a      	ldr	r2, [r7, #20]
 8102864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102866:	68f8      	ldr	r0, [r7, #12]
 8102868:	f000 f974 	bl	8102b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 810286c:	4603      	mov	r3, r0
 810286e:	2b00      	cmp	r3, #0
 8102870:	d001      	beq.n	8102876 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102872:	2301      	movs	r3, #1
 8102874:	e01a      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102876:	68fb      	ldr	r3, [r7, #12]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	2220      	movs	r2, #32
 810287c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810287e:	68fb      	ldr	r3, [r7, #12]
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	6859      	ldr	r1, [r3, #4]
 8102884:	68fb      	ldr	r3, [r7, #12]
 8102886:	681a      	ldr	r2, [r3, #0]
 8102888:	4b0b      	ldr	r3, [pc, #44]	; (81028b8 <HAL_I2C_Mem_Read+0x230>)
 810288a:	400b      	ands	r3, r1
 810288c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810288e:	68fb      	ldr	r3, [r7, #12]
 8102890:	2220      	movs	r2, #32
 8102892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102896:	68fb      	ldr	r3, [r7, #12]
 8102898:	2200      	movs	r2, #0
 810289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	2200      	movs	r2, #0
 81028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81028a6:	2300      	movs	r3, #0
 81028a8:	e000      	b.n	81028ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81028aa:	2302      	movs	r3, #2
  }
}
 81028ac:	4618      	mov	r0, r3
 81028ae:	3718      	adds	r7, #24
 81028b0:	46bd      	mov	sp, r7
 81028b2:	bd80      	pop	{r7, pc}
 81028b4:	80002400 	.word	0x80002400
 81028b8:	fe00e800 	.word	0xfe00e800

081028bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 81028bc:	b580      	push	{r7, lr}
 81028be:	b086      	sub	sp, #24
 81028c0:	af02      	add	r7, sp, #8
 81028c2:	60f8      	str	r0, [r7, #12]
 81028c4:	4608      	mov	r0, r1
 81028c6:	4611      	mov	r1, r2
 81028c8:	461a      	mov	r2, r3
 81028ca:	4603      	mov	r3, r0
 81028cc:	817b      	strh	r3, [r7, #10]
 81028ce:	460b      	mov	r3, r1
 81028d0:	813b      	strh	r3, [r7, #8]
 81028d2:	4613      	mov	r3, r2
 81028d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81028d6:	88fb      	ldrh	r3, [r7, #6]
 81028d8:	b2da      	uxtb	r2, r3
 81028da:	8979      	ldrh	r1, [r7, #10]
 81028dc:	4b20      	ldr	r3, [pc, #128]	; (8102960 <I2C_RequestMemoryWrite+0xa4>)
 81028de:	9300      	str	r3, [sp, #0]
 81028e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81028e4:	68f8      	ldr	r0, [r7, #12]
 81028e6:	f000 fa5d 	bl	8102da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81028ea:	69fa      	ldr	r2, [r7, #28]
 81028ec:	69b9      	ldr	r1, [r7, #24]
 81028ee:	68f8      	ldr	r0, [r7, #12]
 81028f0:	f000 f8f0 	bl	8102ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 81028f4:	4603      	mov	r3, r0
 81028f6:	2b00      	cmp	r3, #0
 81028f8:	d001      	beq.n	81028fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81028fa:	2301      	movs	r3, #1
 81028fc:	e02c      	b.n	8102958 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81028fe:	88fb      	ldrh	r3, [r7, #6]
 8102900:	2b01      	cmp	r3, #1
 8102902:	d105      	bne.n	8102910 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102904:	893b      	ldrh	r3, [r7, #8]
 8102906:	b2da      	uxtb	r2, r3
 8102908:	68fb      	ldr	r3, [r7, #12]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	629a      	str	r2, [r3, #40]	; 0x28
 810290e:	e015      	b.n	810293c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102910:	893b      	ldrh	r3, [r7, #8]
 8102912:	0a1b      	lsrs	r3, r3, #8
 8102914:	b29b      	uxth	r3, r3
 8102916:	b2da      	uxtb	r2, r3
 8102918:	68fb      	ldr	r3, [r7, #12]
 810291a:	681b      	ldr	r3, [r3, #0]
 810291c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810291e:	69fa      	ldr	r2, [r7, #28]
 8102920:	69b9      	ldr	r1, [r7, #24]
 8102922:	68f8      	ldr	r0, [r7, #12]
 8102924:	f000 f8d6 	bl	8102ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 8102928:	4603      	mov	r3, r0
 810292a:	2b00      	cmp	r3, #0
 810292c:	d001      	beq.n	8102932 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810292e:	2301      	movs	r3, #1
 8102930:	e012      	b.n	8102958 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102932:	893b      	ldrh	r3, [r7, #8]
 8102934:	b2da      	uxtb	r2, r3
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 810293c:	69fb      	ldr	r3, [r7, #28]
 810293e:	9300      	str	r3, [sp, #0]
 8102940:	69bb      	ldr	r3, [r7, #24]
 8102942:	2200      	movs	r2, #0
 8102944:	2180      	movs	r1, #128	; 0x80
 8102946:	68f8      	ldr	r0, [r7, #12]
 8102948:	f000 f884 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 810294c:	4603      	mov	r3, r0
 810294e:	2b00      	cmp	r3, #0
 8102950:	d001      	beq.n	8102956 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102952:	2301      	movs	r3, #1
 8102954:	e000      	b.n	8102958 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102956:	2300      	movs	r3, #0
}
 8102958:	4618      	mov	r0, r3
 810295a:	3710      	adds	r7, #16
 810295c:	46bd      	mov	sp, r7
 810295e:	bd80      	pop	{r7, pc}
 8102960:	80002000 	.word	0x80002000

08102964 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102964:	b580      	push	{r7, lr}
 8102966:	b086      	sub	sp, #24
 8102968:	af02      	add	r7, sp, #8
 810296a:	60f8      	str	r0, [r7, #12]
 810296c:	4608      	mov	r0, r1
 810296e:	4611      	mov	r1, r2
 8102970:	461a      	mov	r2, r3
 8102972:	4603      	mov	r3, r0
 8102974:	817b      	strh	r3, [r7, #10]
 8102976:	460b      	mov	r3, r1
 8102978:	813b      	strh	r3, [r7, #8]
 810297a:	4613      	mov	r3, r2
 810297c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810297e:	88fb      	ldrh	r3, [r7, #6]
 8102980:	b2da      	uxtb	r2, r3
 8102982:	8979      	ldrh	r1, [r7, #10]
 8102984:	4b20      	ldr	r3, [pc, #128]	; (8102a08 <I2C_RequestMemoryRead+0xa4>)
 8102986:	9300      	str	r3, [sp, #0]
 8102988:	2300      	movs	r3, #0
 810298a:	68f8      	ldr	r0, [r7, #12]
 810298c:	f000 fa0a 	bl	8102da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102990:	69fa      	ldr	r2, [r7, #28]
 8102992:	69b9      	ldr	r1, [r7, #24]
 8102994:	68f8      	ldr	r0, [r7, #12]
 8102996:	f000 f89d 	bl	8102ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 810299a:	4603      	mov	r3, r0
 810299c:	2b00      	cmp	r3, #0
 810299e:	d001      	beq.n	81029a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81029a0:	2301      	movs	r3, #1
 81029a2:	e02c      	b.n	81029fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81029a4:	88fb      	ldrh	r3, [r7, #6]
 81029a6:	2b01      	cmp	r3, #1
 81029a8:	d105      	bne.n	81029b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029aa:	893b      	ldrh	r3, [r7, #8]
 81029ac:	b2da      	uxtb	r2, r3
 81029ae:	68fb      	ldr	r3, [r7, #12]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	629a      	str	r2, [r3, #40]	; 0x28
 81029b4:	e015      	b.n	81029e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81029b6:	893b      	ldrh	r3, [r7, #8]
 81029b8:	0a1b      	lsrs	r3, r3, #8
 81029ba:	b29b      	uxth	r3, r3
 81029bc:	b2da      	uxtb	r2, r3
 81029be:	68fb      	ldr	r3, [r7, #12]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81029c4:	69fa      	ldr	r2, [r7, #28]
 81029c6:	69b9      	ldr	r1, [r7, #24]
 81029c8:	68f8      	ldr	r0, [r7, #12]
 81029ca:	f000 f883 	bl	8102ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 81029ce:	4603      	mov	r3, r0
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d001      	beq.n	81029d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81029d4:	2301      	movs	r3, #1
 81029d6:	e012      	b.n	81029fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029d8:	893b      	ldrh	r3, [r7, #8]
 81029da:	b2da      	uxtb	r2, r3
 81029dc:	68fb      	ldr	r3, [r7, #12]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81029e2:	69fb      	ldr	r3, [r7, #28]
 81029e4:	9300      	str	r3, [sp, #0]
 81029e6:	69bb      	ldr	r3, [r7, #24]
 81029e8:	2200      	movs	r2, #0
 81029ea:	2140      	movs	r1, #64	; 0x40
 81029ec:	68f8      	ldr	r0, [r7, #12]
 81029ee:	f000 f831 	bl	8102a54 <I2C_WaitOnFlagUntilTimeout>
 81029f2:	4603      	mov	r3, r0
 81029f4:	2b00      	cmp	r3, #0
 81029f6:	d001      	beq.n	81029fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81029f8:	2301      	movs	r3, #1
 81029fa:	e000      	b.n	81029fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81029fc:	2300      	movs	r3, #0
}
 81029fe:	4618      	mov	r0, r3
 8102a00:	3710      	adds	r7, #16
 8102a02:	46bd      	mov	sp, r7
 8102a04:	bd80      	pop	{r7, pc}
 8102a06:	bf00      	nop
 8102a08:	80002000 	.word	0x80002000

08102a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102a0c:	b480      	push	{r7}
 8102a0e:	b083      	sub	sp, #12
 8102a10:	af00      	add	r7, sp, #0
 8102a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	699b      	ldr	r3, [r3, #24]
 8102a1a:	f003 0302 	and.w	r3, r3, #2
 8102a1e:	2b02      	cmp	r3, #2
 8102a20:	d103      	bne.n	8102a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	2200      	movs	r2, #0
 8102a28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	699b      	ldr	r3, [r3, #24]
 8102a30:	f003 0301 	and.w	r3, r3, #1
 8102a34:	2b01      	cmp	r3, #1
 8102a36:	d007      	beq.n	8102a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	699a      	ldr	r2, [r3, #24]
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	f042 0201 	orr.w	r2, r2, #1
 8102a46:	619a      	str	r2, [r3, #24]
  }
}
 8102a48:	bf00      	nop
 8102a4a:	370c      	adds	r7, #12
 8102a4c:	46bd      	mov	sp, r7
 8102a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a52:	4770      	bx	lr

08102a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102a54:	b580      	push	{r7, lr}
 8102a56:	b084      	sub	sp, #16
 8102a58:	af00      	add	r7, sp, #0
 8102a5a:	60f8      	str	r0, [r7, #12]
 8102a5c:	60b9      	str	r1, [r7, #8]
 8102a5e:	603b      	str	r3, [r7, #0]
 8102a60:	4613      	mov	r3, r2
 8102a62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102a64:	e022      	b.n	8102aac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102a66:	683b      	ldr	r3, [r7, #0]
 8102a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a6c:	d01e      	beq.n	8102aac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102a6e:	f7ff f973 	bl	8101d58 <HAL_GetTick>
 8102a72:	4602      	mov	r2, r0
 8102a74:	69bb      	ldr	r3, [r7, #24]
 8102a76:	1ad3      	subs	r3, r2, r3
 8102a78:	683a      	ldr	r2, [r7, #0]
 8102a7a:	429a      	cmp	r2, r3
 8102a7c:	d302      	bcc.n	8102a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102a7e:	683b      	ldr	r3, [r7, #0]
 8102a80:	2b00      	cmp	r3, #0
 8102a82:	d113      	bne.n	8102aac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102a88:	f043 0220 	orr.w	r2, r3, #32
 8102a8c:	68fb      	ldr	r3, [r7, #12]
 8102a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102a90:	68fb      	ldr	r3, [r7, #12]
 8102a92:	2220      	movs	r2, #32
 8102a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102a98:	68fb      	ldr	r3, [r7, #12]
 8102a9a:	2200      	movs	r2, #0
 8102a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	2200      	movs	r2, #0
 8102aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102aa8:	2301      	movs	r3, #1
 8102aaa:	e00f      	b.n	8102acc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102aac:	68fb      	ldr	r3, [r7, #12]
 8102aae:	681b      	ldr	r3, [r3, #0]
 8102ab0:	699a      	ldr	r2, [r3, #24]
 8102ab2:	68bb      	ldr	r3, [r7, #8]
 8102ab4:	4013      	ands	r3, r2
 8102ab6:	68ba      	ldr	r2, [r7, #8]
 8102ab8:	429a      	cmp	r2, r3
 8102aba:	bf0c      	ite	eq
 8102abc:	2301      	moveq	r3, #1
 8102abe:	2300      	movne	r3, #0
 8102ac0:	b2db      	uxtb	r3, r3
 8102ac2:	461a      	mov	r2, r3
 8102ac4:	79fb      	ldrb	r3, [r7, #7]
 8102ac6:	429a      	cmp	r2, r3
 8102ac8:	d0cd      	beq.n	8102a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102aca:	2300      	movs	r3, #0
}
 8102acc:	4618      	mov	r0, r3
 8102ace:	3710      	adds	r7, #16
 8102ad0:	46bd      	mov	sp, r7
 8102ad2:	bd80      	pop	{r7, pc}

08102ad4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102ad4:	b580      	push	{r7, lr}
 8102ad6:	b084      	sub	sp, #16
 8102ad8:	af00      	add	r7, sp, #0
 8102ada:	60f8      	str	r0, [r7, #12]
 8102adc:	60b9      	str	r1, [r7, #8]
 8102ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102ae0:	e02c      	b.n	8102b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102ae2:	687a      	ldr	r2, [r7, #4]
 8102ae4:	68b9      	ldr	r1, [r7, #8]
 8102ae6:	68f8      	ldr	r0, [r7, #12]
 8102ae8:	f000 f870 	bl	8102bcc <I2C_IsErrorOccurred>
 8102aec:	4603      	mov	r3, r0
 8102aee:	2b00      	cmp	r3, #0
 8102af0:	d001      	beq.n	8102af6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102af2:	2301      	movs	r3, #1
 8102af4:	e02a      	b.n	8102b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102af6:	68bb      	ldr	r3, [r7, #8]
 8102af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102afc:	d01e      	beq.n	8102b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102afe:	f7ff f92b 	bl	8101d58 <HAL_GetTick>
 8102b02:	4602      	mov	r2, r0
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	1ad3      	subs	r3, r2, r3
 8102b08:	68ba      	ldr	r2, [r7, #8]
 8102b0a:	429a      	cmp	r2, r3
 8102b0c:	d302      	bcc.n	8102b14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102b0e:	68bb      	ldr	r3, [r7, #8]
 8102b10:	2b00      	cmp	r3, #0
 8102b12:	d113      	bne.n	8102b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b14:	68fb      	ldr	r3, [r7, #12]
 8102b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b18:	f043 0220 	orr.w	r2, r3, #32
 8102b1c:	68fb      	ldr	r3, [r7, #12]
 8102b1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	2220      	movs	r2, #32
 8102b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b28:	68fb      	ldr	r3, [r7, #12]
 8102b2a:	2200      	movs	r2, #0
 8102b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b30:	68fb      	ldr	r3, [r7, #12]
 8102b32:	2200      	movs	r2, #0
 8102b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102b38:	2301      	movs	r3, #1
 8102b3a:	e007      	b.n	8102b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	699b      	ldr	r3, [r3, #24]
 8102b42:	f003 0302 	and.w	r3, r3, #2
 8102b46:	2b02      	cmp	r3, #2
 8102b48:	d1cb      	bne.n	8102ae2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102b4a:	2300      	movs	r3, #0
}
 8102b4c:	4618      	mov	r0, r3
 8102b4e:	3710      	adds	r7, #16
 8102b50:	46bd      	mov	sp, r7
 8102b52:	bd80      	pop	{r7, pc}

08102b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102b54:	b580      	push	{r7, lr}
 8102b56:	b084      	sub	sp, #16
 8102b58:	af00      	add	r7, sp, #0
 8102b5a:	60f8      	str	r0, [r7, #12]
 8102b5c:	60b9      	str	r1, [r7, #8]
 8102b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102b60:	e028      	b.n	8102bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b62:	687a      	ldr	r2, [r7, #4]
 8102b64:	68b9      	ldr	r1, [r7, #8]
 8102b66:	68f8      	ldr	r0, [r7, #12]
 8102b68:	f000 f830 	bl	8102bcc <I2C_IsErrorOccurred>
 8102b6c:	4603      	mov	r3, r0
 8102b6e:	2b00      	cmp	r3, #0
 8102b70:	d001      	beq.n	8102b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102b72:	2301      	movs	r3, #1
 8102b74:	e026      	b.n	8102bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b76:	f7ff f8ef 	bl	8101d58 <HAL_GetTick>
 8102b7a:	4602      	mov	r2, r0
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	1ad3      	subs	r3, r2, r3
 8102b80:	68ba      	ldr	r2, [r7, #8]
 8102b82:	429a      	cmp	r2, r3
 8102b84:	d302      	bcc.n	8102b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102b86:	68bb      	ldr	r3, [r7, #8]
 8102b88:	2b00      	cmp	r3, #0
 8102b8a:	d113      	bne.n	8102bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b8c:	68fb      	ldr	r3, [r7, #12]
 8102b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b90:	f043 0220 	orr.w	r2, r3, #32
 8102b94:	68fb      	ldr	r3, [r7, #12]
 8102b96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102b98:	68fb      	ldr	r3, [r7, #12]
 8102b9a:	2220      	movs	r2, #32
 8102b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102ba0:	68fb      	ldr	r3, [r7, #12]
 8102ba2:	2200      	movs	r2, #0
 8102ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	2200      	movs	r2, #0
 8102bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102bb0:	2301      	movs	r3, #1
 8102bb2:	e007      	b.n	8102bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102bb4:	68fb      	ldr	r3, [r7, #12]
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	699b      	ldr	r3, [r3, #24]
 8102bba:	f003 0320 	and.w	r3, r3, #32
 8102bbe:	2b20      	cmp	r3, #32
 8102bc0:	d1cf      	bne.n	8102b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102bc2:	2300      	movs	r3, #0
}
 8102bc4:	4618      	mov	r0, r3
 8102bc6:	3710      	adds	r7, #16
 8102bc8:	46bd      	mov	sp, r7
 8102bca:	bd80      	pop	{r7, pc}

08102bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102bcc:	b580      	push	{r7, lr}
 8102bce:	b08a      	sub	sp, #40	; 0x28
 8102bd0:	af00      	add	r7, sp, #0
 8102bd2:	60f8      	str	r0, [r7, #12]
 8102bd4:	60b9      	str	r1, [r7, #8]
 8102bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102bd8:	2300      	movs	r3, #0
 8102bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102bde:	68fb      	ldr	r3, [r7, #12]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	699b      	ldr	r3, [r3, #24]
 8102be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8102be6:	2300      	movs	r3, #0
 8102be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8102bee:	69bb      	ldr	r3, [r7, #24]
 8102bf0:	f003 0310 	and.w	r3, r3, #16
 8102bf4:	2b00      	cmp	r3, #0
 8102bf6:	d075      	beq.n	8102ce4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	2210      	movs	r2, #16
 8102bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102c00:	e056      	b.n	8102cb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102c02:	68bb      	ldr	r3, [r7, #8]
 8102c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c08:	d052      	beq.n	8102cb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102c0a:	f7ff f8a5 	bl	8101d58 <HAL_GetTick>
 8102c0e:	4602      	mov	r2, r0
 8102c10:	69fb      	ldr	r3, [r7, #28]
 8102c12:	1ad3      	subs	r3, r2, r3
 8102c14:	68ba      	ldr	r2, [r7, #8]
 8102c16:	429a      	cmp	r2, r3
 8102c18:	d302      	bcc.n	8102c20 <I2C_IsErrorOccurred+0x54>
 8102c1a:	68bb      	ldr	r3, [r7, #8]
 8102c1c:	2b00      	cmp	r3, #0
 8102c1e:	d147      	bne.n	8102cb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	685b      	ldr	r3, [r3, #4]
 8102c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8102c2c:	68fb      	ldr	r3, [r7, #12]
 8102c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8102c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	699b      	ldr	r3, [r3, #24]
 8102c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c42:	d12e      	bne.n	8102ca2 <I2C_IsErrorOccurred+0xd6>
 8102c44:	697b      	ldr	r3, [r7, #20]
 8102c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102c4a:	d02a      	beq.n	8102ca2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8102c4c:	7cfb      	ldrb	r3, [r7, #19]
 8102c4e:	2b20      	cmp	r3, #32
 8102c50:	d027      	beq.n	8102ca2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102c52:	68fb      	ldr	r3, [r7, #12]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	685a      	ldr	r2, [r3, #4]
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102c60:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8102c62:	f7ff f879 	bl	8101d58 <HAL_GetTick>
 8102c66:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c68:	e01b      	b.n	8102ca2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102c6a:	f7ff f875 	bl	8101d58 <HAL_GetTick>
 8102c6e:	4602      	mov	r2, r0
 8102c70:	69fb      	ldr	r3, [r7, #28]
 8102c72:	1ad3      	subs	r3, r2, r3
 8102c74:	2b19      	cmp	r3, #25
 8102c76:	d914      	bls.n	8102ca2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c78:	68fb      	ldr	r3, [r7, #12]
 8102c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c7c:	f043 0220 	orr.w	r2, r3, #32
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	2220      	movs	r2, #32
 8102c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	2200      	movs	r2, #0
 8102c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	2200      	movs	r2, #0
 8102c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8102c9c:	2301      	movs	r3, #1
 8102c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102ca2:	68fb      	ldr	r3, [r7, #12]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	699b      	ldr	r3, [r3, #24]
 8102ca8:	f003 0320 	and.w	r3, r3, #32
 8102cac:	2b20      	cmp	r3, #32
 8102cae:	d1dc      	bne.n	8102c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	699b      	ldr	r3, [r3, #24]
 8102cb6:	f003 0320 	and.w	r3, r3, #32
 8102cba:	2b20      	cmp	r3, #32
 8102cbc:	d003      	beq.n	8102cc6 <I2C_IsErrorOccurred+0xfa>
 8102cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102cc2:	2b00      	cmp	r3, #0
 8102cc4:	d09d      	beq.n	8102c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8102cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102cca:	2b00      	cmp	r3, #0
 8102ccc:	d103      	bne.n	8102cd6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	2220      	movs	r2, #32
 8102cd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8102cd6:	6a3b      	ldr	r3, [r7, #32]
 8102cd8:	f043 0304 	orr.w	r3, r3, #4
 8102cdc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8102cde:	2301      	movs	r3, #1
 8102ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8102ce4:	68fb      	ldr	r3, [r7, #12]
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	699b      	ldr	r3, [r3, #24]
 8102cea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8102cec:	69bb      	ldr	r3, [r7, #24]
 8102cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102cf2:	2b00      	cmp	r3, #0
 8102cf4:	d00b      	beq.n	8102d0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8102cf6:	6a3b      	ldr	r3, [r7, #32]
 8102cf8:	f043 0301 	orr.w	r3, r3, #1
 8102cfc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8102cfe:	68fb      	ldr	r3, [r7, #12]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102d06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102d08:	2301      	movs	r3, #1
 8102d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8102d0e:	69bb      	ldr	r3, [r7, #24]
 8102d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102d14:	2b00      	cmp	r3, #0
 8102d16:	d00b      	beq.n	8102d30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8102d18:	6a3b      	ldr	r3, [r7, #32]
 8102d1a:	f043 0308 	orr.w	r3, r3, #8
 8102d1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8102d20:	68fb      	ldr	r3, [r7, #12]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102d2a:	2301      	movs	r3, #1
 8102d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8102d30:	69bb      	ldr	r3, [r7, #24]
 8102d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d00b      	beq.n	8102d52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8102d3a:	6a3b      	ldr	r3, [r7, #32]
 8102d3c:	f043 0302 	orr.w	r3, r3, #2
 8102d40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8102d42:	68fb      	ldr	r3, [r7, #12]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102d4c:	2301      	movs	r3, #1
 8102d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8102d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102d56:	2b00      	cmp	r3, #0
 8102d58:	d01c      	beq.n	8102d94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102d5a:	68f8      	ldr	r0, [r7, #12]
 8102d5c:	f7ff fe56 	bl	8102a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102d60:	68fb      	ldr	r3, [r7, #12]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	6859      	ldr	r1, [r3, #4]
 8102d66:	68fb      	ldr	r3, [r7, #12]
 8102d68:	681a      	ldr	r2, [r3, #0]
 8102d6a:	4b0d      	ldr	r3, [pc, #52]	; (8102da0 <I2C_IsErrorOccurred+0x1d4>)
 8102d6c:	400b      	ands	r3, r1
 8102d6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8102d70:	68fb      	ldr	r3, [r7, #12]
 8102d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8102d74:	6a3b      	ldr	r3, [r7, #32]
 8102d76:	431a      	orrs	r2, r3
 8102d78:	68fb      	ldr	r3, [r7, #12]
 8102d7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	2220      	movs	r2, #32
 8102d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d84:	68fb      	ldr	r3, [r7, #12]
 8102d86:	2200      	movs	r2, #0
 8102d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d8c:	68fb      	ldr	r3, [r7, #12]
 8102d8e:	2200      	movs	r2, #0
 8102d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8102d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8102d98:	4618      	mov	r0, r3
 8102d9a:	3728      	adds	r7, #40	; 0x28
 8102d9c:	46bd      	mov	sp, r7
 8102d9e:	bd80      	pop	{r7, pc}
 8102da0:	fe00e800 	.word	0xfe00e800

08102da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102da4:	b480      	push	{r7}
 8102da6:	b087      	sub	sp, #28
 8102da8:	af00      	add	r7, sp, #0
 8102daa:	60f8      	str	r0, [r7, #12]
 8102dac:	607b      	str	r3, [r7, #4]
 8102dae:	460b      	mov	r3, r1
 8102db0:	817b      	strh	r3, [r7, #10]
 8102db2:	4613      	mov	r3, r2
 8102db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102db6:	897b      	ldrh	r3, [r7, #10]
 8102db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102dbc:	7a7b      	ldrb	r3, [r7, #9]
 8102dbe:	041b      	lsls	r3, r3, #16
 8102dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102dc4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102dca:	6a3b      	ldr	r3, [r7, #32]
 8102dcc:	4313      	orrs	r3, r2
 8102dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102dd2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8102dd4:	68fb      	ldr	r3, [r7, #12]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	685a      	ldr	r2, [r3, #4]
 8102dda:	6a3b      	ldr	r3, [r7, #32]
 8102ddc:	0d5b      	lsrs	r3, r3, #21
 8102dde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102de2:	4b08      	ldr	r3, [pc, #32]	; (8102e04 <I2C_TransferConfig+0x60>)
 8102de4:	430b      	orrs	r3, r1
 8102de6:	43db      	mvns	r3, r3
 8102de8:	ea02 0103 	and.w	r1, r2, r3
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	697a      	ldr	r2, [r7, #20]
 8102df2:	430a      	orrs	r2, r1
 8102df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8102df6:	bf00      	nop
 8102df8:	371c      	adds	r7, #28
 8102dfa:	46bd      	mov	sp, r7
 8102dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e00:	4770      	bx	lr
 8102e02:	bf00      	nop
 8102e04:	03ff63ff 	.word	0x03ff63ff

08102e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102e08:	b480      	push	{r7}
 8102e0a:	b083      	sub	sp, #12
 8102e0c:	af00      	add	r7, sp, #0
 8102e0e:	6078      	str	r0, [r7, #4]
 8102e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102e18:	b2db      	uxtb	r3, r3
 8102e1a:	2b20      	cmp	r3, #32
 8102e1c:	d138      	bne.n	8102e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102e24:	2b01      	cmp	r3, #1
 8102e26:	d101      	bne.n	8102e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102e28:	2302      	movs	r3, #2
 8102e2a:	e032      	b.n	8102e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	2201      	movs	r2, #1
 8102e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	2224      	movs	r2, #36	; 0x24
 8102e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	681a      	ldr	r2, [r3, #0]
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	f022 0201 	bic.w	r2, r2, #1
 8102e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	681a      	ldr	r2, [r3, #0]
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	6819      	ldr	r1, [r3, #0]
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	683a      	ldr	r2, [r7, #0]
 8102e68:	430a      	orrs	r2, r1
 8102e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	681a      	ldr	r2, [r3, #0]
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	f042 0201 	orr.w	r2, r2, #1
 8102e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	2220      	movs	r2, #32
 8102e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	2200      	movs	r2, #0
 8102e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102e8c:	2300      	movs	r3, #0
 8102e8e:	e000      	b.n	8102e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102e90:	2302      	movs	r3, #2
  }
}
 8102e92:	4618      	mov	r0, r3
 8102e94:	370c      	adds	r7, #12
 8102e96:	46bd      	mov	sp, r7
 8102e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e9c:	4770      	bx	lr

08102e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102e9e:	b480      	push	{r7}
 8102ea0:	b085      	sub	sp, #20
 8102ea2:	af00      	add	r7, sp, #0
 8102ea4:	6078      	str	r0, [r7, #4]
 8102ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102eae:	b2db      	uxtb	r3, r3
 8102eb0:	2b20      	cmp	r3, #32
 8102eb2:	d139      	bne.n	8102f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102eba:	2b01      	cmp	r3, #1
 8102ebc:	d101      	bne.n	8102ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102ebe:	2302      	movs	r3, #2
 8102ec0:	e033      	b.n	8102f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	2201      	movs	r2, #1
 8102ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	2224      	movs	r2, #36	; 0x24
 8102ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	681a      	ldr	r2, [r3, #0]
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	f022 0201 	bic.w	r2, r2, #1
 8102ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102eea:	68fb      	ldr	r3, [r7, #12]
 8102eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102ef2:	683b      	ldr	r3, [r7, #0]
 8102ef4:	021b      	lsls	r3, r3, #8
 8102ef6:	68fa      	ldr	r2, [r7, #12]
 8102ef8:	4313      	orrs	r3, r2
 8102efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	68fa      	ldr	r2, [r7, #12]
 8102f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	681a      	ldr	r2, [r3, #0]
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	f042 0201 	orr.w	r2, r2, #1
 8102f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	2220      	movs	r2, #32
 8102f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	2200      	movs	r2, #0
 8102f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102f24:	2300      	movs	r3, #0
 8102f26:	e000      	b.n	8102f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102f28:	2302      	movs	r3, #2
  }
}
 8102f2a:	4618      	mov	r0, r3
 8102f2c:	3714      	adds	r7, #20
 8102f2e:	46bd      	mov	sp, r7
 8102f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f34:	4770      	bx	lr
	...

08102f38 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102f38:	b580      	push	{r7, lr}
 8102f3a:	b084      	sub	sp, #16
 8102f3c:	af00      	add	r7, sp, #0
 8102f3e:	60f8      	str	r0, [r7, #12]
 8102f40:	460b      	mov	r3, r1
 8102f42:	607a      	str	r2, [r7, #4]
 8102f44:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102f46:	4b37      	ldr	r3, [pc, #220]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	f023 0201 	bic.w	r2, r3, #1
 8102f4e:	4935      	ldr	r1, [pc, #212]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f50:	68fb      	ldr	r3, [r7, #12]
 8102f52:	4313      	orrs	r3, r2
 8102f54:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	2b00      	cmp	r3, #0
 8102f5a:	d123      	bne.n	8102fa4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102f5c:	f7fe ffec 	bl	8101f38 <HAL_GetCurrentCPUID>
 8102f60:	4603      	mov	r3, r0
 8102f62:	2b03      	cmp	r3, #3
 8102f64:	d158      	bne.n	8103018 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102f66:	4b2f      	ldr	r3, [pc, #188]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f68:	691b      	ldr	r3, [r3, #16]
 8102f6a:	4a2e      	ldr	r2, [pc, #184]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f6c:	f023 0301 	bic.w	r3, r3, #1
 8102f70:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f72:	4b2d      	ldr	r3, [pc, #180]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f74:	691b      	ldr	r3, [r3, #16]
 8102f76:	4a2c      	ldr	r2, [pc, #176]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f78:	f043 0304 	orr.w	r3, r3, #4
 8102f7c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102f7e:	f3bf 8f4f 	dsb	sy
}
 8102f82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f84:	f3bf 8f6f 	isb	sy
}
 8102f88:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f8a:	7afb      	ldrb	r3, [r7, #11]
 8102f8c:	2b01      	cmp	r3, #1
 8102f8e:	d101      	bne.n	8102f94 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f90:	bf30      	wfi
 8102f92:	e000      	b.n	8102f96 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f94:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f96:	4b24      	ldr	r3, [pc, #144]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f98:	691b      	ldr	r3, [r3, #16]
 8102f9a:	4a23      	ldr	r2, [pc, #140]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f9c:	f023 0304 	bic.w	r3, r3, #4
 8102fa0:	6113      	str	r3, [r2, #16]
 8102fa2:	e03c      	b.n	810301e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	2b01      	cmp	r3, #1
 8102fa8:	d123      	bne.n	8102ff2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102faa:	f7fe ffc5 	bl	8101f38 <HAL_GetCurrentCPUID>
 8102fae:	4603      	mov	r3, r0
 8102fb0:	2b01      	cmp	r3, #1
 8102fb2:	d133      	bne.n	810301c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102fb4:	4b1b      	ldr	r3, [pc, #108]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fb6:	695b      	ldr	r3, [r3, #20]
 8102fb8:	4a1a      	ldr	r2, [pc, #104]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fba:	f023 0302 	bic.w	r3, r3, #2
 8102fbe:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fc0:	4b19      	ldr	r3, [pc, #100]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fc2:	691b      	ldr	r3, [r3, #16]
 8102fc4:	4a18      	ldr	r2, [pc, #96]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fc6:	f043 0304 	orr.w	r3, r3, #4
 8102fca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102fcc:	f3bf 8f4f 	dsb	sy
}
 8102fd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102fd2:	f3bf 8f6f 	isb	sy
}
 8102fd6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102fd8:	7afb      	ldrb	r3, [r7, #11]
 8102fda:	2b01      	cmp	r3, #1
 8102fdc:	d101      	bne.n	8102fe2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102fde:	bf30      	wfi
 8102fe0:	e000      	b.n	8102fe4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102fe2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fe4:	4b10      	ldr	r3, [pc, #64]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fe6:	691b      	ldr	r3, [r3, #16]
 8102fe8:	4a0f      	ldr	r2, [pc, #60]	; (8103028 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fea:	f023 0304 	bic.w	r3, r3, #4
 8102fee:	6113      	str	r3, [r2, #16]
 8102ff0:	e015      	b.n	810301e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ff2:	f7fe ffa1 	bl	8101f38 <HAL_GetCurrentCPUID>
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	2b03      	cmp	r3, #3
 8102ffa:	d106      	bne.n	810300a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102ffc:	4b09      	ldr	r3, [pc, #36]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ffe:	691b      	ldr	r3, [r3, #16]
 8103000:	4a08      	ldr	r2, [pc, #32]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103002:	f023 0304 	bic.w	r3, r3, #4
 8103006:	6113      	str	r3, [r2, #16]
 8103008:	e009      	b.n	810301e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810300a:	4b06      	ldr	r3, [pc, #24]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 810300c:	695b      	ldr	r3, [r3, #20]
 810300e:	4a05      	ldr	r2, [pc, #20]	; (8103024 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103010:	f023 0304 	bic.w	r3, r3, #4
 8103014:	6153      	str	r3, [r2, #20]
 8103016:	e002      	b.n	810301e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103018:	bf00      	nop
 810301a:	e000      	b.n	810301e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810301c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810301e:	3710      	adds	r7, #16
 8103020:	46bd      	mov	sp, r7
 8103022:	bd80      	pop	{r7, pc}
 8103024:	58024800 	.word	0x58024800
 8103028:	e000ed00 	.word	0xe000ed00

0810302c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810302c:	b580      	push	{r7, lr}
 810302e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103030:	f7fe ff82 	bl	8101f38 <HAL_GetCurrentCPUID>
 8103034:	4603      	mov	r3, r0
 8103036:	2b03      	cmp	r3, #3
 8103038:	d101      	bne.n	810303e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810303a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810303c:	e001      	b.n	8103042 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810303e:	bf40      	sev
    __WFE ();
 8103040:	bf20      	wfe
}
 8103042:	bf00      	nop
 8103044:	bd80      	pop	{r7, pc}
	...

08103048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103048:	b480      	push	{r7}
 810304a:	b089      	sub	sp, #36	; 0x24
 810304c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810304e:	4bb3      	ldr	r3, [pc, #716]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103050:	691b      	ldr	r3, [r3, #16]
 8103052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103056:	2b18      	cmp	r3, #24
 8103058:	f200 8155 	bhi.w	8103306 <HAL_RCC_GetSysClockFreq+0x2be>
 810305c:	a201      	add	r2, pc, #4	; (adr r2, 8103064 <HAL_RCC_GetSysClockFreq+0x1c>)
 810305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103062:	bf00      	nop
 8103064:	081030c9 	.word	0x081030c9
 8103068:	08103307 	.word	0x08103307
 810306c:	08103307 	.word	0x08103307
 8103070:	08103307 	.word	0x08103307
 8103074:	08103307 	.word	0x08103307
 8103078:	08103307 	.word	0x08103307
 810307c:	08103307 	.word	0x08103307
 8103080:	08103307 	.word	0x08103307
 8103084:	081030ef 	.word	0x081030ef
 8103088:	08103307 	.word	0x08103307
 810308c:	08103307 	.word	0x08103307
 8103090:	08103307 	.word	0x08103307
 8103094:	08103307 	.word	0x08103307
 8103098:	08103307 	.word	0x08103307
 810309c:	08103307 	.word	0x08103307
 81030a0:	08103307 	.word	0x08103307
 81030a4:	081030f5 	.word	0x081030f5
 81030a8:	08103307 	.word	0x08103307
 81030ac:	08103307 	.word	0x08103307
 81030b0:	08103307 	.word	0x08103307
 81030b4:	08103307 	.word	0x08103307
 81030b8:	08103307 	.word	0x08103307
 81030bc:	08103307 	.word	0x08103307
 81030c0:	08103307 	.word	0x08103307
 81030c4:	081030fb 	.word	0x081030fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81030c8:	4b94      	ldr	r3, [pc, #592]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	f003 0320 	and.w	r3, r3, #32
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d009      	beq.n	81030e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81030d4:	4b91      	ldr	r3, [pc, #580]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	08db      	lsrs	r3, r3, #3
 81030da:	f003 0303 	and.w	r3, r3, #3
 81030de:	4a90      	ldr	r2, [pc, #576]	; (8103320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030e0:	fa22 f303 	lsr.w	r3, r2, r3
 81030e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81030e6:	e111      	b.n	810330c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81030e8:	4b8d      	ldr	r3, [pc, #564]	; (8103320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030ea:	61bb      	str	r3, [r7, #24]
    break;
 81030ec:	e10e      	b.n	810330c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81030ee:	4b8d      	ldr	r3, [pc, #564]	; (8103324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81030f0:	61bb      	str	r3, [r7, #24]
    break;
 81030f2:	e10b      	b.n	810330c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81030f4:	4b8c      	ldr	r3, [pc, #560]	; (8103328 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81030f6:	61bb      	str	r3, [r7, #24]
    break;
 81030f8:	e108      	b.n	810330c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81030fa:	4b88      	ldr	r3, [pc, #544]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030fe:	f003 0303 	and.w	r3, r3, #3
 8103102:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103104:	4b85      	ldr	r3, [pc, #532]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103108:	091b      	lsrs	r3, r3, #4
 810310a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810310e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103110:	4b82      	ldr	r3, [pc, #520]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103114:	f003 0301 	and.w	r3, r3, #1
 8103118:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810311a:	4b80      	ldr	r3, [pc, #512]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810311e:	08db      	lsrs	r3, r3, #3
 8103120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103124:	68fa      	ldr	r2, [r7, #12]
 8103126:	fb02 f303 	mul.w	r3, r2, r3
 810312a:	ee07 3a90 	vmov	s15, r3
 810312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103132:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103136:	693b      	ldr	r3, [r7, #16]
 8103138:	2b00      	cmp	r3, #0
 810313a:	f000 80e1 	beq.w	8103300 <HAL_RCC_GetSysClockFreq+0x2b8>
 810313e:	697b      	ldr	r3, [r7, #20]
 8103140:	2b02      	cmp	r3, #2
 8103142:	f000 8083 	beq.w	810324c <HAL_RCC_GetSysClockFreq+0x204>
 8103146:	697b      	ldr	r3, [r7, #20]
 8103148:	2b02      	cmp	r3, #2
 810314a:	f200 80a1 	bhi.w	8103290 <HAL_RCC_GetSysClockFreq+0x248>
 810314e:	697b      	ldr	r3, [r7, #20]
 8103150:	2b00      	cmp	r3, #0
 8103152:	d003      	beq.n	810315c <HAL_RCC_GetSysClockFreq+0x114>
 8103154:	697b      	ldr	r3, [r7, #20]
 8103156:	2b01      	cmp	r3, #1
 8103158:	d056      	beq.n	8103208 <HAL_RCC_GetSysClockFreq+0x1c0>
 810315a:	e099      	b.n	8103290 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810315c:	4b6f      	ldr	r3, [pc, #444]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	f003 0320 	and.w	r3, r3, #32
 8103164:	2b00      	cmp	r3, #0
 8103166:	d02d      	beq.n	81031c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103168:	4b6c      	ldr	r3, [pc, #432]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	08db      	lsrs	r3, r3, #3
 810316e:	f003 0303 	and.w	r3, r3, #3
 8103172:	4a6b      	ldr	r2, [pc, #428]	; (8103320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103174:	fa22 f303 	lsr.w	r3, r2, r3
 8103178:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	ee07 3a90 	vmov	s15, r3
 8103180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103184:	693b      	ldr	r3, [r7, #16]
 8103186:	ee07 3a90 	vmov	s15, r3
 810318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103192:	4b62      	ldr	r3, [pc, #392]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810319a:	ee07 3a90 	vmov	s15, r3
 810319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81031a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810332c <HAL_RCC_GetSysClockFreq+0x2e4>
 81031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81031c2:	e087      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81031c4:	693b      	ldr	r3, [r7, #16]
 81031c6:	ee07 3a90 	vmov	s15, r3
 81031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103330 <HAL_RCC_GetSysClockFreq+0x2e8>
 81031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031d6:	4b51      	ldr	r3, [pc, #324]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031de:	ee07 3a90 	vmov	s15, r3
 81031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81031ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 810332c <HAL_RCC_GetSysClockFreq+0x2e4>
 81031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103206:	e065      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103208:	693b      	ldr	r3, [r7, #16]
 810320a:	ee07 3a90 	vmov	s15, r3
 810320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103212:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103334 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810321a:	4b40      	ldr	r3, [pc, #256]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103222:	ee07 3a90 	vmov	s15, r3
 8103226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810322a:	ed97 6a02 	vldr	s12, [r7, #8]
 810322e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810332c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810323a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810324a:	e043      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810324c:	693b      	ldr	r3, [r7, #16]
 810324e:	ee07 3a90 	vmov	s15, r3
 8103252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103256:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103338 <HAL_RCC_GetSysClockFreq+0x2f0>
 810325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810325e:	4b2f      	ldr	r3, [pc, #188]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103266:	ee07 3a90 	vmov	s15, r3
 810326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103272:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810332c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810327e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103286:	ee67 7a27 	vmul.f32	s15, s14, s15
 810328a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810328e:	e021      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103290:	693b      	ldr	r3, [r7, #16]
 8103292:	ee07 3a90 	vmov	s15, r3
 8103296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810329a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103334 <HAL_RCC_GetSysClockFreq+0x2ec>
 810329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032a2:	4b1e      	ldr	r3, [pc, #120]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032aa:	ee07 3a90 	vmov	s15, r3
 81032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81032b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810332c <HAL_RCC_GetSysClockFreq+0x2e4>
 81032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81032d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81032d4:	4b11      	ldr	r3, [pc, #68]	; (810331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81032d8:	0a5b      	lsrs	r3, r3, #9
 81032da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032de:	3301      	adds	r3, #1
 81032e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81032e2:	683b      	ldr	r3, [r7, #0]
 81032e4:	ee07 3a90 	vmov	s15, r3
 81032e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81032ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032f8:	ee17 3a90 	vmov	r3, s15
 81032fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81032fe:	e005      	b.n	810330c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103300:	2300      	movs	r3, #0
 8103302:	61bb      	str	r3, [r7, #24]
    break;
 8103304:	e002      	b.n	810330c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103306:	4b07      	ldr	r3, [pc, #28]	; (8103324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103308:	61bb      	str	r3, [r7, #24]
    break;
 810330a:	bf00      	nop
  }

  return sysclockfreq;
 810330c:	69bb      	ldr	r3, [r7, #24]
}
 810330e:	4618      	mov	r0, r3
 8103310:	3724      	adds	r7, #36	; 0x24
 8103312:	46bd      	mov	sp, r7
 8103314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103318:	4770      	bx	lr
 810331a:	bf00      	nop
 810331c:	58024400 	.word	0x58024400
 8103320:	03d09000 	.word	0x03d09000
 8103324:	003d0900 	.word	0x003d0900
 8103328:	007a1200 	.word	0x007a1200
 810332c:	46000000 	.word	0x46000000
 8103330:	4c742400 	.word	0x4c742400
 8103334:	4a742400 	.word	0x4a742400
 8103338:	4af42400 	.word	0x4af42400

0810333c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810333c:	b580      	push	{r7, lr}
 810333e:	b086      	sub	sp, #24
 8103340:	af00      	add	r7, sp, #0
 8103342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103344:	2300      	movs	r3, #0
 8103346:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103348:	2300      	movs	r3, #0
 810334a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103354:	2b00      	cmp	r3, #0
 8103356:	d03f      	beq.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810335c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103360:	d02a      	beq.n	81033b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103366:	d824      	bhi.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810336c:	d018      	beq.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810336e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103372:	d81e      	bhi.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103374:	2b00      	cmp	r3, #0
 8103376:	d003      	beq.n	8103380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810337c:	d007      	beq.n	810338e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810337e:	e018      	b.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103380:	4bab      	ldr	r3, [pc, #684]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103384:	4aaa      	ldr	r2, [pc, #680]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810338a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810338c:	e015      	b.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	3304      	adds	r3, #4
 8103392:	2102      	movs	r1, #2
 8103394:	4618      	mov	r0, r3
 8103396:	f000 ff11 	bl	81041bc <RCCEx_PLL2_Config>
 810339a:	4603      	mov	r3, r0
 810339c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810339e:	e00c      	b.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	3324      	adds	r3, #36	; 0x24
 81033a4:	2102      	movs	r1, #2
 81033a6:	4618      	mov	r0, r3
 81033a8:	f000 ffba 	bl	8104320 <RCCEx_PLL3_Config>
 81033ac:	4603      	mov	r3, r0
 81033ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81033b0:	e003      	b.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033b2:	2301      	movs	r3, #1
 81033b4:	75fb      	strb	r3, [r7, #23]
      break;
 81033b6:	e000      	b.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81033b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033ba:	7dfb      	ldrb	r3, [r7, #23]
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d109      	bne.n	81033d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81033c0:	4b9b      	ldr	r3, [pc, #620]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81033cc:	4998      	ldr	r1, [pc, #608]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033ce:	4313      	orrs	r3, r2
 81033d0:	650b      	str	r3, [r1, #80]	; 0x50
 81033d2:	e001      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033d4:	7dfb      	ldrb	r3, [r7, #23]
 81033d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81033e0:	2b00      	cmp	r3, #0
 81033e2:	d03d      	beq.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033e8:	2b04      	cmp	r3, #4
 81033ea:	d826      	bhi.n	810343a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81033ec:	a201      	add	r2, pc, #4	; (adr r2, 81033f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033f2:	bf00      	nop
 81033f4:	08103409 	.word	0x08103409
 81033f8:	08103417 	.word	0x08103417
 81033fc:	08103429 	.word	0x08103429
 8103400:	08103441 	.word	0x08103441
 8103404:	08103441 	.word	0x08103441
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103408:	4b89      	ldr	r3, [pc, #548]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810340c:	4a88      	ldr	r2, [pc, #544]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810340e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103414:	e015      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	3304      	adds	r3, #4
 810341a:	2100      	movs	r1, #0
 810341c:	4618      	mov	r0, r3
 810341e:	f000 fecd 	bl	81041bc <RCCEx_PLL2_Config>
 8103422:	4603      	mov	r3, r0
 8103424:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103426:	e00c      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	3324      	adds	r3, #36	; 0x24
 810342c:	2100      	movs	r1, #0
 810342e:	4618      	mov	r0, r3
 8103430:	f000 ff76 	bl	8104320 <RCCEx_PLL3_Config>
 8103434:	4603      	mov	r3, r0
 8103436:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103438:	e003      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810343a:	2301      	movs	r3, #1
 810343c:	75fb      	strb	r3, [r7, #23]
      break;
 810343e:	e000      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103442:	7dfb      	ldrb	r3, [r7, #23]
 8103444:	2b00      	cmp	r3, #0
 8103446:	d109      	bne.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103448:	4b79      	ldr	r3, [pc, #484]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810344c:	f023 0207 	bic.w	r2, r3, #7
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103454:	4976      	ldr	r1, [pc, #472]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103456:	4313      	orrs	r3, r2
 8103458:	650b      	str	r3, [r1, #80]	; 0x50
 810345a:	e001      	b.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810345c:	7dfb      	ldrb	r3, [r7, #23]
 810345e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103468:	2b00      	cmp	r3, #0
 810346a:	d042      	beq.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103474:	d02b      	beq.n	81034ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810347a:	d825      	bhi.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810347c:	2bc0      	cmp	r3, #192	; 0xc0
 810347e:	d028      	beq.n	81034d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103480:	2bc0      	cmp	r3, #192	; 0xc0
 8103482:	d821      	bhi.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103484:	2b80      	cmp	r3, #128	; 0x80
 8103486:	d016      	beq.n	81034b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103488:	2b80      	cmp	r3, #128	; 0x80
 810348a:	d81d      	bhi.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810348c:	2b00      	cmp	r3, #0
 810348e:	d002      	beq.n	8103496 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103490:	2b40      	cmp	r3, #64	; 0x40
 8103492:	d007      	beq.n	81034a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103494:	e018      	b.n	81034c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103496:	4b66      	ldr	r3, [pc, #408]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810349a:	4a65      	ldr	r2, [pc, #404]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810349c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81034a2:	e017      	b.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	3304      	adds	r3, #4
 81034a8:	2100      	movs	r1, #0
 81034aa:	4618      	mov	r0, r3
 81034ac:	f000 fe86 	bl	81041bc <RCCEx_PLL2_Config>
 81034b0:	4603      	mov	r3, r0
 81034b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81034b4:	e00e      	b.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	3324      	adds	r3, #36	; 0x24
 81034ba:	2100      	movs	r1, #0
 81034bc:	4618      	mov	r0, r3
 81034be:	f000 ff2f 	bl	8104320 <RCCEx_PLL3_Config>
 81034c2:	4603      	mov	r3, r0
 81034c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81034c6:	e005      	b.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034c8:	2301      	movs	r3, #1
 81034ca:	75fb      	strb	r3, [r7, #23]
      break;
 81034cc:	e002      	b.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81034ce:	bf00      	nop
 81034d0:	e000      	b.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034d4:	7dfb      	ldrb	r3, [r7, #23]
 81034d6:	2b00      	cmp	r3, #0
 81034d8:	d109      	bne.n	81034ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81034da:	4b55      	ldr	r3, [pc, #340]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034e6:	4952      	ldr	r1, [pc, #328]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034e8:	4313      	orrs	r3, r2
 81034ea:	650b      	str	r3, [r1, #80]	; 0x50
 81034ec:	e001      	b.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034ee:	7dfb      	ldrb	r3, [r7, #23]
 81034f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81034fa:	2b00      	cmp	r3, #0
 81034fc:	d049      	beq.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103508:	d030      	beq.n	810356c <HAL_RCCEx_PeriphCLKConfig+0x230>
 810350a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810350e:	d82a      	bhi.n	8103566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103510:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103514:	d02c      	beq.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103516:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810351a:	d824      	bhi.n	8103566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810351c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103520:	d018      	beq.n	8103554 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103526:	d81e      	bhi.n	8103566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103528:	2b00      	cmp	r3, #0
 810352a:	d003      	beq.n	8103534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810352c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103530:	d007      	beq.n	8103542 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103532:	e018      	b.n	8103566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103534:	4b3e      	ldr	r3, [pc, #248]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103538:	4a3d      	ldr	r2, [pc, #244]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810353e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103540:	e017      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	3304      	adds	r3, #4
 8103546:	2100      	movs	r1, #0
 8103548:	4618      	mov	r0, r3
 810354a:	f000 fe37 	bl	81041bc <RCCEx_PLL2_Config>
 810354e:	4603      	mov	r3, r0
 8103550:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103552:	e00e      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	3324      	adds	r3, #36	; 0x24
 8103558:	2100      	movs	r1, #0
 810355a:	4618      	mov	r0, r3
 810355c:	f000 fee0 	bl	8104320 <RCCEx_PLL3_Config>
 8103560:	4603      	mov	r3, r0
 8103562:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103564:	e005      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103566:	2301      	movs	r3, #1
 8103568:	75fb      	strb	r3, [r7, #23]
      break;
 810356a:	e002      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810356c:	bf00      	nop
 810356e:	e000      	b.n	8103572 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103572:	7dfb      	ldrb	r3, [r7, #23]
 8103574:	2b00      	cmp	r3, #0
 8103576:	d10a      	bne.n	810358e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103578:	4b2d      	ldr	r3, [pc, #180]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810357c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103586:	492a      	ldr	r1, [pc, #168]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103588:	4313      	orrs	r3, r2
 810358a:	658b      	str	r3, [r1, #88]	; 0x58
 810358c:	e001      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810358e:	7dfb      	ldrb	r3, [r7, #23]
 8103590:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	681b      	ldr	r3, [r3, #0]
 8103596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810359a:	2b00      	cmp	r3, #0
 810359c:	d04c      	beq.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81035a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81035a8:	d030      	beq.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81035aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81035ae:	d82a      	bhi.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81035b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81035b4:	d02c      	beq.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81035b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81035ba:	d824      	bhi.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81035bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81035c0:	d018      	beq.n	81035f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81035c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81035c6:	d81e      	bhi.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81035c8:	2b00      	cmp	r3, #0
 81035ca:	d003      	beq.n	81035d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81035cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81035d0:	d007      	beq.n	81035e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81035d2:	e018      	b.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035d4:	4b16      	ldr	r3, [pc, #88]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035d8:	4a15      	ldr	r2, [pc, #84]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81035e0:	e017      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	3304      	adds	r3, #4
 81035e6:	2100      	movs	r1, #0
 81035e8:	4618      	mov	r0, r3
 81035ea:	f000 fde7 	bl	81041bc <RCCEx_PLL2_Config>
 81035ee:	4603      	mov	r3, r0
 81035f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81035f2:	e00e      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	3324      	adds	r3, #36	; 0x24
 81035f8:	2100      	movs	r1, #0
 81035fa:	4618      	mov	r0, r3
 81035fc:	f000 fe90 	bl	8104320 <RCCEx_PLL3_Config>
 8103600:	4603      	mov	r3, r0
 8103602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103604:	e005      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103606:	2301      	movs	r3, #1
 8103608:	75fb      	strb	r3, [r7, #23]
      break;
 810360a:	e002      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810360c:	bf00      	nop
 810360e:	e000      	b.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103612:	7dfb      	ldrb	r3, [r7, #23]
 8103614:	2b00      	cmp	r3, #0
 8103616:	d10d      	bne.n	8103634 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103618:	4b05      	ldr	r3, [pc, #20]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810361c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103626:	4902      	ldr	r1, [pc, #8]	; (8103630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103628:	4313      	orrs	r3, r2
 810362a:	658b      	str	r3, [r1, #88]	; 0x58
 810362c:	e004      	b.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810362e:	bf00      	nop
 8103630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103634:	7dfb      	ldrb	r3, [r7, #23]
 8103636:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103640:	2b00      	cmp	r3, #0
 8103642:	d032      	beq.n	81036aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103648:	2b30      	cmp	r3, #48	; 0x30
 810364a:	d01c      	beq.n	8103686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810364c:	2b30      	cmp	r3, #48	; 0x30
 810364e:	d817      	bhi.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103650:	2b20      	cmp	r3, #32
 8103652:	d00c      	beq.n	810366e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103654:	2b20      	cmp	r3, #32
 8103656:	d813      	bhi.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103658:	2b00      	cmp	r3, #0
 810365a:	d016      	beq.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810365c:	2b10      	cmp	r3, #16
 810365e:	d10f      	bne.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103660:	4baf      	ldr	r3, [pc, #700]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103664:	4aae      	ldr	r2, [pc, #696]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810366a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810366c:	e00e      	b.n	810368c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	3304      	adds	r3, #4
 8103672:	2102      	movs	r1, #2
 8103674:	4618      	mov	r0, r3
 8103676:	f000 fda1 	bl	81041bc <RCCEx_PLL2_Config>
 810367a:	4603      	mov	r3, r0
 810367c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810367e:	e005      	b.n	810368c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103680:	2301      	movs	r3, #1
 8103682:	75fb      	strb	r3, [r7, #23]
      break;
 8103684:	e002      	b.n	810368c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103686:	bf00      	nop
 8103688:	e000      	b.n	810368c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810368a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810368c:	7dfb      	ldrb	r3, [r7, #23]
 810368e:	2b00      	cmp	r3, #0
 8103690:	d109      	bne.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103692:	4ba3      	ldr	r3, [pc, #652]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810369a:	687b      	ldr	r3, [r7, #4]
 810369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810369e:	49a0      	ldr	r1, [pc, #640]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036a0:	4313      	orrs	r3, r2
 81036a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81036a4:	e001      	b.n	81036aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036a6:	7dfb      	ldrb	r3, [r7, #23]
 81036a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81036b2:	2b00      	cmp	r3, #0
 81036b4:	d047      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81036be:	d030      	beq.n	8103722 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81036c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81036c4:	d82a      	bhi.n	810371c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81036c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81036ca:	d02c      	beq.n	8103726 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81036cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81036d0:	d824      	bhi.n	810371c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81036d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81036d6:	d018      	beq.n	810370a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81036d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81036dc:	d81e      	bhi.n	810371c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81036de:	2b00      	cmp	r3, #0
 81036e0:	d003      	beq.n	81036ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81036e6:	d007      	beq.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81036e8:	e018      	b.n	810371c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036ea:	4b8d      	ldr	r3, [pc, #564]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036ee:	4a8c      	ldr	r2, [pc, #560]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81036f6:	e017      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	3304      	adds	r3, #4
 81036fc:	2100      	movs	r1, #0
 81036fe:	4618      	mov	r0, r3
 8103700:	f000 fd5c 	bl	81041bc <RCCEx_PLL2_Config>
 8103704:	4603      	mov	r3, r0
 8103706:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103708:	e00e      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	3324      	adds	r3, #36	; 0x24
 810370e:	2100      	movs	r1, #0
 8103710:	4618      	mov	r0, r3
 8103712:	f000 fe05 	bl	8104320 <RCCEx_PLL3_Config>
 8103716:	4603      	mov	r3, r0
 8103718:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810371a:	e005      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810371c:	2301      	movs	r3, #1
 810371e:	75fb      	strb	r3, [r7, #23]
      break;
 8103720:	e002      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103722:	bf00      	nop
 8103724:	e000      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103728:	7dfb      	ldrb	r3, [r7, #23]
 810372a:	2b00      	cmp	r3, #0
 810372c:	d109      	bne.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810372e:	4b7c      	ldr	r3, [pc, #496]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103732:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810373a:	4979      	ldr	r1, [pc, #484]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810373c:	4313      	orrs	r3, r2
 810373e:	650b      	str	r3, [r1, #80]	; 0x50
 8103740:	e001      	b.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103742:	7dfb      	ldrb	r3, [r7, #23]
 8103744:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810374e:	2b00      	cmp	r3, #0
 8103750:	d049      	beq.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810375a:	d02e      	beq.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103760:	d828      	bhi.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103766:	d02a      	beq.n	81037be <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810376c:	d822      	bhi.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810376e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103772:	d026      	beq.n	81037c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103778:	d81c      	bhi.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810377a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810377e:	d010      	beq.n	81037a2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103784:	d816      	bhi.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103786:	2b00      	cmp	r3, #0
 8103788:	d01d      	beq.n	81037c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810378e:	d111      	bne.n	81037b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	3304      	adds	r3, #4
 8103794:	2101      	movs	r1, #1
 8103796:	4618      	mov	r0, r3
 8103798:	f000 fd10 	bl	81041bc <RCCEx_PLL2_Config>
 810379c:	4603      	mov	r3, r0
 810379e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81037a0:	e012      	b.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	3324      	adds	r3, #36	; 0x24
 81037a6:	2101      	movs	r1, #1
 81037a8:	4618      	mov	r0, r3
 81037aa:	f000 fdb9 	bl	8104320 <RCCEx_PLL3_Config>
 81037ae:	4603      	mov	r3, r0
 81037b0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81037b2:	e009      	b.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037b4:	2301      	movs	r3, #1
 81037b6:	75fb      	strb	r3, [r7, #23]
      break;
 81037b8:	e006      	b.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81037ba:	bf00      	nop
 81037bc:	e004      	b.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81037be:	bf00      	nop
 81037c0:	e002      	b.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81037c2:	bf00      	nop
 81037c4:	e000      	b.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81037c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037c8:	7dfb      	ldrb	r3, [r7, #23]
 81037ca:	2b00      	cmp	r3, #0
 81037cc:	d109      	bne.n	81037e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81037ce:	4b54      	ldr	r3, [pc, #336]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037d2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037da:	4951      	ldr	r1, [pc, #324]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037dc:	4313      	orrs	r3, r2
 81037de:	650b      	str	r3, [r1, #80]	; 0x50
 81037e0:	e001      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037e2:	7dfb      	ldrb	r3, [r7, #23]
 81037e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	d04b      	beq.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81037f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81037fc:	d02e      	beq.n	810385c <HAL_RCCEx_PeriphCLKConfig+0x520>
 81037fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103802:	d828      	bhi.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103808:	d02a      	beq.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810380e:	d822      	bhi.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103814:	d026      	beq.n	8103864 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810381a:	d81c      	bhi.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810381c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103820:	d010      	beq.n	8103844 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103826:	d816      	bhi.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103828:	2b00      	cmp	r3, #0
 810382a:	d01d      	beq.n	8103868 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810382c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103830:	d111      	bne.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	3304      	adds	r3, #4
 8103836:	2101      	movs	r1, #1
 8103838:	4618      	mov	r0, r3
 810383a:	f000 fcbf 	bl	81041bc <RCCEx_PLL2_Config>
 810383e:	4603      	mov	r3, r0
 8103840:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103842:	e012      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	3324      	adds	r3, #36	; 0x24
 8103848:	2101      	movs	r1, #1
 810384a:	4618      	mov	r0, r3
 810384c:	f000 fd68 	bl	8104320 <RCCEx_PLL3_Config>
 8103850:	4603      	mov	r3, r0
 8103852:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103854:	e009      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103856:	2301      	movs	r3, #1
 8103858:	75fb      	strb	r3, [r7, #23]
      break;
 810385a:	e006      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810385c:	bf00      	nop
 810385e:	e004      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103860:	bf00      	nop
 8103862:	e002      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103864:	bf00      	nop
 8103866:	e000      	b.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103868:	bf00      	nop
    }

    if(ret == HAL_OK)
 810386a:	7dfb      	ldrb	r3, [r7, #23]
 810386c:	2b00      	cmp	r3, #0
 810386e:	d10a      	bne.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103870:	4b2b      	ldr	r3, [pc, #172]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103874:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810387e:	4928      	ldr	r1, [pc, #160]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103880:	4313      	orrs	r3, r2
 8103882:	658b      	str	r3, [r1, #88]	; 0x58
 8103884:	e001      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103886:	7dfb      	ldrb	r3, [r7, #23]
 8103888:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103892:	2b00      	cmp	r3, #0
 8103894:	d02f      	beq.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810389a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810389e:	d00e      	beq.n	81038be <HAL_RCCEx_PeriphCLKConfig+0x582>
 81038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038a4:	d814      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81038a6:	2b00      	cmp	r3, #0
 81038a8:	d015      	beq.n	81038d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81038aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81038ae:	d10f      	bne.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038b0:	4b1b      	ldr	r3, [pc, #108]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038b4:	4a1a      	ldr	r2, [pc, #104]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81038b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81038bc:	e00c      	b.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	3304      	adds	r3, #4
 81038c2:	2101      	movs	r1, #1
 81038c4:	4618      	mov	r0, r3
 81038c6:	f000 fc79 	bl	81041bc <RCCEx_PLL2_Config>
 81038ca:	4603      	mov	r3, r0
 81038cc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81038ce:	e003      	b.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81038d0:	2301      	movs	r3, #1
 81038d2:	75fb      	strb	r3, [r7, #23]
      break;
 81038d4:	e000      	b.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81038d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038d8:	7dfb      	ldrb	r3, [r7, #23]
 81038da:	2b00      	cmp	r3, #0
 81038dc:	d109      	bne.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81038de:	4b10      	ldr	r3, [pc, #64]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81038ea:	490d      	ldr	r1, [pc, #52]	; (8103920 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81038ec:	4313      	orrs	r3, r2
 81038ee:	650b      	str	r3, [r1, #80]	; 0x50
 81038f0:	e001      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038f2:	7dfb      	ldrb	r3, [r7, #23]
 81038f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	681b      	ldr	r3, [r3, #0]
 81038fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81038fe:	2b00      	cmp	r3, #0
 8103900:	d033      	beq.n	810396a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103906:	2b03      	cmp	r3, #3
 8103908:	d81c      	bhi.n	8103944 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810390a:	a201      	add	r2, pc, #4	; (adr r2, 8103910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103910:	0810394b 	.word	0x0810394b
 8103914:	08103925 	.word	0x08103925
 8103918:	08103933 	.word	0x08103933
 810391c:	0810394b 	.word	0x0810394b
 8103920:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103924:	4bb9      	ldr	r3, [pc, #740]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103928:	4ab8      	ldr	r2, [pc, #736]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810392a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810392e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103930:	e00c      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	3304      	adds	r3, #4
 8103936:	2102      	movs	r1, #2
 8103938:	4618      	mov	r0, r3
 810393a:	f000 fc3f 	bl	81041bc <RCCEx_PLL2_Config>
 810393e:	4603      	mov	r3, r0
 8103940:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103942:	e003      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103944:	2301      	movs	r3, #1
 8103946:	75fb      	strb	r3, [r7, #23]
      break;
 8103948:	e000      	b.n	810394c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810394c:	7dfb      	ldrb	r3, [r7, #23]
 810394e:	2b00      	cmp	r3, #0
 8103950:	d109      	bne.n	8103966 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103952:	4bae      	ldr	r3, [pc, #696]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103956:	f023 0203 	bic.w	r2, r3, #3
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810395e:	49ab      	ldr	r1, [pc, #684]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103960:	4313      	orrs	r3, r2
 8103962:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103964:	e001      	b.n	810396a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103966:	7dfb      	ldrb	r3, [r7, #23]
 8103968:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103972:	2b00      	cmp	r3, #0
 8103974:	f000 8088 	beq.w	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103978:	4ba5      	ldr	r3, [pc, #660]	; (8103c10 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	4aa4      	ldr	r2, [pc, #656]	; (8103c10 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103984:	f7fe f9e8 	bl	8101d58 <HAL_GetTick>
 8103988:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810398a:	e009      	b.n	81039a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810398c:	f7fe f9e4 	bl	8101d58 <HAL_GetTick>
 8103990:	4602      	mov	r2, r0
 8103992:	693b      	ldr	r3, [r7, #16]
 8103994:	1ad3      	subs	r3, r2, r3
 8103996:	2b64      	cmp	r3, #100	; 0x64
 8103998:	d902      	bls.n	81039a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810399a:	2303      	movs	r3, #3
 810399c:	75fb      	strb	r3, [r7, #23]
        break;
 810399e:	e005      	b.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81039a0:	4b9b      	ldr	r3, [pc, #620]	; (8103c10 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81039a8:	2b00      	cmp	r3, #0
 81039aa:	d0ef      	beq.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81039ac:	7dfb      	ldrb	r3, [r7, #23]
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d168      	bne.n	8103a84 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81039b2:	4b96      	ldr	r3, [pc, #600]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81039bc:	4053      	eors	r3, r2
 81039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	d013      	beq.n	81039ee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81039c6:	4b91      	ldr	r3, [pc, #580]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81039ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81039ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81039d0:	4b8e      	ldr	r3, [pc, #568]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81039d4:	4a8d      	ldr	r2, [pc, #564]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81039da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81039dc:	4b8b      	ldr	r3, [pc, #556]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81039e0:	4a8a      	ldr	r2, [pc, #552]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81039e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81039e8:	4a88      	ldr	r2, [pc, #544]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039ea:	68fb      	ldr	r3, [r7, #12]
 81039ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81039f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81039f8:	d115      	bne.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81039fa:	f7fe f9ad 	bl	8101d58 <HAL_GetTick>
 81039fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103a00:	e00b      	b.n	8103a1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103a02:	f7fe f9a9 	bl	8101d58 <HAL_GetTick>
 8103a06:	4602      	mov	r2, r0
 8103a08:	693b      	ldr	r3, [r7, #16]
 8103a0a:	1ad3      	subs	r3, r2, r3
 8103a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8103a10:	4293      	cmp	r3, r2
 8103a12:	d902      	bls.n	8103a1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103a14:	2303      	movs	r3, #3
 8103a16:	75fb      	strb	r3, [r7, #23]
            break;
 8103a18:	e005      	b.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103a1a:	4b7c      	ldr	r3, [pc, #496]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a1e:	f003 0302 	and.w	r3, r3, #2
 8103a22:	2b00      	cmp	r3, #0
 8103a24:	d0ed      	beq.n	8103a02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103a26:	7dfb      	ldrb	r3, [r7, #23]
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d128      	bne.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a3a:	d10f      	bne.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103a3c:	4b73      	ldr	r3, [pc, #460]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a3e:	691b      	ldr	r3, [r3, #16]
 8103a40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103a4a:	091b      	lsrs	r3, r3, #4
 8103a4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103a50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103a54:	496d      	ldr	r1, [pc, #436]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a56:	4313      	orrs	r3, r2
 8103a58:	610b      	str	r3, [r1, #16]
 8103a5a:	e005      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103a5c:	4b6b      	ldr	r3, [pc, #428]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a5e:	691b      	ldr	r3, [r3, #16]
 8103a60:	4a6a      	ldr	r2, [pc, #424]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103a66:	6113      	str	r3, [r2, #16]
 8103a68:	4b68      	ldr	r3, [pc, #416]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103a76:	4965      	ldr	r1, [pc, #404]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a78:	4313      	orrs	r3, r2
 8103a7a:	670b      	str	r3, [r1, #112]	; 0x70
 8103a7c:	e004      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103a7e:	7dfb      	ldrb	r3, [r7, #23]
 8103a80:	75bb      	strb	r3, [r7, #22]
 8103a82:	e001      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a84:	7dfb      	ldrb	r3, [r7, #23]
 8103a86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	f003 0301 	and.w	r3, r3, #1
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d07e      	beq.n	8103b92 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103a98:	2b28      	cmp	r3, #40	; 0x28
 8103a9a:	d867      	bhi.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103a9c:	a201      	add	r2, pc, #4	; (adr r2, 8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103aa2:	bf00      	nop
 8103aa4:	08103b73 	.word	0x08103b73
 8103aa8:	08103b6d 	.word	0x08103b6d
 8103aac:	08103b6d 	.word	0x08103b6d
 8103ab0:	08103b6d 	.word	0x08103b6d
 8103ab4:	08103b6d 	.word	0x08103b6d
 8103ab8:	08103b6d 	.word	0x08103b6d
 8103abc:	08103b6d 	.word	0x08103b6d
 8103ac0:	08103b6d 	.word	0x08103b6d
 8103ac4:	08103b49 	.word	0x08103b49
 8103ac8:	08103b6d 	.word	0x08103b6d
 8103acc:	08103b6d 	.word	0x08103b6d
 8103ad0:	08103b6d 	.word	0x08103b6d
 8103ad4:	08103b6d 	.word	0x08103b6d
 8103ad8:	08103b6d 	.word	0x08103b6d
 8103adc:	08103b6d 	.word	0x08103b6d
 8103ae0:	08103b6d 	.word	0x08103b6d
 8103ae4:	08103b5b 	.word	0x08103b5b
 8103ae8:	08103b6d 	.word	0x08103b6d
 8103aec:	08103b6d 	.word	0x08103b6d
 8103af0:	08103b6d 	.word	0x08103b6d
 8103af4:	08103b6d 	.word	0x08103b6d
 8103af8:	08103b6d 	.word	0x08103b6d
 8103afc:	08103b6d 	.word	0x08103b6d
 8103b00:	08103b6d 	.word	0x08103b6d
 8103b04:	08103b73 	.word	0x08103b73
 8103b08:	08103b6d 	.word	0x08103b6d
 8103b0c:	08103b6d 	.word	0x08103b6d
 8103b10:	08103b6d 	.word	0x08103b6d
 8103b14:	08103b6d 	.word	0x08103b6d
 8103b18:	08103b6d 	.word	0x08103b6d
 8103b1c:	08103b6d 	.word	0x08103b6d
 8103b20:	08103b6d 	.word	0x08103b6d
 8103b24:	08103b73 	.word	0x08103b73
 8103b28:	08103b6d 	.word	0x08103b6d
 8103b2c:	08103b6d 	.word	0x08103b6d
 8103b30:	08103b6d 	.word	0x08103b6d
 8103b34:	08103b6d 	.word	0x08103b6d
 8103b38:	08103b6d 	.word	0x08103b6d
 8103b3c:	08103b6d 	.word	0x08103b6d
 8103b40:	08103b6d 	.word	0x08103b6d
 8103b44:	08103b73 	.word	0x08103b73
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	3304      	adds	r3, #4
 8103b4c:	2101      	movs	r1, #1
 8103b4e:	4618      	mov	r0, r3
 8103b50:	f000 fb34 	bl	81041bc <RCCEx_PLL2_Config>
 8103b54:	4603      	mov	r3, r0
 8103b56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103b58:	e00c      	b.n	8103b74 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	3324      	adds	r3, #36	; 0x24
 8103b5e:	2101      	movs	r1, #1
 8103b60:	4618      	mov	r0, r3
 8103b62:	f000 fbdd 	bl	8104320 <RCCEx_PLL3_Config>
 8103b66:	4603      	mov	r3, r0
 8103b68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103b6a:	e003      	b.n	8103b74 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b6c:	2301      	movs	r3, #1
 8103b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8103b70:	e000      	b.n	8103b74 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b74:	7dfb      	ldrb	r3, [r7, #23]
 8103b76:	2b00      	cmp	r3, #0
 8103b78:	d109      	bne.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103b7a:	4b24      	ldr	r3, [pc, #144]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103b86:	4921      	ldr	r1, [pc, #132]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103b88:	4313      	orrs	r3, r2
 8103b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8103b8c:	e001      	b.n	8103b92 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b8e:	7dfb      	ldrb	r3, [r7, #23]
 8103b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	f003 0302 	and.w	r3, r3, #2
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d03c      	beq.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103ba2:	2b05      	cmp	r3, #5
 8103ba4:	d820      	bhi.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103ba6:	a201      	add	r2, pc, #4	; (adr r2, 8103bac <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bac:	08103bef 	.word	0x08103bef
 8103bb0:	08103bc5 	.word	0x08103bc5
 8103bb4:	08103bd7 	.word	0x08103bd7
 8103bb8:	08103bef 	.word	0x08103bef
 8103bbc:	08103bef 	.word	0x08103bef
 8103bc0:	08103bef 	.word	0x08103bef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	3304      	adds	r3, #4
 8103bc8:	2101      	movs	r1, #1
 8103bca:	4618      	mov	r0, r3
 8103bcc:	f000 faf6 	bl	81041bc <RCCEx_PLL2_Config>
 8103bd0:	4603      	mov	r3, r0
 8103bd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103bd4:	e00c      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	3324      	adds	r3, #36	; 0x24
 8103bda:	2101      	movs	r1, #1
 8103bdc:	4618      	mov	r0, r3
 8103bde:	f000 fb9f 	bl	8104320 <RCCEx_PLL3_Config>
 8103be2:	4603      	mov	r3, r0
 8103be4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103be6:	e003      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103be8:	2301      	movs	r3, #1
 8103bea:	75fb      	strb	r3, [r7, #23]
      break;
 8103bec:	e000      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bf0:	7dfb      	ldrb	r3, [r7, #23]
 8103bf2:	2b00      	cmp	r3, #0
 8103bf4:	d10e      	bne.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103bf6:	4b05      	ldr	r3, [pc, #20]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bfa:	f023 0207 	bic.w	r2, r3, #7
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103c02:	4902      	ldr	r1, [pc, #8]	; (8103c0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103c04:	4313      	orrs	r3, r2
 8103c06:	654b      	str	r3, [r1, #84]	; 0x54
 8103c08:	e006      	b.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103c0a:	bf00      	nop
 8103c0c:	58024400 	.word	0x58024400
 8103c10:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c14:	7dfb      	ldrb	r3, [r7, #23]
 8103c16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f003 0304 	and.w	r3, r3, #4
 8103c20:	2b00      	cmp	r3, #0
 8103c22:	d039      	beq.n	8103c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103c2a:	2b05      	cmp	r3, #5
 8103c2c:	d820      	bhi.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103c2e:	a201      	add	r2, pc, #4	; (adr r2, 8103c34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c34:	08103c77 	.word	0x08103c77
 8103c38:	08103c4d 	.word	0x08103c4d
 8103c3c:	08103c5f 	.word	0x08103c5f
 8103c40:	08103c77 	.word	0x08103c77
 8103c44:	08103c77 	.word	0x08103c77
 8103c48:	08103c77 	.word	0x08103c77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	3304      	adds	r3, #4
 8103c50:	2101      	movs	r1, #1
 8103c52:	4618      	mov	r0, r3
 8103c54:	f000 fab2 	bl	81041bc <RCCEx_PLL2_Config>
 8103c58:	4603      	mov	r3, r0
 8103c5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103c5c:	e00c      	b.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	3324      	adds	r3, #36	; 0x24
 8103c62:	2101      	movs	r1, #1
 8103c64:	4618      	mov	r0, r3
 8103c66:	f000 fb5b 	bl	8104320 <RCCEx_PLL3_Config>
 8103c6a:	4603      	mov	r3, r0
 8103c6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103c6e:	e003      	b.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c70:	2301      	movs	r3, #1
 8103c72:	75fb      	strb	r3, [r7, #23]
      break;
 8103c74:	e000      	b.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c78:	7dfb      	ldrb	r3, [r7, #23]
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d10a      	bne.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103c7e:	4bb7      	ldr	r3, [pc, #732]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c82:	f023 0207 	bic.w	r2, r3, #7
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103c8c:	49b3      	ldr	r1, [pc, #716]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c8e:	4313      	orrs	r3, r2
 8103c90:	658b      	str	r3, [r1, #88]	; 0x58
 8103c92:	e001      	b.n	8103c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c94:	7dfb      	ldrb	r3, [r7, #23]
 8103c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	f003 0320 	and.w	r3, r3, #32
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d04b      	beq.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103cae:	d02e      	beq.n	8103d0e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103cb4:	d828      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103cba:	d02a      	beq.n	8103d12 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103cc0:	d822      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103cc6:	d026      	beq.n	8103d16 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103ccc:	d81c      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103cd2:	d010      	beq.n	8103cf6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103cd8:	d816      	bhi.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d01d      	beq.n	8103d1a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103ce2:	d111      	bne.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	3304      	adds	r3, #4
 8103ce8:	2100      	movs	r1, #0
 8103cea:	4618      	mov	r0, r3
 8103cec:	f000 fa66 	bl	81041bc <RCCEx_PLL2_Config>
 8103cf0:	4603      	mov	r3, r0
 8103cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103cf4:	e012      	b.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	3324      	adds	r3, #36	; 0x24
 8103cfa:	2102      	movs	r1, #2
 8103cfc:	4618      	mov	r0, r3
 8103cfe:	f000 fb0f 	bl	8104320 <RCCEx_PLL3_Config>
 8103d02:	4603      	mov	r3, r0
 8103d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103d06:	e009      	b.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d08:	2301      	movs	r3, #1
 8103d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8103d0c:	e006      	b.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d0e:	bf00      	nop
 8103d10:	e004      	b.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d12:	bf00      	nop
 8103d14:	e002      	b.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d16:	bf00      	nop
 8103d18:	e000      	b.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d1c:	7dfb      	ldrb	r3, [r7, #23]
 8103d1e:	2b00      	cmp	r3, #0
 8103d20:	d10a      	bne.n	8103d38 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103d22:	4b8e      	ldr	r3, [pc, #568]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103d30:	498a      	ldr	r1, [pc, #552]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d32:	4313      	orrs	r3, r2
 8103d34:	654b      	str	r3, [r1, #84]	; 0x54
 8103d36:	e001      	b.n	8103d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d38:	7dfb      	ldrb	r3, [r7, #23]
 8103d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d04b      	beq.n	8103de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103d4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103d52:	d02e      	beq.n	8103db2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103d54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103d58:	d828      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103d5e:	d02a      	beq.n	8103db6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103d64:	d822      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103d6a:	d026      	beq.n	8103dba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103d70:	d81c      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103d76:	d010      	beq.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103d7c:	d816      	bhi.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103d7e:	2b00      	cmp	r3, #0
 8103d80:	d01d      	beq.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103d86:	d111      	bne.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	3304      	adds	r3, #4
 8103d8c:	2100      	movs	r1, #0
 8103d8e:	4618      	mov	r0, r3
 8103d90:	f000 fa14 	bl	81041bc <RCCEx_PLL2_Config>
 8103d94:	4603      	mov	r3, r0
 8103d96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103d98:	e012      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	3324      	adds	r3, #36	; 0x24
 8103d9e:	2102      	movs	r1, #2
 8103da0:	4618      	mov	r0, r3
 8103da2:	f000 fabd 	bl	8104320 <RCCEx_PLL3_Config>
 8103da6:	4603      	mov	r3, r0
 8103da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103daa:	e009      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dac:	2301      	movs	r3, #1
 8103dae:	75fb      	strb	r3, [r7, #23]
      break;
 8103db0:	e006      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103db2:	bf00      	nop
 8103db4:	e004      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103db6:	bf00      	nop
 8103db8:	e002      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103dba:	bf00      	nop
 8103dbc:	e000      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dc0:	7dfb      	ldrb	r3, [r7, #23]
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	d10a      	bne.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103dc6:	4b65      	ldr	r3, [pc, #404]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103dca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103dd4:	4961      	ldr	r1, [pc, #388]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dd6:	4313      	orrs	r3, r2
 8103dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8103dda:	e001      	b.n	8103de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ddc:	7dfb      	ldrb	r3, [r7, #23]
 8103dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103de8:	2b00      	cmp	r3, #0
 8103dea:	d04b      	beq.n	8103e84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103df2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103df6:	d02e      	beq.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103df8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103dfc:	d828      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103e02:	d02a      	beq.n	8103e5a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103e08:	d822      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103e0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103e0e:	d026      	beq.n	8103e5e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103e10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103e14:	d81c      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103e1a:	d010      	beq.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103e20:	d816      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103e22:	2b00      	cmp	r3, #0
 8103e24:	d01d      	beq.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103e2a:	d111      	bne.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	3304      	adds	r3, #4
 8103e30:	2100      	movs	r1, #0
 8103e32:	4618      	mov	r0, r3
 8103e34:	f000 f9c2 	bl	81041bc <RCCEx_PLL2_Config>
 8103e38:	4603      	mov	r3, r0
 8103e3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103e3c:	e012      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	3324      	adds	r3, #36	; 0x24
 8103e42:	2102      	movs	r1, #2
 8103e44:	4618      	mov	r0, r3
 8103e46:	f000 fa6b 	bl	8104320 <RCCEx_PLL3_Config>
 8103e4a:	4603      	mov	r3, r0
 8103e4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103e4e:	e009      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e50:	2301      	movs	r3, #1
 8103e52:	75fb      	strb	r3, [r7, #23]
      break;
 8103e54:	e006      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103e56:	bf00      	nop
 8103e58:	e004      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103e5a:	bf00      	nop
 8103e5c:	e002      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103e5e:	bf00      	nop
 8103e60:	e000      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e64:	7dfb      	ldrb	r3, [r7, #23]
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	d10a      	bne.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103e6a:	4b3c      	ldr	r3, [pc, #240]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103e78:	4938      	ldr	r1, [pc, #224]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e7a:	4313      	orrs	r3, r2
 8103e7c:	658b      	str	r3, [r1, #88]	; 0x58
 8103e7e:	e001      	b.n	8103e84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e80:	7dfb      	ldrb	r3, [r7, #23]
 8103e82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	f003 0308 	and.w	r3, r3, #8
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d01a      	beq.n	8103ec6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103e9a:	d10a      	bne.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	3324      	adds	r3, #36	; 0x24
 8103ea0:	2102      	movs	r1, #2
 8103ea2:	4618      	mov	r0, r3
 8103ea4:	f000 fa3c 	bl	8104320 <RCCEx_PLL3_Config>
 8103ea8:	4603      	mov	r3, r0
 8103eaa:	2b00      	cmp	r3, #0
 8103eac:	d001      	beq.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103eae:	2301      	movs	r3, #1
 8103eb0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103eb2:	4b2a      	ldr	r3, [pc, #168]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ec0:	4926      	ldr	r1, [pc, #152]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ec2:	4313      	orrs	r3, r2
 8103ec4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	f003 0310 	and.w	r3, r3, #16
 8103ece:	2b00      	cmp	r3, #0
 8103ed0:	d01a      	beq.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103edc:	d10a      	bne.n	8103ef4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	3324      	adds	r3, #36	; 0x24
 8103ee2:	2102      	movs	r1, #2
 8103ee4:	4618      	mov	r0, r3
 8103ee6:	f000 fa1b 	bl	8104320 <RCCEx_PLL3_Config>
 8103eea:	4603      	mov	r3, r0
 8103eec:	2b00      	cmp	r3, #0
 8103eee:	d001      	beq.n	8103ef4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103ef0:	2301      	movs	r3, #1
 8103ef2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103ef4:	4b19      	ldr	r3, [pc, #100]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103f02:	4916      	ldr	r1, [pc, #88]	; (8103f5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103f04:	4313      	orrs	r3, r2
 8103f06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103f10:	2b00      	cmp	r3, #0
 8103f12:	d036      	beq.n	8103f82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103f1e:	d01f      	beq.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103f24:	d817      	bhi.n	8103f56 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	d003      	beq.n	8103f32 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103f2e:	d009      	beq.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103f30:	e011      	b.n	8103f56 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	3304      	adds	r3, #4
 8103f36:	2100      	movs	r1, #0
 8103f38:	4618      	mov	r0, r3
 8103f3a:	f000 f93f 	bl	81041bc <RCCEx_PLL2_Config>
 8103f3e:	4603      	mov	r3, r0
 8103f40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103f42:	e00e      	b.n	8103f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	3324      	adds	r3, #36	; 0x24
 8103f48:	2102      	movs	r1, #2
 8103f4a:	4618      	mov	r0, r3
 8103f4c:	f000 f9e8 	bl	8104320 <RCCEx_PLL3_Config>
 8103f50:	4603      	mov	r3, r0
 8103f52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103f54:	e005      	b.n	8103f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f56:	2301      	movs	r3, #1
 8103f58:	75fb      	strb	r3, [r7, #23]
      break;
 8103f5a:	e002      	b.n	8103f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103f5c:	58024400 	.word	0x58024400
      break;
 8103f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f62:	7dfb      	ldrb	r3, [r7, #23]
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d10a      	bne.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103f68:	4b93      	ldr	r3, [pc, #588]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103f76:	4990      	ldr	r1, [pc, #576]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f78:	4313      	orrs	r3, r2
 8103f7a:	658b      	str	r3, [r1, #88]	; 0x58
 8103f7c:	e001      	b.n	8103f82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f7e:	7dfb      	ldrb	r3, [r7, #23]
 8103f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d033      	beq.n	8103ff6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103f98:	d01c      	beq.n	8103fd4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103f9e:	d816      	bhi.n	8103fce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103fa4:	d003      	beq.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103faa:	d007      	beq.n	8103fbc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103fac:	e00f      	b.n	8103fce <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fae:	4b82      	ldr	r3, [pc, #520]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fb2:	4a81      	ldr	r2, [pc, #516]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103fba:	e00c      	b.n	8103fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	3324      	adds	r3, #36	; 0x24
 8103fc0:	2101      	movs	r1, #1
 8103fc2:	4618      	mov	r0, r3
 8103fc4:	f000 f9ac 	bl	8104320 <RCCEx_PLL3_Config>
 8103fc8:	4603      	mov	r3, r0
 8103fca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103fcc:	e003      	b.n	8103fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103fce:	2301      	movs	r3, #1
 8103fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8103fd2:	e000      	b.n	8103fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fd6:	7dfb      	ldrb	r3, [r7, #23]
 8103fd8:	2b00      	cmp	r3, #0
 8103fda:	d10a      	bne.n	8103ff2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103fdc:	4b76      	ldr	r3, [pc, #472]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103fea:	4973      	ldr	r1, [pc, #460]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fec:	4313      	orrs	r3, r2
 8103fee:	654b      	str	r3, [r1, #84]	; 0x54
 8103ff0:	e001      	b.n	8103ff6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ff2:	7dfb      	ldrb	r3, [r7, #23]
 8103ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103ffe:	2b00      	cmp	r3, #0
 8104000:	d029      	beq.n	8104056 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104006:	2b00      	cmp	r3, #0
 8104008:	d003      	beq.n	8104012 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810400e:	d007      	beq.n	8104020 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8104010:	e00f      	b.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104012:	4b69      	ldr	r3, [pc, #420]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104016:	4a68      	ldr	r2, [pc, #416]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810401c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810401e:	e00b      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	3304      	adds	r3, #4
 8104024:	2102      	movs	r1, #2
 8104026:	4618      	mov	r0, r3
 8104028:	f000 f8c8 	bl	81041bc <RCCEx_PLL2_Config>
 810402c:	4603      	mov	r3, r0
 810402e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104030:	e002      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8104032:	2301      	movs	r3, #1
 8104034:	75fb      	strb	r3, [r7, #23]
      break;
 8104036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104038:	7dfb      	ldrb	r3, [r7, #23]
 810403a:	2b00      	cmp	r3, #0
 810403c:	d109      	bne.n	8104052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810403e:	4b5e      	ldr	r3, [pc, #376]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810404a:	495b      	ldr	r1, [pc, #364]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810404c:	4313      	orrs	r3, r2
 810404e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104050:	e001      	b.n	8104056 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104052:	7dfb      	ldrb	r3, [r7, #23]
 8104054:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810405e:	2b00      	cmp	r3, #0
 8104060:	d00a      	beq.n	8104078 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	3324      	adds	r3, #36	; 0x24
 8104066:	2102      	movs	r1, #2
 8104068:	4618      	mov	r0, r3
 810406a:	f000 f959 	bl	8104320 <RCCEx_PLL3_Config>
 810406e:	4603      	mov	r3, r0
 8104070:	2b00      	cmp	r3, #0
 8104072:	d001      	beq.n	8104078 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8104074:	2301      	movs	r3, #1
 8104076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104080:	2b00      	cmp	r3, #0
 8104082:	d030      	beq.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810408c:	d017      	beq.n	81040be <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810408e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104092:	d811      	bhi.n	81040b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104098:	d013      	beq.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810409a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810409e:	d80b      	bhi.n	81040b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81040a0:	2b00      	cmp	r3, #0
 81040a2:	d010      	beq.n	81040c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81040a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81040a8:	d106      	bne.n	81040b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040aa:	4b43      	ldr	r3, [pc, #268]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040ae:	4a42      	ldr	r2, [pc, #264]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81040b6:	e007      	b.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81040b8:	2301      	movs	r3, #1
 81040ba:	75fb      	strb	r3, [r7, #23]
      break;
 81040bc:	e004      	b.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81040be:	bf00      	nop
 81040c0:	e002      	b.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81040c2:	bf00      	nop
 81040c4:	e000      	b.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81040c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040c8:	7dfb      	ldrb	r3, [r7, #23]
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d109      	bne.n	81040e2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81040ce:	4b3a      	ldr	r3, [pc, #232]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81040da:	4937      	ldr	r1, [pc, #220]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040dc:	4313      	orrs	r3, r2
 81040de:	654b      	str	r3, [r1, #84]	; 0x54
 81040e0:	e001      	b.n	81040e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040e2:	7dfb      	ldrb	r3, [r7, #23]
 81040e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81040ee:	2b00      	cmp	r3, #0
 81040f0:	d008      	beq.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81040f2:	4b31      	ldr	r3, [pc, #196]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040fe:	492e      	ldr	r1, [pc, #184]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104100:	4313      	orrs	r3, r2
 8104102:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810410c:	2b00      	cmp	r3, #0
 810410e:	d009      	beq.n	8104124 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104110:	4b29      	ldr	r3, [pc, #164]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104112:	691b      	ldr	r3, [r3, #16]
 8104114:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810411e:	4926      	ldr	r1, [pc, #152]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104120:	4313      	orrs	r3, r2
 8104122:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810412c:	2b00      	cmp	r3, #0
 810412e:	d008      	beq.n	8104142 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104130:	4b21      	ldr	r3, [pc, #132]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104134:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810413c:	491e      	ldr	r1, [pc, #120]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810413e:	4313      	orrs	r3, r2
 8104140:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810414a:	2b00      	cmp	r3, #0
 810414c:	d00d      	beq.n	810416a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810414e:	4b1a      	ldr	r3, [pc, #104]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104150:	691b      	ldr	r3, [r3, #16]
 8104152:	4a19      	ldr	r2, [pc, #100]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104158:	6113      	str	r3, [r2, #16]
 810415a:	4b17      	ldr	r3, [pc, #92]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810415c:	691a      	ldr	r2, [r3, #16]
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104164:	4914      	ldr	r1, [pc, #80]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104166:	4313      	orrs	r3, r2
 8104168:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	2b00      	cmp	r3, #0
 8104170:	da08      	bge.n	8104184 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104172:	4b11      	ldr	r3, [pc, #68]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810417e:	490e      	ldr	r1, [pc, #56]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104180:	4313      	orrs	r3, r2
 8104182:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810418c:	2b00      	cmp	r3, #0
 810418e:	d009      	beq.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104190:	4b09      	ldr	r3, [pc, #36]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810419e:	4906      	ldr	r1, [pc, #24]	; (81041b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041a0:	4313      	orrs	r3, r2
 81041a2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81041a4:	7dbb      	ldrb	r3, [r7, #22]
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d101      	bne.n	81041ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81041aa:	2300      	movs	r3, #0
 81041ac:	e000      	b.n	81041b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81041ae:	2301      	movs	r3, #1
}
 81041b0:	4618      	mov	r0, r3
 81041b2:	3718      	adds	r7, #24
 81041b4:	46bd      	mov	sp, r7
 81041b6:	bd80      	pop	{r7, pc}
 81041b8:	58024400 	.word	0x58024400

081041bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81041bc:	b580      	push	{r7, lr}
 81041be:	b084      	sub	sp, #16
 81041c0:	af00      	add	r7, sp, #0
 81041c2:	6078      	str	r0, [r7, #4]
 81041c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81041c6:	2300      	movs	r3, #0
 81041c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81041ca:	4b54      	ldr	r3, [pc, #336]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041ce:	f003 0303 	and.w	r3, r3, #3
 81041d2:	2b03      	cmp	r3, #3
 81041d4:	d101      	bne.n	81041da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81041d6:	2301      	movs	r3, #1
 81041d8:	e09b      	b.n	8104312 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81041da:	4b50      	ldr	r3, [pc, #320]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	4a4f      	ldr	r2, [pc, #316]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81041e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81041e6:	f7fd fdb7 	bl	8101d58 <HAL_GetTick>
 81041ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81041ec:	e008      	b.n	8104200 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81041ee:	f7fd fdb3 	bl	8101d58 <HAL_GetTick>
 81041f2:	4602      	mov	r2, r0
 81041f4:	68bb      	ldr	r3, [r7, #8]
 81041f6:	1ad3      	subs	r3, r2, r3
 81041f8:	2b02      	cmp	r3, #2
 81041fa:	d901      	bls.n	8104200 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81041fc:	2303      	movs	r3, #3
 81041fe:	e088      	b.n	8104312 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104200:	4b46      	ldr	r3, [pc, #280]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104202:	681b      	ldr	r3, [r3, #0]
 8104204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104208:	2b00      	cmp	r3, #0
 810420a:	d1f0      	bne.n	81041ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810420c:	4b43      	ldr	r3, [pc, #268]	; (810431c <RCCEx_PLL2_Config+0x160>)
 810420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104210:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104214:	687b      	ldr	r3, [r7, #4]
 8104216:	681b      	ldr	r3, [r3, #0]
 8104218:	031b      	lsls	r3, r3, #12
 810421a:	4940      	ldr	r1, [pc, #256]	; (810431c <RCCEx_PLL2_Config+0x160>)
 810421c:	4313      	orrs	r3, r2
 810421e:	628b      	str	r3, [r1, #40]	; 0x28
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	685b      	ldr	r3, [r3, #4]
 8104224:	3b01      	subs	r3, #1
 8104226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	689b      	ldr	r3, [r3, #8]
 810422e:	3b01      	subs	r3, #1
 8104230:	025b      	lsls	r3, r3, #9
 8104232:	b29b      	uxth	r3, r3
 8104234:	431a      	orrs	r2, r3
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	68db      	ldr	r3, [r3, #12]
 810423a:	3b01      	subs	r3, #1
 810423c:	041b      	lsls	r3, r3, #16
 810423e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104242:	431a      	orrs	r2, r3
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	691b      	ldr	r3, [r3, #16]
 8104248:	3b01      	subs	r3, #1
 810424a:	061b      	lsls	r3, r3, #24
 810424c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104250:	4932      	ldr	r1, [pc, #200]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104252:	4313      	orrs	r3, r2
 8104254:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104256:	4b31      	ldr	r3, [pc, #196]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810425a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	695b      	ldr	r3, [r3, #20]
 8104262:	492e      	ldr	r1, [pc, #184]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104264:	4313      	orrs	r3, r2
 8104266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104268:	4b2c      	ldr	r3, [pc, #176]	; (810431c <RCCEx_PLL2_Config+0x160>)
 810426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810426c:	f023 0220 	bic.w	r2, r3, #32
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	699b      	ldr	r3, [r3, #24]
 8104274:	4929      	ldr	r1, [pc, #164]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104276:	4313      	orrs	r3, r2
 8104278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810427a:	4b28      	ldr	r3, [pc, #160]	; (810431c <RCCEx_PLL2_Config+0x160>)
 810427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810427e:	4a27      	ldr	r2, [pc, #156]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104280:	f023 0310 	bic.w	r3, r3, #16
 8104284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104286:	4b25      	ldr	r3, [pc, #148]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810428a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810428e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104292:	687a      	ldr	r2, [r7, #4]
 8104294:	69d2      	ldr	r2, [r2, #28]
 8104296:	00d2      	lsls	r2, r2, #3
 8104298:	4920      	ldr	r1, [pc, #128]	; (810431c <RCCEx_PLL2_Config+0x160>)
 810429a:	4313      	orrs	r3, r2
 810429c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810429e:	4b1f      	ldr	r3, [pc, #124]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042a2:	4a1e      	ldr	r2, [pc, #120]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042a4:	f043 0310 	orr.w	r3, r3, #16
 81042a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81042aa:	683b      	ldr	r3, [r7, #0]
 81042ac:	2b00      	cmp	r3, #0
 81042ae:	d106      	bne.n	81042be <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81042b0:	4b1a      	ldr	r3, [pc, #104]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042b4:	4a19      	ldr	r2, [pc, #100]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81042ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 81042bc:	e00f      	b.n	81042de <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81042be:	683b      	ldr	r3, [r7, #0]
 81042c0:	2b01      	cmp	r3, #1
 81042c2:	d106      	bne.n	81042d2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81042c4:	4b15      	ldr	r3, [pc, #84]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042c8:	4a14      	ldr	r2, [pc, #80]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81042ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 81042d0:	e005      	b.n	81042de <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81042d2:	4b12      	ldr	r3, [pc, #72]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042d6:	4a11      	ldr	r2, [pc, #68]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81042dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81042de:	4b0f      	ldr	r3, [pc, #60]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	4a0e      	ldr	r2, [pc, #56]	; (810431c <RCCEx_PLL2_Config+0x160>)
 81042e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81042e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81042ea:	f7fd fd35 	bl	8101d58 <HAL_GetTick>
 81042ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81042f0:	e008      	b.n	8104304 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81042f2:	f7fd fd31 	bl	8101d58 <HAL_GetTick>
 81042f6:	4602      	mov	r2, r0
 81042f8:	68bb      	ldr	r3, [r7, #8]
 81042fa:	1ad3      	subs	r3, r2, r3
 81042fc:	2b02      	cmp	r3, #2
 81042fe:	d901      	bls.n	8104304 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104300:	2303      	movs	r3, #3
 8104302:	e006      	b.n	8104312 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104304:	4b05      	ldr	r3, [pc, #20]	; (810431c <RCCEx_PLL2_Config+0x160>)
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810430c:	2b00      	cmp	r3, #0
 810430e:	d0f0      	beq.n	81042f2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104310:	7bfb      	ldrb	r3, [r7, #15]
}
 8104312:	4618      	mov	r0, r3
 8104314:	3710      	adds	r7, #16
 8104316:	46bd      	mov	sp, r7
 8104318:	bd80      	pop	{r7, pc}
 810431a:	bf00      	nop
 810431c:	58024400 	.word	0x58024400

08104320 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104320:	b580      	push	{r7, lr}
 8104322:	b084      	sub	sp, #16
 8104324:	af00      	add	r7, sp, #0
 8104326:	6078      	str	r0, [r7, #4]
 8104328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810432a:	2300      	movs	r3, #0
 810432c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810432e:	4b54      	ldr	r3, [pc, #336]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104332:	f003 0303 	and.w	r3, r3, #3
 8104336:	2b03      	cmp	r3, #3
 8104338:	d101      	bne.n	810433e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810433a:	2301      	movs	r3, #1
 810433c:	e09b      	b.n	8104476 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810433e:	4b50      	ldr	r3, [pc, #320]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a4f      	ldr	r2, [pc, #316]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810434a:	f7fd fd05 	bl	8101d58 <HAL_GetTick>
 810434e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104350:	e008      	b.n	8104364 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104352:	f7fd fd01 	bl	8101d58 <HAL_GetTick>
 8104356:	4602      	mov	r2, r0
 8104358:	68bb      	ldr	r3, [r7, #8]
 810435a:	1ad3      	subs	r3, r2, r3
 810435c:	2b02      	cmp	r3, #2
 810435e:	d901      	bls.n	8104364 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104360:	2303      	movs	r3, #3
 8104362:	e088      	b.n	8104476 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104364:	4b46      	ldr	r3, [pc, #280]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810436c:	2b00      	cmp	r3, #0
 810436e:	d1f0      	bne.n	8104352 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104370:	4b43      	ldr	r3, [pc, #268]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104374:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	051b      	lsls	r3, r3, #20
 810437e:	4940      	ldr	r1, [pc, #256]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104380:	4313      	orrs	r3, r2
 8104382:	628b      	str	r3, [r1, #40]	; 0x28
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	685b      	ldr	r3, [r3, #4]
 8104388:	3b01      	subs	r3, #1
 810438a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	689b      	ldr	r3, [r3, #8]
 8104392:	3b01      	subs	r3, #1
 8104394:	025b      	lsls	r3, r3, #9
 8104396:	b29b      	uxth	r3, r3
 8104398:	431a      	orrs	r2, r3
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	68db      	ldr	r3, [r3, #12]
 810439e:	3b01      	subs	r3, #1
 81043a0:	041b      	lsls	r3, r3, #16
 81043a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81043a6:	431a      	orrs	r2, r3
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	691b      	ldr	r3, [r3, #16]
 81043ac:	3b01      	subs	r3, #1
 81043ae:	061b      	lsls	r3, r3, #24
 81043b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81043b4:	4932      	ldr	r1, [pc, #200]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043b6:	4313      	orrs	r3, r2
 81043b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81043ba:	4b31      	ldr	r3, [pc, #196]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	695b      	ldr	r3, [r3, #20]
 81043c6:	492e      	ldr	r1, [pc, #184]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043c8:	4313      	orrs	r3, r2
 81043ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81043cc:	4b2c      	ldr	r3, [pc, #176]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	699b      	ldr	r3, [r3, #24]
 81043d8:	4929      	ldr	r1, [pc, #164]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043da:	4313      	orrs	r3, r2
 81043dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81043de:	4b28      	ldr	r3, [pc, #160]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043e2:	4a27      	ldr	r2, [pc, #156]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81043e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81043ea:	4b25      	ldr	r3, [pc, #148]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81043ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81043f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81043f6:	687a      	ldr	r2, [r7, #4]
 81043f8:	69d2      	ldr	r2, [r2, #28]
 81043fa:	00d2      	lsls	r2, r2, #3
 81043fc:	4920      	ldr	r1, [pc, #128]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 81043fe:	4313      	orrs	r3, r2
 8104400:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104402:	4b1f      	ldr	r3, [pc, #124]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104406:	4a1e      	ldr	r2, [pc, #120]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810440c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810440e:	683b      	ldr	r3, [r7, #0]
 8104410:	2b00      	cmp	r3, #0
 8104412:	d106      	bne.n	8104422 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104414:	4b1a      	ldr	r3, [pc, #104]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104418:	4a19      	ldr	r2, [pc, #100]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 810441a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810441e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104420:	e00f      	b.n	8104442 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104422:	683b      	ldr	r3, [r7, #0]
 8104424:	2b01      	cmp	r3, #1
 8104426:	d106      	bne.n	8104436 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104428:	4b15      	ldr	r3, [pc, #84]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 810442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810442c:	4a14      	ldr	r2, [pc, #80]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 810442e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104434:	e005      	b.n	8104442 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104436:	4b12      	ldr	r3, [pc, #72]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810443a:	4a11      	ldr	r2, [pc, #68]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 810443c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104442:	4b0f      	ldr	r3, [pc, #60]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	4a0e      	ldr	r2, [pc, #56]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 8104448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810444c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810444e:	f7fd fc83 	bl	8101d58 <HAL_GetTick>
 8104452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104454:	e008      	b.n	8104468 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104456:	f7fd fc7f 	bl	8101d58 <HAL_GetTick>
 810445a:	4602      	mov	r2, r0
 810445c:	68bb      	ldr	r3, [r7, #8]
 810445e:	1ad3      	subs	r3, r2, r3
 8104460:	2b02      	cmp	r3, #2
 8104462:	d901      	bls.n	8104468 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104464:	2303      	movs	r3, #3
 8104466:	e006      	b.n	8104476 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104468:	4b05      	ldr	r3, [pc, #20]	; (8104480 <RCCEx_PLL3_Config+0x160>)
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104470:	2b00      	cmp	r3, #0
 8104472:	d0f0      	beq.n	8104456 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104474:	7bfb      	ldrb	r3, [r7, #15]
}
 8104476:	4618      	mov	r0, r3
 8104478:	3710      	adds	r7, #16
 810447a:	46bd      	mov	sp, r7
 810447c:	bd80      	pop	{r7, pc}
 810447e:	bf00      	nop
 8104480:	58024400 	.word	0x58024400

08104484 <sqrt>:
 8104484:	b538      	push	{r3, r4, r5, lr}
 8104486:	ed2d 8b02 	vpush	{d8}
 810448a:	ec55 4b10 	vmov	r4, r5, d0
 810448e:	f000 f82d 	bl	81044ec <__ieee754_sqrt>
 8104492:	4b15      	ldr	r3, [pc, #84]	; (81044e8 <sqrt+0x64>)
 8104494:	eeb0 8a40 	vmov.f32	s16, s0
 8104498:	eef0 8a60 	vmov.f32	s17, s1
 810449c:	f993 3000 	ldrsb.w	r3, [r3]
 81044a0:	3301      	adds	r3, #1
 81044a2:	d019      	beq.n	81044d8 <sqrt+0x54>
 81044a4:	4622      	mov	r2, r4
 81044a6:	462b      	mov	r3, r5
 81044a8:	4620      	mov	r0, r4
 81044aa:	4629      	mov	r1, r5
 81044ac:	f7fc fbc6 	bl	8100c3c <__aeabi_dcmpun>
 81044b0:	b990      	cbnz	r0, 81044d8 <sqrt+0x54>
 81044b2:	2200      	movs	r2, #0
 81044b4:	2300      	movs	r3, #0
 81044b6:	4620      	mov	r0, r4
 81044b8:	4629      	mov	r1, r5
 81044ba:	f7fc fb97 	bl	8100bec <__aeabi_dcmplt>
 81044be:	b158      	cbz	r0, 81044d8 <sqrt+0x54>
 81044c0:	f000 f8c8 	bl	8104654 <__errno>
 81044c4:	2321      	movs	r3, #33	; 0x21
 81044c6:	6003      	str	r3, [r0, #0]
 81044c8:	2200      	movs	r2, #0
 81044ca:	2300      	movs	r3, #0
 81044cc:	4610      	mov	r0, r2
 81044ce:	4619      	mov	r1, r3
 81044d0:	f7fc fa44 	bl	810095c <__aeabi_ddiv>
 81044d4:	ec41 0b18 	vmov	d8, r0, r1
 81044d8:	eeb0 0a48 	vmov.f32	s0, s16
 81044dc:	eef0 0a68 	vmov.f32	s1, s17
 81044e0:	ecbd 8b02 	vpop	{d8}
 81044e4:	bd38      	pop	{r3, r4, r5, pc}
 81044e6:	bf00      	nop
 81044e8:	10000015 	.word	0x10000015

081044ec <__ieee754_sqrt>:
 81044ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81044f0:	ec55 4b10 	vmov	r4, r5, d0
 81044f4:	4e56      	ldr	r6, [pc, #344]	; (8104650 <__ieee754_sqrt+0x164>)
 81044f6:	43ae      	bics	r6, r5
 81044f8:	ee10 0a10 	vmov	r0, s0
 81044fc:	ee10 3a10 	vmov	r3, s0
 8104500:	4629      	mov	r1, r5
 8104502:	462a      	mov	r2, r5
 8104504:	d110      	bne.n	8104528 <__ieee754_sqrt+0x3c>
 8104506:	ee10 2a10 	vmov	r2, s0
 810450a:	462b      	mov	r3, r5
 810450c:	f7fc f8fc 	bl	8100708 <__aeabi_dmul>
 8104510:	4602      	mov	r2, r0
 8104512:	460b      	mov	r3, r1
 8104514:	4620      	mov	r0, r4
 8104516:	4629      	mov	r1, r5
 8104518:	f7fb ff40 	bl	810039c <__adddf3>
 810451c:	4604      	mov	r4, r0
 810451e:	460d      	mov	r5, r1
 8104520:	ec45 4b10 	vmov	d0, r4, r5
 8104524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8104528:	2d00      	cmp	r5, #0
 810452a:	dc10      	bgt.n	810454e <__ieee754_sqrt+0x62>
 810452c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8104530:	4330      	orrs	r0, r6
 8104532:	d0f5      	beq.n	8104520 <__ieee754_sqrt+0x34>
 8104534:	b15d      	cbz	r5, 810454e <__ieee754_sqrt+0x62>
 8104536:	ee10 2a10 	vmov	r2, s0
 810453a:	462b      	mov	r3, r5
 810453c:	ee10 0a10 	vmov	r0, s0
 8104540:	f7fb ff2a 	bl	8100398 <__aeabi_dsub>
 8104544:	4602      	mov	r2, r0
 8104546:	460b      	mov	r3, r1
 8104548:	f7fc fa08 	bl	810095c <__aeabi_ddiv>
 810454c:	e7e6      	b.n	810451c <__ieee754_sqrt+0x30>
 810454e:	1509      	asrs	r1, r1, #20
 8104550:	d076      	beq.n	8104640 <__ieee754_sqrt+0x154>
 8104552:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8104556:	07ce      	lsls	r6, r1, #31
 8104558:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810455c:	bf5e      	ittt	pl
 810455e:	0fda      	lsrpl	r2, r3, #31
 8104560:	005b      	lslpl	r3, r3, #1
 8104562:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8104566:	0fda      	lsrs	r2, r3, #31
 8104568:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810456c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8104570:	2000      	movs	r0, #0
 8104572:	106d      	asrs	r5, r5, #1
 8104574:	005b      	lsls	r3, r3, #1
 8104576:	f04f 0e16 	mov.w	lr, #22
 810457a:	4684      	mov	ip, r0
 810457c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8104580:	eb0c 0401 	add.w	r4, ip, r1
 8104584:	4294      	cmp	r4, r2
 8104586:	bfde      	ittt	le
 8104588:	1b12      	suble	r2, r2, r4
 810458a:	eb04 0c01 	addle.w	ip, r4, r1
 810458e:	1840      	addle	r0, r0, r1
 8104590:	0052      	lsls	r2, r2, #1
 8104592:	f1be 0e01 	subs.w	lr, lr, #1
 8104596:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810459a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810459e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 81045a2:	d1ed      	bne.n	8104580 <__ieee754_sqrt+0x94>
 81045a4:	4671      	mov	r1, lr
 81045a6:	2720      	movs	r7, #32
 81045a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 81045ac:	4562      	cmp	r2, ip
 81045ae:	eb04 060e 	add.w	r6, r4, lr
 81045b2:	dc02      	bgt.n	81045ba <__ieee754_sqrt+0xce>
 81045b4:	d113      	bne.n	81045de <__ieee754_sqrt+0xf2>
 81045b6:	429e      	cmp	r6, r3
 81045b8:	d811      	bhi.n	81045de <__ieee754_sqrt+0xf2>
 81045ba:	2e00      	cmp	r6, #0
 81045bc:	eb06 0e04 	add.w	lr, r6, r4
 81045c0:	da43      	bge.n	810464a <__ieee754_sqrt+0x15e>
 81045c2:	f1be 0f00 	cmp.w	lr, #0
 81045c6:	db40      	blt.n	810464a <__ieee754_sqrt+0x15e>
 81045c8:	f10c 0801 	add.w	r8, ip, #1
 81045cc:	eba2 020c 	sub.w	r2, r2, ip
 81045d0:	429e      	cmp	r6, r3
 81045d2:	bf88      	it	hi
 81045d4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 81045d8:	1b9b      	subs	r3, r3, r6
 81045da:	4421      	add	r1, r4
 81045dc:	46c4      	mov	ip, r8
 81045de:	0052      	lsls	r2, r2, #1
 81045e0:	3f01      	subs	r7, #1
 81045e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 81045e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 81045ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 81045ee:	d1dd      	bne.n	81045ac <__ieee754_sqrt+0xc0>
 81045f0:	4313      	orrs	r3, r2
 81045f2:	d006      	beq.n	8104602 <__ieee754_sqrt+0x116>
 81045f4:	1c4c      	adds	r4, r1, #1
 81045f6:	bf13      	iteet	ne
 81045f8:	3101      	addne	r1, #1
 81045fa:	3001      	addeq	r0, #1
 81045fc:	4639      	moveq	r1, r7
 81045fe:	f021 0101 	bicne.w	r1, r1, #1
 8104602:	1043      	asrs	r3, r0, #1
 8104604:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8104608:	0849      	lsrs	r1, r1, #1
 810460a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810460e:	07c2      	lsls	r2, r0, #31
 8104610:	bf48      	it	mi
 8104612:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8104616:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810461a:	460c      	mov	r4, r1
 810461c:	463d      	mov	r5, r7
 810461e:	e77f      	b.n	8104520 <__ieee754_sqrt+0x34>
 8104620:	0ada      	lsrs	r2, r3, #11
 8104622:	3815      	subs	r0, #21
 8104624:	055b      	lsls	r3, r3, #21
 8104626:	2a00      	cmp	r2, #0
 8104628:	d0fa      	beq.n	8104620 <__ieee754_sqrt+0x134>
 810462a:	02d7      	lsls	r7, r2, #11
 810462c:	d50a      	bpl.n	8104644 <__ieee754_sqrt+0x158>
 810462e:	f1c1 0420 	rsb	r4, r1, #32
 8104632:	fa23 f404 	lsr.w	r4, r3, r4
 8104636:	1e4d      	subs	r5, r1, #1
 8104638:	408b      	lsls	r3, r1
 810463a:	4322      	orrs	r2, r4
 810463c:	1b41      	subs	r1, r0, r5
 810463e:	e788      	b.n	8104552 <__ieee754_sqrt+0x66>
 8104640:	4608      	mov	r0, r1
 8104642:	e7f0      	b.n	8104626 <__ieee754_sqrt+0x13a>
 8104644:	0052      	lsls	r2, r2, #1
 8104646:	3101      	adds	r1, #1
 8104648:	e7ef      	b.n	810462a <__ieee754_sqrt+0x13e>
 810464a:	46e0      	mov	r8, ip
 810464c:	e7be      	b.n	81045cc <__ieee754_sqrt+0xe0>
 810464e:	bf00      	nop
 8104650:	7ff00000 	.word	0x7ff00000

08104654 <__errno>:
 8104654:	4b01      	ldr	r3, [pc, #4]	; (810465c <__errno+0x8>)
 8104656:	6818      	ldr	r0, [r3, #0]
 8104658:	4770      	bx	lr
 810465a:	bf00      	nop
 810465c:	10000018 	.word	0x10000018

08104660 <__libc_init_array>:
 8104660:	b570      	push	{r4, r5, r6, lr}
 8104662:	4d0d      	ldr	r5, [pc, #52]	; (8104698 <__libc_init_array+0x38>)
 8104664:	4c0d      	ldr	r4, [pc, #52]	; (810469c <__libc_init_array+0x3c>)
 8104666:	1b64      	subs	r4, r4, r5
 8104668:	10a4      	asrs	r4, r4, #2
 810466a:	2600      	movs	r6, #0
 810466c:	42a6      	cmp	r6, r4
 810466e:	d109      	bne.n	8104684 <__libc_init_array+0x24>
 8104670:	4d0b      	ldr	r5, [pc, #44]	; (81046a0 <__libc_init_array+0x40>)
 8104672:	4c0c      	ldr	r4, [pc, #48]	; (81046a4 <__libc_init_array+0x44>)
 8104674:	f002 fcf2 	bl	810705c <_init>
 8104678:	1b64      	subs	r4, r4, r5
 810467a:	10a4      	asrs	r4, r4, #2
 810467c:	2600      	movs	r6, #0
 810467e:	42a6      	cmp	r6, r4
 8104680:	d105      	bne.n	810468e <__libc_init_array+0x2e>
 8104682:	bd70      	pop	{r4, r5, r6, pc}
 8104684:	f855 3b04 	ldr.w	r3, [r5], #4
 8104688:	4798      	blx	r3
 810468a:	3601      	adds	r6, #1
 810468c:	e7ee      	b.n	810466c <__libc_init_array+0xc>
 810468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8104692:	4798      	blx	r3
 8104694:	3601      	adds	r6, #1
 8104696:	e7f2      	b.n	810467e <__libc_init_array+0x1e>
 8104698:	0810746c 	.word	0x0810746c
 810469c:	0810746c 	.word	0x0810746c
 81046a0:	0810746c 	.word	0x0810746c
 81046a4:	08107470 	.word	0x08107470

081046a8 <memset>:
 81046a8:	4402      	add	r2, r0
 81046aa:	4603      	mov	r3, r0
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d100      	bne.n	81046b2 <memset+0xa>
 81046b0:	4770      	bx	lr
 81046b2:	f803 1b01 	strb.w	r1, [r3], #1
 81046b6:	e7f9      	b.n	81046ac <memset+0x4>

081046b8 <__cvt>:
 81046b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81046bc:	ec55 4b10 	vmov	r4, r5, d0
 81046c0:	2d00      	cmp	r5, #0
 81046c2:	460e      	mov	r6, r1
 81046c4:	4619      	mov	r1, r3
 81046c6:	462b      	mov	r3, r5
 81046c8:	bfbb      	ittet	lt
 81046ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81046ce:	461d      	movlt	r5, r3
 81046d0:	2300      	movge	r3, #0
 81046d2:	232d      	movlt	r3, #45	; 0x2d
 81046d4:	700b      	strb	r3, [r1, #0]
 81046d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81046d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81046dc:	4691      	mov	r9, r2
 81046de:	f023 0820 	bic.w	r8, r3, #32
 81046e2:	bfbc      	itt	lt
 81046e4:	4622      	movlt	r2, r4
 81046e6:	4614      	movlt	r4, r2
 81046e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81046ec:	d005      	beq.n	81046fa <__cvt+0x42>
 81046ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81046f2:	d100      	bne.n	81046f6 <__cvt+0x3e>
 81046f4:	3601      	adds	r6, #1
 81046f6:	2102      	movs	r1, #2
 81046f8:	e000      	b.n	81046fc <__cvt+0x44>
 81046fa:	2103      	movs	r1, #3
 81046fc:	ab03      	add	r3, sp, #12
 81046fe:	9301      	str	r3, [sp, #4]
 8104700:	ab02      	add	r3, sp, #8
 8104702:	9300      	str	r3, [sp, #0]
 8104704:	ec45 4b10 	vmov	d0, r4, r5
 8104708:	4653      	mov	r3, sl
 810470a:	4632      	mov	r2, r6
 810470c:	f000 fccc 	bl	81050a8 <_dtoa_r>
 8104710:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8104714:	4607      	mov	r7, r0
 8104716:	d102      	bne.n	810471e <__cvt+0x66>
 8104718:	f019 0f01 	tst.w	r9, #1
 810471c:	d022      	beq.n	8104764 <__cvt+0xac>
 810471e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8104722:	eb07 0906 	add.w	r9, r7, r6
 8104726:	d110      	bne.n	810474a <__cvt+0x92>
 8104728:	783b      	ldrb	r3, [r7, #0]
 810472a:	2b30      	cmp	r3, #48	; 0x30
 810472c:	d10a      	bne.n	8104744 <__cvt+0x8c>
 810472e:	2200      	movs	r2, #0
 8104730:	2300      	movs	r3, #0
 8104732:	4620      	mov	r0, r4
 8104734:	4629      	mov	r1, r5
 8104736:	f7fc fa4f 	bl	8100bd8 <__aeabi_dcmpeq>
 810473a:	b918      	cbnz	r0, 8104744 <__cvt+0x8c>
 810473c:	f1c6 0601 	rsb	r6, r6, #1
 8104740:	f8ca 6000 	str.w	r6, [sl]
 8104744:	f8da 3000 	ldr.w	r3, [sl]
 8104748:	4499      	add	r9, r3
 810474a:	2200      	movs	r2, #0
 810474c:	2300      	movs	r3, #0
 810474e:	4620      	mov	r0, r4
 8104750:	4629      	mov	r1, r5
 8104752:	f7fc fa41 	bl	8100bd8 <__aeabi_dcmpeq>
 8104756:	b108      	cbz	r0, 810475c <__cvt+0xa4>
 8104758:	f8cd 900c 	str.w	r9, [sp, #12]
 810475c:	2230      	movs	r2, #48	; 0x30
 810475e:	9b03      	ldr	r3, [sp, #12]
 8104760:	454b      	cmp	r3, r9
 8104762:	d307      	bcc.n	8104774 <__cvt+0xbc>
 8104764:	9b03      	ldr	r3, [sp, #12]
 8104766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8104768:	1bdb      	subs	r3, r3, r7
 810476a:	4638      	mov	r0, r7
 810476c:	6013      	str	r3, [r2, #0]
 810476e:	b004      	add	sp, #16
 8104770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104774:	1c59      	adds	r1, r3, #1
 8104776:	9103      	str	r1, [sp, #12]
 8104778:	701a      	strb	r2, [r3, #0]
 810477a:	e7f0      	b.n	810475e <__cvt+0xa6>

0810477c <__exponent>:
 810477c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810477e:	4603      	mov	r3, r0
 8104780:	2900      	cmp	r1, #0
 8104782:	bfb8      	it	lt
 8104784:	4249      	neglt	r1, r1
 8104786:	f803 2b02 	strb.w	r2, [r3], #2
 810478a:	bfb4      	ite	lt
 810478c:	222d      	movlt	r2, #45	; 0x2d
 810478e:	222b      	movge	r2, #43	; 0x2b
 8104790:	2909      	cmp	r1, #9
 8104792:	7042      	strb	r2, [r0, #1]
 8104794:	dd2a      	ble.n	81047ec <__exponent+0x70>
 8104796:	f10d 0407 	add.w	r4, sp, #7
 810479a:	46a4      	mov	ip, r4
 810479c:	270a      	movs	r7, #10
 810479e:	46a6      	mov	lr, r4
 81047a0:	460a      	mov	r2, r1
 81047a2:	fb91 f6f7 	sdiv	r6, r1, r7
 81047a6:	fb07 1516 	mls	r5, r7, r6, r1
 81047aa:	3530      	adds	r5, #48	; 0x30
 81047ac:	2a63      	cmp	r2, #99	; 0x63
 81047ae:	f104 34ff 	add.w	r4, r4, #4294967295
 81047b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 81047b6:	4631      	mov	r1, r6
 81047b8:	dcf1      	bgt.n	810479e <__exponent+0x22>
 81047ba:	3130      	adds	r1, #48	; 0x30
 81047bc:	f1ae 0502 	sub.w	r5, lr, #2
 81047c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 81047c4:	1c44      	adds	r4, r0, #1
 81047c6:	4629      	mov	r1, r5
 81047c8:	4561      	cmp	r1, ip
 81047ca:	d30a      	bcc.n	81047e2 <__exponent+0x66>
 81047cc:	f10d 0209 	add.w	r2, sp, #9
 81047d0:	eba2 020e 	sub.w	r2, r2, lr
 81047d4:	4565      	cmp	r5, ip
 81047d6:	bf88      	it	hi
 81047d8:	2200      	movhi	r2, #0
 81047da:	4413      	add	r3, r2
 81047dc:	1a18      	subs	r0, r3, r0
 81047de:	b003      	add	sp, #12
 81047e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81047e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 81047e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 81047ea:	e7ed      	b.n	81047c8 <__exponent+0x4c>
 81047ec:	2330      	movs	r3, #48	; 0x30
 81047ee:	3130      	adds	r1, #48	; 0x30
 81047f0:	7083      	strb	r3, [r0, #2]
 81047f2:	70c1      	strb	r1, [r0, #3]
 81047f4:	1d03      	adds	r3, r0, #4
 81047f6:	e7f1      	b.n	81047dc <__exponent+0x60>

081047f8 <_printf_float>:
 81047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81047fc:	ed2d 8b02 	vpush	{d8}
 8104800:	b08d      	sub	sp, #52	; 0x34
 8104802:	460c      	mov	r4, r1
 8104804:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8104808:	4616      	mov	r6, r2
 810480a:	461f      	mov	r7, r3
 810480c:	4605      	mov	r5, r0
 810480e:	f001 fa37 	bl	8105c80 <_localeconv_r>
 8104812:	f8d0 a000 	ldr.w	sl, [r0]
 8104816:	4650      	mov	r0, sl
 8104818:	f7fb fd62 	bl	81002e0 <strlen>
 810481c:	2300      	movs	r3, #0
 810481e:	930a      	str	r3, [sp, #40]	; 0x28
 8104820:	6823      	ldr	r3, [r4, #0]
 8104822:	9305      	str	r3, [sp, #20]
 8104824:	f8d8 3000 	ldr.w	r3, [r8]
 8104828:	f894 b018 	ldrb.w	fp, [r4, #24]
 810482c:	3307      	adds	r3, #7
 810482e:	f023 0307 	bic.w	r3, r3, #7
 8104832:	f103 0208 	add.w	r2, r3, #8
 8104836:	f8c8 2000 	str.w	r2, [r8]
 810483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810483e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8104842:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8104846:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810484a:	9307      	str	r3, [sp, #28]
 810484c:	f8cd 8018 	str.w	r8, [sp, #24]
 8104850:	ee08 0a10 	vmov	s16, r0
 8104854:	4b9f      	ldr	r3, [pc, #636]	; (8104ad4 <_printf_float+0x2dc>)
 8104856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810485a:	f04f 32ff 	mov.w	r2, #4294967295
 810485e:	f7fc f9ed 	bl	8100c3c <__aeabi_dcmpun>
 8104862:	bb88      	cbnz	r0, 81048c8 <_printf_float+0xd0>
 8104864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8104868:	4b9a      	ldr	r3, [pc, #616]	; (8104ad4 <_printf_float+0x2dc>)
 810486a:	f04f 32ff 	mov.w	r2, #4294967295
 810486e:	f7fc f9c7 	bl	8100c00 <__aeabi_dcmple>
 8104872:	bb48      	cbnz	r0, 81048c8 <_printf_float+0xd0>
 8104874:	2200      	movs	r2, #0
 8104876:	2300      	movs	r3, #0
 8104878:	4640      	mov	r0, r8
 810487a:	4649      	mov	r1, r9
 810487c:	f7fc f9b6 	bl	8100bec <__aeabi_dcmplt>
 8104880:	b110      	cbz	r0, 8104888 <_printf_float+0x90>
 8104882:	232d      	movs	r3, #45	; 0x2d
 8104884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104888:	4b93      	ldr	r3, [pc, #588]	; (8104ad8 <_printf_float+0x2e0>)
 810488a:	4894      	ldr	r0, [pc, #592]	; (8104adc <_printf_float+0x2e4>)
 810488c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8104890:	bf94      	ite	ls
 8104892:	4698      	movls	r8, r3
 8104894:	4680      	movhi	r8, r0
 8104896:	2303      	movs	r3, #3
 8104898:	6123      	str	r3, [r4, #16]
 810489a:	9b05      	ldr	r3, [sp, #20]
 810489c:	f023 0204 	bic.w	r2, r3, #4
 81048a0:	6022      	str	r2, [r4, #0]
 81048a2:	f04f 0900 	mov.w	r9, #0
 81048a6:	9700      	str	r7, [sp, #0]
 81048a8:	4633      	mov	r3, r6
 81048aa:	aa0b      	add	r2, sp, #44	; 0x2c
 81048ac:	4621      	mov	r1, r4
 81048ae:	4628      	mov	r0, r5
 81048b0:	f000 f9d8 	bl	8104c64 <_printf_common>
 81048b4:	3001      	adds	r0, #1
 81048b6:	f040 8090 	bne.w	81049da <_printf_float+0x1e2>
 81048ba:	f04f 30ff 	mov.w	r0, #4294967295
 81048be:	b00d      	add	sp, #52	; 0x34
 81048c0:	ecbd 8b02 	vpop	{d8}
 81048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81048c8:	4642      	mov	r2, r8
 81048ca:	464b      	mov	r3, r9
 81048cc:	4640      	mov	r0, r8
 81048ce:	4649      	mov	r1, r9
 81048d0:	f7fc f9b4 	bl	8100c3c <__aeabi_dcmpun>
 81048d4:	b140      	cbz	r0, 81048e8 <_printf_float+0xf0>
 81048d6:	464b      	mov	r3, r9
 81048d8:	2b00      	cmp	r3, #0
 81048da:	bfbc      	itt	lt
 81048dc:	232d      	movlt	r3, #45	; 0x2d
 81048de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81048e2:	487f      	ldr	r0, [pc, #508]	; (8104ae0 <_printf_float+0x2e8>)
 81048e4:	4b7f      	ldr	r3, [pc, #508]	; (8104ae4 <_printf_float+0x2ec>)
 81048e6:	e7d1      	b.n	810488c <_printf_float+0x94>
 81048e8:	6863      	ldr	r3, [r4, #4]
 81048ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81048ee:	9206      	str	r2, [sp, #24]
 81048f0:	1c5a      	adds	r2, r3, #1
 81048f2:	d13f      	bne.n	8104974 <_printf_float+0x17c>
 81048f4:	2306      	movs	r3, #6
 81048f6:	6063      	str	r3, [r4, #4]
 81048f8:	9b05      	ldr	r3, [sp, #20]
 81048fa:	6861      	ldr	r1, [r4, #4]
 81048fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8104900:	2300      	movs	r3, #0
 8104902:	9303      	str	r3, [sp, #12]
 8104904:	ab0a      	add	r3, sp, #40	; 0x28
 8104906:	e9cd b301 	strd	fp, r3, [sp, #4]
 810490a:	ab09      	add	r3, sp, #36	; 0x24
 810490c:	ec49 8b10 	vmov	d0, r8, r9
 8104910:	9300      	str	r3, [sp, #0]
 8104912:	6022      	str	r2, [r4, #0]
 8104914:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8104918:	4628      	mov	r0, r5
 810491a:	f7ff fecd 	bl	81046b8 <__cvt>
 810491e:	9b06      	ldr	r3, [sp, #24]
 8104920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8104922:	2b47      	cmp	r3, #71	; 0x47
 8104924:	4680      	mov	r8, r0
 8104926:	d108      	bne.n	810493a <_printf_float+0x142>
 8104928:	1cc8      	adds	r0, r1, #3
 810492a:	db02      	blt.n	8104932 <_printf_float+0x13a>
 810492c:	6863      	ldr	r3, [r4, #4]
 810492e:	4299      	cmp	r1, r3
 8104930:	dd41      	ble.n	81049b6 <_printf_float+0x1be>
 8104932:	f1ab 0b02 	sub.w	fp, fp, #2
 8104936:	fa5f fb8b 	uxtb.w	fp, fp
 810493a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810493e:	d820      	bhi.n	8104982 <_printf_float+0x18a>
 8104940:	3901      	subs	r1, #1
 8104942:	465a      	mov	r2, fp
 8104944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8104948:	9109      	str	r1, [sp, #36]	; 0x24
 810494a:	f7ff ff17 	bl	810477c <__exponent>
 810494e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104950:	1813      	adds	r3, r2, r0
 8104952:	2a01      	cmp	r2, #1
 8104954:	4681      	mov	r9, r0
 8104956:	6123      	str	r3, [r4, #16]
 8104958:	dc02      	bgt.n	8104960 <_printf_float+0x168>
 810495a:	6822      	ldr	r2, [r4, #0]
 810495c:	07d2      	lsls	r2, r2, #31
 810495e:	d501      	bpl.n	8104964 <_printf_float+0x16c>
 8104960:	3301      	adds	r3, #1
 8104962:	6123      	str	r3, [r4, #16]
 8104964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8104968:	2b00      	cmp	r3, #0
 810496a:	d09c      	beq.n	81048a6 <_printf_float+0xae>
 810496c:	232d      	movs	r3, #45	; 0x2d
 810496e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104972:	e798      	b.n	81048a6 <_printf_float+0xae>
 8104974:	9a06      	ldr	r2, [sp, #24]
 8104976:	2a47      	cmp	r2, #71	; 0x47
 8104978:	d1be      	bne.n	81048f8 <_printf_float+0x100>
 810497a:	2b00      	cmp	r3, #0
 810497c:	d1bc      	bne.n	81048f8 <_printf_float+0x100>
 810497e:	2301      	movs	r3, #1
 8104980:	e7b9      	b.n	81048f6 <_printf_float+0xfe>
 8104982:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8104986:	d118      	bne.n	81049ba <_printf_float+0x1c2>
 8104988:	2900      	cmp	r1, #0
 810498a:	6863      	ldr	r3, [r4, #4]
 810498c:	dd0b      	ble.n	81049a6 <_printf_float+0x1ae>
 810498e:	6121      	str	r1, [r4, #16]
 8104990:	b913      	cbnz	r3, 8104998 <_printf_float+0x1a0>
 8104992:	6822      	ldr	r2, [r4, #0]
 8104994:	07d0      	lsls	r0, r2, #31
 8104996:	d502      	bpl.n	810499e <_printf_float+0x1a6>
 8104998:	3301      	adds	r3, #1
 810499a:	440b      	add	r3, r1
 810499c:	6123      	str	r3, [r4, #16]
 810499e:	65a1      	str	r1, [r4, #88]	; 0x58
 81049a0:	f04f 0900 	mov.w	r9, #0
 81049a4:	e7de      	b.n	8104964 <_printf_float+0x16c>
 81049a6:	b913      	cbnz	r3, 81049ae <_printf_float+0x1b6>
 81049a8:	6822      	ldr	r2, [r4, #0]
 81049aa:	07d2      	lsls	r2, r2, #31
 81049ac:	d501      	bpl.n	81049b2 <_printf_float+0x1ba>
 81049ae:	3302      	adds	r3, #2
 81049b0:	e7f4      	b.n	810499c <_printf_float+0x1a4>
 81049b2:	2301      	movs	r3, #1
 81049b4:	e7f2      	b.n	810499c <_printf_float+0x1a4>
 81049b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81049ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81049bc:	4299      	cmp	r1, r3
 81049be:	db05      	blt.n	81049cc <_printf_float+0x1d4>
 81049c0:	6823      	ldr	r3, [r4, #0]
 81049c2:	6121      	str	r1, [r4, #16]
 81049c4:	07d8      	lsls	r0, r3, #31
 81049c6:	d5ea      	bpl.n	810499e <_printf_float+0x1a6>
 81049c8:	1c4b      	adds	r3, r1, #1
 81049ca:	e7e7      	b.n	810499c <_printf_float+0x1a4>
 81049cc:	2900      	cmp	r1, #0
 81049ce:	bfd4      	ite	le
 81049d0:	f1c1 0202 	rsble	r2, r1, #2
 81049d4:	2201      	movgt	r2, #1
 81049d6:	4413      	add	r3, r2
 81049d8:	e7e0      	b.n	810499c <_printf_float+0x1a4>
 81049da:	6823      	ldr	r3, [r4, #0]
 81049dc:	055a      	lsls	r2, r3, #21
 81049de:	d407      	bmi.n	81049f0 <_printf_float+0x1f8>
 81049e0:	6923      	ldr	r3, [r4, #16]
 81049e2:	4642      	mov	r2, r8
 81049e4:	4631      	mov	r1, r6
 81049e6:	4628      	mov	r0, r5
 81049e8:	47b8      	blx	r7
 81049ea:	3001      	adds	r0, #1
 81049ec:	d12c      	bne.n	8104a48 <_printf_float+0x250>
 81049ee:	e764      	b.n	81048ba <_printf_float+0xc2>
 81049f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81049f4:	f240 80e0 	bls.w	8104bb8 <_printf_float+0x3c0>
 81049f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81049fc:	2200      	movs	r2, #0
 81049fe:	2300      	movs	r3, #0
 8104a00:	f7fc f8ea 	bl	8100bd8 <__aeabi_dcmpeq>
 8104a04:	2800      	cmp	r0, #0
 8104a06:	d034      	beq.n	8104a72 <_printf_float+0x27a>
 8104a08:	4a37      	ldr	r2, [pc, #220]	; (8104ae8 <_printf_float+0x2f0>)
 8104a0a:	2301      	movs	r3, #1
 8104a0c:	4631      	mov	r1, r6
 8104a0e:	4628      	mov	r0, r5
 8104a10:	47b8      	blx	r7
 8104a12:	3001      	adds	r0, #1
 8104a14:	f43f af51 	beq.w	81048ba <_printf_float+0xc2>
 8104a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104a1c:	429a      	cmp	r2, r3
 8104a1e:	db02      	blt.n	8104a26 <_printf_float+0x22e>
 8104a20:	6823      	ldr	r3, [r4, #0]
 8104a22:	07d8      	lsls	r0, r3, #31
 8104a24:	d510      	bpl.n	8104a48 <_printf_float+0x250>
 8104a26:	ee18 3a10 	vmov	r3, s16
 8104a2a:	4652      	mov	r2, sl
 8104a2c:	4631      	mov	r1, r6
 8104a2e:	4628      	mov	r0, r5
 8104a30:	47b8      	blx	r7
 8104a32:	3001      	adds	r0, #1
 8104a34:	f43f af41 	beq.w	81048ba <_printf_float+0xc2>
 8104a38:	f04f 0800 	mov.w	r8, #0
 8104a3c:	f104 091a 	add.w	r9, r4, #26
 8104a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104a42:	3b01      	subs	r3, #1
 8104a44:	4543      	cmp	r3, r8
 8104a46:	dc09      	bgt.n	8104a5c <_printf_float+0x264>
 8104a48:	6823      	ldr	r3, [r4, #0]
 8104a4a:	079b      	lsls	r3, r3, #30
 8104a4c:	f100 8105 	bmi.w	8104c5a <_printf_float+0x462>
 8104a50:	68e0      	ldr	r0, [r4, #12]
 8104a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8104a54:	4298      	cmp	r0, r3
 8104a56:	bfb8      	it	lt
 8104a58:	4618      	movlt	r0, r3
 8104a5a:	e730      	b.n	81048be <_printf_float+0xc6>
 8104a5c:	2301      	movs	r3, #1
 8104a5e:	464a      	mov	r2, r9
 8104a60:	4631      	mov	r1, r6
 8104a62:	4628      	mov	r0, r5
 8104a64:	47b8      	blx	r7
 8104a66:	3001      	adds	r0, #1
 8104a68:	f43f af27 	beq.w	81048ba <_printf_float+0xc2>
 8104a6c:	f108 0801 	add.w	r8, r8, #1
 8104a70:	e7e6      	b.n	8104a40 <_printf_float+0x248>
 8104a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8104a74:	2b00      	cmp	r3, #0
 8104a76:	dc39      	bgt.n	8104aec <_printf_float+0x2f4>
 8104a78:	4a1b      	ldr	r2, [pc, #108]	; (8104ae8 <_printf_float+0x2f0>)
 8104a7a:	2301      	movs	r3, #1
 8104a7c:	4631      	mov	r1, r6
 8104a7e:	4628      	mov	r0, r5
 8104a80:	47b8      	blx	r7
 8104a82:	3001      	adds	r0, #1
 8104a84:	f43f af19 	beq.w	81048ba <_printf_float+0xc2>
 8104a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104a8c:	4313      	orrs	r3, r2
 8104a8e:	d102      	bne.n	8104a96 <_printf_float+0x29e>
 8104a90:	6823      	ldr	r3, [r4, #0]
 8104a92:	07d9      	lsls	r1, r3, #31
 8104a94:	d5d8      	bpl.n	8104a48 <_printf_float+0x250>
 8104a96:	ee18 3a10 	vmov	r3, s16
 8104a9a:	4652      	mov	r2, sl
 8104a9c:	4631      	mov	r1, r6
 8104a9e:	4628      	mov	r0, r5
 8104aa0:	47b8      	blx	r7
 8104aa2:	3001      	adds	r0, #1
 8104aa4:	f43f af09 	beq.w	81048ba <_printf_float+0xc2>
 8104aa8:	f04f 0900 	mov.w	r9, #0
 8104aac:	f104 0a1a 	add.w	sl, r4, #26
 8104ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8104ab2:	425b      	negs	r3, r3
 8104ab4:	454b      	cmp	r3, r9
 8104ab6:	dc01      	bgt.n	8104abc <_printf_float+0x2c4>
 8104ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104aba:	e792      	b.n	81049e2 <_printf_float+0x1ea>
 8104abc:	2301      	movs	r3, #1
 8104abe:	4652      	mov	r2, sl
 8104ac0:	4631      	mov	r1, r6
 8104ac2:	4628      	mov	r0, r5
 8104ac4:	47b8      	blx	r7
 8104ac6:	3001      	adds	r0, #1
 8104ac8:	f43f aef7 	beq.w	81048ba <_printf_float+0xc2>
 8104acc:	f109 0901 	add.w	r9, r9, #1
 8104ad0:	e7ee      	b.n	8104ab0 <_printf_float+0x2b8>
 8104ad2:	bf00      	nop
 8104ad4:	7fefffff 	.word	0x7fefffff
 8104ad8:	0810708c 	.word	0x0810708c
 8104adc:	08107090 	.word	0x08107090
 8104ae0:	08107098 	.word	0x08107098
 8104ae4:	08107094 	.word	0x08107094
 8104ae8:	0810709c 	.word	0x0810709c
 8104aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8104af0:	429a      	cmp	r2, r3
 8104af2:	bfa8      	it	ge
 8104af4:	461a      	movge	r2, r3
 8104af6:	2a00      	cmp	r2, #0
 8104af8:	4691      	mov	r9, r2
 8104afa:	dc37      	bgt.n	8104b6c <_printf_float+0x374>
 8104afc:	f04f 0b00 	mov.w	fp, #0
 8104b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104b04:	f104 021a 	add.w	r2, r4, #26
 8104b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8104b0a:	9305      	str	r3, [sp, #20]
 8104b0c:	eba3 0309 	sub.w	r3, r3, r9
 8104b10:	455b      	cmp	r3, fp
 8104b12:	dc33      	bgt.n	8104b7c <_printf_float+0x384>
 8104b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104b18:	429a      	cmp	r2, r3
 8104b1a:	db3b      	blt.n	8104b94 <_printf_float+0x39c>
 8104b1c:	6823      	ldr	r3, [r4, #0]
 8104b1e:	07da      	lsls	r2, r3, #31
 8104b20:	d438      	bmi.n	8104b94 <_printf_float+0x39c>
 8104b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104b24:	9b05      	ldr	r3, [sp, #20]
 8104b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8104b28:	1ad3      	subs	r3, r2, r3
 8104b2a:	eba2 0901 	sub.w	r9, r2, r1
 8104b2e:	4599      	cmp	r9, r3
 8104b30:	bfa8      	it	ge
 8104b32:	4699      	movge	r9, r3
 8104b34:	f1b9 0f00 	cmp.w	r9, #0
 8104b38:	dc35      	bgt.n	8104ba6 <_printf_float+0x3ae>
 8104b3a:	f04f 0800 	mov.w	r8, #0
 8104b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104b42:	f104 0a1a 	add.w	sl, r4, #26
 8104b46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104b4a:	1a9b      	subs	r3, r3, r2
 8104b4c:	eba3 0309 	sub.w	r3, r3, r9
 8104b50:	4543      	cmp	r3, r8
 8104b52:	f77f af79 	ble.w	8104a48 <_printf_float+0x250>
 8104b56:	2301      	movs	r3, #1
 8104b58:	4652      	mov	r2, sl
 8104b5a:	4631      	mov	r1, r6
 8104b5c:	4628      	mov	r0, r5
 8104b5e:	47b8      	blx	r7
 8104b60:	3001      	adds	r0, #1
 8104b62:	f43f aeaa 	beq.w	81048ba <_printf_float+0xc2>
 8104b66:	f108 0801 	add.w	r8, r8, #1
 8104b6a:	e7ec      	b.n	8104b46 <_printf_float+0x34e>
 8104b6c:	4613      	mov	r3, r2
 8104b6e:	4631      	mov	r1, r6
 8104b70:	4642      	mov	r2, r8
 8104b72:	4628      	mov	r0, r5
 8104b74:	47b8      	blx	r7
 8104b76:	3001      	adds	r0, #1
 8104b78:	d1c0      	bne.n	8104afc <_printf_float+0x304>
 8104b7a:	e69e      	b.n	81048ba <_printf_float+0xc2>
 8104b7c:	2301      	movs	r3, #1
 8104b7e:	4631      	mov	r1, r6
 8104b80:	4628      	mov	r0, r5
 8104b82:	9205      	str	r2, [sp, #20]
 8104b84:	47b8      	blx	r7
 8104b86:	3001      	adds	r0, #1
 8104b88:	f43f ae97 	beq.w	81048ba <_printf_float+0xc2>
 8104b8c:	9a05      	ldr	r2, [sp, #20]
 8104b8e:	f10b 0b01 	add.w	fp, fp, #1
 8104b92:	e7b9      	b.n	8104b08 <_printf_float+0x310>
 8104b94:	ee18 3a10 	vmov	r3, s16
 8104b98:	4652      	mov	r2, sl
 8104b9a:	4631      	mov	r1, r6
 8104b9c:	4628      	mov	r0, r5
 8104b9e:	47b8      	blx	r7
 8104ba0:	3001      	adds	r0, #1
 8104ba2:	d1be      	bne.n	8104b22 <_printf_float+0x32a>
 8104ba4:	e689      	b.n	81048ba <_printf_float+0xc2>
 8104ba6:	9a05      	ldr	r2, [sp, #20]
 8104ba8:	464b      	mov	r3, r9
 8104baa:	4442      	add	r2, r8
 8104bac:	4631      	mov	r1, r6
 8104bae:	4628      	mov	r0, r5
 8104bb0:	47b8      	blx	r7
 8104bb2:	3001      	adds	r0, #1
 8104bb4:	d1c1      	bne.n	8104b3a <_printf_float+0x342>
 8104bb6:	e680      	b.n	81048ba <_printf_float+0xc2>
 8104bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104bba:	2a01      	cmp	r2, #1
 8104bbc:	dc01      	bgt.n	8104bc2 <_printf_float+0x3ca>
 8104bbe:	07db      	lsls	r3, r3, #31
 8104bc0:	d538      	bpl.n	8104c34 <_printf_float+0x43c>
 8104bc2:	2301      	movs	r3, #1
 8104bc4:	4642      	mov	r2, r8
 8104bc6:	4631      	mov	r1, r6
 8104bc8:	4628      	mov	r0, r5
 8104bca:	47b8      	blx	r7
 8104bcc:	3001      	adds	r0, #1
 8104bce:	f43f ae74 	beq.w	81048ba <_printf_float+0xc2>
 8104bd2:	ee18 3a10 	vmov	r3, s16
 8104bd6:	4652      	mov	r2, sl
 8104bd8:	4631      	mov	r1, r6
 8104bda:	4628      	mov	r0, r5
 8104bdc:	47b8      	blx	r7
 8104bde:	3001      	adds	r0, #1
 8104be0:	f43f ae6b 	beq.w	81048ba <_printf_float+0xc2>
 8104be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8104be8:	2200      	movs	r2, #0
 8104bea:	2300      	movs	r3, #0
 8104bec:	f7fb fff4 	bl	8100bd8 <__aeabi_dcmpeq>
 8104bf0:	b9d8      	cbnz	r0, 8104c2a <_printf_float+0x432>
 8104bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104bf4:	f108 0201 	add.w	r2, r8, #1
 8104bf8:	3b01      	subs	r3, #1
 8104bfa:	4631      	mov	r1, r6
 8104bfc:	4628      	mov	r0, r5
 8104bfe:	47b8      	blx	r7
 8104c00:	3001      	adds	r0, #1
 8104c02:	d10e      	bne.n	8104c22 <_printf_float+0x42a>
 8104c04:	e659      	b.n	81048ba <_printf_float+0xc2>
 8104c06:	2301      	movs	r3, #1
 8104c08:	4652      	mov	r2, sl
 8104c0a:	4631      	mov	r1, r6
 8104c0c:	4628      	mov	r0, r5
 8104c0e:	47b8      	blx	r7
 8104c10:	3001      	adds	r0, #1
 8104c12:	f43f ae52 	beq.w	81048ba <_printf_float+0xc2>
 8104c16:	f108 0801 	add.w	r8, r8, #1
 8104c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104c1c:	3b01      	subs	r3, #1
 8104c1e:	4543      	cmp	r3, r8
 8104c20:	dcf1      	bgt.n	8104c06 <_printf_float+0x40e>
 8104c22:	464b      	mov	r3, r9
 8104c24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8104c28:	e6dc      	b.n	81049e4 <_printf_float+0x1ec>
 8104c2a:	f04f 0800 	mov.w	r8, #0
 8104c2e:	f104 0a1a 	add.w	sl, r4, #26
 8104c32:	e7f2      	b.n	8104c1a <_printf_float+0x422>
 8104c34:	2301      	movs	r3, #1
 8104c36:	4642      	mov	r2, r8
 8104c38:	e7df      	b.n	8104bfa <_printf_float+0x402>
 8104c3a:	2301      	movs	r3, #1
 8104c3c:	464a      	mov	r2, r9
 8104c3e:	4631      	mov	r1, r6
 8104c40:	4628      	mov	r0, r5
 8104c42:	47b8      	blx	r7
 8104c44:	3001      	adds	r0, #1
 8104c46:	f43f ae38 	beq.w	81048ba <_printf_float+0xc2>
 8104c4a:	f108 0801 	add.w	r8, r8, #1
 8104c4e:	68e3      	ldr	r3, [r4, #12]
 8104c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8104c52:	1a5b      	subs	r3, r3, r1
 8104c54:	4543      	cmp	r3, r8
 8104c56:	dcf0      	bgt.n	8104c3a <_printf_float+0x442>
 8104c58:	e6fa      	b.n	8104a50 <_printf_float+0x258>
 8104c5a:	f04f 0800 	mov.w	r8, #0
 8104c5e:	f104 0919 	add.w	r9, r4, #25
 8104c62:	e7f4      	b.n	8104c4e <_printf_float+0x456>

08104c64 <_printf_common>:
 8104c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104c68:	4616      	mov	r6, r2
 8104c6a:	4699      	mov	r9, r3
 8104c6c:	688a      	ldr	r2, [r1, #8]
 8104c6e:	690b      	ldr	r3, [r1, #16]
 8104c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8104c74:	4293      	cmp	r3, r2
 8104c76:	bfb8      	it	lt
 8104c78:	4613      	movlt	r3, r2
 8104c7a:	6033      	str	r3, [r6, #0]
 8104c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8104c80:	4607      	mov	r7, r0
 8104c82:	460c      	mov	r4, r1
 8104c84:	b10a      	cbz	r2, 8104c8a <_printf_common+0x26>
 8104c86:	3301      	adds	r3, #1
 8104c88:	6033      	str	r3, [r6, #0]
 8104c8a:	6823      	ldr	r3, [r4, #0]
 8104c8c:	0699      	lsls	r1, r3, #26
 8104c8e:	bf42      	ittt	mi
 8104c90:	6833      	ldrmi	r3, [r6, #0]
 8104c92:	3302      	addmi	r3, #2
 8104c94:	6033      	strmi	r3, [r6, #0]
 8104c96:	6825      	ldr	r5, [r4, #0]
 8104c98:	f015 0506 	ands.w	r5, r5, #6
 8104c9c:	d106      	bne.n	8104cac <_printf_common+0x48>
 8104c9e:	f104 0a19 	add.w	sl, r4, #25
 8104ca2:	68e3      	ldr	r3, [r4, #12]
 8104ca4:	6832      	ldr	r2, [r6, #0]
 8104ca6:	1a9b      	subs	r3, r3, r2
 8104ca8:	42ab      	cmp	r3, r5
 8104caa:	dc26      	bgt.n	8104cfa <_printf_common+0x96>
 8104cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8104cb0:	1e13      	subs	r3, r2, #0
 8104cb2:	6822      	ldr	r2, [r4, #0]
 8104cb4:	bf18      	it	ne
 8104cb6:	2301      	movne	r3, #1
 8104cb8:	0692      	lsls	r2, r2, #26
 8104cba:	d42b      	bmi.n	8104d14 <_printf_common+0xb0>
 8104cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8104cc0:	4649      	mov	r1, r9
 8104cc2:	4638      	mov	r0, r7
 8104cc4:	47c0      	blx	r8
 8104cc6:	3001      	adds	r0, #1
 8104cc8:	d01e      	beq.n	8104d08 <_printf_common+0xa4>
 8104cca:	6823      	ldr	r3, [r4, #0]
 8104ccc:	68e5      	ldr	r5, [r4, #12]
 8104cce:	6832      	ldr	r2, [r6, #0]
 8104cd0:	f003 0306 	and.w	r3, r3, #6
 8104cd4:	2b04      	cmp	r3, #4
 8104cd6:	bf08      	it	eq
 8104cd8:	1aad      	subeq	r5, r5, r2
 8104cda:	68a3      	ldr	r3, [r4, #8]
 8104cdc:	6922      	ldr	r2, [r4, #16]
 8104cde:	bf0c      	ite	eq
 8104ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8104ce4:	2500      	movne	r5, #0
 8104ce6:	4293      	cmp	r3, r2
 8104ce8:	bfc4      	itt	gt
 8104cea:	1a9b      	subgt	r3, r3, r2
 8104cec:	18ed      	addgt	r5, r5, r3
 8104cee:	2600      	movs	r6, #0
 8104cf0:	341a      	adds	r4, #26
 8104cf2:	42b5      	cmp	r5, r6
 8104cf4:	d11a      	bne.n	8104d2c <_printf_common+0xc8>
 8104cf6:	2000      	movs	r0, #0
 8104cf8:	e008      	b.n	8104d0c <_printf_common+0xa8>
 8104cfa:	2301      	movs	r3, #1
 8104cfc:	4652      	mov	r2, sl
 8104cfe:	4649      	mov	r1, r9
 8104d00:	4638      	mov	r0, r7
 8104d02:	47c0      	blx	r8
 8104d04:	3001      	adds	r0, #1
 8104d06:	d103      	bne.n	8104d10 <_printf_common+0xac>
 8104d08:	f04f 30ff 	mov.w	r0, #4294967295
 8104d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104d10:	3501      	adds	r5, #1
 8104d12:	e7c6      	b.n	8104ca2 <_printf_common+0x3e>
 8104d14:	18e1      	adds	r1, r4, r3
 8104d16:	1c5a      	adds	r2, r3, #1
 8104d18:	2030      	movs	r0, #48	; 0x30
 8104d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8104d1e:	4422      	add	r2, r4
 8104d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8104d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8104d28:	3302      	adds	r3, #2
 8104d2a:	e7c7      	b.n	8104cbc <_printf_common+0x58>
 8104d2c:	2301      	movs	r3, #1
 8104d2e:	4622      	mov	r2, r4
 8104d30:	4649      	mov	r1, r9
 8104d32:	4638      	mov	r0, r7
 8104d34:	47c0      	blx	r8
 8104d36:	3001      	adds	r0, #1
 8104d38:	d0e6      	beq.n	8104d08 <_printf_common+0xa4>
 8104d3a:	3601      	adds	r6, #1
 8104d3c:	e7d9      	b.n	8104cf2 <_printf_common+0x8e>
	...

08104d40 <_printf_i>:
 8104d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8104d44:	460c      	mov	r4, r1
 8104d46:	4691      	mov	r9, r2
 8104d48:	7e27      	ldrb	r7, [r4, #24]
 8104d4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8104d4c:	2f78      	cmp	r7, #120	; 0x78
 8104d4e:	4680      	mov	r8, r0
 8104d50:	469a      	mov	sl, r3
 8104d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8104d56:	d807      	bhi.n	8104d68 <_printf_i+0x28>
 8104d58:	2f62      	cmp	r7, #98	; 0x62
 8104d5a:	d80a      	bhi.n	8104d72 <_printf_i+0x32>
 8104d5c:	2f00      	cmp	r7, #0
 8104d5e:	f000 80d8 	beq.w	8104f12 <_printf_i+0x1d2>
 8104d62:	2f58      	cmp	r7, #88	; 0x58
 8104d64:	f000 80a3 	beq.w	8104eae <_printf_i+0x16e>
 8104d68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8104d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8104d70:	e03a      	b.n	8104de8 <_printf_i+0xa8>
 8104d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8104d76:	2b15      	cmp	r3, #21
 8104d78:	d8f6      	bhi.n	8104d68 <_printf_i+0x28>
 8104d7a:	a001      	add	r0, pc, #4	; (adr r0, 8104d80 <_printf_i+0x40>)
 8104d7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8104d80:	08104dd9 	.word	0x08104dd9
 8104d84:	08104ded 	.word	0x08104ded
 8104d88:	08104d69 	.word	0x08104d69
 8104d8c:	08104d69 	.word	0x08104d69
 8104d90:	08104d69 	.word	0x08104d69
 8104d94:	08104d69 	.word	0x08104d69
 8104d98:	08104ded 	.word	0x08104ded
 8104d9c:	08104d69 	.word	0x08104d69
 8104da0:	08104d69 	.word	0x08104d69
 8104da4:	08104d69 	.word	0x08104d69
 8104da8:	08104d69 	.word	0x08104d69
 8104dac:	08104ef9 	.word	0x08104ef9
 8104db0:	08104e1d 	.word	0x08104e1d
 8104db4:	08104edb 	.word	0x08104edb
 8104db8:	08104d69 	.word	0x08104d69
 8104dbc:	08104d69 	.word	0x08104d69
 8104dc0:	08104f1b 	.word	0x08104f1b
 8104dc4:	08104d69 	.word	0x08104d69
 8104dc8:	08104e1d 	.word	0x08104e1d
 8104dcc:	08104d69 	.word	0x08104d69
 8104dd0:	08104d69 	.word	0x08104d69
 8104dd4:	08104ee3 	.word	0x08104ee3
 8104dd8:	680b      	ldr	r3, [r1, #0]
 8104dda:	1d1a      	adds	r2, r3, #4
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	600a      	str	r2, [r1, #0]
 8104de0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8104de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8104de8:	2301      	movs	r3, #1
 8104dea:	e0a3      	b.n	8104f34 <_printf_i+0x1f4>
 8104dec:	6825      	ldr	r5, [r4, #0]
 8104dee:	6808      	ldr	r0, [r1, #0]
 8104df0:	062e      	lsls	r6, r5, #24
 8104df2:	f100 0304 	add.w	r3, r0, #4
 8104df6:	d50a      	bpl.n	8104e0e <_printf_i+0xce>
 8104df8:	6805      	ldr	r5, [r0, #0]
 8104dfa:	600b      	str	r3, [r1, #0]
 8104dfc:	2d00      	cmp	r5, #0
 8104dfe:	da03      	bge.n	8104e08 <_printf_i+0xc8>
 8104e00:	232d      	movs	r3, #45	; 0x2d
 8104e02:	426d      	negs	r5, r5
 8104e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104e08:	485e      	ldr	r0, [pc, #376]	; (8104f84 <_printf_i+0x244>)
 8104e0a:	230a      	movs	r3, #10
 8104e0c:	e019      	b.n	8104e42 <_printf_i+0x102>
 8104e0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8104e12:	6805      	ldr	r5, [r0, #0]
 8104e14:	600b      	str	r3, [r1, #0]
 8104e16:	bf18      	it	ne
 8104e18:	b22d      	sxthne	r5, r5
 8104e1a:	e7ef      	b.n	8104dfc <_printf_i+0xbc>
 8104e1c:	680b      	ldr	r3, [r1, #0]
 8104e1e:	6825      	ldr	r5, [r4, #0]
 8104e20:	1d18      	adds	r0, r3, #4
 8104e22:	6008      	str	r0, [r1, #0]
 8104e24:	0628      	lsls	r0, r5, #24
 8104e26:	d501      	bpl.n	8104e2c <_printf_i+0xec>
 8104e28:	681d      	ldr	r5, [r3, #0]
 8104e2a:	e002      	b.n	8104e32 <_printf_i+0xf2>
 8104e2c:	0669      	lsls	r1, r5, #25
 8104e2e:	d5fb      	bpl.n	8104e28 <_printf_i+0xe8>
 8104e30:	881d      	ldrh	r5, [r3, #0]
 8104e32:	4854      	ldr	r0, [pc, #336]	; (8104f84 <_printf_i+0x244>)
 8104e34:	2f6f      	cmp	r7, #111	; 0x6f
 8104e36:	bf0c      	ite	eq
 8104e38:	2308      	moveq	r3, #8
 8104e3a:	230a      	movne	r3, #10
 8104e3c:	2100      	movs	r1, #0
 8104e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8104e42:	6866      	ldr	r6, [r4, #4]
 8104e44:	60a6      	str	r6, [r4, #8]
 8104e46:	2e00      	cmp	r6, #0
 8104e48:	bfa2      	ittt	ge
 8104e4a:	6821      	ldrge	r1, [r4, #0]
 8104e4c:	f021 0104 	bicge.w	r1, r1, #4
 8104e50:	6021      	strge	r1, [r4, #0]
 8104e52:	b90d      	cbnz	r5, 8104e58 <_printf_i+0x118>
 8104e54:	2e00      	cmp	r6, #0
 8104e56:	d04d      	beq.n	8104ef4 <_printf_i+0x1b4>
 8104e58:	4616      	mov	r6, r2
 8104e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8104e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8104e62:	5dc7      	ldrb	r7, [r0, r7]
 8104e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8104e68:	462f      	mov	r7, r5
 8104e6a:	42bb      	cmp	r3, r7
 8104e6c:	460d      	mov	r5, r1
 8104e6e:	d9f4      	bls.n	8104e5a <_printf_i+0x11a>
 8104e70:	2b08      	cmp	r3, #8
 8104e72:	d10b      	bne.n	8104e8c <_printf_i+0x14c>
 8104e74:	6823      	ldr	r3, [r4, #0]
 8104e76:	07df      	lsls	r7, r3, #31
 8104e78:	d508      	bpl.n	8104e8c <_printf_i+0x14c>
 8104e7a:	6923      	ldr	r3, [r4, #16]
 8104e7c:	6861      	ldr	r1, [r4, #4]
 8104e7e:	4299      	cmp	r1, r3
 8104e80:	bfde      	ittt	le
 8104e82:	2330      	movle	r3, #48	; 0x30
 8104e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8104e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8104e8c:	1b92      	subs	r2, r2, r6
 8104e8e:	6122      	str	r2, [r4, #16]
 8104e90:	f8cd a000 	str.w	sl, [sp]
 8104e94:	464b      	mov	r3, r9
 8104e96:	aa03      	add	r2, sp, #12
 8104e98:	4621      	mov	r1, r4
 8104e9a:	4640      	mov	r0, r8
 8104e9c:	f7ff fee2 	bl	8104c64 <_printf_common>
 8104ea0:	3001      	adds	r0, #1
 8104ea2:	d14c      	bne.n	8104f3e <_printf_i+0x1fe>
 8104ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8104ea8:	b004      	add	sp, #16
 8104eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104eae:	4835      	ldr	r0, [pc, #212]	; (8104f84 <_printf_i+0x244>)
 8104eb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8104eb4:	6823      	ldr	r3, [r4, #0]
 8104eb6:	680e      	ldr	r6, [r1, #0]
 8104eb8:	061f      	lsls	r7, r3, #24
 8104eba:	f856 5b04 	ldr.w	r5, [r6], #4
 8104ebe:	600e      	str	r6, [r1, #0]
 8104ec0:	d514      	bpl.n	8104eec <_printf_i+0x1ac>
 8104ec2:	07d9      	lsls	r1, r3, #31
 8104ec4:	bf44      	itt	mi
 8104ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8104eca:	6023      	strmi	r3, [r4, #0]
 8104ecc:	b91d      	cbnz	r5, 8104ed6 <_printf_i+0x196>
 8104ece:	6823      	ldr	r3, [r4, #0]
 8104ed0:	f023 0320 	bic.w	r3, r3, #32
 8104ed4:	6023      	str	r3, [r4, #0]
 8104ed6:	2310      	movs	r3, #16
 8104ed8:	e7b0      	b.n	8104e3c <_printf_i+0xfc>
 8104eda:	6823      	ldr	r3, [r4, #0]
 8104edc:	f043 0320 	orr.w	r3, r3, #32
 8104ee0:	6023      	str	r3, [r4, #0]
 8104ee2:	2378      	movs	r3, #120	; 0x78
 8104ee4:	4828      	ldr	r0, [pc, #160]	; (8104f88 <_printf_i+0x248>)
 8104ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8104eea:	e7e3      	b.n	8104eb4 <_printf_i+0x174>
 8104eec:	065e      	lsls	r6, r3, #25
 8104eee:	bf48      	it	mi
 8104ef0:	b2ad      	uxthmi	r5, r5
 8104ef2:	e7e6      	b.n	8104ec2 <_printf_i+0x182>
 8104ef4:	4616      	mov	r6, r2
 8104ef6:	e7bb      	b.n	8104e70 <_printf_i+0x130>
 8104ef8:	680b      	ldr	r3, [r1, #0]
 8104efa:	6826      	ldr	r6, [r4, #0]
 8104efc:	6960      	ldr	r0, [r4, #20]
 8104efe:	1d1d      	adds	r5, r3, #4
 8104f00:	600d      	str	r5, [r1, #0]
 8104f02:	0635      	lsls	r5, r6, #24
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	d501      	bpl.n	8104f0c <_printf_i+0x1cc>
 8104f08:	6018      	str	r0, [r3, #0]
 8104f0a:	e002      	b.n	8104f12 <_printf_i+0x1d2>
 8104f0c:	0671      	lsls	r1, r6, #25
 8104f0e:	d5fb      	bpl.n	8104f08 <_printf_i+0x1c8>
 8104f10:	8018      	strh	r0, [r3, #0]
 8104f12:	2300      	movs	r3, #0
 8104f14:	6123      	str	r3, [r4, #16]
 8104f16:	4616      	mov	r6, r2
 8104f18:	e7ba      	b.n	8104e90 <_printf_i+0x150>
 8104f1a:	680b      	ldr	r3, [r1, #0]
 8104f1c:	1d1a      	adds	r2, r3, #4
 8104f1e:	600a      	str	r2, [r1, #0]
 8104f20:	681e      	ldr	r6, [r3, #0]
 8104f22:	6862      	ldr	r2, [r4, #4]
 8104f24:	2100      	movs	r1, #0
 8104f26:	4630      	mov	r0, r6
 8104f28:	f7fb f9e2 	bl	81002f0 <memchr>
 8104f2c:	b108      	cbz	r0, 8104f32 <_printf_i+0x1f2>
 8104f2e:	1b80      	subs	r0, r0, r6
 8104f30:	6060      	str	r0, [r4, #4]
 8104f32:	6863      	ldr	r3, [r4, #4]
 8104f34:	6123      	str	r3, [r4, #16]
 8104f36:	2300      	movs	r3, #0
 8104f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104f3c:	e7a8      	b.n	8104e90 <_printf_i+0x150>
 8104f3e:	6923      	ldr	r3, [r4, #16]
 8104f40:	4632      	mov	r2, r6
 8104f42:	4649      	mov	r1, r9
 8104f44:	4640      	mov	r0, r8
 8104f46:	47d0      	blx	sl
 8104f48:	3001      	adds	r0, #1
 8104f4a:	d0ab      	beq.n	8104ea4 <_printf_i+0x164>
 8104f4c:	6823      	ldr	r3, [r4, #0]
 8104f4e:	079b      	lsls	r3, r3, #30
 8104f50:	d413      	bmi.n	8104f7a <_printf_i+0x23a>
 8104f52:	68e0      	ldr	r0, [r4, #12]
 8104f54:	9b03      	ldr	r3, [sp, #12]
 8104f56:	4298      	cmp	r0, r3
 8104f58:	bfb8      	it	lt
 8104f5a:	4618      	movlt	r0, r3
 8104f5c:	e7a4      	b.n	8104ea8 <_printf_i+0x168>
 8104f5e:	2301      	movs	r3, #1
 8104f60:	4632      	mov	r2, r6
 8104f62:	4649      	mov	r1, r9
 8104f64:	4640      	mov	r0, r8
 8104f66:	47d0      	blx	sl
 8104f68:	3001      	adds	r0, #1
 8104f6a:	d09b      	beq.n	8104ea4 <_printf_i+0x164>
 8104f6c:	3501      	adds	r5, #1
 8104f6e:	68e3      	ldr	r3, [r4, #12]
 8104f70:	9903      	ldr	r1, [sp, #12]
 8104f72:	1a5b      	subs	r3, r3, r1
 8104f74:	42ab      	cmp	r3, r5
 8104f76:	dcf2      	bgt.n	8104f5e <_printf_i+0x21e>
 8104f78:	e7eb      	b.n	8104f52 <_printf_i+0x212>
 8104f7a:	2500      	movs	r5, #0
 8104f7c:	f104 0619 	add.w	r6, r4, #25
 8104f80:	e7f5      	b.n	8104f6e <_printf_i+0x22e>
 8104f82:	bf00      	nop
 8104f84:	0810709e 	.word	0x0810709e
 8104f88:	081070af 	.word	0x081070af

08104f8c <quorem>:
 8104f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104f90:	6903      	ldr	r3, [r0, #16]
 8104f92:	690c      	ldr	r4, [r1, #16]
 8104f94:	42a3      	cmp	r3, r4
 8104f96:	4607      	mov	r7, r0
 8104f98:	f2c0 8081 	blt.w	810509e <quorem+0x112>
 8104f9c:	3c01      	subs	r4, #1
 8104f9e:	f101 0814 	add.w	r8, r1, #20
 8104fa2:	f100 0514 	add.w	r5, r0, #20
 8104fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8104faa:	9301      	str	r3, [sp, #4]
 8104fac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8104fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8104fb4:	3301      	adds	r3, #1
 8104fb6:	429a      	cmp	r2, r3
 8104fb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8104fbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8104fc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8104fc4:	d331      	bcc.n	810502a <quorem+0x9e>
 8104fc6:	f04f 0e00 	mov.w	lr, #0
 8104fca:	4640      	mov	r0, r8
 8104fcc:	46ac      	mov	ip, r5
 8104fce:	46f2      	mov	sl, lr
 8104fd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8104fd4:	b293      	uxth	r3, r2
 8104fd6:	fb06 e303 	mla	r3, r6, r3, lr
 8104fda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8104fde:	b29b      	uxth	r3, r3
 8104fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8104fe4:	0c12      	lsrs	r2, r2, #16
 8104fe6:	f8dc a000 	ldr.w	sl, [ip]
 8104fea:	fb06 e202 	mla	r2, r6, r2, lr
 8104fee:	fa13 f38a 	uxtah	r3, r3, sl
 8104ff2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8104ff6:	fa1f fa82 	uxth.w	sl, r2
 8104ffa:	f8dc 2000 	ldr.w	r2, [ip]
 8104ffe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8105002:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8105006:	b29b      	uxth	r3, r3
 8105008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810500c:	4581      	cmp	r9, r0
 810500e:	f84c 3b04 	str.w	r3, [ip], #4
 8105012:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8105016:	d2db      	bcs.n	8104fd0 <quorem+0x44>
 8105018:	f855 300b 	ldr.w	r3, [r5, fp]
 810501c:	b92b      	cbnz	r3, 810502a <quorem+0x9e>
 810501e:	9b01      	ldr	r3, [sp, #4]
 8105020:	3b04      	subs	r3, #4
 8105022:	429d      	cmp	r5, r3
 8105024:	461a      	mov	r2, r3
 8105026:	d32e      	bcc.n	8105086 <quorem+0xfa>
 8105028:	613c      	str	r4, [r7, #16]
 810502a:	4638      	mov	r0, r7
 810502c:	f001 f8c0 	bl	81061b0 <__mcmp>
 8105030:	2800      	cmp	r0, #0
 8105032:	db24      	blt.n	810507e <quorem+0xf2>
 8105034:	3601      	adds	r6, #1
 8105036:	4628      	mov	r0, r5
 8105038:	f04f 0c00 	mov.w	ip, #0
 810503c:	f858 2b04 	ldr.w	r2, [r8], #4
 8105040:	f8d0 e000 	ldr.w	lr, [r0]
 8105044:	b293      	uxth	r3, r2
 8105046:	ebac 0303 	sub.w	r3, ip, r3
 810504a:	0c12      	lsrs	r2, r2, #16
 810504c:	fa13 f38e 	uxtah	r3, r3, lr
 8105050:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8105054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8105058:	b29b      	uxth	r3, r3
 810505a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810505e:	45c1      	cmp	r9, r8
 8105060:	f840 3b04 	str.w	r3, [r0], #4
 8105064:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8105068:	d2e8      	bcs.n	810503c <quorem+0xb0>
 810506a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810506e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8105072:	b922      	cbnz	r2, 810507e <quorem+0xf2>
 8105074:	3b04      	subs	r3, #4
 8105076:	429d      	cmp	r5, r3
 8105078:	461a      	mov	r2, r3
 810507a:	d30a      	bcc.n	8105092 <quorem+0x106>
 810507c:	613c      	str	r4, [r7, #16]
 810507e:	4630      	mov	r0, r6
 8105080:	b003      	add	sp, #12
 8105082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105086:	6812      	ldr	r2, [r2, #0]
 8105088:	3b04      	subs	r3, #4
 810508a:	2a00      	cmp	r2, #0
 810508c:	d1cc      	bne.n	8105028 <quorem+0x9c>
 810508e:	3c01      	subs	r4, #1
 8105090:	e7c7      	b.n	8105022 <quorem+0x96>
 8105092:	6812      	ldr	r2, [r2, #0]
 8105094:	3b04      	subs	r3, #4
 8105096:	2a00      	cmp	r2, #0
 8105098:	d1f0      	bne.n	810507c <quorem+0xf0>
 810509a:	3c01      	subs	r4, #1
 810509c:	e7eb      	b.n	8105076 <quorem+0xea>
 810509e:	2000      	movs	r0, #0
 81050a0:	e7ee      	b.n	8105080 <quorem+0xf4>
 81050a2:	0000      	movs	r0, r0
 81050a4:	0000      	movs	r0, r0
	...

081050a8 <_dtoa_r>:
 81050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81050ac:	ed2d 8b02 	vpush	{d8}
 81050b0:	ec57 6b10 	vmov	r6, r7, d0
 81050b4:	b095      	sub	sp, #84	; 0x54
 81050b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81050b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81050bc:	9105      	str	r1, [sp, #20]
 81050be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 81050c2:	4604      	mov	r4, r0
 81050c4:	9209      	str	r2, [sp, #36]	; 0x24
 81050c6:	930f      	str	r3, [sp, #60]	; 0x3c
 81050c8:	b975      	cbnz	r5, 81050e8 <_dtoa_r+0x40>
 81050ca:	2010      	movs	r0, #16
 81050cc:	f000 fddc 	bl	8105c88 <malloc>
 81050d0:	4602      	mov	r2, r0
 81050d2:	6260      	str	r0, [r4, #36]	; 0x24
 81050d4:	b920      	cbnz	r0, 81050e0 <_dtoa_r+0x38>
 81050d6:	4bb2      	ldr	r3, [pc, #712]	; (81053a0 <_dtoa_r+0x2f8>)
 81050d8:	21ea      	movs	r1, #234	; 0xea
 81050da:	48b2      	ldr	r0, [pc, #712]	; (81053a4 <_dtoa_r+0x2fc>)
 81050dc:	f001 fa32 	bl	8106544 <__assert_func>
 81050e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81050e4:	6005      	str	r5, [r0, #0]
 81050e6:	60c5      	str	r5, [r0, #12]
 81050e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81050ea:	6819      	ldr	r1, [r3, #0]
 81050ec:	b151      	cbz	r1, 8105104 <_dtoa_r+0x5c>
 81050ee:	685a      	ldr	r2, [r3, #4]
 81050f0:	604a      	str	r2, [r1, #4]
 81050f2:	2301      	movs	r3, #1
 81050f4:	4093      	lsls	r3, r2
 81050f6:	608b      	str	r3, [r1, #8]
 81050f8:	4620      	mov	r0, r4
 81050fa:	f000 fe1b 	bl	8105d34 <_Bfree>
 81050fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105100:	2200      	movs	r2, #0
 8105102:	601a      	str	r2, [r3, #0]
 8105104:	1e3b      	subs	r3, r7, #0
 8105106:	bfb9      	ittee	lt
 8105108:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810510c:	9303      	strlt	r3, [sp, #12]
 810510e:	2300      	movge	r3, #0
 8105110:	f8c8 3000 	strge.w	r3, [r8]
 8105114:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8105118:	4ba3      	ldr	r3, [pc, #652]	; (81053a8 <_dtoa_r+0x300>)
 810511a:	bfbc      	itt	lt
 810511c:	2201      	movlt	r2, #1
 810511e:	f8c8 2000 	strlt.w	r2, [r8]
 8105122:	ea33 0309 	bics.w	r3, r3, r9
 8105126:	d11b      	bne.n	8105160 <_dtoa_r+0xb8>
 8105128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810512a:	f242 730f 	movw	r3, #9999	; 0x270f
 810512e:	6013      	str	r3, [r2, #0]
 8105130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8105134:	4333      	orrs	r3, r6
 8105136:	f000 857a 	beq.w	8105c2e <_dtoa_r+0xb86>
 810513a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810513c:	b963      	cbnz	r3, 8105158 <_dtoa_r+0xb0>
 810513e:	4b9b      	ldr	r3, [pc, #620]	; (81053ac <_dtoa_r+0x304>)
 8105140:	e024      	b.n	810518c <_dtoa_r+0xe4>
 8105142:	4b9b      	ldr	r3, [pc, #620]	; (81053b0 <_dtoa_r+0x308>)
 8105144:	9300      	str	r3, [sp, #0]
 8105146:	3308      	adds	r3, #8
 8105148:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810514a:	6013      	str	r3, [r2, #0]
 810514c:	9800      	ldr	r0, [sp, #0]
 810514e:	b015      	add	sp, #84	; 0x54
 8105150:	ecbd 8b02 	vpop	{d8}
 8105154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105158:	4b94      	ldr	r3, [pc, #592]	; (81053ac <_dtoa_r+0x304>)
 810515a:	9300      	str	r3, [sp, #0]
 810515c:	3303      	adds	r3, #3
 810515e:	e7f3      	b.n	8105148 <_dtoa_r+0xa0>
 8105160:	ed9d 7b02 	vldr	d7, [sp, #8]
 8105164:	2200      	movs	r2, #0
 8105166:	ec51 0b17 	vmov	r0, r1, d7
 810516a:	2300      	movs	r3, #0
 810516c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8105170:	f7fb fd32 	bl	8100bd8 <__aeabi_dcmpeq>
 8105174:	4680      	mov	r8, r0
 8105176:	b158      	cbz	r0, 8105190 <_dtoa_r+0xe8>
 8105178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810517a:	2301      	movs	r3, #1
 810517c:	6013      	str	r3, [r2, #0]
 810517e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105180:	2b00      	cmp	r3, #0
 8105182:	f000 8551 	beq.w	8105c28 <_dtoa_r+0xb80>
 8105186:	488b      	ldr	r0, [pc, #556]	; (81053b4 <_dtoa_r+0x30c>)
 8105188:	6018      	str	r0, [r3, #0]
 810518a:	1e43      	subs	r3, r0, #1
 810518c:	9300      	str	r3, [sp, #0]
 810518e:	e7dd      	b.n	810514c <_dtoa_r+0xa4>
 8105190:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8105194:	aa12      	add	r2, sp, #72	; 0x48
 8105196:	a913      	add	r1, sp, #76	; 0x4c
 8105198:	4620      	mov	r0, r4
 810519a:	f001 f8ad 	bl	81062f8 <__d2b>
 810519e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81051a2:	4683      	mov	fp, r0
 81051a4:	2d00      	cmp	r5, #0
 81051a6:	d07c      	beq.n	81052a2 <_dtoa_r+0x1fa>
 81051a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81051aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 81051ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81051b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 81051b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81051ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81051be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81051c2:	4b7d      	ldr	r3, [pc, #500]	; (81053b8 <_dtoa_r+0x310>)
 81051c4:	2200      	movs	r2, #0
 81051c6:	4630      	mov	r0, r6
 81051c8:	4639      	mov	r1, r7
 81051ca:	f7fb f8e5 	bl	8100398 <__aeabi_dsub>
 81051ce:	a36e      	add	r3, pc, #440	; (adr r3, 8105388 <_dtoa_r+0x2e0>)
 81051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051d4:	f7fb fa98 	bl	8100708 <__aeabi_dmul>
 81051d8:	a36d      	add	r3, pc, #436	; (adr r3, 8105390 <_dtoa_r+0x2e8>)
 81051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051de:	f7fb f8dd 	bl	810039c <__adddf3>
 81051e2:	4606      	mov	r6, r0
 81051e4:	4628      	mov	r0, r5
 81051e6:	460f      	mov	r7, r1
 81051e8:	f7fb fa24 	bl	8100634 <__aeabi_i2d>
 81051ec:	a36a      	add	r3, pc, #424	; (adr r3, 8105398 <_dtoa_r+0x2f0>)
 81051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051f2:	f7fb fa89 	bl	8100708 <__aeabi_dmul>
 81051f6:	4602      	mov	r2, r0
 81051f8:	460b      	mov	r3, r1
 81051fa:	4630      	mov	r0, r6
 81051fc:	4639      	mov	r1, r7
 81051fe:	f7fb f8cd 	bl	810039c <__adddf3>
 8105202:	4606      	mov	r6, r0
 8105204:	460f      	mov	r7, r1
 8105206:	f7fb fd2f 	bl	8100c68 <__aeabi_d2iz>
 810520a:	2200      	movs	r2, #0
 810520c:	4682      	mov	sl, r0
 810520e:	2300      	movs	r3, #0
 8105210:	4630      	mov	r0, r6
 8105212:	4639      	mov	r1, r7
 8105214:	f7fb fcea 	bl	8100bec <__aeabi_dcmplt>
 8105218:	b148      	cbz	r0, 810522e <_dtoa_r+0x186>
 810521a:	4650      	mov	r0, sl
 810521c:	f7fb fa0a 	bl	8100634 <__aeabi_i2d>
 8105220:	4632      	mov	r2, r6
 8105222:	463b      	mov	r3, r7
 8105224:	f7fb fcd8 	bl	8100bd8 <__aeabi_dcmpeq>
 8105228:	b908      	cbnz	r0, 810522e <_dtoa_r+0x186>
 810522a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810522e:	f1ba 0f16 	cmp.w	sl, #22
 8105232:	d854      	bhi.n	81052de <_dtoa_r+0x236>
 8105234:	4b61      	ldr	r3, [pc, #388]	; (81053bc <_dtoa_r+0x314>)
 8105236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810523e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8105242:	f7fb fcd3 	bl	8100bec <__aeabi_dcmplt>
 8105246:	2800      	cmp	r0, #0
 8105248:	d04b      	beq.n	81052e2 <_dtoa_r+0x23a>
 810524a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810524e:	2300      	movs	r3, #0
 8105250:	930e      	str	r3, [sp, #56]	; 0x38
 8105252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8105254:	1b5d      	subs	r5, r3, r5
 8105256:	1e6b      	subs	r3, r5, #1
 8105258:	9304      	str	r3, [sp, #16]
 810525a:	bf43      	ittte	mi
 810525c:	2300      	movmi	r3, #0
 810525e:	f1c5 0801 	rsbmi	r8, r5, #1
 8105262:	9304      	strmi	r3, [sp, #16]
 8105264:	f04f 0800 	movpl.w	r8, #0
 8105268:	f1ba 0f00 	cmp.w	sl, #0
 810526c:	db3b      	blt.n	81052e6 <_dtoa_r+0x23e>
 810526e:	9b04      	ldr	r3, [sp, #16]
 8105270:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8105274:	4453      	add	r3, sl
 8105276:	9304      	str	r3, [sp, #16]
 8105278:	2300      	movs	r3, #0
 810527a:	9306      	str	r3, [sp, #24]
 810527c:	9b05      	ldr	r3, [sp, #20]
 810527e:	2b09      	cmp	r3, #9
 8105280:	d869      	bhi.n	8105356 <_dtoa_r+0x2ae>
 8105282:	2b05      	cmp	r3, #5
 8105284:	bfc4      	itt	gt
 8105286:	3b04      	subgt	r3, #4
 8105288:	9305      	strgt	r3, [sp, #20]
 810528a:	9b05      	ldr	r3, [sp, #20]
 810528c:	f1a3 0302 	sub.w	r3, r3, #2
 8105290:	bfcc      	ite	gt
 8105292:	2500      	movgt	r5, #0
 8105294:	2501      	movle	r5, #1
 8105296:	2b03      	cmp	r3, #3
 8105298:	d869      	bhi.n	810536e <_dtoa_r+0x2c6>
 810529a:	e8df f003 	tbb	[pc, r3]
 810529e:	4e2c      	.short	0x4e2c
 81052a0:	5a4c      	.short	0x5a4c
 81052a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 81052a6:	441d      	add	r5, r3
 81052a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81052ac:	2b20      	cmp	r3, #32
 81052ae:	bfc1      	itttt	gt
 81052b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81052b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81052b8:	fa09 f303 	lslgt.w	r3, r9, r3
 81052bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 81052c0:	bfda      	itte	le
 81052c2:	f1c3 0320 	rsble	r3, r3, #32
 81052c6:	fa06 f003 	lslle.w	r0, r6, r3
 81052ca:	4318      	orrgt	r0, r3
 81052cc:	f7fb f9a2 	bl	8100614 <__aeabi_ui2d>
 81052d0:	2301      	movs	r3, #1
 81052d2:	4606      	mov	r6, r0
 81052d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81052d8:	3d01      	subs	r5, #1
 81052da:	9310      	str	r3, [sp, #64]	; 0x40
 81052dc:	e771      	b.n	81051c2 <_dtoa_r+0x11a>
 81052de:	2301      	movs	r3, #1
 81052e0:	e7b6      	b.n	8105250 <_dtoa_r+0x1a8>
 81052e2:	900e      	str	r0, [sp, #56]	; 0x38
 81052e4:	e7b5      	b.n	8105252 <_dtoa_r+0x1aa>
 81052e6:	f1ca 0300 	rsb	r3, sl, #0
 81052ea:	9306      	str	r3, [sp, #24]
 81052ec:	2300      	movs	r3, #0
 81052ee:	eba8 080a 	sub.w	r8, r8, sl
 81052f2:	930d      	str	r3, [sp, #52]	; 0x34
 81052f4:	e7c2      	b.n	810527c <_dtoa_r+0x1d4>
 81052f6:	2300      	movs	r3, #0
 81052f8:	9308      	str	r3, [sp, #32]
 81052fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81052fc:	2b00      	cmp	r3, #0
 81052fe:	dc39      	bgt.n	8105374 <_dtoa_r+0x2cc>
 8105300:	f04f 0901 	mov.w	r9, #1
 8105304:	f8cd 9004 	str.w	r9, [sp, #4]
 8105308:	464b      	mov	r3, r9
 810530a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810530e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8105310:	2200      	movs	r2, #0
 8105312:	6042      	str	r2, [r0, #4]
 8105314:	2204      	movs	r2, #4
 8105316:	f102 0614 	add.w	r6, r2, #20
 810531a:	429e      	cmp	r6, r3
 810531c:	6841      	ldr	r1, [r0, #4]
 810531e:	d92f      	bls.n	8105380 <_dtoa_r+0x2d8>
 8105320:	4620      	mov	r0, r4
 8105322:	f000 fcc7 	bl	8105cb4 <_Balloc>
 8105326:	9000      	str	r0, [sp, #0]
 8105328:	2800      	cmp	r0, #0
 810532a:	d14b      	bne.n	81053c4 <_dtoa_r+0x31c>
 810532c:	4b24      	ldr	r3, [pc, #144]	; (81053c0 <_dtoa_r+0x318>)
 810532e:	4602      	mov	r2, r0
 8105330:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8105334:	e6d1      	b.n	81050da <_dtoa_r+0x32>
 8105336:	2301      	movs	r3, #1
 8105338:	e7de      	b.n	81052f8 <_dtoa_r+0x250>
 810533a:	2300      	movs	r3, #0
 810533c:	9308      	str	r3, [sp, #32]
 810533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105340:	eb0a 0903 	add.w	r9, sl, r3
 8105344:	f109 0301 	add.w	r3, r9, #1
 8105348:	2b01      	cmp	r3, #1
 810534a:	9301      	str	r3, [sp, #4]
 810534c:	bfb8      	it	lt
 810534e:	2301      	movlt	r3, #1
 8105350:	e7dd      	b.n	810530e <_dtoa_r+0x266>
 8105352:	2301      	movs	r3, #1
 8105354:	e7f2      	b.n	810533c <_dtoa_r+0x294>
 8105356:	2501      	movs	r5, #1
 8105358:	2300      	movs	r3, #0
 810535a:	9305      	str	r3, [sp, #20]
 810535c:	9508      	str	r5, [sp, #32]
 810535e:	f04f 39ff 	mov.w	r9, #4294967295
 8105362:	2200      	movs	r2, #0
 8105364:	f8cd 9004 	str.w	r9, [sp, #4]
 8105368:	2312      	movs	r3, #18
 810536a:	9209      	str	r2, [sp, #36]	; 0x24
 810536c:	e7cf      	b.n	810530e <_dtoa_r+0x266>
 810536e:	2301      	movs	r3, #1
 8105370:	9308      	str	r3, [sp, #32]
 8105372:	e7f4      	b.n	810535e <_dtoa_r+0x2b6>
 8105374:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8105378:	f8cd 9004 	str.w	r9, [sp, #4]
 810537c:	464b      	mov	r3, r9
 810537e:	e7c6      	b.n	810530e <_dtoa_r+0x266>
 8105380:	3101      	adds	r1, #1
 8105382:	6041      	str	r1, [r0, #4]
 8105384:	0052      	lsls	r2, r2, #1
 8105386:	e7c6      	b.n	8105316 <_dtoa_r+0x26e>
 8105388:	636f4361 	.word	0x636f4361
 810538c:	3fd287a7 	.word	0x3fd287a7
 8105390:	8b60c8b3 	.word	0x8b60c8b3
 8105394:	3fc68a28 	.word	0x3fc68a28
 8105398:	509f79fb 	.word	0x509f79fb
 810539c:	3fd34413 	.word	0x3fd34413
 81053a0:	081070cd 	.word	0x081070cd
 81053a4:	081070e4 	.word	0x081070e4
 81053a8:	7ff00000 	.word	0x7ff00000
 81053ac:	081070c9 	.word	0x081070c9
 81053b0:	081070c0 	.word	0x081070c0
 81053b4:	0810709d 	.word	0x0810709d
 81053b8:	3ff80000 	.word	0x3ff80000
 81053bc:	081071e0 	.word	0x081071e0
 81053c0:	08107143 	.word	0x08107143
 81053c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81053c6:	9a00      	ldr	r2, [sp, #0]
 81053c8:	601a      	str	r2, [r3, #0]
 81053ca:	9b01      	ldr	r3, [sp, #4]
 81053cc:	2b0e      	cmp	r3, #14
 81053ce:	f200 80ad 	bhi.w	810552c <_dtoa_r+0x484>
 81053d2:	2d00      	cmp	r5, #0
 81053d4:	f000 80aa 	beq.w	810552c <_dtoa_r+0x484>
 81053d8:	f1ba 0f00 	cmp.w	sl, #0
 81053dc:	dd36      	ble.n	810544c <_dtoa_r+0x3a4>
 81053de:	4ac3      	ldr	r2, [pc, #780]	; (81056ec <_dtoa_r+0x644>)
 81053e0:	f00a 030f 	and.w	r3, sl, #15
 81053e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81053e8:	ed93 7b00 	vldr	d7, [r3]
 81053ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81053f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 81053f4:	eeb0 8a47 	vmov.f32	s16, s14
 81053f8:	eef0 8a67 	vmov.f32	s17, s15
 81053fc:	d016      	beq.n	810542c <_dtoa_r+0x384>
 81053fe:	4bbc      	ldr	r3, [pc, #752]	; (81056f0 <_dtoa_r+0x648>)
 8105400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8105404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8105408:	f7fb faa8 	bl	810095c <__aeabi_ddiv>
 810540c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105410:	f007 070f 	and.w	r7, r7, #15
 8105414:	2503      	movs	r5, #3
 8105416:	4eb6      	ldr	r6, [pc, #728]	; (81056f0 <_dtoa_r+0x648>)
 8105418:	b957      	cbnz	r7, 8105430 <_dtoa_r+0x388>
 810541a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810541e:	ec53 2b18 	vmov	r2, r3, d8
 8105422:	f7fb fa9b 	bl	810095c <__aeabi_ddiv>
 8105426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810542a:	e029      	b.n	8105480 <_dtoa_r+0x3d8>
 810542c:	2502      	movs	r5, #2
 810542e:	e7f2      	b.n	8105416 <_dtoa_r+0x36e>
 8105430:	07f9      	lsls	r1, r7, #31
 8105432:	d508      	bpl.n	8105446 <_dtoa_r+0x39e>
 8105434:	ec51 0b18 	vmov	r0, r1, d8
 8105438:	e9d6 2300 	ldrd	r2, r3, [r6]
 810543c:	f7fb f964 	bl	8100708 <__aeabi_dmul>
 8105440:	ec41 0b18 	vmov	d8, r0, r1
 8105444:	3501      	adds	r5, #1
 8105446:	107f      	asrs	r7, r7, #1
 8105448:	3608      	adds	r6, #8
 810544a:	e7e5      	b.n	8105418 <_dtoa_r+0x370>
 810544c:	f000 80a6 	beq.w	810559c <_dtoa_r+0x4f4>
 8105450:	f1ca 0600 	rsb	r6, sl, #0
 8105454:	4ba5      	ldr	r3, [pc, #660]	; (81056ec <_dtoa_r+0x644>)
 8105456:	4fa6      	ldr	r7, [pc, #664]	; (81056f0 <_dtoa_r+0x648>)
 8105458:	f006 020f 	and.w	r2, r6, #15
 810545c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8105460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105464:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8105468:	f7fb f94e 	bl	8100708 <__aeabi_dmul>
 810546c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105470:	1136      	asrs	r6, r6, #4
 8105472:	2300      	movs	r3, #0
 8105474:	2502      	movs	r5, #2
 8105476:	2e00      	cmp	r6, #0
 8105478:	f040 8085 	bne.w	8105586 <_dtoa_r+0x4de>
 810547c:	2b00      	cmp	r3, #0
 810547e:	d1d2      	bne.n	8105426 <_dtoa_r+0x37e>
 8105480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8105482:	2b00      	cmp	r3, #0
 8105484:	f000 808c 	beq.w	81055a0 <_dtoa_r+0x4f8>
 8105488:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810548c:	4b99      	ldr	r3, [pc, #612]	; (81056f4 <_dtoa_r+0x64c>)
 810548e:	2200      	movs	r2, #0
 8105490:	4630      	mov	r0, r6
 8105492:	4639      	mov	r1, r7
 8105494:	f7fb fbaa 	bl	8100bec <__aeabi_dcmplt>
 8105498:	2800      	cmp	r0, #0
 810549a:	f000 8081 	beq.w	81055a0 <_dtoa_r+0x4f8>
 810549e:	9b01      	ldr	r3, [sp, #4]
 81054a0:	2b00      	cmp	r3, #0
 81054a2:	d07d      	beq.n	81055a0 <_dtoa_r+0x4f8>
 81054a4:	f1b9 0f00 	cmp.w	r9, #0
 81054a8:	dd3c      	ble.n	8105524 <_dtoa_r+0x47c>
 81054aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 81054ae:	9307      	str	r3, [sp, #28]
 81054b0:	2200      	movs	r2, #0
 81054b2:	4b91      	ldr	r3, [pc, #580]	; (81056f8 <_dtoa_r+0x650>)
 81054b4:	4630      	mov	r0, r6
 81054b6:	4639      	mov	r1, r7
 81054b8:	f7fb f926 	bl	8100708 <__aeabi_dmul>
 81054bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81054c0:	3501      	adds	r5, #1
 81054c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 81054c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81054ca:	4628      	mov	r0, r5
 81054cc:	f7fb f8b2 	bl	8100634 <__aeabi_i2d>
 81054d0:	4632      	mov	r2, r6
 81054d2:	463b      	mov	r3, r7
 81054d4:	f7fb f918 	bl	8100708 <__aeabi_dmul>
 81054d8:	4b88      	ldr	r3, [pc, #544]	; (81056fc <_dtoa_r+0x654>)
 81054da:	2200      	movs	r2, #0
 81054dc:	f7fa ff5e 	bl	810039c <__adddf3>
 81054e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81054e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81054e8:	9303      	str	r3, [sp, #12]
 81054ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81054ec:	2b00      	cmp	r3, #0
 81054ee:	d15c      	bne.n	81055aa <_dtoa_r+0x502>
 81054f0:	4b83      	ldr	r3, [pc, #524]	; (8105700 <_dtoa_r+0x658>)
 81054f2:	2200      	movs	r2, #0
 81054f4:	4630      	mov	r0, r6
 81054f6:	4639      	mov	r1, r7
 81054f8:	f7fa ff4e 	bl	8100398 <__aeabi_dsub>
 81054fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8105500:	4606      	mov	r6, r0
 8105502:	460f      	mov	r7, r1
 8105504:	f7fb fb90 	bl	8100c28 <__aeabi_dcmpgt>
 8105508:	2800      	cmp	r0, #0
 810550a:	f040 8296 	bne.w	8105a3a <_dtoa_r+0x992>
 810550e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8105512:	4630      	mov	r0, r6
 8105514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8105518:	4639      	mov	r1, r7
 810551a:	f7fb fb67 	bl	8100bec <__aeabi_dcmplt>
 810551e:	2800      	cmp	r0, #0
 8105520:	f040 8288 	bne.w	8105a34 <_dtoa_r+0x98c>
 8105524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8105528:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810552c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810552e:	2b00      	cmp	r3, #0
 8105530:	f2c0 8158 	blt.w	81057e4 <_dtoa_r+0x73c>
 8105534:	f1ba 0f0e 	cmp.w	sl, #14
 8105538:	f300 8154 	bgt.w	81057e4 <_dtoa_r+0x73c>
 810553c:	4b6b      	ldr	r3, [pc, #428]	; (81056ec <_dtoa_r+0x644>)
 810553e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8105542:	e9d3 8900 	ldrd	r8, r9, [r3]
 8105546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105548:	2b00      	cmp	r3, #0
 810554a:	f280 80e3 	bge.w	8105714 <_dtoa_r+0x66c>
 810554e:	9b01      	ldr	r3, [sp, #4]
 8105550:	2b00      	cmp	r3, #0
 8105552:	f300 80df 	bgt.w	8105714 <_dtoa_r+0x66c>
 8105556:	f040 826d 	bne.w	8105a34 <_dtoa_r+0x98c>
 810555a:	4b69      	ldr	r3, [pc, #420]	; (8105700 <_dtoa_r+0x658>)
 810555c:	2200      	movs	r2, #0
 810555e:	4640      	mov	r0, r8
 8105560:	4649      	mov	r1, r9
 8105562:	f7fb f8d1 	bl	8100708 <__aeabi_dmul>
 8105566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810556a:	f7fb fb53 	bl	8100c14 <__aeabi_dcmpge>
 810556e:	9e01      	ldr	r6, [sp, #4]
 8105570:	4637      	mov	r7, r6
 8105572:	2800      	cmp	r0, #0
 8105574:	f040 8243 	bne.w	81059fe <_dtoa_r+0x956>
 8105578:	9d00      	ldr	r5, [sp, #0]
 810557a:	2331      	movs	r3, #49	; 0x31
 810557c:	f805 3b01 	strb.w	r3, [r5], #1
 8105580:	f10a 0a01 	add.w	sl, sl, #1
 8105584:	e23f      	b.n	8105a06 <_dtoa_r+0x95e>
 8105586:	07f2      	lsls	r2, r6, #31
 8105588:	d505      	bpl.n	8105596 <_dtoa_r+0x4ee>
 810558a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810558e:	f7fb f8bb 	bl	8100708 <__aeabi_dmul>
 8105592:	3501      	adds	r5, #1
 8105594:	2301      	movs	r3, #1
 8105596:	1076      	asrs	r6, r6, #1
 8105598:	3708      	adds	r7, #8
 810559a:	e76c      	b.n	8105476 <_dtoa_r+0x3ce>
 810559c:	2502      	movs	r5, #2
 810559e:	e76f      	b.n	8105480 <_dtoa_r+0x3d8>
 81055a0:	9b01      	ldr	r3, [sp, #4]
 81055a2:	f8cd a01c 	str.w	sl, [sp, #28]
 81055a6:	930c      	str	r3, [sp, #48]	; 0x30
 81055a8:	e78d      	b.n	81054c6 <_dtoa_r+0x41e>
 81055aa:	9900      	ldr	r1, [sp, #0]
 81055ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 81055ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81055b0:	4b4e      	ldr	r3, [pc, #312]	; (81056ec <_dtoa_r+0x644>)
 81055b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 81055b6:	4401      	add	r1, r0
 81055b8:	9102      	str	r1, [sp, #8]
 81055ba:	9908      	ldr	r1, [sp, #32]
 81055bc:	eeb0 8a47 	vmov.f32	s16, s14
 81055c0:	eef0 8a67 	vmov.f32	s17, s15
 81055c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81055c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81055cc:	2900      	cmp	r1, #0
 81055ce:	d045      	beq.n	810565c <_dtoa_r+0x5b4>
 81055d0:	494c      	ldr	r1, [pc, #304]	; (8105704 <_dtoa_r+0x65c>)
 81055d2:	2000      	movs	r0, #0
 81055d4:	f7fb f9c2 	bl	810095c <__aeabi_ddiv>
 81055d8:	ec53 2b18 	vmov	r2, r3, d8
 81055dc:	f7fa fedc 	bl	8100398 <__aeabi_dsub>
 81055e0:	9d00      	ldr	r5, [sp, #0]
 81055e2:	ec41 0b18 	vmov	d8, r0, r1
 81055e6:	4639      	mov	r1, r7
 81055e8:	4630      	mov	r0, r6
 81055ea:	f7fb fb3d 	bl	8100c68 <__aeabi_d2iz>
 81055ee:	900c      	str	r0, [sp, #48]	; 0x30
 81055f0:	f7fb f820 	bl	8100634 <__aeabi_i2d>
 81055f4:	4602      	mov	r2, r0
 81055f6:	460b      	mov	r3, r1
 81055f8:	4630      	mov	r0, r6
 81055fa:	4639      	mov	r1, r7
 81055fc:	f7fa fecc 	bl	8100398 <__aeabi_dsub>
 8105600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8105602:	3330      	adds	r3, #48	; 0x30
 8105604:	f805 3b01 	strb.w	r3, [r5], #1
 8105608:	ec53 2b18 	vmov	r2, r3, d8
 810560c:	4606      	mov	r6, r0
 810560e:	460f      	mov	r7, r1
 8105610:	f7fb faec 	bl	8100bec <__aeabi_dcmplt>
 8105614:	2800      	cmp	r0, #0
 8105616:	d165      	bne.n	81056e4 <_dtoa_r+0x63c>
 8105618:	4632      	mov	r2, r6
 810561a:	463b      	mov	r3, r7
 810561c:	4935      	ldr	r1, [pc, #212]	; (81056f4 <_dtoa_r+0x64c>)
 810561e:	2000      	movs	r0, #0
 8105620:	f7fa feba 	bl	8100398 <__aeabi_dsub>
 8105624:	ec53 2b18 	vmov	r2, r3, d8
 8105628:	f7fb fae0 	bl	8100bec <__aeabi_dcmplt>
 810562c:	2800      	cmp	r0, #0
 810562e:	f040 80b9 	bne.w	81057a4 <_dtoa_r+0x6fc>
 8105632:	9b02      	ldr	r3, [sp, #8]
 8105634:	429d      	cmp	r5, r3
 8105636:	f43f af75 	beq.w	8105524 <_dtoa_r+0x47c>
 810563a:	4b2f      	ldr	r3, [pc, #188]	; (81056f8 <_dtoa_r+0x650>)
 810563c:	ec51 0b18 	vmov	r0, r1, d8
 8105640:	2200      	movs	r2, #0
 8105642:	f7fb f861 	bl	8100708 <__aeabi_dmul>
 8105646:	4b2c      	ldr	r3, [pc, #176]	; (81056f8 <_dtoa_r+0x650>)
 8105648:	ec41 0b18 	vmov	d8, r0, r1
 810564c:	2200      	movs	r2, #0
 810564e:	4630      	mov	r0, r6
 8105650:	4639      	mov	r1, r7
 8105652:	f7fb f859 	bl	8100708 <__aeabi_dmul>
 8105656:	4606      	mov	r6, r0
 8105658:	460f      	mov	r7, r1
 810565a:	e7c4      	b.n	81055e6 <_dtoa_r+0x53e>
 810565c:	ec51 0b17 	vmov	r0, r1, d7
 8105660:	f7fb f852 	bl	8100708 <__aeabi_dmul>
 8105664:	9b02      	ldr	r3, [sp, #8]
 8105666:	9d00      	ldr	r5, [sp, #0]
 8105668:	930c      	str	r3, [sp, #48]	; 0x30
 810566a:	ec41 0b18 	vmov	d8, r0, r1
 810566e:	4639      	mov	r1, r7
 8105670:	4630      	mov	r0, r6
 8105672:	f7fb faf9 	bl	8100c68 <__aeabi_d2iz>
 8105676:	9011      	str	r0, [sp, #68]	; 0x44
 8105678:	f7fa ffdc 	bl	8100634 <__aeabi_i2d>
 810567c:	4602      	mov	r2, r0
 810567e:	460b      	mov	r3, r1
 8105680:	4630      	mov	r0, r6
 8105682:	4639      	mov	r1, r7
 8105684:	f7fa fe88 	bl	8100398 <__aeabi_dsub>
 8105688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810568a:	3330      	adds	r3, #48	; 0x30
 810568c:	f805 3b01 	strb.w	r3, [r5], #1
 8105690:	9b02      	ldr	r3, [sp, #8]
 8105692:	429d      	cmp	r5, r3
 8105694:	4606      	mov	r6, r0
 8105696:	460f      	mov	r7, r1
 8105698:	f04f 0200 	mov.w	r2, #0
 810569c:	d134      	bne.n	8105708 <_dtoa_r+0x660>
 810569e:	4b19      	ldr	r3, [pc, #100]	; (8105704 <_dtoa_r+0x65c>)
 81056a0:	ec51 0b18 	vmov	r0, r1, d8
 81056a4:	f7fa fe7a 	bl	810039c <__adddf3>
 81056a8:	4602      	mov	r2, r0
 81056aa:	460b      	mov	r3, r1
 81056ac:	4630      	mov	r0, r6
 81056ae:	4639      	mov	r1, r7
 81056b0:	f7fb faba 	bl	8100c28 <__aeabi_dcmpgt>
 81056b4:	2800      	cmp	r0, #0
 81056b6:	d175      	bne.n	81057a4 <_dtoa_r+0x6fc>
 81056b8:	ec53 2b18 	vmov	r2, r3, d8
 81056bc:	4911      	ldr	r1, [pc, #68]	; (8105704 <_dtoa_r+0x65c>)
 81056be:	2000      	movs	r0, #0
 81056c0:	f7fa fe6a 	bl	8100398 <__aeabi_dsub>
 81056c4:	4602      	mov	r2, r0
 81056c6:	460b      	mov	r3, r1
 81056c8:	4630      	mov	r0, r6
 81056ca:	4639      	mov	r1, r7
 81056cc:	f7fb fa8e 	bl	8100bec <__aeabi_dcmplt>
 81056d0:	2800      	cmp	r0, #0
 81056d2:	f43f af27 	beq.w	8105524 <_dtoa_r+0x47c>
 81056d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81056d8:	1e6b      	subs	r3, r5, #1
 81056da:	930c      	str	r3, [sp, #48]	; 0x30
 81056dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81056e0:	2b30      	cmp	r3, #48	; 0x30
 81056e2:	d0f8      	beq.n	81056d6 <_dtoa_r+0x62e>
 81056e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 81056e8:	e04a      	b.n	8105780 <_dtoa_r+0x6d8>
 81056ea:	bf00      	nop
 81056ec:	081071e0 	.word	0x081071e0
 81056f0:	081071b8 	.word	0x081071b8
 81056f4:	3ff00000 	.word	0x3ff00000
 81056f8:	40240000 	.word	0x40240000
 81056fc:	401c0000 	.word	0x401c0000
 8105700:	40140000 	.word	0x40140000
 8105704:	3fe00000 	.word	0x3fe00000
 8105708:	4baf      	ldr	r3, [pc, #700]	; (81059c8 <_dtoa_r+0x920>)
 810570a:	f7fa fffd 	bl	8100708 <__aeabi_dmul>
 810570e:	4606      	mov	r6, r0
 8105710:	460f      	mov	r7, r1
 8105712:	e7ac      	b.n	810566e <_dtoa_r+0x5c6>
 8105714:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8105718:	9d00      	ldr	r5, [sp, #0]
 810571a:	4642      	mov	r2, r8
 810571c:	464b      	mov	r3, r9
 810571e:	4630      	mov	r0, r6
 8105720:	4639      	mov	r1, r7
 8105722:	f7fb f91b 	bl	810095c <__aeabi_ddiv>
 8105726:	f7fb fa9f 	bl	8100c68 <__aeabi_d2iz>
 810572a:	9002      	str	r0, [sp, #8]
 810572c:	f7fa ff82 	bl	8100634 <__aeabi_i2d>
 8105730:	4642      	mov	r2, r8
 8105732:	464b      	mov	r3, r9
 8105734:	f7fa ffe8 	bl	8100708 <__aeabi_dmul>
 8105738:	4602      	mov	r2, r0
 810573a:	460b      	mov	r3, r1
 810573c:	4630      	mov	r0, r6
 810573e:	4639      	mov	r1, r7
 8105740:	f7fa fe2a 	bl	8100398 <__aeabi_dsub>
 8105744:	9e02      	ldr	r6, [sp, #8]
 8105746:	9f01      	ldr	r7, [sp, #4]
 8105748:	3630      	adds	r6, #48	; 0x30
 810574a:	f805 6b01 	strb.w	r6, [r5], #1
 810574e:	9e00      	ldr	r6, [sp, #0]
 8105750:	1bae      	subs	r6, r5, r6
 8105752:	42b7      	cmp	r7, r6
 8105754:	4602      	mov	r2, r0
 8105756:	460b      	mov	r3, r1
 8105758:	d137      	bne.n	81057ca <_dtoa_r+0x722>
 810575a:	f7fa fe1f 	bl	810039c <__adddf3>
 810575e:	4642      	mov	r2, r8
 8105760:	464b      	mov	r3, r9
 8105762:	4606      	mov	r6, r0
 8105764:	460f      	mov	r7, r1
 8105766:	f7fb fa5f 	bl	8100c28 <__aeabi_dcmpgt>
 810576a:	b9c8      	cbnz	r0, 81057a0 <_dtoa_r+0x6f8>
 810576c:	4642      	mov	r2, r8
 810576e:	464b      	mov	r3, r9
 8105770:	4630      	mov	r0, r6
 8105772:	4639      	mov	r1, r7
 8105774:	f7fb fa30 	bl	8100bd8 <__aeabi_dcmpeq>
 8105778:	b110      	cbz	r0, 8105780 <_dtoa_r+0x6d8>
 810577a:	9b02      	ldr	r3, [sp, #8]
 810577c:	07d9      	lsls	r1, r3, #31
 810577e:	d40f      	bmi.n	81057a0 <_dtoa_r+0x6f8>
 8105780:	4620      	mov	r0, r4
 8105782:	4659      	mov	r1, fp
 8105784:	f000 fad6 	bl	8105d34 <_Bfree>
 8105788:	2300      	movs	r3, #0
 810578a:	702b      	strb	r3, [r5, #0]
 810578c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810578e:	f10a 0001 	add.w	r0, sl, #1
 8105792:	6018      	str	r0, [r3, #0]
 8105794:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105796:	2b00      	cmp	r3, #0
 8105798:	f43f acd8 	beq.w	810514c <_dtoa_r+0xa4>
 810579c:	601d      	str	r5, [r3, #0]
 810579e:	e4d5      	b.n	810514c <_dtoa_r+0xa4>
 81057a0:	f8cd a01c 	str.w	sl, [sp, #28]
 81057a4:	462b      	mov	r3, r5
 81057a6:	461d      	mov	r5, r3
 81057a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81057ac:	2a39      	cmp	r2, #57	; 0x39
 81057ae:	d108      	bne.n	81057c2 <_dtoa_r+0x71a>
 81057b0:	9a00      	ldr	r2, [sp, #0]
 81057b2:	429a      	cmp	r2, r3
 81057b4:	d1f7      	bne.n	81057a6 <_dtoa_r+0x6fe>
 81057b6:	9a07      	ldr	r2, [sp, #28]
 81057b8:	9900      	ldr	r1, [sp, #0]
 81057ba:	3201      	adds	r2, #1
 81057bc:	9207      	str	r2, [sp, #28]
 81057be:	2230      	movs	r2, #48	; 0x30
 81057c0:	700a      	strb	r2, [r1, #0]
 81057c2:	781a      	ldrb	r2, [r3, #0]
 81057c4:	3201      	adds	r2, #1
 81057c6:	701a      	strb	r2, [r3, #0]
 81057c8:	e78c      	b.n	81056e4 <_dtoa_r+0x63c>
 81057ca:	4b7f      	ldr	r3, [pc, #508]	; (81059c8 <_dtoa_r+0x920>)
 81057cc:	2200      	movs	r2, #0
 81057ce:	f7fa ff9b 	bl	8100708 <__aeabi_dmul>
 81057d2:	2200      	movs	r2, #0
 81057d4:	2300      	movs	r3, #0
 81057d6:	4606      	mov	r6, r0
 81057d8:	460f      	mov	r7, r1
 81057da:	f7fb f9fd 	bl	8100bd8 <__aeabi_dcmpeq>
 81057de:	2800      	cmp	r0, #0
 81057e0:	d09b      	beq.n	810571a <_dtoa_r+0x672>
 81057e2:	e7cd      	b.n	8105780 <_dtoa_r+0x6d8>
 81057e4:	9a08      	ldr	r2, [sp, #32]
 81057e6:	2a00      	cmp	r2, #0
 81057e8:	f000 80c4 	beq.w	8105974 <_dtoa_r+0x8cc>
 81057ec:	9a05      	ldr	r2, [sp, #20]
 81057ee:	2a01      	cmp	r2, #1
 81057f0:	f300 80a8 	bgt.w	8105944 <_dtoa_r+0x89c>
 81057f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81057f6:	2a00      	cmp	r2, #0
 81057f8:	f000 80a0 	beq.w	810593c <_dtoa_r+0x894>
 81057fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8105800:	9e06      	ldr	r6, [sp, #24]
 8105802:	4645      	mov	r5, r8
 8105804:	9a04      	ldr	r2, [sp, #16]
 8105806:	2101      	movs	r1, #1
 8105808:	441a      	add	r2, r3
 810580a:	4620      	mov	r0, r4
 810580c:	4498      	add	r8, r3
 810580e:	9204      	str	r2, [sp, #16]
 8105810:	f000 fb4c 	bl	8105eac <__i2b>
 8105814:	4607      	mov	r7, r0
 8105816:	2d00      	cmp	r5, #0
 8105818:	dd0b      	ble.n	8105832 <_dtoa_r+0x78a>
 810581a:	9b04      	ldr	r3, [sp, #16]
 810581c:	2b00      	cmp	r3, #0
 810581e:	dd08      	ble.n	8105832 <_dtoa_r+0x78a>
 8105820:	42ab      	cmp	r3, r5
 8105822:	9a04      	ldr	r2, [sp, #16]
 8105824:	bfa8      	it	ge
 8105826:	462b      	movge	r3, r5
 8105828:	eba8 0803 	sub.w	r8, r8, r3
 810582c:	1aed      	subs	r5, r5, r3
 810582e:	1ad3      	subs	r3, r2, r3
 8105830:	9304      	str	r3, [sp, #16]
 8105832:	9b06      	ldr	r3, [sp, #24]
 8105834:	b1fb      	cbz	r3, 8105876 <_dtoa_r+0x7ce>
 8105836:	9b08      	ldr	r3, [sp, #32]
 8105838:	2b00      	cmp	r3, #0
 810583a:	f000 809f 	beq.w	810597c <_dtoa_r+0x8d4>
 810583e:	2e00      	cmp	r6, #0
 8105840:	dd11      	ble.n	8105866 <_dtoa_r+0x7be>
 8105842:	4639      	mov	r1, r7
 8105844:	4632      	mov	r2, r6
 8105846:	4620      	mov	r0, r4
 8105848:	f000 fbec 	bl	8106024 <__pow5mult>
 810584c:	465a      	mov	r2, fp
 810584e:	4601      	mov	r1, r0
 8105850:	4607      	mov	r7, r0
 8105852:	4620      	mov	r0, r4
 8105854:	f000 fb40 	bl	8105ed8 <__multiply>
 8105858:	4659      	mov	r1, fp
 810585a:	9007      	str	r0, [sp, #28]
 810585c:	4620      	mov	r0, r4
 810585e:	f000 fa69 	bl	8105d34 <_Bfree>
 8105862:	9b07      	ldr	r3, [sp, #28]
 8105864:	469b      	mov	fp, r3
 8105866:	9b06      	ldr	r3, [sp, #24]
 8105868:	1b9a      	subs	r2, r3, r6
 810586a:	d004      	beq.n	8105876 <_dtoa_r+0x7ce>
 810586c:	4659      	mov	r1, fp
 810586e:	4620      	mov	r0, r4
 8105870:	f000 fbd8 	bl	8106024 <__pow5mult>
 8105874:	4683      	mov	fp, r0
 8105876:	2101      	movs	r1, #1
 8105878:	4620      	mov	r0, r4
 810587a:	f000 fb17 	bl	8105eac <__i2b>
 810587e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8105880:	2b00      	cmp	r3, #0
 8105882:	4606      	mov	r6, r0
 8105884:	dd7c      	ble.n	8105980 <_dtoa_r+0x8d8>
 8105886:	461a      	mov	r2, r3
 8105888:	4601      	mov	r1, r0
 810588a:	4620      	mov	r0, r4
 810588c:	f000 fbca 	bl	8106024 <__pow5mult>
 8105890:	9b05      	ldr	r3, [sp, #20]
 8105892:	2b01      	cmp	r3, #1
 8105894:	4606      	mov	r6, r0
 8105896:	dd76      	ble.n	8105986 <_dtoa_r+0x8de>
 8105898:	2300      	movs	r3, #0
 810589a:	9306      	str	r3, [sp, #24]
 810589c:	6933      	ldr	r3, [r6, #16]
 810589e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 81058a2:	6918      	ldr	r0, [r3, #16]
 81058a4:	f000 fab2 	bl	8105e0c <__hi0bits>
 81058a8:	f1c0 0020 	rsb	r0, r0, #32
 81058ac:	9b04      	ldr	r3, [sp, #16]
 81058ae:	4418      	add	r0, r3
 81058b0:	f010 001f 	ands.w	r0, r0, #31
 81058b4:	f000 8086 	beq.w	81059c4 <_dtoa_r+0x91c>
 81058b8:	f1c0 0320 	rsb	r3, r0, #32
 81058bc:	2b04      	cmp	r3, #4
 81058be:	dd7f      	ble.n	81059c0 <_dtoa_r+0x918>
 81058c0:	f1c0 001c 	rsb	r0, r0, #28
 81058c4:	9b04      	ldr	r3, [sp, #16]
 81058c6:	4403      	add	r3, r0
 81058c8:	4480      	add	r8, r0
 81058ca:	4405      	add	r5, r0
 81058cc:	9304      	str	r3, [sp, #16]
 81058ce:	f1b8 0f00 	cmp.w	r8, #0
 81058d2:	dd05      	ble.n	81058e0 <_dtoa_r+0x838>
 81058d4:	4659      	mov	r1, fp
 81058d6:	4642      	mov	r2, r8
 81058d8:	4620      	mov	r0, r4
 81058da:	f000 fbfd 	bl	81060d8 <__lshift>
 81058de:	4683      	mov	fp, r0
 81058e0:	9b04      	ldr	r3, [sp, #16]
 81058e2:	2b00      	cmp	r3, #0
 81058e4:	dd05      	ble.n	81058f2 <_dtoa_r+0x84a>
 81058e6:	4631      	mov	r1, r6
 81058e8:	461a      	mov	r2, r3
 81058ea:	4620      	mov	r0, r4
 81058ec:	f000 fbf4 	bl	81060d8 <__lshift>
 81058f0:	4606      	mov	r6, r0
 81058f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81058f4:	2b00      	cmp	r3, #0
 81058f6:	d069      	beq.n	81059cc <_dtoa_r+0x924>
 81058f8:	4631      	mov	r1, r6
 81058fa:	4658      	mov	r0, fp
 81058fc:	f000 fc58 	bl	81061b0 <__mcmp>
 8105900:	2800      	cmp	r0, #0
 8105902:	da63      	bge.n	81059cc <_dtoa_r+0x924>
 8105904:	2300      	movs	r3, #0
 8105906:	4659      	mov	r1, fp
 8105908:	220a      	movs	r2, #10
 810590a:	4620      	mov	r0, r4
 810590c:	f000 fa34 	bl	8105d78 <__multadd>
 8105910:	9b08      	ldr	r3, [sp, #32]
 8105912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8105916:	4683      	mov	fp, r0
 8105918:	2b00      	cmp	r3, #0
 810591a:	f000 818f 	beq.w	8105c3c <_dtoa_r+0xb94>
 810591e:	4639      	mov	r1, r7
 8105920:	2300      	movs	r3, #0
 8105922:	220a      	movs	r2, #10
 8105924:	4620      	mov	r0, r4
 8105926:	f000 fa27 	bl	8105d78 <__multadd>
 810592a:	f1b9 0f00 	cmp.w	r9, #0
 810592e:	4607      	mov	r7, r0
 8105930:	f300 808e 	bgt.w	8105a50 <_dtoa_r+0x9a8>
 8105934:	9b05      	ldr	r3, [sp, #20]
 8105936:	2b02      	cmp	r3, #2
 8105938:	dc50      	bgt.n	81059dc <_dtoa_r+0x934>
 810593a:	e089      	b.n	8105a50 <_dtoa_r+0x9a8>
 810593c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810593e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8105942:	e75d      	b.n	8105800 <_dtoa_r+0x758>
 8105944:	9b01      	ldr	r3, [sp, #4]
 8105946:	1e5e      	subs	r6, r3, #1
 8105948:	9b06      	ldr	r3, [sp, #24]
 810594a:	42b3      	cmp	r3, r6
 810594c:	bfbf      	itttt	lt
 810594e:	9b06      	ldrlt	r3, [sp, #24]
 8105950:	9606      	strlt	r6, [sp, #24]
 8105952:	1af2      	sublt	r2, r6, r3
 8105954:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8105956:	bfb6      	itet	lt
 8105958:	189b      	addlt	r3, r3, r2
 810595a:	1b9e      	subge	r6, r3, r6
 810595c:	930d      	strlt	r3, [sp, #52]	; 0x34
 810595e:	9b01      	ldr	r3, [sp, #4]
 8105960:	bfb8      	it	lt
 8105962:	2600      	movlt	r6, #0
 8105964:	2b00      	cmp	r3, #0
 8105966:	bfb5      	itete	lt
 8105968:	eba8 0503 	sublt.w	r5, r8, r3
 810596c:	9b01      	ldrge	r3, [sp, #4]
 810596e:	2300      	movlt	r3, #0
 8105970:	4645      	movge	r5, r8
 8105972:	e747      	b.n	8105804 <_dtoa_r+0x75c>
 8105974:	9e06      	ldr	r6, [sp, #24]
 8105976:	9f08      	ldr	r7, [sp, #32]
 8105978:	4645      	mov	r5, r8
 810597a:	e74c      	b.n	8105816 <_dtoa_r+0x76e>
 810597c:	9a06      	ldr	r2, [sp, #24]
 810597e:	e775      	b.n	810586c <_dtoa_r+0x7c4>
 8105980:	9b05      	ldr	r3, [sp, #20]
 8105982:	2b01      	cmp	r3, #1
 8105984:	dc18      	bgt.n	81059b8 <_dtoa_r+0x910>
 8105986:	9b02      	ldr	r3, [sp, #8]
 8105988:	b9b3      	cbnz	r3, 81059b8 <_dtoa_r+0x910>
 810598a:	9b03      	ldr	r3, [sp, #12]
 810598c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105990:	b9a3      	cbnz	r3, 81059bc <_dtoa_r+0x914>
 8105992:	9b03      	ldr	r3, [sp, #12]
 8105994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8105998:	0d1b      	lsrs	r3, r3, #20
 810599a:	051b      	lsls	r3, r3, #20
 810599c:	b12b      	cbz	r3, 81059aa <_dtoa_r+0x902>
 810599e:	9b04      	ldr	r3, [sp, #16]
 81059a0:	3301      	adds	r3, #1
 81059a2:	9304      	str	r3, [sp, #16]
 81059a4:	f108 0801 	add.w	r8, r8, #1
 81059a8:	2301      	movs	r3, #1
 81059aa:	9306      	str	r3, [sp, #24]
 81059ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	f47f af74 	bne.w	810589c <_dtoa_r+0x7f4>
 81059b4:	2001      	movs	r0, #1
 81059b6:	e779      	b.n	81058ac <_dtoa_r+0x804>
 81059b8:	2300      	movs	r3, #0
 81059ba:	e7f6      	b.n	81059aa <_dtoa_r+0x902>
 81059bc:	9b02      	ldr	r3, [sp, #8]
 81059be:	e7f4      	b.n	81059aa <_dtoa_r+0x902>
 81059c0:	d085      	beq.n	81058ce <_dtoa_r+0x826>
 81059c2:	4618      	mov	r0, r3
 81059c4:	301c      	adds	r0, #28
 81059c6:	e77d      	b.n	81058c4 <_dtoa_r+0x81c>
 81059c8:	40240000 	.word	0x40240000
 81059cc:	9b01      	ldr	r3, [sp, #4]
 81059ce:	2b00      	cmp	r3, #0
 81059d0:	dc38      	bgt.n	8105a44 <_dtoa_r+0x99c>
 81059d2:	9b05      	ldr	r3, [sp, #20]
 81059d4:	2b02      	cmp	r3, #2
 81059d6:	dd35      	ble.n	8105a44 <_dtoa_r+0x99c>
 81059d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81059dc:	f1b9 0f00 	cmp.w	r9, #0
 81059e0:	d10d      	bne.n	81059fe <_dtoa_r+0x956>
 81059e2:	4631      	mov	r1, r6
 81059e4:	464b      	mov	r3, r9
 81059e6:	2205      	movs	r2, #5
 81059e8:	4620      	mov	r0, r4
 81059ea:	f000 f9c5 	bl	8105d78 <__multadd>
 81059ee:	4601      	mov	r1, r0
 81059f0:	4606      	mov	r6, r0
 81059f2:	4658      	mov	r0, fp
 81059f4:	f000 fbdc 	bl	81061b0 <__mcmp>
 81059f8:	2800      	cmp	r0, #0
 81059fa:	f73f adbd 	bgt.w	8105578 <_dtoa_r+0x4d0>
 81059fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105a00:	9d00      	ldr	r5, [sp, #0]
 8105a02:	ea6f 0a03 	mvn.w	sl, r3
 8105a06:	f04f 0800 	mov.w	r8, #0
 8105a0a:	4631      	mov	r1, r6
 8105a0c:	4620      	mov	r0, r4
 8105a0e:	f000 f991 	bl	8105d34 <_Bfree>
 8105a12:	2f00      	cmp	r7, #0
 8105a14:	f43f aeb4 	beq.w	8105780 <_dtoa_r+0x6d8>
 8105a18:	f1b8 0f00 	cmp.w	r8, #0
 8105a1c:	d005      	beq.n	8105a2a <_dtoa_r+0x982>
 8105a1e:	45b8      	cmp	r8, r7
 8105a20:	d003      	beq.n	8105a2a <_dtoa_r+0x982>
 8105a22:	4641      	mov	r1, r8
 8105a24:	4620      	mov	r0, r4
 8105a26:	f000 f985 	bl	8105d34 <_Bfree>
 8105a2a:	4639      	mov	r1, r7
 8105a2c:	4620      	mov	r0, r4
 8105a2e:	f000 f981 	bl	8105d34 <_Bfree>
 8105a32:	e6a5      	b.n	8105780 <_dtoa_r+0x6d8>
 8105a34:	2600      	movs	r6, #0
 8105a36:	4637      	mov	r7, r6
 8105a38:	e7e1      	b.n	81059fe <_dtoa_r+0x956>
 8105a3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8105a3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8105a40:	4637      	mov	r7, r6
 8105a42:	e599      	b.n	8105578 <_dtoa_r+0x4d0>
 8105a44:	9b08      	ldr	r3, [sp, #32]
 8105a46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8105a4a:	2b00      	cmp	r3, #0
 8105a4c:	f000 80fd 	beq.w	8105c4a <_dtoa_r+0xba2>
 8105a50:	2d00      	cmp	r5, #0
 8105a52:	dd05      	ble.n	8105a60 <_dtoa_r+0x9b8>
 8105a54:	4639      	mov	r1, r7
 8105a56:	462a      	mov	r2, r5
 8105a58:	4620      	mov	r0, r4
 8105a5a:	f000 fb3d 	bl	81060d8 <__lshift>
 8105a5e:	4607      	mov	r7, r0
 8105a60:	9b06      	ldr	r3, [sp, #24]
 8105a62:	2b00      	cmp	r3, #0
 8105a64:	d05c      	beq.n	8105b20 <_dtoa_r+0xa78>
 8105a66:	6879      	ldr	r1, [r7, #4]
 8105a68:	4620      	mov	r0, r4
 8105a6a:	f000 f923 	bl	8105cb4 <_Balloc>
 8105a6e:	4605      	mov	r5, r0
 8105a70:	b928      	cbnz	r0, 8105a7e <_dtoa_r+0x9d6>
 8105a72:	4b80      	ldr	r3, [pc, #512]	; (8105c74 <_dtoa_r+0xbcc>)
 8105a74:	4602      	mov	r2, r0
 8105a76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8105a7a:	f7ff bb2e 	b.w	81050da <_dtoa_r+0x32>
 8105a7e:	693a      	ldr	r2, [r7, #16]
 8105a80:	3202      	adds	r2, #2
 8105a82:	0092      	lsls	r2, r2, #2
 8105a84:	f107 010c 	add.w	r1, r7, #12
 8105a88:	300c      	adds	r0, #12
 8105a8a:	f000 f905 	bl	8105c98 <memcpy>
 8105a8e:	2201      	movs	r2, #1
 8105a90:	4629      	mov	r1, r5
 8105a92:	4620      	mov	r0, r4
 8105a94:	f000 fb20 	bl	81060d8 <__lshift>
 8105a98:	9b00      	ldr	r3, [sp, #0]
 8105a9a:	3301      	adds	r3, #1
 8105a9c:	9301      	str	r3, [sp, #4]
 8105a9e:	9b00      	ldr	r3, [sp, #0]
 8105aa0:	444b      	add	r3, r9
 8105aa2:	9307      	str	r3, [sp, #28]
 8105aa4:	9b02      	ldr	r3, [sp, #8]
 8105aa6:	f003 0301 	and.w	r3, r3, #1
 8105aaa:	46b8      	mov	r8, r7
 8105aac:	9306      	str	r3, [sp, #24]
 8105aae:	4607      	mov	r7, r0
 8105ab0:	9b01      	ldr	r3, [sp, #4]
 8105ab2:	4631      	mov	r1, r6
 8105ab4:	3b01      	subs	r3, #1
 8105ab6:	4658      	mov	r0, fp
 8105ab8:	9302      	str	r3, [sp, #8]
 8105aba:	f7ff fa67 	bl	8104f8c <quorem>
 8105abe:	4603      	mov	r3, r0
 8105ac0:	3330      	adds	r3, #48	; 0x30
 8105ac2:	9004      	str	r0, [sp, #16]
 8105ac4:	4641      	mov	r1, r8
 8105ac6:	4658      	mov	r0, fp
 8105ac8:	9308      	str	r3, [sp, #32]
 8105aca:	f000 fb71 	bl	81061b0 <__mcmp>
 8105ace:	463a      	mov	r2, r7
 8105ad0:	4681      	mov	r9, r0
 8105ad2:	4631      	mov	r1, r6
 8105ad4:	4620      	mov	r0, r4
 8105ad6:	f000 fb87 	bl	81061e8 <__mdiff>
 8105ada:	68c2      	ldr	r2, [r0, #12]
 8105adc:	9b08      	ldr	r3, [sp, #32]
 8105ade:	4605      	mov	r5, r0
 8105ae0:	bb02      	cbnz	r2, 8105b24 <_dtoa_r+0xa7c>
 8105ae2:	4601      	mov	r1, r0
 8105ae4:	4658      	mov	r0, fp
 8105ae6:	f000 fb63 	bl	81061b0 <__mcmp>
 8105aea:	9b08      	ldr	r3, [sp, #32]
 8105aec:	4602      	mov	r2, r0
 8105aee:	4629      	mov	r1, r5
 8105af0:	4620      	mov	r0, r4
 8105af2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8105af6:	f000 f91d 	bl	8105d34 <_Bfree>
 8105afa:	9b05      	ldr	r3, [sp, #20]
 8105afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8105afe:	9d01      	ldr	r5, [sp, #4]
 8105b00:	ea43 0102 	orr.w	r1, r3, r2
 8105b04:	9b06      	ldr	r3, [sp, #24]
 8105b06:	430b      	orrs	r3, r1
 8105b08:	9b08      	ldr	r3, [sp, #32]
 8105b0a:	d10d      	bne.n	8105b28 <_dtoa_r+0xa80>
 8105b0c:	2b39      	cmp	r3, #57	; 0x39
 8105b0e:	d029      	beq.n	8105b64 <_dtoa_r+0xabc>
 8105b10:	f1b9 0f00 	cmp.w	r9, #0
 8105b14:	dd01      	ble.n	8105b1a <_dtoa_r+0xa72>
 8105b16:	9b04      	ldr	r3, [sp, #16]
 8105b18:	3331      	adds	r3, #49	; 0x31
 8105b1a:	9a02      	ldr	r2, [sp, #8]
 8105b1c:	7013      	strb	r3, [r2, #0]
 8105b1e:	e774      	b.n	8105a0a <_dtoa_r+0x962>
 8105b20:	4638      	mov	r0, r7
 8105b22:	e7b9      	b.n	8105a98 <_dtoa_r+0x9f0>
 8105b24:	2201      	movs	r2, #1
 8105b26:	e7e2      	b.n	8105aee <_dtoa_r+0xa46>
 8105b28:	f1b9 0f00 	cmp.w	r9, #0
 8105b2c:	db06      	blt.n	8105b3c <_dtoa_r+0xa94>
 8105b2e:	9905      	ldr	r1, [sp, #20]
 8105b30:	ea41 0909 	orr.w	r9, r1, r9
 8105b34:	9906      	ldr	r1, [sp, #24]
 8105b36:	ea59 0101 	orrs.w	r1, r9, r1
 8105b3a:	d120      	bne.n	8105b7e <_dtoa_r+0xad6>
 8105b3c:	2a00      	cmp	r2, #0
 8105b3e:	ddec      	ble.n	8105b1a <_dtoa_r+0xa72>
 8105b40:	4659      	mov	r1, fp
 8105b42:	2201      	movs	r2, #1
 8105b44:	4620      	mov	r0, r4
 8105b46:	9301      	str	r3, [sp, #4]
 8105b48:	f000 fac6 	bl	81060d8 <__lshift>
 8105b4c:	4631      	mov	r1, r6
 8105b4e:	4683      	mov	fp, r0
 8105b50:	f000 fb2e 	bl	81061b0 <__mcmp>
 8105b54:	2800      	cmp	r0, #0
 8105b56:	9b01      	ldr	r3, [sp, #4]
 8105b58:	dc02      	bgt.n	8105b60 <_dtoa_r+0xab8>
 8105b5a:	d1de      	bne.n	8105b1a <_dtoa_r+0xa72>
 8105b5c:	07da      	lsls	r2, r3, #31
 8105b5e:	d5dc      	bpl.n	8105b1a <_dtoa_r+0xa72>
 8105b60:	2b39      	cmp	r3, #57	; 0x39
 8105b62:	d1d8      	bne.n	8105b16 <_dtoa_r+0xa6e>
 8105b64:	9a02      	ldr	r2, [sp, #8]
 8105b66:	2339      	movs	r3, #57	; 0x39
 8105b68:	7013      	strb	r3, [r2, #0]
 8105b6a:	462b      	mov	r3, r5
 8105b6c:	461d      	mov	r5, r3
 8105b6e:	3b01      	subs	r3, #1
 8105b70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8105b74:	2a39      	cmp	r2, #57	; 0x39
 8105b76:	d050      	beq.n	8105c1a <_dtoa_r+0xb72>
 8105b78:	3201      	adds	r2, #1
 8105b7a:	701a      	strb	r2, [r3, #0]
 8105b7c:	e745      	b.n	8105a0a <_dtoa_r+0x962>
 8105b7e:	2a00      	cmp	r2, #0
 8105b80:	dd03      	ble.n	8105b8a <_dtoa_r+0xae2>
 8105b82:	2b39      	cmp	r3, #57	; 0x39
 8105b84:	d0ee      	beq.n	8105b64 <_dtoa_r+0xabc>
 8105b86:	3301      	adds	r3, #1
 8105b88:	e7c7      	b.n	8105b1a <_dtoa_r+0xa72>
 8105b8a:	9a01      	ldr	r2, [sp, #4]
 8105b8c:	9907      	ldr	r1, [sp, #28]
 8105b8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8105b92:	428a      	cmp	r2, r1
 8105b94:	d02a      	beq.n	8105bec <_dtoa_r+0xb44>
 8105b96:	4659      	mov	r1, fp
 8105b98:	2300      	movs	r3, #0
 8105b9a:	220a      	movs	r2, #10
 8105b9c:	4620      	mov	r0, r4
 8105b9e:	f000 f8eb 	bl	8105d78 <__multadd>
 8105ba2:	45b8      	cmp	r8, r7
 8105ba4:	4683      	mov	fp, r0
 8105ba6:	f04f 0300 	mov.w	r3, #0
 8105baa:	f04f 020a 	mov.w	r2, #10
 8105bae:	4641      	mov	r1, r8
 8105bb0:	4620      	mov	r0, r4
 8105bb2:	d107      	bne.n	8105bc4 <_dtoa_r+0xb1c>
 8105bb4:	f000 f8e0 	bl	8105d78 <__multadd>
 8105bb8:	4680      	mov	r8, r0
 8105bba:	4607      	mov	r7, r0
 8105bbc:	9b01      	ldr	r3, [sp, #4]
 8105bbe:	3301      	adds	r3, #1
 8105bc0:	9301      	str	r3, [sp, #4]
 8105bc2:	e775      	b.n	8105ab0 <_dtoa_r+0xa08>
 8105bc4:	f000 f8d8 	bl	8105d78 <__multadd>
 8105bc8:	4639      	mov	r1, r7
 8105bca:	4680      	mov	r8, r0
 8105bcc:	2300      	movs	r3, #0
 8105bce:	220a      	movs	r2, #10
 8105bd0:	4620      	mov	r0, r4
 8105bd2:	f000 f8d1 	bl	8105d78 <__multadd>
 8105bd6:	4607      	mov	r7, r0
 8105bd8:	e7f0      	b.n	8105bbc <_dtoa_r+0xb14>
 8105bda:	f1b9 0f00 	cmp.w	r9, #0
 8105bde:	9a00      	ldr	r2, [sp, #0]
 8105be0:	bfcc      	ite	gt
 8105be2:	464d      	movgt	r5, r9
 8105be4:	2501      	movle	r5, #1
 8105be6:	4415      	add	r5, r2
 8105be8:	f04f 0800 	mov.w	r8, #0
 8105bec:	4659      	mov	r1, fp
 8105bee:	2201      	movs	r2, #1
 8105bf0:	4620      	mov	r0, r4
 8105bf2:	9301      	str	r3, [sp, #4]
 8105bf4:	f000 fa70 	bl	81060d8 <__lshift>
 8105bf8:	4631      	mov	r1, r6
 8105bfa:	4683      	mov	fp, r0
 8105bfc:	f000 fad8 	bl	81061b0 <__mcmp>
 8105c00:	2800      	cmp	r0, #0
 8105c02:	dcb2      	bgt.n	8105b6a <_dtoa_r+0xac2>
 8105c04:	d102      	bne.n	8105c0c <_dtoa_r+0xb64>
 8105c06:	9b01      	ldr	r3, [sp, #4]
 8105c08:	07db      	lsls	r3, r3, #31
 8105c0a:	d4ae      	bmi.n	8105b6a <_dtoa_r+0xac2>
 8105c0c:	462b      	mov	r3, r5
 8105c0e:	461d      	mov	r5, r3
 8105c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8105c14:	2a30      	cmp	r2, #48	; 0x30
 8105c16:	d0fa      	beq.n	8105c0e <_dtoa_r+0xb66>
 8105c18:	e6f7      	b.n	8105a0a <_dtoa_r+0x962>
 8105c1a:	9a00      	ldr	r2, [sp, #0]
 8105c1c:	429a      	cmp	r2, r3
 8105c1e:	d1a5      	bne.n	8105b6c <_dtoa_r+0xac4>
 8105c20:	f10a 0a01 	add.w	sl, sl, #1
 8105c24:	2331      	movs	r3, #49	; 0x31
 8105c26:	e779      	b.n	8105b1c <_dtoa_r+0xa74>
 8105c28:	4b13      	ldr	r3, [pc, #76]	; (8105c78 <_dtoa_r+0xbd0>)
 8105c2a:	f7ff baaf 	b.w	810518c <_dtoa_r+0xe4>
 8105c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105c30:	2b00      	cmp	r3, #0
 8105c32:	f47f aa86 	bne.w	8105142 <_dtoa_r+0x9a>
 8105c36:	4b11      	ldr	r3, [pc, #68]	; (8105c7c <_dtoa_r+0xbd4>)
 8105c38:	f7ff baa8 	b.w	810518c <_dtoa_r+0xe4>
 8105c3c:	f1b9 0f00 	cmp.w	r9, #0
 8105c40:	dc03      	bgt.n	8105c4a <_dtoa_r+0xba2>
 8105c42:	9b05      	ldr	r3, [sp, #20]
 8105c44:	2b02      	cmp	r3, #2
 8105c46:	f73f aec9 	bgt.w	81059dc <_dtoa_r+0x934>
 8105c4a:	9d00      	ldr	r5, [sp, #0]
 8105c4c:	4631      	mov	r1, r6
 8105c4e:	4658      	mov	r0, fp
 8105c50:	f7ff f99c 	bl	8104f8c <quorem>
 8105c54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8105c58:	f805 3b01 	strb.w	r3, [r5], #1
 8105c5c:	9a00      	ldr	r2, [sp, #0]
 8105c5e:	1aaa      	subs	r2, r5, r2
 8105c60:	4591      	cmp	r9, r2
 8105c62:	ddba      	ble.n	8105bda <_dtoa_r+0xb32>
 8105c64:	4659      	mov	r1, fp
 8105c66:	2300      	movs	r3, #0
 8105c68:	220a      	movs	r2, #10
 8105c6a:	4620      	mov	r0, r4
 8105c6c:	f000 f884 	bl	8105d78 <__multadd>
 8105c70:	4683      	mov	fp, r0
 8105c72:	e7eb      	b.n	8105c4c <_dtoa_r+0xba4>
 8105c74:	08107143 	.word	0x08107143
 8105c78:	0810709c 	.word	0x0810709c
 8105c7c:	081070c0 	.word	0x081070c0

08105c80 <_localeconv_r>:
 8105c80:	4800      	ldr	r0, [pc, #0]	; (8105c84 <_localeconv_r+0x4>)
 8105c82:	4770      	bx	lr
 8105c84:	1000016c 	.word	0x1000016c

08105c88 <malloc>:
 8105c88:	4b02      	ldr	r3, [pc, #8]	; (8105c94 <malloc+0xc>)
 8105c8a:	4601      	mov	r1, r0
 8105c8c:	6818      	ldr	r0, [r3, #0]
 8105c8e:	f000 bbef 	b.w	8106470 <_malloc_r>
 8105c92:	bf00      	nop
 8105c94:	10000018 	.word	0x10000018

08105c98 <memcpy>:
 8105c98:	440a      	add	r2, r1
 8105c9a:	4291      	cmp	r1, r2
 8105c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8105ca0:	d100      	bne.n	8105ca4 <memcpy+0xc>
 8105ca2:	4770      	bx	lr
 8105ca4:	b510      	push	{r4, lr}
 8105ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8105cae:	4291      	cmp	r1, r2
 8105cb0:	d1f9      	bne.n	8105ca6 <memcpy+0xe>
 8105cb2:	bd10      	pop	{r4, pc}

08105cb4 <_Balloc>:
 8105cb4:	b570      	push	{r4, r5, r6, lr}
 8105cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8105cb8:	4604      	mov	r4, r0
 8105cba:	460d      	mov	r5, r1
 8105cbc:	b976      	cbnz	r6, 8105cdc <_Balloc+0x28>
 8105cbe:	2010      	movs	r0, #16
 8105cc0:	f7ff ffe2 	bl	8105c88 <malloc>
 8105cc4:	4602      	mov	r2, r0
 8105cc6:	6260      	str	r0, [r4, #36]	; 0x24
 8105cc8:	b920      	cbnz	r0, 8105cd4 <_Balloc+0x20>
 8105cca:	4b18      	ldr	r3, [pc, #96]	; (8105d2c <_Balloc+0x78>)
 8105ccc:	4818      	ldr	r0, [pc, #96]	; (8105d30 <_Balloc+0x7c>)
 8105cce:	2166      	movs	r1, #102	; 0x66
 8105cd0:	f000 fc38 	bl	8106544 <__assert_func>
 8105cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8105cd8:	6006      	str	r6, [r0, #0]
 8105cda:	60c6      	str	r6, [r0, #12]
 8105cdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8105cde:	68f3      	ldr	r3, [r6, #12]
 8105ce0:	b183      	cbz	r3, 8105d04 <_Balloc+0x50>
 8105ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105ce4:	68db      	ldr	r3, [r3, #12]
 8105ce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8105cea:	b9b8      	cbnz	r0, 8105d1c <_Balloc+0x68>
 8105cec:	2101      	movs	r1, #1
 8105cee:	fa01 f605 	lsl.w	r6, r1, r5
 8105cf2:	1d72      	adds	r2, r6, #5
 8105cf4:	0092      	lsls	r2, r2, #2
 8105cf6:	4620      	mov	r0, r4
 8105cf8:	f000 fb5a 	bl	81063b0 <_calloc_r>
 8105cfc:	b160      	cbz	r0, 8105d18 <_Balloc+0x64>
 8105cfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8105d02:	e00e      	b.n	8105d22 <_Balloc+0x6e>
 8105d04:	2221      	movs	r2, #33	; 0x21
 8105d06:	2104      	movs	r1, #4
 8105d08:	4620      	mov	r0, r4
 8105d0a:	f000 fb51 	bl	81063b0 <_calloc_r>
 8105d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105d10:	60f0      	str	r0, [r6, #12]
 8105d12:	68db      	ldr	r3, [r3, #12]
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d1e4      	bne.n	8105ce2 <_Balloc+0x2e>
 8105d18:	2000      	movs	r0, #0
 8105d1a:	bd70      	pop	{r4, r5, r6, pc}
 8105d1c:	6802      	ldr	r2, [r0, #0]
 8105d1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8105d22:	2300      	movs	r3, #0
 8105d24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8105d28:	e7f7      	b.n	8105d1a <_Balloc+0x66>
 8105d2a:	bf00      	nop
 8105d2c:	081070cd 	.word	0x081070cd
 8105d30:	08107154 	.word	0x08107154

08105d34 <_Bfree>:
 8105d34:	b570      	push	{r4, r5, r6, lr}
 8105d36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8105d38:	4605      	mov	r5, r0
 8105d3a:	460c      	mov	r4, r1
 8105d3c:	b976      	cbnz	r6, 8105d5c <_Bfree+0x28>
 8105d3e:	2010      	movs	r0, #16
 8105d40:	f7ff ffa2 	bl	8105c88 <malloc>
 8105d44:	4602      	mov	r2, r0
 8105d46:	6268      	str	r0, [r5, #36]	; 0x24
 8105d48:	b920      	cbnz	r0, 8105d54 <_Bfree+0x20>
 8105d4a:	4b09      	ldr	r3, [pc, #36]	; (8105d70 <_Bfree+0x3c>)
 8105d4c:	4809      	ldr	r0, [pc, #36]	; (8105d74 <_Bfree+0x40>)
 8105d4e:	218a      	movs	r1, #138	; 0x8a
 8105d50:	f000 fbf8 	bl	8106544 <__assert_func>
 8105d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8105d58:	6006      	str	r6, [r0, #0]
 8105d5a:	60c6      	str	r6, [r0, #12]
 8105d5c:	b13c      	cbz	r4, 8105d6e <_Bfree+0x3a>
 8105d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8105d60:	6862      	ldr	r2, [r4, #4]
 8105d62:	68db      	ldr	r3, [r3, #12]
 8105d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8105d68:	6021      	str	r1, [r4, #0]
 8105d6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8105d6e:	bd70      	pop	{r4, r5, r6, pc}
 8105d70:	081070cd 	.word	0x081070cd
 8105d74:	08107154 	.word	0x08107154

08105d78 <__multadd>:
 8105d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105d7c:	690e      	ldr	r6, [r1, #16]
 8105d7e:	4607      	mov	r7, r0
 8105d80:	4698      	mov	r8, r3
 8105d82:	460c      	mov	r4, r1
 8105d84:	f101 0014 	add.w	r0, r1, #20
 8105d88:	2300      	movs	r3, #0
 8105d8a:	6805      	ldr	r5, [r0, #0]
 8105d8c:	b2a9      	uxth	r1, r5
 8105d8e:	fb02 8101 	mla	r1, r2, r1, r8
 8105d92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8105d96:	0c2d      	lsrs	r5, r5, #16
 8105d98:	fb02 c505 	mla	r5, r2, r5, ip
 8105d9c:	b289      	uxth	r1, r1
 8105d9e:	3301      	adds	r3, #1
 8105da0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8105da4:	429e      	cmp	r6, r3
 8105da6:	f840 1b04 	str.w	r1, [r0], #4
 8105daa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8105dae:	dcec      	bgt.n	8105d8a <__multadd+0x12>
 8105db0:	f1b8 0f00 	cmp.w	r8, #0
 8105db4:	d022      	beq.n	8105dfc <__multadd+0x84>
 8105db6:	68a3      	ldr	r3, [r4, #8]
 8105db8:	42b3      	cmp	r3, r6
 8105dba:	dc19      	bgt.n	8105df0 <__multadd+0x78>
 8105dbc:	6861      	ldr	r1, [r4, #4]
 8105dbe:	4638      	mov	r0, r7
 8105dc0:	3101      	adds	r1, #1
 8105dc2:	f7ff ff77 	bl	8105cb4 <_Balloc>
 8105dc6:	4605      	mov	r5, r0
 8105dc8:	b928      	cbnz	r0, 8105dd6 <__multadd+0x5e>
 8105dca:	4602      	mov	r2, r0
 8105dcc:	4b0d      	ldr	r3, [pc, #52]	; (8105e04 <__multadd+0x8c>)
 8105dce:	480e      	ldr	r0, [pc, #56]	; (8105e08 <__multadd+0x90>)
 8105dd0:	21b5      	movs	r1, #181	; 0xb5
 8105dd2:	f000 fbb7 	bl	8106544 <__assert_func>
 8105dd6:	6922      	ldr	r2, [r4, #16]
 8105dd8:	3202      	adds	r2, #2
 8105dda:	f104 010c 	add.w	r1, r4, #12
 8105dde:	0092      	lsls	r2, r2, #2
 8105de0:	300c      	adds	r0, #12
 8105de2:	f7ff ff59 	bl	8105c98 <memcpy>
 8105de6:	4621      	mov	r1, r4
 8105de8:	4638      	mov	r0, r7
 8105dea:	f7ff ffa3 	bl	8105d34 <_Bfree>
 8105dee:	462c      	mov	r4, r5
 8105df0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8105df4:	3601      	adds	r6, #1
 8105df6:	f8c3 8014 	str.w	r8, [r3, #20]
 8105dfa:	6126      	str	r6, [r4, #16]
 8105dfc:	4620      	mov	r0, r4
 8105dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105e02:	bf00      	nop
 8105e04:	08107143 	.word	0x08107143
 8105e08:	08107154 	.word	0x08107154

08105e0c <__hi0bits>:
 8105e0c:	0c03      	lsrs	r3, r0, #16
 8105e0e:	041b      	lsls	r3, r3, #16
 8105e10:	b9d3      	cbnz	r3, 8105e48 <__hi0bits+0x3c>
 8105e12:	0400      	lsls	r0, r0, #16
 8105e14:	2310      	movs	r3, #16
 8105e16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8105e1a:	bf04      	itt	eq
 8105e1c:	0200      	lsleq	r0, r0, #8
 8105e1e:	3308      	addeq	r3, #8
 8105e20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8105e24:	bf04      	itt	eq
 8105e26:	0100      	lsleq	r0, r0, #4
 8105e28:	3304      	addeq	r3, #4
 8105e2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8105e2e:	bf04      	itt	eq
 8105e30:	0080      	lsleq	r0, r0, #2
 8105e32:	3302      	addeq	r3, #2
 8105e34:	2800      	cmp	r0, #0
 8105e36:	db05      	blt.n	8105e44 <__hi0bits+0x38>
 8105e38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8105e3c:	f103 0301 	add.w	r3, r3, #1
 8105e40:	bf08      	it	eq
 8105e42:	2320      	moveq	r3, #32
 8105e44:	4618      	mov	r0, r3
 8105e46:	4770      	bx	lr
 8105e48:	2300      	movs	r3, #0
 8105e4a:	e7e4      	b.n	8105e16 <__hi0bits+0xa>

08105e4c <__lo0bits>:
 8105e4c:	6803      	ldr	r3, [r0, #0]
 8105e4e:	f013 0207 	ands.w	r2, r3, #7
 8105e52:	4601      	mov	r1, r0
 8105e54:	d00b      	beq.n	8105e6e <__lo0bits+0x22>
 8105e56:	07da      	lsls	r2, r3, #31
 8105e58:	d424      	bmi.n	8105ea4 <__lo0bits+0x58>
 8105e5a:	0798      	lsls	r0, r3, #30
 8105e5c:	bf49      	itett	mi
 8105e5e:	085b      	lsrmi	r3, r3, #1
 8105e60:	089b      	lsrpl	r3, r3, #2
 8105e62:	2001      	movmi	r0, #1
 8105e64:	600b      	strmi	r3, [r1, #0]
 8105e66:	bf5c      	itt	pl
 8105e68:	600b      	strpl	r3, [r1, #0]
 8105e6a:	2002      	movpl	r0, #2
 8105e6c:	4770      	bx	lr
 8105e6e:	b298      	uxth	r0, r3
 8105e70:	b9b0      	cbnz	r0, 8105ea0 <__lo0bits+0x54>
 8105e72:	0c1b      	lsrs	r3, r3, #16
 8105e74:	2010      	movs	r0, #16
 8105e76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8105e7a:	bf04      	itt	eq
 8105e7c:	0a1b      	lsreq	r3, r3, #8
 8105e7e:	3008      	addeq	r0, #8
 8105e80:	071a      	lsls	r2, r3, #28
 8105e82:	bf04      	itt	eq
 8105e84:	091b      	lsreq	r3, r3, #4
 8105e86:	3004      	addeq	r0, #4
 8105e88:	079a      	lsls	r2, r3, #30
 8105e8a:	bf04      	itt	eq
 8105e8c:	089b      	lsreq	r3, r3, #2
 8105e8e:	3002      	addeq	r0, #2
 8105e90:	07da      	lsls	r2, r3, #31
 8105e92:	d403      	bmi.n	8105e9c <__lo0bits+0x50>
 8105e94:	085b      	lsrs	r3, r3, #1
 8105e96:	f100 0001 	add.w	r0, r0, #1
 8105e9a:	d005      	beq.n	8105ea8 <__lo0bits+0x5c>
 8105e9c:	600b      	str	r3, [r1, #0]
 8105e9e:	4770      	bx	lr
 8105ea0:	4610      	mov	r0, r2
 8105ea2:	e7e8      	b.n	8105e76 <__lo0bits+0x2a>
 8105ea4:	2000      	movs	r0, #0
 8105ea6:	4770      	bx	lr
 8105ea8:	2020      	movs	r0, #32
 8105eaa:	4770      	bx	lr

08105eac <__i2b>:
 8105eac:	b510      	push	{r4, lr}
 8105eae:	460c      	mov	r4, r1
 8105eb0:	2101      	movs	r1, #1
 8105eb2:	f7ff feff 	bl	8105cb4 <_Balloc>
 8105eb6:	4602      	mov	r2, r0
 8105eb8:	b928      	cbnz	r0, 8105ec6 <__i2b+0x1a>
 8105eba:	4b05      	ldr	r3, [pc, #20]	; (8105ed0 <__i2b+0x24>)
 8105ebc:	4805      	ldr	r0, [pc, #20]	; (8105ed4 <__i2b+0x28>)
 8105ebe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8105ec2:	f000 fb3f 	bl	8106544 <__assert_func>
 8105ec6:	2301      	movs	r3, #1
 8105ec8:	6144      	str	r4, [r0, #20]
 8105eca:	6103      	str	r3, [r0, #16]
 8105ecc:	bd10      	pop	{r4, pc}
 8105ece:	bf00      	nop
 8105ed0:	08107143 	.word	0x08107143
 8105ed4:	08107154 	.word	0x08107154

08105ed8 <__multiply>:
 8105ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105edc:	4614      	mov	r4, r2
 8105ede:	690a      	ldr	r2, [r1, #16]
 8105ee0:	6923      	ldr	r3, [r4, #16]
 8105ee2:	429a      	cmp	r2, r3
 8105ee4:	bfb8      	it	lt
 8105ee6:	460b      	movlt	r3, r1
 8105ee8:	460d      	mov	r5, r1
 8105eea:	bfbc      	itt	lt
 8105eec:	4625      	movlt	r5, r4
 8105eee:	461c      	movlt	r4, r3
 8105ef0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8105ef4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8105ef8:	68ab      	ldr	r3, [r5, #8]
 8105efa:	6869      	ldr	r1, [r5, #4]
 8105efc:	eb0a 0709 	add.w	r7, sl, r9
 8105f00:	42bb      	cmp	r3, r7
 8105f02:	b085      	sub	sp, #20
 8105f04:	bfb8      	it	lt
 8105f06:	3101      	addlt	r1, #1
 8105f08:	f7ff fed4 	bl	8105cb4 <_Balloc>
 8105f0c:	b930      	cbnz	r0, 8105f1c <__multiply+0x44>
 8105f0e:	4602      	mov	r2, r0
 8105f10:	4b42      	ldr	r3, [pc, #264]	; (810601c <__multiply+0x144>)
 8105f12:	4843      	ldr	r0, [pc, #268]	; (8106020 <__multiply+0x148>)
 8105f14:	f240 115d 	movw	r1, #349	; 0x15d
 8105f18:	f000 fb14 	bl	8106544 <__assert_func>
 8105f1c:	f100 0614 	add.w	r6, r0, #20
 8105f20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8105f24:	4633      	mov	r3, r6
 8105f26:	2200      	movs	r2, #0
 8105f28:	4543      	cmp	r3, r8
 8105f2a:	d31e      	bcc.n	8105f6a <__multiply+0x92>
 8105f2c:	f105 0c14 	add.w	ip, r5, #20
 8105f30:	f104 0314 	add.w	r3, r4, #20
 8105f34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8105f38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8105f3c:	9202      	str	r2, [sp, #8]
 8105f3e:	ebac 0205 	sub.w	r2, ip, r5
 8105f42:	3a15      	subs	r2, #21
 8105f44:	f022 0203 	bic.w	r2, r2, #3
 8105f48:	3204      	adds	r2, #4
 8105f4a:	f105 0115 	add.w	r1, r5, #21
 8105f4e:	458c      	cmp	ip, r1
 8105f50:	bf38      	it	cc
 8105f52:	2204      	movcc	r2, #4
 8105f54:	9201      	str	r2, [sp, #4]
 8105f56:	9a02      	ldr	r2, [sp, #8]
 8105f58:	9303      	str	r3, [sp, #12]
 8105f5a:	429a      	cmp	r2, r3
 8105f5c:	d808      	bhi.n	8105f70 <__multiply+0x98>
 8105f5e:	2f00      	cmp	r7, #0
 8105f60:	dc55      	bgt.n	810600e <__multiply+0x136>
 8105f62:	6107      	str	r7, [r0, #16]
 8105f64:	b005      	add	sp, #20
 8105f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105f6a:	f843 2b04 	str.w	r2, [r3], #4
 8105f6e:	e7db      	b.n	8105f28 <__multiply+0x50>
 8105f70:	f8b3 a000 	ldrh.w	sl, [r3]
 8105f74:	f1ba 0f00 	cmp.w	sl, #0
 8105f78:	d020      	beq.n	8105fbc <__multiply+0xe4>
 8105f7a:	f105 0e14 	add.w	lr, r5, #20
 8105f7e:	46b1      	mov	r9, r6
 8105f80:	2200      	movs	r2, #0
 8105f82:	f85e 4b04 	ldr.w	r4, [lr], #4
 8105f86:	f8d9 b000 	ldr.w	fp, [r9]
 8105f8a:	b2a1      	uxth	r1, r4
 8105f8c:	fa1f fb8b 	uxth.w	fp, fp
 8105f90:	fb0a b101 	mla	r1, sl, r1, fp
 8105f94:	4411      	add	r1, r2
 8105f96:	f8d9 2000 	ldr.w	r2, [r9]
 8105f9a:	0c24      	lsrs	r4, r4, #16
 8105f9c:	0c12      	lsrs	r2, r2, #16
 8105f9e:	fb0a 2404 	mla	r4, sl, r4, r2
 8105fa2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8105fa6:	b289      	uxth	r1, r1
 8105fa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8105fac:	45f4      	cmp	ip, lr
 8105fae:	f849 1b04 	str.w	r1, [r9], #4
 8105fb2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8105fb6:	d8e4      	bhi.n	8105f82 <__multiply+0xaa>
 8105fb8:	9901      	ldr	r1, [sp, #4]
 8105fba:	5072      	str	r2, [r6, r1]
 8105fbc:	9a03      	ldr	r2, [sp, #12]
 8105fbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8105fc2:	3304      	adds	r3, #4
 8105fc4:	f1b9 0f00 	cmp.w	r9, #0
 8105fc8:	d01f      	beq.n	810600a <__multiply+0x132>
 8105fca:	6834      	ldr	r4, [r6, #0]
 8105fcc:	f105 0114 	add.w	r1, r5, #20
 8105fd0:	46b6      	mov	lr, r6
 8105fd2:	f04f 0a00 	mov.w	sl, #0
 8105fd6:	880a      	ldrh	r2, [r1, #0]
 8105fd8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8105fdc:	fb09 b202 	mla	r2, r9, r2, fp
 8105fe0:	4492      	add	sl, r2
 8105fe2:	b2a4      	uxth	r4, r4
 8105fe4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8105fe8:	f84e 4b04 	str.w	r4, [lr], #4
 8105fec:	f851 4b04 	ldr.w	r4, [r1], #4
 8105ff0:	f8be 2000 	ldrh.w	r2, [lr]
 8105ff4:	0c24      	lsrs	r4, r4, #16
 8105ff6:	fb09 2404 	mla	r4, r9, r4, r2
 8105ffa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8105ffe:	458c      	cmp	ip, r1
 8106000:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8106004:	d8e7      	bhi.n	8105fd6 <__multiply+0xfe>
 8106006:	9a01      	ldr	r2, [sp, #4]
 8106008:	50b4      	str	r4, [r6, r2]
 810600a:	3604      	adds	r6, #4
 810600c:	e7a3      	b.n	8105f56 <__multiply+0x7e>
 810600e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8106012:	2b00      	cmp	r3, #0
 8106014:	d1a5      	bne.n	8105f62 <__multiply+0x8a>
 8106016:	3f01      	subs	r7, #1
 8106018:	e7a1      	b.n	8105f5e <__multiply+0x86>
 810601a:	bf00      	nop
 810601c:	08107143 	.word	0x08107143
 8106020:	08107154 	.word	0x08107154

08106024 <__pow5mult>:
 8106024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106028:	4615      	mov	r5, r2
 810602a:	f012 0203 	ands.w	r2, r2, #3
 810602e:	4606      	mov	r6, r0
 8106030:	460f      	mov	r7, r1
 8106032:	d007      	beq.n	8106044 <__pow5mult+0x20>
 8106034:	4c25      	ldr	r4, [pc, #148]	; (81060cc <__pow5mult+0xa8>)
 8106036:	3a01      	subs	r2, #1
 8106038:	2300      	movs	r3, #0
 810603a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810603e:	f7ff fe9b 	bl	8105d78 <__multadd>
 8106042:	4607      	mov	r7, r0
 8106044:	10ad      	asrs	r5, r5, #2
 8106046:	d03d      	beq.n	81060c4 <__pow5mult+0xa0>
 8106048:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810604a:	b97c      	cbnz	r4, 810606c <__pow5mult+0x48>
 810604c:	2010      	movs	r0, #16
 810604e:	f7ff fe1b 	bl	8105c88 <malloc>
 8106052:	4602      	mov	r2, r0
 8106054:	6270      	str	r0, [r6, #36]	; 0x24
 8106056:	b928      	cbnz	r0, 8106064 <__pow5mult+0x40>
 8106058:	4b1d      	ldr	r3, [pc, #116]	; (81060d0 <__pow5mult+0xac>)
 810605a:	481e      	ldr	r0, [pc, #120]	; (81060d4 <__pow5mult+0xb0>)
 810605c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8106060:	f000 fa70 	bl	8106544 <__assert_func>
 8106064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8106068:	6004      	str	r4, [r0, #0]
 810606a:	60c4      	str	r4, [r0, #12]
 810606c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8106070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8106074:	b94c      	cbnz	r4, 810608a <__pow5mult+0x66>
 8106076:	f240 2171 	movw	r1, #625	; 0x271
 810607a:	4630      	mov	r0, r6
 810607c:	f7ff ff16 	bl	8105eac <__i2b>
 8106080:	2300      	movs	r3, #0
 8106082:	f8c8 0008 	str.w	r0, [r8, #8]
 8106086:	4604      	mov	r4, r0
 8106088:	6003      	str	r3, [r0, #0]
 810608a:	f04f 0900 	mov.w	r9, #0
 810608e:	07eb      	lsls	r3, r5, #31
 8106090:	d50a      	bpl.n	81060a8 <__pow5mult+0x84>
 8106092:	4639      	mov	r1, r7
 8106094:	4622      	mov	r2, r4
 8106096:	4630      	mov	r0, r6
 8106098:	f7ff ff1e 	bl	8105ed8 <__multiply>
 810609c:	4639      	mov	r1, r7
 810609e:	4680      	mov	r8, r0
 81060a0:	4630      	mov	r0, r6
 81060a2:	f7ff fe47 	bl	8105d34 <_Bfree>
 81060a6:	4647      	mov	r7, r8
 81060a8:	106d      	asrs	r5, r5, #1
 81060aa:	d00b      	beq.n	81060c4 <__pow5mult+0xa0>
 81060ac:	6820      	ldr	r0, [r4, #0]
 81060ae:	b938      	cbnz	r0, 81060c0 <__pow5mult+0x9c>
 81060b0:	4622      	mov	r2, r4
 81060b2:	4621      	mov	r1, r4
 81060b4:	4630      	mov	r0, r6
 81060b6:	f7ff ff0f 	bl	8105ed8 <__multiply>
 81060ba:	6020      	str	r0, [r4, #0]
 81060bc:	f8c0 9000 	str.w	r9, [r0]
 81060c0:	4604      	mov	r4, r0
 81060c2:	e7e4      	b.n	810608e <__pow5mult+0x6a>
 81060c4:	4638      	mov	r0, r7
 81060c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81060ca:	bf00      	nop
 81060cc:	081072a8 	.word	0x081072a8
 81060d0:	081070cd 	.word	0x081070cd
 81060d4:	08107154 	.word	0x08107154

081060d8 <__lshift>:
 81060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81060dc:	460c      	mov	r4, r1
 81060de:	6849      	ldr	r1, [r1, #4]
 81060e0:	6923      	ldr	r3, [r4, #16]
 81060e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81060e6:	68a3      	ldr	r3, [r4, #8]
 81060e8:	4607      	mov	r7, r0
 81060ea:	4691      	mov	r9, r2
 81060ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81060f0:	f108 0601 	add.w	r6, r8, #1
 81060f4:	42b3      	cmp	r3, r6
 81060f6:	db0b      	blt.n	8106110 <__lshift+0x38>
 81060f8:	4638      	mov	r0, r7
 81060fa:	f7ff fddb 	bl	8105cb4 <_Balloc>
 81060fe:	4605      	mov	r5, r0
 8106100:	b948      	cbnz	r0, 8106116 <__lshift+0x3e>
 8106102:	4602      	mov	r2, r0
 8106104:	4b28      	ldr	r3, [pc, #160]	; (81061a8 <__lshift+0xd0>)
 8106106:	4829      	ldr	r0, [pc, #164]	; (81061ac <__lshift+0xd4>)
 8106108:	f240 11d9 	movw	r1, #473	; 0x1d9
 810610c:	f000 fa1a 	bl	8106544 <__assert_func>
 8106110:	3101      	adds	r1, #1
 8106112:	005b      	lsls	r3, r3, #1
 8106114:	e7ee      	b.n	81060f4 <__lshift+0x1c>
 8106116:	2300      	movs	r3, #0
 8106118:	f100 0114 	add.w	r1, r0, #20
 810611c:	f100 0210 	add.w	r2, r0, #16
 8106120:	4618      	mov	r0, r3
 8106122:	4553      	cmp	r3, sl
 8106124:	db33      	blt.n	810618e <__lshift+0xb6>
 8106126:	6920      	ldr	r0, [r4, #16]
 8106128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810612c:	f104 0314 	add.w	r3, r4, #20
 8106130:	f019 091f 	ands.w	r9, r9, #31
 8106134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8106138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810613c:	d02b      	beq.n	8106196 <__lshift+0xbe>
 810613e:	f1c9 0e20 	rsb	lr, r9, #32
 8106142:	468a      	mov	sl, r1
 8106144:	2200      	movs	r2, #0
 8106146:	6818      	ldr	r0, [r3, #0]
 8106148:	fa00 f009 	lsl.w	r0, r0, r9
 810614c:	4302      	orrs	r2, r0
 810614e:	f84a 2b04 	str.w	r2, [sl], #4
 8106152:	f853 2b04 	ldr.w	r2, [r3], #4
 8106156:	459c      	cmp	ip, r3
 8106158:	fa22 f20e 	lsr.w	r2, r2, lr
 810615c:	d8f3      	bhi.n	8106146 <__lshift+0x6e>
 810615e:	ebac 0304 	sub.w	r3, ip, r4
 8106162:	3b15      	subs	r3, #21
 8106164:	f023 0303 	bic.w	r3, r3, #3
 8106168:	3304      	adds	r3, #4
 810616a:	f104 0015 	add.w	r0, r4, #21
 810616e:	4584      	cmp	ip, r0
 8106170:	bf38      	it	cc
 8106172:	2304      	movcc	r3, #4
 8106174:	50ca      	str	r2, [r1, r3]
 8106176:	b10a      	cbz	r2, 810617c <__lshift+0xa4>
 8106178:	f108 0602 	add.w	r6, r8, #2
 810617c:	3e01      	subs	r6, #1
 810617e:	4638      	mov	r0, r7
 8106180:	612e      	str	r6, [r5, #16]
 8106182:	4621      	mov	r1, r4
 8106184:	f7ff fdd6 	bl	8105d34 <_Bfree>
 8106188:	4628      	mov	r0, r5
 810618a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810618e:	f842 0f04 	str.w	r0, [r2, #4]!
 8106192:	3301      	adds	r3, #1
 8106194:	e7c5      	b.n	8106122 <__lshift+0x4a>
 8106196:	3904      	subs	r1, #4
 8106198:	f853 2b04 	ldr.w	r2, [r3], #4
 810619c:	f841 2f04 	str.w	r2, [r1, #4]!
 81061a0:	459c      	cmp	ip, r3
 81061a2:	d8f9      	bhi.n	8106198 <__lshift+0xc0>
 81061a4:	e7ea      	b.n	810617c <__lshift+0xa4>
 81061a6:	bf00      	nop
 81061a8:	08107143 	.word	0x08107143
 81061ac:	08107154 	.word	0x08107154

081061b0 <__mcmp>:
 81061b0:	b530      	push	{r4, r5, lr}
 81061b2:	6902      	ldr	r2, [r0, #16]
 81061b4:	690c      	ldr	r4, [r1, #16]
 81061b6:	1b12      	subs	r2, r2, r4
 81061b8:	d10e      	bne.n	81061d8 <__mcmp+0x28>
 81061ba:	f100 0314 	add.w	r3, r0, #20
 81061be:	3114      	adds	r1, #20
 81061c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 81061c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 81061c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 81061cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 81061d0:	42a5      	cmp	r5, r4
 81061d2:	d003      	beq.n	81061dc <__mcmp+0x2c>
 81061d4:	d305      	bcc.n	81061e2 <__mcmp+0x32>
 81061d6:	2201      	movs	r2, #1
 81061d8:	4610      	mov	r0, r2
 81061da:	bd30      	pop	{r4, r5, pc}
 81061dc:	4283      	cmp	r3, r0
 81061de:	d3f3      	bcc.n	81061c8 <__mcmp+0x18>
 81061e0:	e7fa      	b.n	81061d8 <__mcmp+0x28>
 81061e2:	f04f 32ff 	mov.w	r2, #4294967295
 81061e6:	e7f7      	b.n	81061d8 <__mcmp+0x28>

081061e8 <__mdiff>:
 81061e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81061ec:	460c      	mov	r4, r1
 81061ee:	4606      	mov	r6, r0
 81061f0:	4611      	mov	r1, r2
 81061f2:	4620      	mov	r0, r4
 81061f4:	4617      	mov	r7, r2
 81061f6:	f7ff ffdb 	bl	81061b0 <__mcmp>
 81061fa:	1e05      	subs	r5, r0, #0
 81061fc:	d110      	bne.n	8106220 <__mdiff+0x38>
 81061fe:	4629      	mov	r1, r5
 8106200:	4630      	mov	r0, r6
 8106202:	f7ff fd57 	bl	8105cb4 <_Balloc>
 8106206:	b930      	cbnz	r0, 8106216 <__mdiff+0x2e>
 8106208:	4b39      	ldr	r3, [pc, #228]	; (81062f0 <__mdiff+0x108>)
 810620a:	4602      	mov	r2, r0
 810620c:	f240 2132 	movw	r1, #562	; 0x232
 8106210:	4838      	ldr	r0, [pc, #224]	; (81062f4 <__mdiff+0x10c>)
 8106212:	f000 f997 	bl	8106544 <__assert_func>
 8106216:	2301      	movs	r3, #1
 8106218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810621c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106220:	bfa4      	itt	ge
 8106222:	463b      	movge	r3, r7
 8106224:	4627      	movge	r7, r4
 8106226:	4630      	mov	r0, r6
 8106228:	6879      	ldr	r1, [r7, #4]
 810622a:	bfa6      	itte	ge
 810622c:	461c      	movge	r4, r3
 810622e:	2500      	movge	r5, #0
 8106230:	2501      	movlt	r5, #1
 8106232:	f7ff fd3f 	bl	8105cb4 <_Balloc>
 8106236:	b920      	cbnz	r0, 8106242 <__mdiff+0x5a>
 8106238:	4b2d      	ldr	r3, [pc, #180]	; (81062f0 <__mdiff+0x108>)
 810623a:	4602      	mov	r2, r0
 810623c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8106240:	e7e6      	b.n	8106210 <__mdiff+0x28>
 8106242:	693e      	ldr	r6, [r7, #16]
 8106244:	60c5      	str	r5, [r0, #12]
 8106246:	6925      	ldr	r5, [r4, #16]
 8106248:	f107 0114 	add.w	r1, r7, #20
 810624c:	f104 0914 	add.w	r9, r4, #20
 8106250:	f100 0e14 	add.w	lr, r0, #20
 8106254:	f107 0210 	add.w	r2, r7, #16
 8106258:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810625c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8106260:	46f2      	mov	sl, lr
 8106262:	2700      	movs	r7, #0
 8106264:	f859 3b04 	ldr.w	r3, [r9], #4
 8106268:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810626c:	fa1f f883 	uxth.w	r8, r3
 8106270:	fa17 f78b 	uxtah	r7, r7, fp
 8106274:	0c1b      	lsrs	r3, r3, #16
 8106276:	eba7 0808 	sub.w	r8, r7, r8
 810627a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810627e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8106282:	fa1f f888 	uxth.w	r8, r8
 8106286:	141f      	asrs	r7, r3, #16
 8106288:	454d      	cmp	r5, r9
 810628a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810628e:	f84a 3b04 	str.w	r3, [sl], #4
 8106292:	d8e7      	bhi.n	8106264 <__mdiff+0x7c>
 8106294:	1b2b      	subs	r3, r5, r4
 8106296:	3b15      	subs	r3, #21
 8106298:	f023 0303 	bic.w	r3, r3, #3
 810629c:	3304      	adds	r3, #4
 810629e:	3415      	adds	r4, #21
 81062a0:	42a5      	cmp	r5, r4
 81062a2:	bf38      	it	cc
 81062a4:	2304      	movcc	r3, #4
 81062a6:	4419      	add	r1, r3
 81062a8:	4473      	add	r3, lr
 81062aa:	469e      	mov	lr, r3
 81062ac:	460d      	mov	r5, r1
 81062ae:	4565      	cmp	r5, ip
 81062b0:	d30e      	bcc.n	81062d0 <__mdiff+0xe8>
 81062b2:	f10c 0203 	add.w	r2, ip, #3
 81062b6:	1a52      	subs	r2, r2, r1
 81062b8:	f022 0203 	bic.w	r2, r2, #3
 81062bc:	3903      	subs	r1, #3
 81062be:	458c      	cmp	ip, r1
 81062c0:	bf38      	it	cc
 81062c2:	2200      	movcc	r2, #0
 81062c4:	441a      	add	r2, r3
 81062c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 81062ca:	b17b      	cbz	r3, 81062ec <__mdiff+0x104>
 81062cc:	6106      	str	r6, [r0, #16]
 81062ce:	e7a5      	b.n	810621c <__mdiff+0x34>
 81062d0:	f855 8b04 	ldr.w	r8, [r5], #4
 81062d4:	fa17 f488 	uxtah	r4, r7, r8
 81062d8:	1422      	asrs	r2, r4, #16
 81062da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 81062de:	b2a4      	uxth	r4, r4
 81062e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 81062e4:	f84e 4b04 	str.w	r4, [lr], #4
 81062e8:	1417      	asrs	r7, r2, #16
 81062ea:	e7e0      	b.n	81062ae <__mdiff+0xc6>
 81062ec:	3e01      	subs	r6, #1
 81062ee:	e7ea      	b.n	81062c6 <__mdiff+0xde>
 81062f0:	08107143 	.word	0x08107143
 81062f4:	08107154 	.word	0x08107154

081062f8 <__d2b>:
 81062f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81062fc:	4689      	mov	r9, r1
 81062fe:	2101      	movs	r1, #1
 8106300:	ec57 6b10 	vmov	r6, r7, d0
 8106304:	4690      	mov	r8, r2
 8106306:	f7ff fcd5 	bl	8105cb4 <_Balloc>
 810630a:	4604      	mov	r4, r0
 810630c:	b930      	cbnz	r0, 810631c <__d2b+0x24>
 810630e:	4602      	mov	r2, r0
 8106310:	4b25      	ldr	r3, [pc, #148]	; (81063a8 <__d2b+0xb0>)
 8106312:	4826      	ldr	r0, [pc, #152]	; (81063ac <__d2b+0xb4>)
 8106314:	f240 310a 	movw	r1, #778	; 0x30a
 8106318:	f000 f914 	bl	8106544 <__assert_func>
 810631c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8106320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8106324:	bb35      	cbnz	r5, 8106374 <__d2b+0x7c>
 8106326:	2e00      	cmp	r6, #0
 8106328:	9301      	str	r3, [sp, #4]
 810632a:	d028      	beq.n	810637e <__d2b+0x86>
 810632c:	4668      	mov	r0, sp
 810632e:	9600      	str	r6, [sp, #0]
 8106330:	f7ff fd8c 	bl	8105e4c <__lo0bits>
 8106334:	9900      	ldr	r1, [sp, #0]
 8106336:	b300      	cbz	r0, 810637a <__d2b+0x82>
 8106338:	9a01      	ldr	r2, [sp, #4]
 810633a:	f1c0 0320 	rsb	r3, r0, #32
 810633e:	fa02 f303 	lsl.w	r3, r2, r3
 8106342:	430b      	orrs	r3, r1
 8106344:	40c2      	lsrs	r2, r0
 8106346:	6163      	str	r3, [r4, #20]
 8106348:	9201      	str	r2, [sp, #4]
 810634a:	9b01      	ldr	r3, [sp, #4]
 810634c:	61a3      	str	r3, [r4, #24]
 810634e:	2b00      	cmp	r3, #0
 8106350:	bf14      	ite	ne
 8106352:	2202      	movne	r2, #2
 8106354:	2201      	moveq	r2, #1
 8106356:	6122      	str	r2, [r4, #16]
 8106358:	b1d5      	cbz	r5, 8106390 <__d2b+0x98>
 810635a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810635e:	4405      	add	r5, r0
 8106360:	f8c9 5000 	str.w	r5, [r9]
 8106364:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8106368:	f8c8 0000 	str.w	r0, [r8]
 810636c:	4620      	mov	r0, r4
 810636e:	b003      	add	sp, #12
 8106370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8106374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106378:	e7d5      	b.n	8106326 <__d2b+0x2e>
 810637a:	6161      	str	r1, [r4, #20]
 810637c:	e7e5      	b.n	810634a <__d2b+0x52>
 810637e:	a801      	add	r0, sp, #4
 8106380:	f7ff fd64 	bl	8105e4c <__lo0bits>
 8106384:	9b01      	ldr	r3, [sp, #4]
 8106386:	6163      	str	r3, [r4, #20]
 8106388:	2201      	movs	r2, #1
 810638a:	6122      	str	r2, [r4, #16]
 810638c:	3020      	adds	r0, #32
 810638e:	e7e3      	b.n	8106358 <__d2b+0x60>
 8106390:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8106394:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8106398:	f8c9 0000 	str.w	r0, [r9]
 810639c:	6918      	ldr	r0, [r3, #16]
 810639e:	f7ff fd35 	bl	8105e0c <__hi0bits>
 81063a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 81063a6:	e7df      	b.n	8106368 <__d2b+0x70>
 81063a8:	08107143 	.word	0x08107143
 81063ac:	08107154 	.word	0x08107154

081063b0 <_calloc_r>:
 81063b0:	b513      	push	{r0, r1, r4, lr}
 81063b2:	434a      	muls	r2, r1
 81063b4:	4611      	mov	r1, r2
 81063b6:	9201      	str	r2, [sp, #4]
 81063b8:	f000 f85a 	bl	8106470 <_malloc_r>
 81063bc:	4604      	mov	r4, r0
 81063be:	b118      	cbz	r0, 81063c8 <_calloc_r+0x18>
 81063c0:	9a01      	ldr	r2, [sp, #4]
 81063c2:	2100      	movs	r1, #0
 81063c4:	f7fe f970 	bl	81046a8 <memset>
 81063c8:	4620      	mov	r0, r4
 81063ca:	b002      	add	sp, #8
 81063cc:	bd10      	pop	{r4, pc}
	...

081063d0 <_free_r>:
 81063d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81063d2:	2900      	cmp	r1, #0
 81063d4:	d048      	beq.n	8106468 <_free_r+0x98>
 81063d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81063da:	9001      	str	r0, [sp, #4]
 81063dc:	2b00      	cmp	r3, #0
 81063de:	f1a1 0404 	sub.w	r4, r1, #4
 81063e2:	bfb8      	it	lt
 81063e4:	18e4      	addlt	r4, r4, r3
 81063e6:	f000 f8ef 	bl	81065c8 <__malloc_lock>
 81063ea:	4a20      	ldr	r2, [pc, #128]	; (810646c <_free_r+0x9c>)
 81063ec:	9801      	ldr	r0, [sp, #4]
 81063ee:	6813      	ldr	r3, [r2, #0]
 81063f0:	4615      	mov	r5, r2
 81063f2:	b933      	cbnz	r3, 8106402 <_free_r+0x32>
 81063f4:	6063      	str	r3, [r4, #4]
 81063f6:	6014      	str	r4, [r2, #0]
 81063f8:	b003      	add	sp, #12
 81063fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81063fe:	f000 b8e9 	b.w	81065d4 <__malloc_unlock>
 8106402:	42a3      	cmp	r3, r4
 8106404:	d90b      	bls.n	810641e <_free_r+0x4e>
 8106406:	6821      	ldr	r1, [r4, #0]
 8106408:	1862      	adds	r2, r4, r1
 810640a:	4293      	cmp	r3, r2
 810640c:	bf04      	itt	eq
 810640e:	681a      	ldreq	r2, [r3, #0]
 8106410:	685b      	ldreq	r3, [r3, #4]
 8106412:	6063      	str	r3, [r4, #4]
 8106414:	bf04      	itt	eq
 8106416:	1852      	addeq	r2, r2, r1
 8106418:	6022      	streq	r2, [r4, #0]
 810641a:	602c      	str	r4, [r5, #0]
 810641c:	e7ec      	b.n	81063f8 <_free_r+0x28>
 810641e:	461a      	mov	r2, r3
 8106420:	685b      	ldr	r3, [r3, #4]
 8106422:	b10b      	cbz	r3, 8106428 <_free_r+0x58>
 8106424:	42a3      	cmp	r3, r4
 8106426:	d9fa      	bls.n	810641e <_free_r+0x4e>
 8106428:	6811      	ldr	r1, [r2, #0]
 810642a:	1855      	adds	r5, r2, r1
 810642c:	42a5      	cmp	r5, r4
 810642e:	d10b      	bne.n	8106448 <_free_r+0x78>
 8106430:	6824      	ldr	r4, [r4, #0]
 8106432:	4421      	add	r1, r4
 8106434:	1854      	adds	r4, r2, r1
 8106436:	42a3      	cmp	r3, r4
 8106438:	6011      	str	r1, [r2, #0]
 810643a:	d1dd      	bne.n	81063f8 <_free_r+0x28>
 810643c:	681c      	ldr	r4, [r3, #0]
 810643e:	685b      	ldr	r3, [r3, #4]
 8106440:	6053      	str	r3, [r2, #4]
 8106442:	4421      	add	r1, r4
 8106444:	6011      	str	r1, [r2, #0]
 8106446:	e7d7      	b.n	81063f8 <_free_r+0x28>
 8106448:	d902      	bls.n	8106450 <_free_r+0x80>
 810644a:	230c      	movs	r3, #12
 810644c:	6003      	str	r3, [r0, #0]
 810644e:	e7d3      	b.n	81063f8 <_free_r+0x28>
 8106450:	6825      	ldr	r5, [r4, #0]
 8106452:	1961      	adds	r1, r4, r5
 8106454:	428b      	cmp	r3, r1
 8106456:	bf04      	itt	eq
 8106458:	6819      	ldreq	r1, [r3, #0]
 810645a:	685b      	ldreq	r3, [r3, #4]
 810645c:	6063      	str	r3, [r4, #4]
 810645e:	bf04      	itt	eq
 8106460:	1949      	addeq	r1, r1, r5
 8106462:	6021      	streq	r1, [r4, #0]
 8106464:	6054      	str	r4, [r2, #4]
 8106466:	e7c7      	b.n	81063f8 <_free_r+0x28>
 8106468:	b003      	add	sp, #12
 810646a:	bd30      	pop	{r4, r5, pc}
 810646c:	1000021c 	.word	0x1000021c

08106470 <_malloc_r>:
 8106470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106472:	1ccd      	adds	r5, r1, #3
 8106474:	f025 0503 	bic.w	r5, r5, #3
 8106478:	3508      	adds	r5, #8
 810647a:	2d0c      	cmp	r5, #12
 810647c:	bf38      	it	cc
 810647e:	250c      	movcc	r5, #12
 8106480:	2d00      	cmp	r5, #0
 8106482:	4606      	mov	r6, r0
 8106484:	db01      	blt.n	810648a <_malloc_r+0x1a>
 8106486:	42a9      	cmp	r1, r5
 8106488:	d903      	bls.n	8106492 <_malloc_r+0x22>
 810648a:	230c      	movs	r3, #12
 810648c:	6033      	str	r3, [r6, #0]
 810648e:	2000      	movs	r0, #0
 8106490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106492:	f000 f899 	bl	81065c8 <__malloc_lock>
 8106496:	4921      	ldr	r1, [pc, #132]	; (810651c <_malloc_r+0xac>)
 8106498:	680a      	ldr	r2, [r1, #0]
 810649a:	4614      	mov	r4, r2
 810649c:	b99c      	cbnz	r4, 81064c6 <_malloc_r+0x56>
 810649e:	4f20      	ldr	r7, [pc, #128]	; (8106520 <_malloc_r+0xb0>)
 81064a0:	683b      	ldr	r3, [r7, #0]
 81064a2:	b923      	cbnz	r3, 81064ae <_malloc_r+0x3e>
 81064a4:	4621      	mov	r1, r4
 81064a6:	4630      	mov	r0, r6
 81064a8:	f000 f83c 	bl	8106524 <_sbrk_r>
 81064ac:	6038      	str	r0, [r7, #0]
 81064ae:	4629      	mov	r1, r5
 81064b0:	4630      	mov	r0, r6
 81064b2:	f000 f837 	bl	8106524 <_sbrk_r>
 81064b6:	1c43      	adds	r3, r0, #1
 81064b8:	d123      	bne.n	8106502 <_malloc_r+0x92>
 81064ba:	230c      	movs	r3, #12
 81064bc:	6033      	str	r3, [r6, #0]
 81064be:	4630      	mov	r0, r6
 81064c0:	f000 f888 	bl	81065d4 <__malloc_unlock>
 81064c4:	e7e3      	b.n	810648e <_malloc_r+0x1e>
 81064c6:	6823      	ldr	r3, [r4, #0]
 81064c8:	1b5b      	subs	r3, r3, r5
 81064ca:	d417      	bmi.n	81064fc <_malloc_r+0x8c>
 81064cc:	2b0b      	cmp	r3, #11
 81064ce:	d903      	bls.n	81064d8 <_malloc_r+0x68>
 81064d0:	6023      	str	r3, [r4, #0]
 81064d2:	441c      	add	r4, r3
 81064d4:	6025      	str	r5, [r4, #0]
 81064d6:	e004      	b.n	81064e2 <_malloc_r+0x72>
 81064d8:	6863      	ldr	r3, [r4, #4]
 81064da:	42a2      	cmp	r2, r4
 81064dc:	bf0c      	ite	eq
 81064de:	600b      	streq	r3, [r1, #0]
 81064e0:	6053      	strne	r3, [r2, #4]
 81064e2:	4630      	mov	r0, r6
 81064e4:	f000 f876 	bl	81065d4 <__malloc_unlock>
 81064e8:	f104 000b 	add.w	r0, r4, #11
 81064ec:	1d23      	adds	r3, r4, #4
 81064ee:	f020 0007 	bic.w	r0, r0, #7
 81064f2:	1ac2      	subs	r2, r0, r3
 81064f4:	d0cc      	beq.n	8106490 <_malloc_r+0x20>
 81064f6:	1a1b      	subs	r3, r3, r0
 81064f8:	50a3      	str	r3, [r4, r2]
 81064fa:	e7c9      	b.n	8106490 <_malloc_r+0x20>
 81064fc:	4622      	mov	r2, r4
 81064fe:	6864      	ldr	r4, [r4, #4]
 8106500:	e7cc      	b.n	810649c <_malloc_r+0x2c>
 8106502:	1cc4      	adds	r4, r0, #3
 8106504:	f024 0403 	bic.w	r4, r4, #3
 8106508:	42a0      	cmp	r0, r4
 810650a:	d0e3      	beq.n	81064d4 <_malloc_r+0x64>
 810650c:	1a21      	subs	r1, r4, r0
 810650e:	4630      	mov	r0, r6
 8106510:	f000 f808 	bl	8106524 <_sbrk_r>
 8106514:	3001      	adds	r0, #1
 8106516:	d1dd      	bne.n	81064d4 <_malloc_r+0x64>
 8106518:	e7cf      	b.n	81064ba <_malloc_r+0x4a>
 810651a:	bf00      	nop
 810651c:	1000021c 	.word	0x1000021c
 8106520:	10000220 	.word	0x10000220

08106524 <_sbrk_r>:
 8106524:	b538      	push	{r3, r4, r5, lr}
 8106526:	4d06      	ldr	r5, [pc, #24]	; (8106540 <_sbrk_r+0x1c>)
 8106528:	2300      	movs	r3, #0
 810652a:	4604      	mov	r4, r0
 810652c:	4608      	mov	r0, r1
 810652e:	602b      	str	r3, [r5, #0]
 8106530:	f7fb fb0a 	bl	8101b48 <_sbrk>
 8106534:	1c43      	adds	r3, r0, #1
 8106536:	d102      	bne.n	810653e <_sbrk_r+0x1a>
 8106538:	682b      	ldr	r3, [r5, #0]
 810653a:	b103      	cbz	r3, 810653e <_sbrk_r+0x1a>
 810653c:	6023      	str	r3, [r4, #0]
 810653e:	bd38      	pop	{r3, r4, r5, pc}
 8106540:	10000348 	.word	0x10000348

08106544 <__assert_func>:
 8106544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8106546:	4614      	mov	r4, r2
 8106548:	461a      	mov	r2, r3
 810654a:	4b09      	ldr	r3, [pc, #36]	; (8106570 <__assert_func+0x2c>)
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	4605      	mov	r5, r0
 8106550:	68d8      	ldr	r0, [r3, #12]
 8106552:	b14c      	cbz	r4, 8106568 <__assert_func+0x24>
 8106554:	4b07      	ldr	r3, [pc, #28]	; (8106574 <__assert_func+0x30>)
 8106556:	9100      	str	r1, [sp, #0]
 8106558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810655c:	4906      	ldr	r1, [pc, #24]	; (8106578 <__assert_func+0x34>)
 810655e:	462b      	mov	r3, r5
 8106560:	f000 f80e 	bl	8106580 <fiprintf>
 8106564:	f000 fa64 	bl	8106a30 <abort>
 8106568:	4b04      	ldr	r3, [pc, #16]	; (810657c <__assert_func+0x38>)
 810656a:	461c      	mov	r4, r3
 810656c:	e7f3      	b.n	8106556 <__assert_func+0x12>
 810656e:	bf00      	nop
 8106570:	10000018 	.word	0x10000018
 8106574:	081072b4 	.word	0x081072b4
 8106578:	081072c1 	.word	0x081072c1
 810657c:	081072ef 	.word	0x081072ef

08106580 <fiprintf>:
 8106580:	b40e      	push	{r1, r2, r3}
 8106582:	b503      	push	{r0, r1, lr}
 8106584:	4601      	mov	r1, r0
 8106586:	ab03      	add	r3, sp, #12
 8106588:	4805      	ldr	r0, [pc, #20]	; (81065a0 <fiprintf+0x20>)
 810658a:	f853 2b04 	ldr.w	r2, [r3], #4
 810658e:	6800      	ldr	r0, [r0, #0]
 8106590:	9301      	str	r3, [sp, #4]
 8106592:	f000 f84f 	bl	8106634 <_vfiprintf_r>
 8106596:	b002      	add	sp, #8
 8106598:	f85d eb04 	ldr.w	lr, [sp], #4
 810659c:	b003      	add	sp, #12
 810659e:	4770      	bx	lr
 81065a0:	10000018 	.word	0x10000018

081065a4 <__ascii_mbtowc>:
 81065a4:	b082      	sub	sp, #8
 81065a6:	b901      	cbnz	r1, 81065aa <__ascii_mbtowc+0x6>
 81065a8:	a901      	add	r1, sp, #4
 81065aa:	b142      	cbz	r2, 81065be <__ascii_mbtowc+0x1a>
 81065ac:	b14b      	cbz	r3, 81065c2 <__ascii_mbtowc+0x1e>
 81065ae:	7813      	ldrb	r3, [r2, #0]
 81065b0:	600b      	str	r3, [r1, #0]
 81065b2:	7812      	ldrb	r2, [r2, #0]
 81065b4:	1e10      	subs	r0, r2, #0
 81065b6:	bf18      	it	ne
 81065b8:	2001      	movne	r0, #1
 81065ba:	b002      	add	sp, #8
 81065bc:	4770      	bx	lr
 81065be:	4610      	mov	r0, r2
 81065c0:	e7fb      	b.n	81065ba <__ascii_mbtowc+0x16>
 81065c2:	f06f 0001 	mvn.w	r0, #1
 81065c6:	e7f8      	b.n	81065ba <__ascii_mbtowc+0x16>

081065c8 <__malloc_lock>:
 81065c8:	4801      	ldr	r0, [pc, #4]	; (81065d0 <__malloc_lock+0x8>)
 81065ca:	f000 bbf1 	b.w	8106db0 <__retarget_lock_acquire_recursive>
 81065ce:	bf00      	nop
 81065d0:	10000350 	.word	0x10000350

081065d4 <__malloc_unlock>:
 81065d4:	4801      	ldr	r0, [pc, #4]	; (81065dc <__malloc_unlock+0x8>)
 81065d6:	f000 bbec 	b.w	8106db2 <__retarget_lock_release_recursive>
 81065da:	bf00      	nop
 81065dc:	10000350 	.word	0x10000350

081065e0 <__sfputc_r>:
 81065e0:	6893      	ldr	r3, [r2, #8]
 81065e2:	3b01      	subs	r3, #1
 81065e4:	2b00      	cmp	r3, #0
 81065e6:	b410      	push	{r4}
 81065e8:	6093      	str	r3, [r2, #8]
 81065ea:	da08      	bge.n	81065fe <__sfputc_r+0x1e>
 81065ec:	6994      	ldr	r4, [r2, #24]
 81065ee:	42a3      	cmp	r3, r4
 81065f0:	db01      	blt.n	81065f6 <__sfputc_r+0x16>
 81065f2:	290a      	cmp	r1, #10
 81065f4:	d103      	bne.n	81065fe <__sfputc_r+0x1e>
 81065f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 81065fa:	f000 b94b 	b.w	8106894 <__swbuf_r>
 81065fe:	6813      	ldr	r3, [r2, #0]
 8106600:	1c58      	adds	r0, r3, #1
 8106602:	6010      	str	r0, [r2, #0]
 8106604:	7019      	strb	r1, [r3, #0]
 8106606:	4608      	mov	r0, r1
 8106608:	f85d 4b04 	ldr.w	r4, [sp], #4
 810660c:	4770      	bx	lr

0810660e <__sfputs_r>:
 810660e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106610:	4606      	mov	r6, r0
 8106612:	460f      	mov	r7, r1
 8106614:	4614      	mov	r4, r2
 8106616:	18d5      	adds	r5, r2, r3
 8106618:	42ac      	cmp	r4, r5
 810661a:	d101      	bne.n	8106620 <__sfputs_r+0x12>
 810661c:	2000      	movs	r0, #0
 810661e:	e007      	b.n	8106630 <__sfputs_r+0x22>
 8106620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106624:	463a      	mov	r2, r7
 8106626:	4630      	mov	r0, r6
 8106628:	f7ff ffda 	bl	81065e0 <__sfputc_r>
 810662c:	1c43      	adds	r3, r0, #1
 810662e:	d1f3      	bne.n	8106618 <__sfputs_r+0xa>
 8106630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08106634 <_vfiprintf_r>:
 8106634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106638:	460d      	mov	r5, r1
 810663a:	b09d      	sub	sp, #116	; 0x74
 810663c:	4614      	mov	r4, r2
 810663e:	4698      	mov	r8, r3
 8106640:	4606      	mov	r6, r0
 8106642:	b118      	cbz	r0, 810664c <_vfiprintf_r+0x18>
 8106644:	6983      	ldr	r3, [r0, #24]
 8106646:	b90b      	cbnz	r3, 810664c <_vfiprintf_r+0x18>
 8106648:	f000 fb14 	bl	8106c74 <__sinit>
 810664c:	4b89      	ldr	r3, [pc, #548]	; (8106874 <_vfiprintf_r+0x240>)
 810664e:	429d      	cmp	r5, r3
 8106650:	d11b      	bne.n	810668a <_vfiprintf_r+0x56>
 8106652:	6875      	ldr	r5, [r6, #4]
 8106654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106656:	07d9      	lsls	r1, r3, #31
 8106658:	d405      	bmi.n	8106666 <_vfiprintf_r+0x32>
 810665a:	89ab      	ldrh	r3, [r5, #12]
 810665c:	059a      	lsls	r2, r3, #22
 810665e:	d402      	bmi.n	8106666 <_vfiprintf_r+0x32>
 8106660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106662:	f000 fba5 	bl	8106db0 <__retarget_lock_acquire_recursive>
 8106666:	89ab      	ldrh	r3, [r5, #12]
 8106668:	071b      	lsls	r3, r3, #28
 810666a:	d501      	bpl.n	8106670 <_vfiprintf_r+0x3c>
 810666c:	692b      	ldr	r3, [r5, #16]
 810666e:	b9eb      	cbnz	r3, 81066ac <_vfiprintf_r+0x78>
 8106670:	4629      	mov	r1, r5
 8106672:	4630      	mov	r0, r6
 8106674:	f000 f96e 	bl	8106954 <__swsetup_r>
 8106678:	b1c0      	cbz	r0, 81066ac <_vfiprintf_r+0x78>
 810667a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810667c:	07dc      	lsls	r4, r3, #31
 810667e:	d50e      	bpl.n	810669e <_vfiprintf_r+0x6a>
 8106680:	f04f 30ff 	mov.w	r0, #4294967295
 8106684:	b01d      	add	sp, #116	; 0x74
 8106686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810668a:	4b7b      	ldr	r3, [pc, #492]	; (8106878 <_vfiprintf_r+0x244>)
 810668c:	429d      	cmp	r5, r3
 810668e:	d101      	bne.n	8106694 <_vfiprintf_r+0x60>
 8106690:	68b5      	ldr	r5, [r6, #8]
 8106692:	e7df      	b.n	8106654 <_vfiprintf_r+0x20>
 8106694:	4b79      	ldr	r3, [pc, #484]	; (810687c <_vfiprintf_r+0x248>)
 8106696:	429d      	cmp	r5, r3
 8106698:	bf08      	it	eq
 810669a:	68f5      	ldreq	r5, [r6, #12]
 810669c:	e7da      	b.n	8106654 <_vfiprintf_r+0x20>
 810669e:	89ab      	ldrh	r3, [r5, #12]
 81066a0:	0598      	lsls	r0, r3, #22
 81066a2:	d4ed      	bmi.n	8106680 <_vfiprintf_r+0x4c>
 81066a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81066a6:	f000 fb84 	bl	8106db2 <__retarget_lock_release_recursive>
 81066aa:	e7e9      	b.n	8106680 <_vfiprintf_r+0x4c>
 81066ac:	2300      	movs	r3, #0
 81066ae:	9309      	str	r3, [sp, #36]	; 0x24
 81066b0:	2320      	movs	r3, #32
 81066b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81066b6:	f8cd 800c 	str.w	r8, [sp, #12]
 81066ba:	2330      	movs	r3, #48	; 0x30
 81066bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8106880 <_vfiprintf_r+0x24c>
 81066c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81066c4:	f04f 0901 	mov.w	r9, #1
 81066c8:	4623      	mov	r3, r4
 81066ca:	469a      	mov	sl, r3
 81066cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 81066d0:	b10a      	cbz	r2, 81066d6 <_vfiprintf_r+0xa2>
 81066d2:	2a25      	cmp	r2, #37	; 0x25
 81066d4:	d1f9      	bne.n	81066ca <_vfiprintf_r+0x96>
 81066d6:	ebba 0b04 	subs.w	fp, sl, r4
 81066da:	d00b      	beq.n	81066f4 <_vfiprintf_r+0xc0>
 81066dc:	465b      	mov	r3, fp
 81066de:	4622      	mov	r2, r4
 81066e0:	4629      	mov	r1, r5
 81066e2:	4630      	mov	r0, r6
 81066e4:	f7ff ff93 	bl	810660e <__sfputs_r>
 81066e8:	3001      	adds	r0, #1
 81066ea:	f000 80aa 	beq.w	8106842 <_vfiprintf_r+0x20e>
 81066ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81066f0:	445a      	add	r2, fp
 81066f2:	9209      	str	r2, [sp, #36]	; 0x24
 81066f4:	f89a 3000 	ldrb.w	r3, [sl]
 81066f8:	2b00      	cmp	r3, #0
 81066fa:	f000 80a2 	beq.w	8106842 <_vfiprintf_r+0x20e>
 81066fe:	2300      	movs	r3, #0
 8106700:	f04f 32ff 	mov.w	r2, #4294967295
 8106704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106708:	f10a 0a01 	add.w	sl, sl, #1
 810670c:	9304      	str	r3, [sp, #16]
 810670e:	9307      	str	r3, [sp, #28]
 8106710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8106714:	931a      	str	r3, [sp, #104]	; 0x68
 8106716:	4654      	mov	r4, sl
 8106718:	2205      	movs	r2, #5
 810671a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810671e:	4858      	ldr	r0, [pc, #352]	; (8106880 <_vfiprintf_r+0x24c>)
 8106720:	f7f9 fde6 	bl	81002f0 <memchr>
 8106724:	9a04      	ldr	r2, [sp, #16]
 8106726:	b9d8      	cbnz	r0, 8106760 <_vfiprintf_r+0x12c>
 8106728:	06d1      	lsls	r1, r2, #27
 810672a:	bf44      	itt	mi
 810672c:	2320      	movmi	r3, #32
 810672e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106732:	0713      	lsls	r3, r2, #28
 8106734:	bf44      	itt	mi
 8106736:	232b      	movmi	r3, #43	; 0x2b
 8106738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810673c:	f89a 3000 	ldrb.w	r3, [sl]
 8106740:	2b2a      	cmp	r3, #42	; 0x2a
 8106742:	d015      	beq.n	8106770 <_vfiprintf_r+0x13c>
 8106744:	9a07      	ldr	r2, [sp, #28]
 8106746:	4654      	mov	r4, sl
 8106748:	2000      	movs	r0, #0
 810674a:	f04f 0c0a 	mov.w	ip, #10
 810674e:	4621      	mov	r1, r4
 8106750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106754:	3b30      	subs	r3, #48	; 0x30
 8106756:	2b09      	cmp	r3, #9
 8106758:	d94e      	bls.n	81067f8 <_vfiprintf_r+0x1c4>
 810675a:	b1b0      	cbz	r0, 810678a <_vfiprintf_r+0x156>
 810675c:	9207      	str	r2, [sp, #28]
 810675e:	e014      	b.n	810678a <_vfiprintf_r+0x156>
 8106760:	eba0 0308 	sub.w	r3, r0, r8
 8106764:	fa09 f303 	lsl.w	r3, r9, r3
 8106768:	4313      	orrs	r3, r2
 810676a:	9304      	str	r3, [sp, #16]
 810676c:	46a2      	mov	sl, r4
 810676e:	e7d2      	b.n	8106716 <_vfiprintf_r+0xe2>
 8106770:	9b03      	ldr	r3, [sp, #12]
 8106772:	1d19      	adds	r1, r3, #4
 8106774:	681b      	ldr	r3, [r3, #0]
 8106776:	9103      	str	r1, [sp, #12]
 8106778:	2b00      	cmp	r3, #0
 810677a:	bfbb      	ittet	lt
 810677c:	425b      	neglt	r3, r3
 810677e:	f042 0202 	orrlt.w	r2, r2, #2
 8106782:	9307      	strge	r3, [sp, #28]
 8106784:	9307      	strlt	r3, [sp, #28]
 8106786:	bfb8      	it	lt
 8106788:	9204      	strlt	r2, [sp, #16]
 810678a:	7823      	ldrb	r3, [r4, #0]
 810678c:	2b2e      	cmp	r3, #46	; 0x2e
 810678e:	d10c      	bne.n	81067aa <_vfiprintf_r+0x176>
 8106790:	7863      	ldrb	r3, [r4, #1]
 8106792:	2b2a      	cmp	r3, #42	; 0x2a
 8106794:	d135      	bne.n	8106802 <_vfiprintf_r+0x1ce>
 8106796:	9b03      	ldr	r3, [sp, #12]
 8106798:	1d1a      	adds	r2, r3, #4
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	9203      	str	r2, [sp, #12]
 810679e:	2b00      	cmp	r3, #0
 81067a0:	bfb8      	it	lt
 81067a2:	f04f 33ff 	movlt.w	r3, #4294967295
 81067a6:	3402      	adds	r4, #2
 81067a8:	9305      	str	r3, [sp, #20]
 81067aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8106890 <_vfiprintf_r+0x25c>
 81067ae:	7821      	ldrb	r1, [r4, #0]
 81067b0:	2203      	movs	r2, #3
 81067b2:	4650      	mov	r0, sl
 81067b4:	f7f9 fd9c 	bl	81002f0 <memchr>
 81067b8:	b140      	cbz	r0, 81067cc <_vfiprintf_r+0x198>
 81067ba:	2340      	movs	r3, #64	; 0x40
 81067bc:	eba0 000a 	sub.w	r0, r0, sl
 81067c0:	fa03 f000 	lsl.w	r0, r3, r0
 81067c4:	9b04      	ldr	r3, [sp, #16]
 81067c6:	4303      	orrs	r3, r0
 81067c8:	3401      	adds	r4, #1
 81067ca:	9304      	str	r3, [sp, #16]
 81067cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 81067d0:	482c      	ldr	r0, [pc, #176]	; (8106884 <_vfiprintf_r+0x250>)
 81067d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81067d6:	2206      	movs	r2, #6
 81067d8:	f7f9 fd8a 	bl	81002f0 <memchr>
 81067dc:	2800      	cmp	r0, #0
 81067de:	d03f      	beq.n	8106860 <_vfiprintf_r+0x22c>
 81067e0:	4b29      	ldr	r3, [pc, #164]	; (8106888 <_vfiprintf_r+0x254>)
 81067e2:	bb1b      	cbnz	r3, 810682c <_vfiprintf_r+0x1f8>
 81067e4:	9b03      	ldr	r3, [sp, #12]
 81067e6:	3307      	adds	r3, #7
 81067e8:	f023 0307 	bic.w	r3, r3, #7
 81067ec:	3308      	adds	r3, #8
 81067ee:	9303      	str	r3, [sp, #12]
 81067f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81067f2:	443b      	add	r3, r7
 81067f4:	9309      	str	r3, [sp, #36]	; 0x24
 81067f6:	e767      	b.n	81066c8 <_vfiprintf_r+0x94>
 81067f8:	fb0c 3202 	mla	r2, ip, r2, r3
 81067fc:	460c      	mov	r4, r1
 81067fe:	2001      	movs	r0, #1
 8106800:	e7a5      	b.n	810674e <_vfiprintf_r+0x11a>
 8106802:	2300      	movs	r3, #0
 8106804:	3401      	adds	r4, #1
 8106806:	9305      	str	r3, [sp, #20]
 8106808:	4619      	mov	r1, r3
 810680a:	f04f 0c0a 	mov.w	ip, #10
 810680e:	4620      	mov	r0, r4
 8106810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106814:	3a30      	subs	r2, #48	; 0x30
 8106816:	2a09      	cmp	r2, #9
 8106818:	d903      	bls.n	8106822 <_vfiprintf_r+0x1ee>
 810681a:	2b00      	cmp	r3, #0
 810681c:	d0c5      	beq.n	81067aa <_vfiprintf_r+0x176>
 810681e:	9105      	str	r1, [sp, #20]
 8106820:	e7c3      	b.n	81067aa <_vfiprintf_r+0x176>
 8106822:	fb0c 2101 	mla	r1, ip, r1, r2
 8106826:	4604      	mov	r4, r0
 8106828:	2301      	movs	r3, #1
 810682a:	e7f0      	b.n	810680e <_vfiprintf_r+0x1da>
 810682c:	ab03      	add	r3, sp, #12
 810682e:	9300      	str	r3, [sp, #0]
 8106830:	462a      	mov	r2, r5
 8106832:	4b16      	ldr	r3, [pc, #88]	; (810688c <_vfiprintf_r+0x258>)
 8106834:	a904      	add	r1, sp, #16
 8106836:	4630      	mov	r0, r6
 8106838:	f7fd ffde 	bl	81047f8 <_printf_float>
 810683c:	4607      	mov	r7, r0
 810683e:	1c78      	adds	r0, r7, #1
 8106840:	d1d6      	bne.n	81067f0 <_vfiprintf_r+0x1bc>
 8106842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106844:	07d9      	lsls	r1, r3, #31
 8106846:	d405      	bmi.n	8106854 <_vfiprintf_r+0x220>
 8106848:	89ab      	ldrh	r3, [r5, #12]
 810684a:	059a      	lsls	r2, r3, #22
 810684c:	d402      	bmi.n	8106854 <_vfiprintf_r+0x220>
 810684e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106850:	f000 faaf 	bl	8106db2 <__retarget_lock_release_recursive>
 8106854:	89ab      	ldrh	r3, [r5, #12]
 8106856:	065b      	lsls	r3, r3, #25
 8106858:	f53f af12 	bmi.w	8106680 <_vfiprintf_r+0x4c>
 810685c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810685e:	e711      	b.n	8106684 <_vfiprintf_r+0x50>
 8106860:	ab03      	add	r3, sp, #12
 8106862:	9300      	str	r3, [sp, #0]
 8106864:	462a      	mov	r2, r5
 8106866:	4b09      	ldr	r3, [pc, #36]	; (810688c <_vfiprintf_r+0x258>)
 8106868:	a904      	add	r1, sp, #16
 810686a:	4630      	mov	r0, r6
 810686c:	f7fe fa68 	bl	8104d40 <_printf_i>
 8106870:	e7e4      	b.n	810683c <_vfiprintf_r+0x208>
 8106872:	bf00      	nop
 8106874:	0810742c 	.word	0x0810742c
 8106878:	0810744c 	.word	0x0810744c
 810687c:	0810740c 	.word	0x0810740c
 8106880:	081072fa 	.word	0x081072fa
 8106884:	08107304 	.word	0x08107304
 8106888:	081047f9 	.word	0x081047f9
 810688c:	0810660f 	.word	0x0810660f
 8106890:	08107300 	.word	0x08107300

08106894 <__swbuf_r>:
 8106894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106896:	460e      	mov	r6, r1
 8106898:	4614      	mov	r4, r2
 810689a:	4605      	mov	r5, r0
 810689c:	b118      	cbz	r0, 81068a6 <__swbuf_r+0x12>
 810689e:	6983      	ldr	r3, [r0, #24]
 81068a0:	b90b      	cbnz	r3, 81068a6 <__swbuf_r+0x12>
 81068a2:	f000 f9e7 	bl	8106c74 <__sinit>
 81068a6:	4b21      	ldr	r3, [pc, #132]	; (810692c <__swbuf_r+0x98>)
 81068a8:	429c      	cmp	r4, r3
 81068aa:	d12b      	bne.n	8106904 <__swbuf_r+0x70>
 81068ac:	686c      	ldr	r4, [r5, #4]
 81068ae:	69a3      	ldr	r3, [r4, #24]
 81068b0:	60a3      	str	r3, [r4, #8]
 81068b2:	89a3      	ldrh	r3, [r4, #12]
 81068b4:	071a      	lsls	r2, r3, #28
 81068b6:	d52f      	bpl.n	8106918 <__swbuf_r+0x84>
 81068b8:	6923      	ldr	r3, [r4, #16]
 81068ba:	b36b      	cbz	r3, 8106918 <__swbuf_r+0x84>
 81068bc:	6923      	ldr	r3, [r4, #16]
 81068be:	6820      	ldr	r0, [r4, #0]
 81068c0:	1ac0      	subs	r0, r0, r3
 81068c2:	6963      	ldr	r3, [r4, #20]
 81068c4:	b2f6      	uxtb	r6, r6
 81068c6:	4283      	cmp	r3, r0
 81068c8:	4637      	mov	r7, r6
 81068ca:	dc04      	bgt.n	81068d6 <__swbuf_r+0x42>
 81068cc:	4621      	mov	r1, r4
 81068ce:	4628      	mov	r0, r5
 81068d0:	f000 f93c 	bl	8106b4c <_fflush_r>
 81068d4:	bb30      	cbnz	r0, 8106924 <__swbuf_r+0x90>
 81068d6:	68a3      	ldr	r3, [r4, #8]
 81068d8:	3b01      	subs	r3, #1
 81068da:	60a3      	str	r3, [r4, #8]
 81068dc:	6823      	ldr	r3, [r4, #0]
 81068de:	1c5a      	adds	r2, r3, #1
 81068e0:	6022      	str	r2, [r4, #0]
 81068e2:	701e      	strb	r6, [r3, #0]
 81068e4:	6963      	ldr	r3, [r4, #20]
 81068e6:	3001      	adds	r0, #1
 81068e8:	4283      	cmp	r3, r0
 81068ea:	d004      	beq.n	81068f6 <__swbuf_r+0x62>
 81068ec:	89a3      	ldrh	r3, [r4, #12]
 81068ee:	07db      	lsls	r3, r3, #31
 81068f0:	d506      	bpl.n	8106900 <__swbuf_r+0x6c>
 81068f2:	2e0a      	cmp	r6, #10
 81068f4:	d104      	bne.n	8106900 <__swbuf_r+0x6c>
 81068f6:	4621      	mov	r1, r4
 81068f8:	4628      	mov	r0, r5
 81068fa:	f000 f927 	bl	8106b4c <_fflush_r>
 81068fe:	b988      	cbnz	r0, 8106924 <__swbuf_r+0x90>
 8106900:	4638      	mov	r0, r7
 8106902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106904:	4b0a      	ldr	r3, [pc, #40]	; (8106930 <__swbuf_r+0x9c>)
 8106906:	429c      	cmp	r4, r3
 8106908:	d101      	bne.n	810690e <__swbuf_r+0x7a>
 810690a:	68ac      	ldr	r4, [r5, #8]
 810690c:	e7cf      	b.n	81068ae <__swbuf_r+0x1a>
 810690e:	4b09      	ldr	r3, [pc, #36]	; (8106934 <__swbuf_r+0xa0>)
 8106910:	429c      	cmp	r4, r3
 8106912:	bf08      	it	eq
 8106914:	68ec      	ldreq	r4, [r5, #12]
 8106916:	e7ca      	b.n	81068ae <__swbuf_r+0x1a>
 8106918:	4621      	mov	r1, r4
 810691a:	4628      	mov	r0, r5
 810691c:	f000 f81a 	bl	8106954 <__swsetup_r>
 8106920:	2800      	cmp	r0, #0
 8106922:	d0cb      	beq.n	81068bc <__swbuf_r+0x28>
 8106924:	f04f 37ff 	mov.w	r7, #4294967295
 8106928:	e7ea      	b.n	8106900 <__swbuf_r+0x6c>
 810692a:	bf00      	nop
 810692c:	0810742c 	.word	0x0810742c
 8106930:	0810744c 	.word	0x0810744c
 8106934:	0810740c 	.word	0x0810740c

08106938 <__ascii_wctomb>:
 8106938:	b149      	cbz	r1, 810694e <__ascii_wctomb+0x16>
 810693a:	2aff      	cmp	r2, #255	; 0xff
 810693c:	bf85      	ittet	hi
 810693e:	238a      	movhi	r3, #138	; 0x8a
 8106940:	6003      	strhi	r3, [r0, #0]
 8106942:	700a      	strbls	r2, [r1, #0]
 8106944:	f04f 30ff 	movhi.w	r0, #4294967295
 8106948:	bf98      	it	ls
 810694a:	2001      	movls	r0, #1
 810694c:	4770      	bx	lr
 810694e:	4608      	mov	r0, r1
 8106950:	4770      	bx	lr
	...

08106954 <__swsetup_r>:
 8106954:	4b32      	ldr	r3, [pc, #200]	; (8106a20 <__swsetup_r+0xcc>)
 8106956:	b570      	push	{r4, r5, r6, lr}
 8106958:	681d      	ldr	r5, [r3, #0]
 810695a:	4606      	mov	r6, r0
 810695c:	460c      	mov	r4, r1
 810695e:	b125      	cbz	r5, 810696a <__swsetup_r+0x16>
 8106960:	69ab      	ldr	r3, [r5, #24]
 8106962:	b913      	cbnz	r3, 810696a <__swsetup_r+0x16>
 8106964:	4628      	mov	r0, r5
 8106966:	f000 f985 	bl	8106c74 <__sinit>
 810696a:	4b2e      	ldr	r3, [pc, #184]	; (8106a24 <__swsetup_r+0xd0>)
 810696c:	429c      	cmp	r4, r3
 810696e:	d10f      	bne.n	8106990 <__swsetup_r+0x3c>
 8106970:	686c      	ldr	r4, [r5, #4]
 8106972:	89a3      	ldrh	r3, [r4, #12]
 8106974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8106978:	0719      	lsls	r1, r3, #28
 810697a:	d42c      	bmi.n	81069d6 <__swsetup_r+0x82>
 810697c:	06dd      	lsls	r5, r3, #27
 810697e:	d411      	bmi.n	81069a4 <__swsetup_r+0x50>
 8106980:	2309      	movs	r3, #9
 8106982:	6033      	str	r3, [r6, #0]
 8106984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8106988:	81a3      	strh	r3, [r4, #12]
 810698a:	f04f 30ff 	mov.w	r0, #4294967295
 810698e:	e03e      	b.n	8106a0e <__swsetup_r+0xba>
 8106990:	4b25      	ldr	r3, [pc, #148]	; (8106a28 <__swsetup_r+0xd4>)
 8106992:	429c      	cmp	r4, r3
 8106994:	d101      	bne.n	810699a <__swsetup_r+0x46>
 8106996:	68ac      	ldr	r4, [r5, #8]
 8106998:	e7eb      	b.n	8106972 <__swsetup_r+0x1e>
 810699a:	4b24      	ldr	r3, [pc, #144]	; (8106a2c <__swsetup_r+0xd8>)
 810699c:	429c      	cmp	r4, r3
 810699e:	bf08      	it	eq
 81069a0:	68ec      	ldreq	r4, [r5, #12]
 81069a2:	e7e6      	b.n	8106972 <__swsetup_r+0x1e>
 81069a4:	0758      	lsls	r0, r3, #29
 81069a6:	d512      	bpl.n	81069ce <__swsetup_r+0x7a>
 81069a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81069aa:	b141      	cbz	r1, 81069be <__swsetup_r+0x6a>
 81069ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81069b0:	4299      	cmp	r1, r3
 81069b2:	d002      	beq.n	81069ba <__swsetup_r+0x66>
 81069b4:	4630      	mov	r0, r6
 81069b6:	f7ff fd0b 	bl	81063d0 <_free_r>
 81069ba:	2300      	movs	r3, #0
 81069bc:	6363      	str	r3, [r4, #52]	; 0x34
 81069be:	89a3      	ldrh	r3, [r4, #12]
 81069c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81069c4:	81a3      	strh	r3, [r4, #12]
 81069c6:	2300      	movs	r3, #0
 81069c8:	6063      	str	r3, [r4, #4]
 81069ca:	6923      	ldr	r3, [r4, #16]
 81069cc:	6023      	str	r3, [r4, #0]
 81069ce:	89a3      	ldrh	r3, [r4, #12]
 81069d0:	f043 0308 	orr.w	r3, r3, #8
 81069d4:	81a3      	strh	r3, [r4, #12]
 81069d6:	6923      	ldr	r3, [r4, #16]
 81069d8:	b94b      	cbnz	r3, 81069ee <__swsetup_r+0x9a>
 81069da:	89a3      	ldrh	r3, [r4, #12]
 81069dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81069e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81069e4:	d003      	beq.n	81069ee <__swsetup_r+0x9a>
 81069e6:	4621      	mov	r1, r4
 81069e8:	4630      	mov	r0, r6
 81069ea:	f000 fa07 	bl	8106dfc <__smakebuf_r>
 81069ee:	89a0      	ldrh	r0, [r4, #12]
 81069f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81069f4:	f010 0301 	ands.w	r3, r0, #1
 81069f8:	d00a      	beq.n	8106a10 <__swsetup_r+0xbc>
 81069fa:	2300      	movs	r3, #0
 81069fc:	60a3      	str	r3, [r4, #8]
 81069fe:	6963      	ldr	r3, [r4, #20]
 8106a00:	425b      	negs	r3, r3
 8106a02:	61a3      	str	r3, [r4, #24]
 8106a04:	6923      	ldr	r3, [r4, #16]
 8106a06:	b943      	cbnz	r3, 8106a1a <__swsetup_r+0xc6>
 8106a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8106a0c:	d1ba      	bne.n	8106984 <__swsetup_r+0x30>
 8106a0e:	bd70      	pop	{r4, r5, r6, pc}
 8106a10:	0781      	lsls	r1, r0, #30
 8106a12:	bf58      	it	pl
 8106a14:	6963      	ldrpl	r3, [r4, #20]
 8106a16:	60a3      	str	r3, [r4, #8]
 8106a18:	e7f4      	b.n	8106a04 <__swsetup_r+0xb0>
 8106a1a:	2000      	movs	r0, #0
 8106a1c:	e7f7      	b.n	8106a0e <__swsetup_r+0xba>
 8106a1e:	bf00      	nop
 8106a20:	10000018 	.word	0x10000018
 8106a24:	0810742c 	.word	0x0810742c
 8106a28:	0810744c 	.word	0x0810744c
 8106a2c:	0810740c 	.word	0x0810740c

08106a30 <abort>:
 8106a30:	b508      	push	{r3, lr}
 8106a32:	2006      	movs	r0, #6
 8106a34:	f000 fa4a 	bl	8106ecc <raise>
 8106a38:	2001      	movs	r0, #1
 8106a3a:	f7fb f80d 	bl	8101a58 <_exit>
	...

08106a40 <__sflush_r>:
 8106a40:	898a      	ldrh	r2, [r1, #12]
 8106a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106a46:	4605      	mov	r5, r0
 8106a48:	0710      	lsls	r0, r2, #28
 8106a4a:	460c      	mov	r4, r1
 8106a4c:	d458      	bmi.n	8106b00 <__sflush_r+0xc0>
 8106a4e:	684b      	ldr	r3, [r1, #4]
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	dc05      	bgt.n	8106a60 <__sflush_r+0x20>
 8106a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8106a56:	2b00      	cmp	r3, #0
 8106a58:	dc02      	bgt.n	8106a60 <__sflush_r+0x20>
 8106a5a:	2000      	movs	r0, #0
 8106a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8106a62:	2e00      	cmp	r6, #0
 8106a64:	d0f9      	beq.n	8106a5a <__sflush_r+0x1a>
 8106a66:	2300      	movs	r3, #0
 8106a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8106a6c:	682f      	ldr	r7, [r5, #0]
 8106a6e:	602b      	str	r3, [r5, #0]
 8106a70:	d032      	beq.n	8106ad8 <__sflush_r+0x98>
 8106a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8106a74:	89a3      	ldrh	r3, [r4, #12]
 8106a76:	075a      	lsls	r2, r3, #29
 8106a78:	d505      	bpl.n	8106a86 <__sflush_r+0x46>
 8106a7a:	6863      	ldr	r3, [r4, #4]
 8106a7c:	1ac0      	subs	r0, r0, r3
 8106a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8106a80:	b10b      	cbz	r3, 8106a86 <__sflush_r+0x46>
 8106a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8106a84:	1ac0      	subs	r0, r0, r3
 8106a86:	2300      	movs	r3, #0
 8106a88:	4602      	mov	r2, r0
 8106a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8106a8c:	6a21      	ldr	r1, [r4, #32]
 8106a8e:	4628      	mov	r0, r5
 8106a90:	47b0      	blx	r6
 8106a92:	1c43      	adds	r3, r0, #1
 8106a94:	89a3      	ldrh	r3, [r4, #12]
 8106a96:	d106      	bne.n	8106aa6 <__sflush_r+0x66>
 8106a98:	6829      	ldr	r1, [r5, #0]
 8106a9a:	291d      	cmp	r1, #29
 8106a9c:	d82c      	bhi.n	8106af8 <__sflush_r+0xb8>
 8106a9e:	4a2a      	ldr	r2, [pc, #168]	; (8106b48 <__sflush_r+0x108>)
 8106aa0:	40ca      	lsrs	r2, r1
 8106aa2:	07d6      	lsls	r6, r2, #31
 8106aa4:	d528      	bpl.n	8106af8 <__sflush_r+0xb8>
 8106aa6:	2200      	movs	r2, #0
 8106aa8:	6062      	str	r2, [r4, #4]
 8106aaa:	04d9      	lsls	r1, r3, #19
 8106aac:	6922      	ldr	r2, [r4, #16]
 8106aae:	6022      	str	r2, [r4, #0]
 8106ab0:	d504      	bpl.n	8106abc <__sflush_r+0x7c>
 8106ab2:	1c42      	adds	r2, r0, #1
 8106ab4:	d101      	bne.n	8106aba <__sflush_r+0x7a>
 8106ab6:	682b      	ldr	r3, [r5, #0]
 8106ab8:	b903      	cbnz	r3, 8106abc <__sflush_r+0x7c>
 8106aba:	6560      	str	r0, [r4, #84]	; 0x54
 8106abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8106abe:	602f      	str	r7, [r5, #0]
 8106ac0:	2900      	cmp	r1, #0
 8106ac2:	d0ca      	beq.n	8106a5a <__sflush_r+0x1a>
 8106ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8106ac8:	4299      	cmp	r1, r3
 8106aca:	d002      	beq.n	8106ad2 <__sflush_r+0x92>
 8106acc:	4628      	mov	r0, r5
 8106ace:	f7ff fc7f 	bl	81063d0 <_free_r>
 8106ad2:	2000      	movs	r0, #0
 8106ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8106ad6:	e7c1      	b.n	8106a5c <__sflush_r+0x1c>
 8106ad8:	6a21      	ldr	r1, [r4, #32]
 8106ada:	2301      	movs	r3, #1
 8106adc:	4628      	mov	r0, r5
 8106ade:	47b0      	blx	r6
 8106ae0:	1c41      	adds	r1, r0, #1
 8106ae2:	d1c7      	bne.n	8106a74 <__sflush_r+0x34>
 8106ae4:	682b      	ldr	r3, [r5, #0]
 8106ae6:	2b00      	cmp	r3, #0
 8106ae8:	d0c4      	beq.n	8106a74 <__sflush_r+0x34>
 8106aea:	2b1d      	cmp	r3, #29
 8106aec:	d001      	beq.n	8106af2 <__sflush_r+0xb2>
 8106aee:	2b16      	cmp	r3, #22
 8106af0:	d101      	bne.n	8106af6 <__sflush_r+0xb6>
 8106af2:	602f      	str	r7, [r5, #0]
 8106af4:	e7b1      	b.n	8106a5a <__sflush_r+0x1a>
 8106af6:	89a3      	ldrh	r3, [r4, #12]
 8106af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106afc:	81a3      	strh	r3, [r4, #12]
 8106afe:	e7ad      	b.n	8106a5c <__sflush_r+0x1c>
 8106b00:	690f      	ldr	r7, [r1, #16]
 8106b02:	2f00      	cmp	r7, #0
 8106b04:	d0a9      	beq.n	8106a5a <__sflush_r+0x1a>
 8106b06:	0793      	lsls	r3, r2, #30
 8106b08:	680e      	ldr	r6, [r1, #0]
 8106b0a:	bf08      	it	eq
 8106b0c:	694b      	ldreq	r3, [r1, #20]
 8106b0e:	600f      	str	r7, [r1, #0]
 8106b10:	bf18      	it	ne
 8106b12:	2300      	movne	r3, #0
 8106b14:	eba6 0807 	sub.w	r8, r6, r7
 8106b18:	608b      	str	r3, [r1, #8]
 8106b1a:	f1b8 0f00 	cmp.w	r8, #0
 8106b1e:	dd9c      	ble.n	8106a5a <__sflush_r+0x1a>
 8106b20:	6a21      	ldr	r1, [r4, #32]
 8106b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8106b24:	4643      	mov	r3, r8
 8106b26:	463a      	mov	r2, r7
 8106b28:	4628      	mov	r0, r5
 8106b2a:	47b0      	blx	r6
 8106b2c:	2800      	cmp	r0, #0
 8106b2e:	dc06      	bgt.n	8106b3e <__sflush_r+0xfe>
 8106b30:	89a3      	ldrh	r3, [r4, #12]
 8106b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106b36:	81a3      	strh	r3, [r4, #12]
 8106b38:	f04f 30ff 	mov.w	r0, #4294967295
 8106b3c:	e78e      	b.n	8106a5c <__sflush_r+0x1c>
 8106b3e:	4407      	add	r7, r0
 8106b40:	eba8 0800 	sub.w	r8, r8, r0
 8106b44:	e7e9      	b.n	8106b1a <__sflush_r+0xda>
 8106b46:	bf00      	nop
 8106b48:	20400001 	.word	0x20400001

08106b4c <_fflush_r>:
 8106b4c:	b538      	push	{r3, r4, r5, lr}
 8106b4e:	690b      	ldr	r3, [r1, #16]
 8106b50:	4605      	mov	r5, r0
 8106b52:	460c      	mov	r4, r1
 8106b54:	b913      	cbnz	r3, 8106b5c <_fflush_r+0x10>
 8106b56:	2500      	movs	r5, #0
 8106b58:	4628      	mov	r0, r5
 8106b5a:	bd38      	pop	{r3, r4, r5, pc}
 8106b5c:	b118      	cbz	r0, 8106b66 <_fflush_r+0x1a>
 8106b5e:	6983      	ldr	r3, [r0, #24]
 8106b60:	b90b      	cbnz	r3, 8106b66 <_fflush_r+0x1a>
 8106b62:	f000 f887 	bl	8106c74 <__sinit>
 8106b66:	4b14      	ldr	r3, [pc, #80]	; (8106bb8 <_fflush_r+0x6c>)
 8106b68:	429c      	cmp	r4, r3
 8106b6a:	d11b      	bne.n	8106ba4 <_fflush_r+0x58>
 8106b6c:	686c      	ldr	r4, [r5, #4]
 8106b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106b72:	2b00      	cmp	r3, #0
 8106b74:	d0ef      	beq.n	8106b56 <_fflush_r+0xa>
 8106b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106b78:	07d0      	lsls	r0, r2, #31
 8106b7a:	d404      	bmi.n	8106b86 <_fflush_r+0x3a>
 8106b7c:	0599      	lsls	r1, r3, #22
 8106b7e:	d402      	bmi.n	8106b86 <_fflush_r+0x3a>
 8106b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106b82:	f000 f915 	bl	8106db0 <__retarget_lock_acquire_recursive>
 8106b86:	4628      	mov	r0, r5
 8106b88:	4621      	mov	r1, r4
 8106b8a:	f7ff ff59 	bl	8106a40 <__sflush_r>
 8106b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106b90:	07da      	lsls	r2, r3, #31
 8106b92:	4605      	mov	r5, r0
 8106b94:	d4e0      	bmi.n	8106b58 <_fflush_r+0xc>
 8106b96:	89a3      	ldrh	r3, [r4, #12]
 8106b98:	059b      	lsls	r3, r3, #22
 8106b9a:	d4dd      	bmi.n	8106b58 <_fflush_r+0xc>
 8106b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106b9e:	f000 f908 	bl	8106db2 <__retarget_lock_release_recursive>
 8106ba2:	e7d9      	b.n	8106b58 <_fflush_r+0xc>
 8106ba4:	4b05      	ldr	r3, [pc, #20]	; (8106bbc <_fflush_r+0x70>)
 8106ba6:	429c      	cmp	r4, r3
 8106ba8:	d101      	bne.n	8106bae <_fflush_r+0x62>
 8106baa:	68ac      	ldr	r4, [r5, #8]
 8106bac:	e7df      	b.n	8106b6e <_fflush_r+0x22>
 8106bae:	4b04      	ldr	r3, [pc, #16]	; (8106bc0 <_fflush_r+0x74>)
 8106bb0:	429c      	cmp	r4, r3
 8106bb2:	bf08      	it	eq
 8106bb4:	68ec      	ldreq	r4, [r5, #12]
 8106bb6:	e7da      	b.n	8106b6e <_fflush_r+0x22>
 8106bb8:	0810742c 	.word	0x0810742c
 8106bbc:	0810744c 	.word	0x0810744c
 8106bc0:	0810740c 	.word	0x0810740c

08106bc4 <std>:
 8106bc4:	2300      	movs	r3, #0
 8106bc6:	b510      	push	{r4, lr}
 8106bc8:	4604      	mov	r4, r0
 8106bca:	e9c0 3300 	strd	r3, r3, [r0]
 8106bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106bd2:	6083      	str	r3, [r0, #8]
 8106bd4:	8181      	strh	r1, [r0, #12]
 8106bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8106bd8:	81c2      	strh	r2, [r0, #14]
 8106bda:	6183      	str	r3, [r0, #24]
 8106bdc:	4619      	mov	r1, r3
 8106bde:	2208      	movs	r2, #8
 8106be0:	305c      	adds	r0, #92	; 0x5c
 8106be2:	f7fd fd61 	bl	81046a8 <memset>
 8106be6:	4b05      	ldr	r3, [pc, #20]	; (8106bfc <std+0x38>)
 8106be8:	6263      	str	r3, [r4, #36]	; 0x24
 8106bea:	4b05      	ldr	r3, [pc, #20]	; (8106c00 <std+0x3c>)
 8106bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8106bee:	4b05      	ldr	r3, [pc, #20]	; (8106c04 <std+0x40>)
 8106bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106bf2:	4b05      	ldr	r3, [pc, #20]	; (8106c08 <std+0x44>)
 8106bf4:	6224      	str	r4, [r4, #32]
 8106bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8106bf8:	bd10      	pop	{r4, pc}
 8106bfa:	bf00      	nop
 8106bfc:	08106f05 	.word	0x08106f05
 8106c00:	08106f27 	.word	0x08106f27
 8106c04:	08106f5f 	.word	0x08106f5f
 8106c08:	08106f83 	.word	0x08106f83

08106c0c <_cleanup_r>:
 8106c0c:	4901      	ldr	r1, [pc, #4]	; (8106c14 <_cleanup_r+0x8>)
 8106c0e:	f000 b8af 	b.w	8106d70 <_fwalk_reent>
 8106c12:	bf00      	nop
 8106c14:	08106b4d 	.word	0x08106b4d

08106c18 <__sfmoreglue>:
 8106c18:	b570      	push	{r4, r5, r6, lr}
 8106c1a:	1e4a      	subs	r2, r1, #1
 8106c1c:	2568      	movs	r5, #104	; 0x68
 8106c1e:	4355      	muls	r5, r2
 8106c20:	460e      	mov	r6, r1
 8106c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8106c26:	f7ff fc23 	bl	8106470 <_malloc_r>
 8106c2a:	4604      	mov	r4, r0
 8106c2c:	b140      	cbz	r0, 8106c40 <__sfmoreglue+0x28>
 8106c2e:	2100      	movs	r1, #0
 8106c30:	e9c0 1600 	strd	r1, r6, [r0]
 8106c34:	300c      	adds	r0, #12
 8106c36:	60a0      	str	r0, [r4, #8]
 8106c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8106c3c:	f7fd fd34 	bl	81046a8 <memset>
 8106c40:	4620      	mov	r0, r4
 8106c42:	bd70      	pop	{r4, r5, r6, pc}

08106c44 <__sfp_lock_acquire>:
 8106c44:	4801      	ldr	r0, [pc, #4]	; (8106c4c <__sfp_lock_acquire+0x8>)
 8106c46:	f000 b8b3 	b.w	8106db0 <__retarget_lock_acquire_recursive>
 8106c4a:	bf00      	nop
 8106c4c:	10000354 	.word	0x10000354

08106c50 <__sfp_lock_release>:
 8106c50:	4801      	ldr	r0, [pc, #4]	; (8106c58 <__sfp_lock_release+0x8>)
 8106c52:	f000 b8ae 	b.w	8106db2 <__retarget_lock_release_recursive>
 8106c56:	bf00      	nop
 8106c58:	10000354 	.word	0x10000354

08106c5c <__sinit_lock_acquire>:
 8106c5c:	4801      	ldr	r0, [pc, #4]	; (8106c64 <__sinit_lock_acquire+0x8>)
 8106c5e:	f000 b8a7 	b.w	8106db0 <__retarget_lock_acquire_recursive>
 8106c62:	bf00      	nop
 8106c64:	1000034f 	.word	0x1000034f

08106c68 <__sinit_lock_release>:
 8106c68:	4801      	ldr	r0, [pc, #4]	; (8106c70 <__sinit_lock_release+0x8>)
 8106c6a:	f000 b8a2 	b.w	8106db2 <__retarget_lock_release_recursive>
 8106c6e:	bf00      	nop
 8106c70:	1000034f 	.word	0x1000034f

08106c74 <__sinit>:
 8106c74:	b510      	push	{r4, lr}
 8106c76:	4604      	mov	r4, r0
 8106c78:	f7ff fff0 	bl	8106c5c <__sinit_lock_acquire>
 8106c7c:	69a3      	ldr	r3, [r4, #24]
 8106c7e:	b11b      	cbz	r3, 8106c88 <__sinit+0x14>
 8106c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106c84:	f7ff bff0 	b.w	8106c68 <__sinit_lock_release>
 8106c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8106c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8106c8e:	4b13      	ldr	r3, [pc, #76]	; (8106cdc <__sinit+0x68>)
 8106c90:	4a13      	ldr	r2, [pc, #76]	; (8106ce0 <__sinit+0x6c>)
 8106c92:	681b      	ldr	r3, [r3, #0]
 8106c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8106c96:	42a3      	cmp	r3, r4
 8106c98:	bf04      	itt	eq
 8106c9a:	2301      	moveq	r3, #1
 8106c9c:	61a3      	streq	r3, [r4, #24]
 8106c9e:	4620      	mov	r0, r4
 8106ca0:	f000 f820 	bl	8106ce4 <__sfp>
 8106ca4:	6060      	str	r0, [r4, #4]
 8106ca6:	4620      	mov	r0, r4
 8106ca8:	f000 f81c 	bl	8106ce4 <__sfp>
 8106cac:	60a0      	str	r0, [r4, #8]
 8106cae:	4620      	mov	r0, r4
 8106cb0:	f000 f818 	bl	8106ce4 <__sfp>
 8106cb4:	2200      	movs	r2, #0
 8106cb6:	60e0      	str	r0, [r4, #12]
 8106cb8:	2104      	movs	r1, #4
 8106cba:	6860      	ldr	r0, [r4, #4]
 8106cbc:	f7ff ff82 	bl	8106bc4 <std>
 8106cc0:	68a0      	ldr	r0, [r4, #8]
 8106cc2:	2201      	movs	r2, #1
 8106cc4:	2109      	movs	r1, #9
 8106cc6:	f7ff ff7d 	bl	8106bc4 <std>
 8106cca:	68e0      	ldr	r0, [r4, #12]
 8106ccc:	2202      	movs	r2, #2
 8106cce:	2112      	movs	r1, #18
 8106cd0:	f7ff ff78 	bl	8106bc4 <std>
 8106cd4:	2301      	movs	r3, #1
 8106cd6:	61a3      	str	r3, [r4, #24]
 8106cd8:	e7d2      	b.n	8106c80 <__sinit+0xc>
 8106cda:	bf00      	nop
 8106cdc:	08107088 	.word	0x08107088
 8106ce0:	08106c0d 	.word	0x08106c0d

08106ce4 <__sfp>:
 8106ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106ce6:	4607      	mov	r7, r0
 8106ce8:	f7ff ffac 	bl	8106c44 <__sfp_lock_acquire>
 8106cec:	4b1e      	ldr	r3, [pc, #120]	; (8106d68 <__sfp+0x84>)
 8106cee:	681e      	ldr	r6, [r3, #0]
 8106cf0:	69b3      	ldr	r3, [r6, #24]
 8106cf2:	b913      	cbnz	r3, 8106cfa <__sfp+0x16>
 8106cf4:	4630      	mov	r0, r6
 8106cf6:	f7ff ffbd 	bl	8106c74 <__sinit>
 8106cfa:	3648      	adds	r6, #72	; 0x48
 8106cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8106d00:	3b01      	subs	r3, #1
 8106d02:	d503      	bpl.n	8106d0c <__sfp+0x28>
 8106d04:	6833      	ldr	r3, [r6, #0]
 8106d06:	b30b      	cbz	r3, 8106d4c <__sfp+0x68>
 8106d08:	6836      	ldr	r6, [r6, #0]
 8106d0a:	e7f7      	b.n	8106cfc <__sfp+0x18>
 8106d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8106d10:	b9d5      	cbnz	r5, 8106d48 <__sfp+0x64>
 8106d12:	4b16      	ldr	r3, [pc, #88]	; (8106d6c <__sfp+0x88>)
 8106d14:	60e3      	str	r3, [r4, #12]
 8106d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8106d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8106d1c:	f000 f847 	bl	8106dae <__retarget_lock_init_recursive>
 8106d20:	f7ff ff96 	bl	8106c50 <__sfp_lock_release>
 8106d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8106d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8106d2c:	6025      	str	r5, [r4, #0]
 8106d2e:	61a5      	str	r5, [r4, #24]
 8106d30:	2208      	movs	r2, #8
 8106d32:	4629      	mov	r1, r5
 8106d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8106d38:	f7fd fcb6 	bl	81046a8 <memset>
 8106d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8106d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106d44:	4620      	mov	r0, r4
 8106d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106d48:	3468      	adds	r4, #104	; 0x68
 8106d4a:	e7d9      	b.n	8106d00 <__sfp+0x1c>
 8106d4c:	2104      	movs	r1, #4
 8106d4e:	4638      	mov	r0, r7
 8106d50:	f7ff ff62 	bl	8106c18 <__sfmoreglue>
 8106d54:	4604      	mov	r4, r0
 8106d56:	6030      	str	r0, [r6, #0]
 8106d58:	2800      	cmp	r0, #0
 8106d5a:	d1d5      	bne.n	8106d08 <__sfp+0x24>
 8106d5c:	f7ff ff78 	bl	8106c50 <__sfp_lock_release>
 8106d60:	230c      	movs	r3, #12
 8106d62:	603b      	str	r3, [r7, #0]
 8106d64:	e7ee      	b.n	8106d44 <__sfp+0x60>
 8106d66:	bf00      	nop
 8106d68:	08107088 	.word	0x08107088
 8106d6c:	ffff0001 	.word	0xffff0001

08106d70 <_fwalk_reent>:
 8106d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106d74:	4606      	mov	r6, r0
 8106d76:	4688      	mov	r8, r1
 8106d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8106d7c:	2700      	movs	r7, #0
 8106d7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106d82:	f1b9 0901 	subs.w	r9, r9, #1
 8106d86:	d505      	bpl.n	8106d94 <_fwalk_reent+0x24>
 8106d88:	6824      	ldr	r4, [r4, #0]
 8106d8a:	2c00      	cmp	r4, #0
 8106d8c:	d1f7      	bne.n	8106d7e <_fwalk_reent+0xe>
 8106d8e:	4638      	mov	r0, r7
 8106d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106d94:	89ab      	ldrh	r3, [r5, #12]
 8106d96:	2b01      	cmp	r3, #1
 8106d98:	d907      	bls.n	8106daa <_fwalk_reent+0x3a>
 8106d9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8106d9e:	3301      	adds	r3, #1
 8106da0:	d003      	beq.n	8106daa <_fwalk_reent+0x3a>
 8106da2:	4629      	mov	r1, r5
 8106da4:	4630      	mov	r0, r6
 8106da6:	47c0      	blx	r8
 8106da8:	4307      	orrs	r7, r0
 8106daa:	3568      	adds	r5, #104	; 0x68
 8106dac:	e7e9      	b.n	8106d82 <_fwalk_reent+0x12>

08106dae <__retarget_lock_init_recursive>:
 8106dae:	4770      	bx	lr

08106db0 <__retarget_lock_acquire_recursive>:
 8106db0:	4770      	bx	lr

08106db2 <__retarget_lock_release_recursive>:
 8106db2:	4770      	bx	lr

08106db4 <__swhatbuf_r>:
 8106db4:	b570      	push	{r4, r5, r6, lr}
 8106db6:	460e      	mov	r6, r1
 8106db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106dbc:	2900      	cmp	r1, #0
 8106dbe:	b096      	sub	sp, #88	; 0x58
 8106dc0:	4614      	mov	r4, r2
 8106dc2:	461d      	mov	r5, r3
 8106dc4:	da07      	bge.n	8106dd6 <__swhatbuf_r+0x22>
 8106dc6:	2300      	movs	r3, #0
 8106dc8:	602b      	str	r3, [r5, #0]
 8106dca:	89b3      	ldrh	r3, [r6, #12]
 8106dcc:	061a      	lsls	r2, r3, #24
 8106dce:	d410      	bmi.n	8106df2 <__swhatbuf_r+0x3e>
 8106dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106dd4:	e00e      	b.n	8106df4 <__swhatbuf_r+0x40>
 8106dd6:	466a      	mov	r2, sp
 8106dd8:	f000 f8fa 	bl	8106fd0 <_fstat_r>
 8106ddc:	2800      	cmp	r0, #0
 8106dde:	dbf2      	blt.n	8106dc6 <__swhatbuf_r+0x12>
 8106de0:	9a01      	ldr	r2, [sp, #4]
 8106de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8106de6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8106dea:	425a      	negs	r2, r3
 8106dec:	415a      	adcs	r2, r3
 8106dee:	602a      	str	r2, [r5, #0]
 8106df0:	e7ee      	b.n	8106dd0 <__swhatbuf_r+0x1c>
 8106df2:	2340      	movs	r3, #64	; 0x40
 8106df4:	2000      	movs	r0, #0
 8106df6:	6023      	str	r3, [r4, #0]
 8106df8:	b016      	add	sp, #88	; 0x58
 8106dfa:	bd70      	pop	{r4, r5, r6, pc}

08106dfc <__smakebuf_r>:
 8106dfc:	898b      	ldrh	r3, [r1, #12]
 8106dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8106e00:	079d      	lsls	r5, r3, #30
 8106e02:	4606      	mov	r6, r0
 8106e04:	460c      	mov	r4, r1
 8106e06:	d507      	bpl.n	8106e18 <__smakebuf_r+0x1c>
 8106e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8106e0c:	6023      	str	r3, [r4, #0]
 8106e0e:	6123      	str	r3, [r4, #16]
 8106e10:	2301      	movs	r3, #1
 8106e12:	6163      	str	r3, [r4, #20]
 8106e14:	b002      	add	sp, #8
 8106e16:	bd70      	pop	{r4, r5, r6, pc}
 8106e18:	ab01      	add	r3, sp, #4
 8106e1a:	466a      	mov	r2, sp
 8106e1c:	f7ff ffca 	bl	8106db4 <__swhatbuf_r>
 8106e20:	9900      	ldr	r1, [sp, #0]
 8106e22:	4605      	mov	r5, r0
 8106e24:	4630      	mov	r0, r6
 8106e26:	f7ff fb23 	bl	8106470 <_malloc_r>
 8106e2a:	b948      	cbnz	r0, 8106e40 <__smakebuf_r+0x44>
 8106e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106e30:	059a      	lsls	r2, r3, #22
 8106e32:	d4ef      	bmi.n	8106e14 <__smakebuf_r+0x18>
 8106e34:	f023 0303 	bic.w	r3, r3, #3
 8106e38:	f043 0302 	orr.w	r3, r3, #2
 8106e3c:	81a3      	strh	r3, [r4, #12]
 8106e3e:	e7e3      	b.n	8106e08 <__smakebuf_r+0xc>
 8106e40:	4b0d      	ldr	r3, [pc, #52]	; (8106e78 <__smakebuf_r+0x7c>)
 8106e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8106e44:	89a3      	ldrh	r3, [r4, #12]
 8106e46:	6020      	str	r0, [r4, #0]
 8106e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106e4c:	81a3      	strh	r3, [r4, #12]
 8106e4e:	9b00      	ldr	r3, [sp, #0]
 8106e50:	6163      	str	r3, [r4, #20]
 8106e52:	9b01      	ldr	r3, [sp, #4]
 8106e54:	6120      	str	r0, [r4, #16]
 8106e56:	b15b      	cbz	r3, 8106e70 <__smakebuf_r+0x74>
 8106e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106e5c:	4630      	mov	r0, r6
 8106e5e:	f000 f8c9 	bl	8106ff4 <_isatty_r>
 8106e62:	b128      	cbz	r0, 8106e70 <__smakebuf_r+0x74>
 8106e64:	89a3      	ldrh	r3, [r4, #12]
 8106e66:	f023 0303 	bic.w	r3, r3, #3
 8106e6a:	f043 0301 	orr.w	r3, r3, #1
 8106e6e:	81a3      	strh	r3, [r4, #12]
 8106e70:	89a0      	ldrh	r0, [r4, #12]
 8106e72:	4305      	orrs	r5, r0
 8106e74:	81a5      	strh	r5, [r4, #12]
 8106e76:	e7cd      	b.n	8106e14 <__smakebuf_r+0x18>
 8106e78:	08106c0d 	.word	0x08106c0d

08106e7c <_raise_r>:
 8106e7c:	291f      	cmp	r1, #31
 8106e7e:	b538      	push	{r3, r4, r5, lr}
 8106e80:	4604      	mov	r4, r0
 8106e82:	460d      	mov	r5, r1
 8106e84:	d904      	bls.n	8106e90 <_raise_r+0x14>
 8106e86:	2316      	movs	r3, #22
 8106e88:	6003      	str	r3, [r0, #0]
 8106e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8106e8e:	bd38      	pop	{r3, r4, r5, pc}
 8106e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8106e92:	b112      	cbz	r2, 8106e9a <_raise_r+0x1e>
 8106e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8106e98:	b94b      	cbnz	r3, 8106eae <_raise_r+0x32>
 8106e9a:	4620      	mov	r0, r4
 8106e9c:	f000 f830 	bl	8106f00 <_getpid_r>
 8106ea0:	462a      	mov	r2, r5
 8106ea2:	4601      	mov	r1, r0
 8106ea4:	4620      	mov	r0, r4
 8106ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8106eaa:	f000 b817 	b.w	8106edc <_kill_r>
 8106eae:	2b01      	cmp	r3, #1
 8106eb0:	d00a      	beq.n	8106ec8 <_raise_r+0x4c>
 8106eb2:	1c59      	adds	r1, r3, #1
 8106eb4:	d103      	bne.n	8106ebe <_raise_r+0x42>
 8106eb6:	2316      	movs	r3, #22
 8106eb8:	6003      	str	r3, [r0, #0]
 8106eba:	2001      	movs	r0, #1
 8106ebc:	e7e7      	b.n	8106e8e <_raise_r+0x12>
 8106ebe:	2400      	movs	r4, #0
 8106ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8106ec4:	4628      	mov	r0, r5
 8106ec6:	4798      	blx	r3
 8106ec8:	2000      	movs	r0, #0
 8106eca:	e7e0      	b.n	8106e8e <_raise_r+0x12>

08106ecc <raise>:
 8106ecc:	4b02      	ldr	r3, [pc, #8]	; (8106ed8 <raise+0xc>)
 8106ece:	4601      	mov	r1, r0
 8106ed0:	6818      	ldr	r0, [r3, #0]
 8106ed2:	f7ff bfd3 	b.w	8106e7c <_raise_r>
 8106ed6:	bf00      	nop
 8106ed8:	10000018 	.word	0x10000018

08106edc <_kill_r>:
 8106edc:	b538      	push	{r3, r4, r5, lr}
 8106ede:	4d07      	ldr	r5, [pc, #28]	; (8106efc <_kill_r+0x20>)
 8106ee0:	2300      	movs	r3, #0
 8106ee2:	4604      	mov	r4, r0
 8106ee4:	4608      	mov	r0, r1
 8106ee6:	4611      	mov	r1, r2
 8106ee8:	602b      	str	r3, [r5, #0]
 8106eea:	f7fa fda5 	bl	8101a38 <_kill>
 8106eee:	1c43      	adds	r3, r0, #1
 8106ef0:	d102      	bne.n	8106ef8 <_kill_r+0x1c>
 8106ef2:	682b      	ldr	r3, [r5, #0]
 8106ef4:	b103      	cbz	r3, 8106ef8 <_kill_r+0x1c>
 8106ef6:	6023      	str	r3, [r4, #0]
 8106ef8:	bd38      	pop	{r3, r4, r5, pc}
 8106efa:	bf00      	nop
 8106efc:	10000348 	.word	0x10000348

08106f00 <_getpid_r>:
 8106f00:	f7fa bd92 	b.w	8101a28 <_getpid>

08106f04 <__sread>:
 8106f04:	b510      	push	{r4, lr}
 8106f06:	460c      	mov	r4, r1
 8106f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106f0c:	f000 f894 	bl	8107038 <_read_r>
 8106f10:	2800      	cmp	r0, #0
 8106f12:	bfab      	itete	ge
 8106f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8106f16:	89a3      	ldrhlt	r3, [r4, #12]
 8106f18:	181b      	addge	r3, r3, r0
 8106f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8106f1e:	bfac      	ite	ge
 8106f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8106f22:	81a3      	strhlt	r3, [r4, #12]
 8106f24:	bd10      	pop	{r4, pc}

08106f26 <__swrite>:
 8106f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106f2a:	461f      	mov	r7, r3
 8106f2c:	898b      	ldrh	r3, [r1, #12]
 8106f2e:	05db      	lsls	r3, r3, #23
 8106f30:	4605      	mov	r5, r0
 8106f32:	460c      	mov	r4, r1
 8106f34:	4616      	mov	r6, r2
 8106f36:	d505      	bpl.n	8106f44 <__swrite+0x1e>
 8106f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106f3c:	2302      	movs	r3, #2
 8106f3e:	2200      	movs	r2, #0
 8106f40:	f000 f868 	bl	8107014 <_lseek_r>
 8106f44:	89a3      	ldrh	r3, [r4, #12]
 8106f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106f4e:	81a3      	strh	r3, [r4, #12]
 8106f50:	4632      	mov	r2, r6
 8106f52:	463b      	mov	r3, r7
 8106f54:	4628      	mov	r0, r5
 8106f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106f5a:	f000 b817 	b.w	8106f8c <_write_r>

08106f5e <__sseek>:
 8106f5e:	b510      	push	{r4, lr}
 8106f60:	460c      	mov	r4, r1
 8106f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106f66:	f000 f855 	bl	8107014 <_lseek_r>
 8106f6a:	1c43      	adds	r3, r0, #1
 8106f6c:	89a3      	ldrh	r3, [r4, #12]
 8106f6e:	bf15      	itete	ne
 8106f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8106f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8106f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8106f7a:	81a3      	strheq	r3, [r4, #12]
 8106f7c:	bf18      	it	ne
 8106f7e:	81a3      	strhne	r3, [r4, #12]
 8106f80:	bd10      	pop	{r4, pc}

08106f82 <__sclose>:
 8106f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106f86:	f000 b813 	b.w	8106fb0 <_close_r>
	...

08106f8c <_write_r>:
 8106f8c:	b538      	push	{r3, r4, r5, lr}
 8106f8e:	4d07      	ldr	r5, [pc, #28]	; (8106fac <_write_r+0x20>)
 8106f90:	4604      	mov	r4, r0
 8106f92:	4608      	mov	r0, r1
 8106f94:	4611      	mov	r1, r2
 8106f96:	2200      	movs	r2, #0
 8106f98:	602a      	str	r2, [r5, #0]
 8106f9a:	461a      	mov	r2, r3
 8106f9c:	f7fa fd83 	bl	8101aa6 <_write>
 8106fa0:	1c43      	adds	r3, r0, #1
 8106fa2:	d102      	bne.n	8106faa <_write_r+0x1e>
 8106fa4:	682b      	ldr	r3, [r5, #0]
 8106fa6:	b103      	cbz	r3, 8106faa <_write_r+0x1e>
 8106fa8:	6023      	str	r3, [r4, #0]
 8106faa:	bd38      	pop	{r3, r4, r5, pc}
 8106fac:	10000348 	.word	0x10000348

08106fb0 <_close_r>:
 8106fb0:	b538      	push	{r3, r4, r5, lr}
 8106fb2:	4d06      	ldr	r5, [pc, #24]	; (8106fcc <_close_r+0x1c>)
 8106fb4:	2300      	movs	r3, #0
 8106fb6:	4604      	mov	r4, r0
 8106fb8:	4608      	mov	r0, r1
 8106fba:	602b      	str	r3, [r5, #0]
 8106fbc:	f7fa fd8f 	bl	8101ade <_close>
 8106fc0:	1c43      	adds	r3, r0, #1
 8106fc2:	d102      	bne.n	8106fca <_close_r+0x1a>
 8106fc4:	682b      	ldr	r3, [r5, #0]
 8106fc6:	b103      	cbz	r3, 8106fca <_close_r+0x1a>
 8106fc8:	6023      	str	r3, [r4, #0]
 8106fca:	bd38      	pop	{r3, r4, r5, pc}
 8106fcc:	10000348 	.word	0x10000348

08106fd0 <_fstat_r>:
 8106fd0:	b538      	push	{r3, r4, r5, lr}
 8106fd2:	4d07      	ldr	r5, [pc, #28]	; (8106ff0 <_fstat_r+0x20>)
 8106fd4:	2300      	movs	r3, #0
 8106fd6:	4604      	mov	r4, r0
 8106fd8:	4608      	mov	r0, r1
 8106fda:	4611      	mov	r1, r2
 8106fdc:	602b      	str	r3, [r5, #0]
 8106fde:	f7fa fd8a 	bl	8101af6 <_fstat>
 8106fe2:	1c43      	adds	r3, r0, #1
 8106fe4:	d102      	bne.n	8106fec <_fstat_r+0x1c>
 8106fe6:	682b      	ldr	r3, [r5, #0]
 8106fe8:	b103      	cbz	r3, 8106fec <_fstat_r+0x1c>
 8106fea:	6023      	str	r3, [r4, #0]
 8106fec:	bd38      	pop	{r3, r4, r5, pc}
 8106fee:	bf00      	nop
 8106ff0:	10000348 	.word	0x10000348

08106ff4 <_isatty_r>:
 8106ff4:	b538      	push	{r3, r4, r5, lr}
 8106ff6:	4d06      	ldr	r5, [pc, #24]	; (8107010 <_isatty_r+0x1c>)
 8106ff8:	2300      	movs	r3, #0
 8106ffa:	4604      	mov	r4, r0
 8106ffc:	4608      	mov	r0, r1
 8106ffe:	602b      	str	r3, [r5, #0]
 8107000:	f7fa fd89 	bl	8101b16 <_isatty>
 8107004:	1c43      	adds	r3, r0, #1
 8107006:	d102      	bne.n	810700e <_isatty_r+0x1a>
 8107008:	682b      	ldr	r3, [r5, #0]
 810700a:	b103      	cbz	r3, 810700e <_isatty_r+0x1a>
 810700c:	6023      	str	r3, [r4, #0]
 810700e:	bd38      	pop	{r3, r4, r5, pc}
 8107010:	10000348 	.word	0x10000348

08107014 <_lseek_r>:
 8107014:	b538      	push	{r3, r4, r5, lr}
 8107016:	4d07      	ldr	r5, [pc, #28]	; (8107034 <_lseek_r+0x20>)
 8107018:	4604      	mov	r4, r0
 810701a:	4608      	mov	r0, r1
 810701c:	4611      	mov	r1, r2
 810701e:	2200      	movs	r2, #0
 8107020:	602a      	str	r2, [r5, #0]
 8107022:	461a      	mov	r2, r3
 8107024:	f7fa fd82 	bl	8101b2c <_lseek>
 8107028:	1c43      	adds	r3, r0, #1
 810702a:	d102      	bne.n	8107032 <_lseek_r+0x1e>
 810702c:	682b      	ldr	r3, [r5, #0]
 810702e:	b103      	cbz	r3, 8107032 <_lseek_r+0x1e>
 8107030:	6023      	str	r3, [r4, #0]
 8107032:	bd38      	pop	{r3, r4, r5, pc}
 8107034:	10000348 	.word	0x10000348

08107038 <_read_r>:
 8107038:	b538      	push	{r3, r4, r5, lr}
 810703a:	4d07      	ldr	r5, [pc, #28]	; (8107058 <_read_r+0x20>)
 810703c:	4604      	mov	r4, r0
 810703e:	4608      	mov	r0, r1
 8107040:	4611      	mov	r1, r2
 8107042:	2200      	movs	r2, #0
 8107044:	602a      	str	r2, [r5, #0]
 8107046:	461a      	mov	r2, r3
 8107048:	f7fa fd10 	bl	8101a6c <_read>
 810704c:	1c43      	adds	r3, r0, #1
 810704e:	d102      	bne.n	8107056 <_read_r+0x1e>
 8107050:	682b      	ldr	r3, [r5, #0]
 8107052:	b103      	cbz	r3, 8107056 <_read_r+0x1e>
 8107054:	6023      	str	r3, [r4, #0]
 8107056:	bd38      	pop	{r3, r4, r5, pc}
 8107058:	10000348 	.word	0x10000348

0810705c <_init>:
 810705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810705e:	bf00      	nop
 8107060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107062:	bc08      	pop	{r3}
 8107064:	469e      	mov	lr, r3
 8107066:	4770      	bx	lr

08107068 <_fini>:
 8107068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810706a:	bf00      	nop
 810706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810706e:	bc08      	pop	{r3}
 8107070:	469e      	mov	lr, r3
 8107072:	4770      	bx	lr
