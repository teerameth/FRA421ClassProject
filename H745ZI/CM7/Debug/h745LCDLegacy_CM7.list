
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ee0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  08012180  08012180  00022180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012874  08012874  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  08012874  08012874  00022874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801287c  0801287c  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801287c  0801287c  0002287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012880  08012880  00022880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  08012884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001f4  08012a78  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000254  08012ad8  00030254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001bb10  240002b8  08012b38  000302b8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  2401bdc8  08012b38  0003bdc8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034993  00000000  00000000  000302e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a93  00000000  00000000  00064c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a68  00000000  00000000  00069708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001900  00000000  00000000  0006b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003eded  00000000  00000000  0006ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023352  00000000  00000000  000ab85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019adb4  00000000  00000000  000cebaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00269963  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000084a8  00000000  00000000  002699b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002b8 	.word	0x240002b8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012168 	.word	0x08012168

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002bc 	.word	0x240002bc
 80002dc:	08012168 	.word	0x08012168

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6858      	ldr	r0, [r3, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	f006 f8e9 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007d6:	200a      	movs	r0, #10
 80007d8:	f002 fb86 	bl	8002ee8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6858      	ldr	r0, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	2201      	movs	r2, #1
 80007e8:	4619      	mov	r1, r3
 80007ea:	f006 f8dd 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6898      	ldr	r0, [r3, #8]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f006 f8d4 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f002 fb71 	bl	8002ee8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6898      	ldr	r0, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	b29b      	uxth	r3, r3
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	f006 f8c8 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68d8      	ldr	r0, [r3, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	b29b      	uxth	r3, r3
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	f006 f8bf 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	2204      	movs	r2, #4
 8000832:	4938      	ldr	r1, [pc, #224]	; (8000914 <LCD_init+0x158>)
 8000834:	f009 f9ec 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68d8      	ldr	r0, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	b29b      	uxth	r3, r3
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	f006 f8af 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4931      	ldr	r1, [pc, #196]	; (8000918 <LCD_init+0x15c>)
 8000854:	f009 f9dc 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68d8      	ldr	r0, [r3, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	b29b      	uxth	r3, r3
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	f006 f89f 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2201      	movs	r2, #1
 8000872:	492a      	ldr	r1, [pc, #168]	; (800091c <LCD_init+0x160>)
 8000874:	f009 f9cc 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68d8      	ldr	r0, [r3, #12]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	b29b      	uxth	r3, r3
 8000882:	2201      	movs	r2, #1
 8000884:	4619      	mov	r1, r3
 8000886:	f006 f88f 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	2364      	movs	r3, #100	; 0x64
 8000890:	2204      	movs	r2, #4
 8000892:	4923      	ldr	r1, [pc, #140]	; (8000920 <LCD_init+0x164>)
 8000894:	f009 f9bc 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	68d8      	ldr	r0, [r3, #12]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f006 f87f 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	2201      	movs	r2, #1
 80008b2:	491c      	ldr	r1, [pc, #112]	; (8000924 <LCD_init+0x168>)
 80008b4:	f009 f9ac 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68d8      	ldr	r0, [r3, #12]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	f006 f86f 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	2364      	movs	r3, #100	; 0x64
 80008d0:	2204      	movs	r2, #4
 80008d2:	4915      	ldr	r1, [pc, #84]	; (8000928 <LCD_init+0x16c>)
 80008d4:	f009 f99c 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	f006 f85f 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	2201      	movs	r2, #1
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LCD_init+0x170>)
 80008f4:	f009 f98c 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68d8      	ldr	r0, [r3, #12]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	b29b      	uxth	r3, r3
 8000902:	2201      	movs	r2, #1
 8000904:	4619      	mov	r1, r3
 8000906:	f006 f84f 	bl	80069a8 <HAL_GPIO_WritePin>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	24000008 	.word	0x24000008
 8000918:	2400000c 	.word	0x2400000c
 800091c:	2400000d 	.word	0x2400000d
 8000920:	2400000e 	.word	0x2400000e
 8000924:	24000012 	.word	0x24000012
 8000928:	24000013 	.word	0x24000013
 800092c:	24000017 	.word	0x24000017

08000930 <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000940:	4903      	ldr	r1, [pc, #12]	; (8000950 <LCD_flush+0x20>)
 8000942:	4618      	mov	r0, r3
 8000944:	f009 fb56 	bl	8009ff4 <HAL_SPI_Transmit_DMA>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	240002d4 	.word	0x240002d4

08000954 <clearPosition>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//klui code
int Position[128][120];
void clearPosition(){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
	for(int i=0; i<128; i++){
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	e016      	b.n	800098e <clearPosition+0x3a>
		for(int j=0; j<120; j++){
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	e00d      	b.n	8000982 <clearPosition+0x2e>
			Position[i][j]=0;
 8000966:	490f      	ldr	r1, [pc, #60]	; (80009a4 <clearPosition+0x50>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	011b      	lsls	r3, r3, #4
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	2200      	movs	r2, #0
 8000978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0; j<120; j++){
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b77      	cmp	r3, #119	; 0x77
 8000986:	ddee      	ble.n	8000966 <clearPosition+0x12>
	for(int i=0; i<128; i++){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b7f      	cmp	r3, #127	; 0x7f
 8000992:	dde5      	ble.n	8000960 <clearPosition+0xc>
		}
	}
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	2400c3b0 	.word	0x2400c3b0

080009a8 <drawCircle>:
void drawCircle(int xc,int yc,int x,int y){
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	603b      	str	r3, [r7, #0]
	for(int i=0; i<=x; i++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e084      	b.n	8000ac6 <drawCircle+0x11e>
		for(int j=0; j<=y; j++){
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	e07a      	b.n	8000ab8 <drawCircle+0x110>
			Position[xc+i][yc+j]=255;
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	441a      	add	r2, r3
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	4419      	add	r1, r3
 80009ce:	4844      	ldr	r0, [pc, #272]	; (8000ae0 <drawCircle+0x138>)
 80009d0:	4613      	mov	r3, r2
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	1a9b      	subs	r3, r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc-i][yc+j]=255;
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	1ad2      	subs	r2, r2, r3
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4419      	add	r1, r3
 80009ec:	483c      	ldr	r0, [pc, #240]	; (8000ae0 <drawCircle+0x138>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	22ff      	movs	r2, #255	; 0xff
 80009fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc+i][yc-j]=255;
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	441a      	add	r2, r3
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ac9      	subs	r1, r1, r3
 8000a0a:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <drawCircle+0x138>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc-i][yc-j]=255;
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	1ad2      	subs	r2, r2, r3
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	1ac9      	subs	r1, r1, r3
 8000a28:	482d      	ldr	r0, [pc, #180]	; (8000ae0 <drawCircle+0x138>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc+j][yc+i]=255;
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	441a      	add	r2, r3
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	4419      	add	r1, r3
 8000a46:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <drawCircle+0x138>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	1a9b      	subs	r3, r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc-j][yc+i]=255;
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	1ad2      	subs	r2, r2, r3
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	4419      	add	r1, r3
 8000a64:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <drawCircle+0x138>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	440b      	add	r3, r1
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc+j][yc-i]=255;
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	1ac9      	subs	r1, r1, r3
 8000a82:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <drawCircle+0x138>)
 8000a84:	4613      	mov	r3, r2
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	440b      	add	r3, r1
 8000a8e:	22ff      	movs	r2, #255	; 0xff
 8000a90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Position[xc-j][yc-i]=255;
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	1ad2      	subs	r2, r2, r3
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	1ac9      	subs	r1, r1, r3
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <drawCircle+0x138>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int j=0; j<=y; j++){
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dd80      	ble.n	80009c2 <drawCircle+0x1a>
	for(int i=0; i<=x; i++){
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	f77f af76 	ble.w	80009bc <drawCircle+0x14>
		}
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2400c3b0 	.word	0x2400c3b0

08000ae4 <circle>:
void circle(int xc,int yc,int r){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	int x=0, y=r;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	61bb      	str	r3, [r7, #24]
	int d=3-2*r;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	f1c3 0303 	rsb	r3, r3, #3
 8000b00:	617b      	str	r3, [r7, #20]
	drawCircle(xc,yc,x,y);
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	68b9      	ldr	r1, [r7, #8]
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff ff4d 	bl	80009a8 <drawCircle>
	while(y>=x){
 8000b0e:	e020      	b.n	8000b52 <circle+0x6e>
		x++;
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3301      	adds	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
		if(d>0){
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dd0b      	ble.n	8000b34 <circle+0x50>
			y--;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
			d=d+4*(x-y)+10;
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	009a      	lsls	r2, r3, #2
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	330a      	adds	r3, #10
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e005      	b.n	8000b40 <circle+0x5c>
		}
		else{
			d=d+4*x+6;
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	009a      	lsls	r2, r3, #2
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3306      	adds	r3, #6
 8000b3e:	617b      	str	r3, [r7, #20]
		}
		drawCircle(xc,yc,x,y);
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ff2e 	bl	80009a8 <drawCircle>
		HAL_Delay(50);
 8000b4c:	2032      	movs	r0, #50	; 0x32
 8000b4e:	f002 f9cb 	bl	8002ee8 <HAL_Delay>
	while(y>=x){
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dada      	bge.n	8000b10 <circle+0x2c>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <coodinate2framememory>:
void coodinate2framememory(){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
	int a=3072;
 8000b6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b6e:	60fb      	str	r3, [r7, #12]
	for(int j=0; j<120; j++){
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	e039      	b.n	8000bea <coodinate2framememory+0x86>
		for(int i=0; i<128; i++){
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e030      	b.n	8000bde <coodinate2framememory+0x7a>
			if(Position[i][j]==0){
 8000b7c:	4920      	ldr	r1, [pc, #128]	; (8000c00 <coodinate2framememory+0x9c>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	4613      	mov	r3, r2
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	1a9b      	subs	r3, r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10f      	bne.n	8000bb4 <coodinate2framememory+0x50>
				Framememory[a]=255;
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <coodinate2framememory+0xa0>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	701a      	strb	r2, [r3, #0]
				Framememory[a+1]=255;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <coodinate2framememory+0xa0>)
 8000ba4:	21ff      	movs	r1, #255	; 0xff
 8000ba6:	54d1      	strb	r1, [r2, r3]
				Framememory[a+2]=255;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3302      	adds	r3, #2
 8000bac:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <coodinate2framememory+0xa0>)
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	54d1      	strb	r1, [r2, r3]
 8000bb2:	e00e      	b.n	8000bd2 <coodinate2framememory+0x6e>
			}
			else{
				Framememory[a]=255;
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <coodinate2framememory+0xa0>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	701a      	strb	r2, [r3, #0]
				Framememory[a+1]=0;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <coodinate2framememory+0xa0>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	54d1      	strb	r1, [r2, r3]
				Framememory[a+2]=0;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <coodinate2framememory+0xa0>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	54d1      	strb	r1, [r2, r3]
			}
			a=a+3;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3303      	adds	r3, #3
 8000bd6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<128; i++){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b7f      	cmp	r3, #127	; 0x7f
 8000be2:	ddcb      	ble.n	8000b7c <coodinate2framememory+0x18>
	for(int j=0; j<120; j++){
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b77      	cmp	r3, #119	; 0x77
 8000bee:	ddc2      	ble.n	8000b76 <coodinate2framememory+0x12>
		}
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	2400c3b0 	.word	0x2400c3b0
 8000c04:	240002d4 	.word	0x240002d4

08000c08 <convert2euler>:
void convert2euler(){
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0

	// roll (x-axis rotation)
	double sinr_cosp = 2 * (q->w * q->x + q->y * q->z);
 8000c0e:	4b6e      	ldr	r3, [pc, #440]	; (8000dc8 <convert2euler+0x1c0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c16:	4b6c      	ldr	r3, [pc, #432]	; (8000dc8 <convert2euler+0x1c0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c22:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <convert2euler+0x1c0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c2a:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <convert2euler+0x1c0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c42:	ed87 7b06 	vstr	d7, [r7, #24]
	double cosr_cosp = 1 - 2 * (q->x * q->x + q->y * q->y);
 8000c46:	4b60      	ldr	r3, [pc, #384]	; (8000dc8 <convert2euler+0x1c0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	ed93 7a00 	vldr	s14, [r3]
 8000c4e:	4b5e      	ldr	r3, [pc, #376]	; (8000dc8 <convert2euler+0x1c0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c5a:	4b5b      	ldr	r3, [pc, #364]	; (8000dc8 <convert2euler+0x1c0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c62:	4b59      	ldr	r3, [pc, #356]	; (8000dc8 <convert2euler+0x1c0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c82:	ed87 7b04 	vstr	d7, [r7, #16]
	angle->roll = atan2(sinr_cosp, cosr_cosp);
 8000c86:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <convert2euler+0x1c4>)
 8000c88:	681c      	ldr	r4, [r3, #0]
 8000c8a:	ed97 1b04 	vldr	d1, [r7, #16]
 8000c8e:	ed97 0b06 	vldr	d0, [r7, #24]
 8000c92:	f00d fb63 	bl	800e35c <atan2>
 8000c96:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9a:	ed84 7b00 	vstr	d7, [r4]

	// pitch (y-axis rotation)
	double sinp = 2 * (q->w * q->y - q->z * q->x);
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <convert2euler+0x1c0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ca6:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <convert2euler+0x1c0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <convert2euler+0x1c0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <convert2euler+0x1c0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd2:	ed87 7b08 	vstr	d7, [r7, #32]
	if (sinp >= 1)
 8000cd6:	ed97 7b08 	vldr	d7, [r7, #32]
 8000cda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce6:	db07      	blt.n	8000cf8 <convert2euler+0xf0>
	    sinp = sinp+1;
 8000ce8:	ed97 7b08 	vldr	d7, [r7, #32]
 8000cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cf4:	ed87 7b08 	vstr	d7, [r7, #32]
	if (sinp <= -1)
 8000cf8:	ed97 7b08 	vldr	d7, [r7, #32]
 8000cfc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000d00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d08:	d807      	bhi.n	8000d1a <convert2euler+0x112>
		sinp = sinp-1;
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d16:	ed87 7b08 	vstr	d7, [r7, #32]
	angle->pitch = asin(sinp);
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <convert2euler+0x1c4>)
 8000d1c:	681c      	ldr	r4, [r3, #0]
 8000d1e:	ed97 0b08 	vldr	d0, [r7, #32]
 8000d22:	f00d fae9 	bl	800e2f8 <asin>
 8000d26:	eeb0 7b40 	vmov.f64	d7, d0
 8000d2a:	ed84 7b02 	vstr	d7, [r4, #8]

	// yaw (z-axis rotation)
	double siny_cosp = 2 * (q->w * q->z + q->x * q->y);
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <convert2euler+0x1c0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	ed93 7a03 	vldr	s14, [r3, #12]
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <convert2euler+0x1c0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <convert2euler+0x1c0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	edd3 6a00 	vldr	s13, [r3]
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <convert2euler+0x1c0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d62:	ed87 7b02 	vstr	d7, [r7, #8]
	double cosy_cosp = 1 - 2 * (q->y * q->y + q->z * q->z);
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <convert2euler+0x1c0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <convert2euler+0x1c0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <convert2euler+0x1c0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <convert2euler+0x1c0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da2:	ed87 7b00 	vstr	d7, [r7]
	angle->yaw = atan2(siny_cosp, cosy_cosp);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <convert2euler+0x1c4>)
 8000da8:	681c      	ldr	r4, [r3, #0]
 8000daa:	ed97 1b00 	vldr	d1, [r7]
 8000dae:	ed97 0b02 	vldr	d0, [r7, #8]
 8000db2:	f00d fad3 	bl	800e35c <atan2>
 8000db6:	eeb0 7b40 	vmov.f64	d7, d0
 8000dba:	ed84 7b04 	vstr	d7, [r4, #16]
}
 8000dbe:	bf00      	nop
 8000dc0:	372c      	adds	r7, #44	; 0x2c
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	24000018 	.word	0x24000018
 8000dcc:	2401bb70 	.word	0x2401bb70

08000dd0 <showDigit>:
//}
//uint16_t toLowByte(uint16_t num)
//{
//    return num & 0xFF;
//}
void showDigit(uint8_t x0, uint8_t y0, uint8_t num){
 8000dd0:	b4b0      	push	{r4, r5, r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	71bb      	strb	r3, [r7, #6]
 8000dde:	4613      	mov	r3, r2
 8000de0:	717b      	strb	r3, [r7, #5]
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b7b      	cmp	r3, #123	; 0x7b
 8000de6:	f200 809a 	bhi.w	8000f1e <showDigit+0x14e>
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	2b78      	cmp	r3, #120	; 0x78
 8000dee:	f200 8096 	bhi.w	8000f1e <showDigit+0x14e>
	if(num >= 0 && num <= 9){
 8000df2:	797b      	ldrb	r3, [r7, #5]
 8000df4:	2b09      	cmp	r3, #9
 8000df6:	d855      	bhi.n	8000ea4 <showDigit+0xd4>
		for(uint8_t i = num * 5; i < num * 5 + 5; i++)
 8000df8:	797b      	ldrb	r3, [r7, #5]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e046      	b.n	8000e92 <showDigit+0xc2>
		{
			for(uint8_t j = 0; j < 8; j++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	e03d      	b.n	8000e86 <showDigit+0xb6>
			{
				for(uint8_t k = 0; k < 3; k++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	737b      	strb	r3, [r7, #13]
 8000e0e:	e034      	b.n	8000e7a <showDigit+0xaa>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = ((Tahoma5x8[i] & (0x01 << j)) >> j) * 255;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <showDigit+0x158>)
 8000e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	ea01 0203 	and.w	r2, r1, r3
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	fa42 f303 	asr.w	r3, r2, r3
 8000e2c:	b2dc      	uxtb	r4, r3
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	1898      	adds	r0, r3, r2
 8000e36:	7bba      	ldrb	r2, [r7, #14]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	01db      	lsls	r3, r3, #7
 8000e44:	461d      	mov	r5, r3
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <showDigit+0x15c>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	0899      	lsrs	r1, r3, #2
 8000e50:	460b      	mov	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	18ea      	adds	r2, r5, r3
 8000e64:	7b7b      	ldrb	r3, [r7, #13]
 8000e66:	4413      	add	r3, r2
 8000e68:	4403      	add	r3, r0
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	b2d1      	uxtb	r1, r2
 8000e70:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <showDigit+0x160>)
 8000e72:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
 8000e76:	3301      	adds	r3, #1
 8000e78:	737b      	strb	r3, [r7, #13]
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d9c7      	bls.n	8000e10 <showDigit+0x40>
			for(uint8_t j = 0; j < 8; j++)
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	3301      	adds	r3, #1
 8000e84:	73bb      	strb	r3, [r7, #14]
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d9be      	bls.n	8000e0a <showDigit+0x3a>
		for(uint8_t i = num * 5; i < num * 5 + 5; i++)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	7bf9      	ldrb	r1, [r7, #15]
 8000e94:	797b      	ldrb	r3, [r7, #5]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	dbb0      	blt.n	8000e04 <showDigit+0x34>
 8000ea2:	e03d      	b.n	8000f20 <showDigit+0x150>
				}
			}
		}
	}
	else{
		for(uint8_t i = 0; i < 5; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	733b      	strb	r3, [r7, #12]
 8000ea8:	e035      	b.n	8000f16 <showDigit+0x146>
		{
			for(uint8_t j = 0; j < 8; j++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	72fb      	strb	r3, [r7, #11]
 8000eae:	e02c      	b.n	8000f0a <showDigit+0x13a>
			{
				for(uint8_t k = 0; k < 3; k++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	72bb      	strb	r3, [r7, #10]
 8000eb4:	e023      	b.n	8000efe <showDigit+0x12e>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = 0;
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1898      	adds	r0, r3, r2
 8000ebe:	7afa      	ldrb	r2, [r7, #11]
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	441a      	add	r2, r3
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	01db      	lsls	r3, r3, #7
 8000ecc:	461c      	mov	r4, r3
 8000ece:	7b3a      	ldrb	r2, [r7, #12]
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <showDigit+0x15c>)
 8000ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed6:	0899      	lsrs	r1, r3, #2
 8000ed8:	460b      	mov	r3, r1
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	18e2      	adds	r2, r4, r3
 8000eec:	7abb      	ldrb	r3, [r7, #10]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <showDigit+0x160>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 8000ef8:	7abb      	ldrb	r3, [r7, #10]
 8000efa:	3301      	adds	r3, #1
 8000efc:	72bb      	strb	r3, [r7, #10]
 8000efe:	7abb      	ldrb	r3, [r7, #10]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d9d8      	bls.n	8000eb6 <showDigit+0xe6>
			for(uint8_t j = 0; j < 8; j++)
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	3301      	adds	r3, #1
 8000f08:	72fb      	strb	r3, [r7, #11]
 8000f0a:	7afb      	ldrb	r3, [r7, #11]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	d9cf      	bls.n	8000eb0 <showDigit+0xe0>
		for(uint8_t i = 0; i < 5; i++)
 8000f10:	7b3b      	ldrb	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	733b      	strb	r3, [r7, #12]
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d9c6      	bls.n	8000eaa <showDigit+0xda>
 8000f1c:	e000      	b.n	8000f20 <showDigit+0x150>
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000f1e:	bf00      	nop
				}
			}
		}
	}
}
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bcb0      	pop	{r4, r5, r7}
 8000f26:	4770      	bx	lr
 8000f28:	080121a0 	.word	0x080121a0
 8000f2c:	cccccccd 	.word	0xcccccccd
 8000f30:	240002d4 	.word	0x240002d4

08000f34 <showColon>:
void showColon(uint8_t x0, uint8_t y0, uint8_t show)
{
 8000f34:	b4b0      	push	{r4, r5, r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	4613      	mov	r3, r2
 8000f44:	717b      	strb	r3, [r7, #5]
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b7b      	cmp	r3, #123	; 0x7b
 8000f4a:	f200 8092 	bhi.w	8001072 <showColon+0x13e>
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	2b78      	cmp	r3, #120	; 0x78
 8000f52:	f200 808e 	bhi.w	8001072 <showColon+0x13e>
	if(show){
 8000f56:	797b      	ldrb	r3, [r7, #5]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d04d      	beq.n	8000ff8 <showColon+0xc4>
	for(uint8_t i = 50; i < 55; i++)
 8000f5c:	2332      	movs	r3, #50	; 0x32
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e046      	b.n	8000ff0 <showColon+0xbc>
			{
				for(uint8_t j = 0; j < 8; j++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	73bb      	strb	r3, [r7, #14]
 8000f66:	e03d      	b.n	8000fe4 <showColon+0xb0>
				{
					for(uint8_t k = 0; k < 3; k++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	737b      	strb	r3, [r7, #13]
 8000f6c:	e034      	b.n	8000fd8 <showColon+0xa4>
					{
						Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = ((Tahoma5x8[i] & (0x01 << j)) >> j) * 255;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	4a42      	ldr	r2, [pc, #264]	; (800107c <showColon+0x148>)
 8000f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f76:	4619      	mov	r1, r3
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	ea01 0203 	and.w	r2, r1, r3
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	fa42 f303 	asr.w	r3, r2, r3
 8000f8a:	b2dc      	uxtb	r4, r3
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	1898      	adds	r0, r3, r2
 8000f94:	7bba      	ldrb	r2, [r7, #14]
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	441a      	add	r2, r3
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	01db      	lsls	r3, r3, #7
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <showColon+0x14c>)
 8000fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fac:	0899      	lsrs	r1, r3, #2
 8000fae:	460b      	mov	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	18ea      	adds	r2, r5, r3
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4403      	add	r3, r0
 8000fc8:	4622      	mov	r2, r4
 8000fca:	4252      	negs	r2, r2
 8000fcc:	b2d1      	uxtb	r1, r2
 8000fce:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <showColon+0x150>)
 8000fd0:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k < 3; k++)
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	737b      	strb	r3, [r7, #13]
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d9c7      	bls.n	8000f6e <showColon+0x3a>
				for(uint8_t j = 0; j < 8; j++)
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73bb      	strb	r3, [r7, #14]
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d9be      	bls.n	8000f68 <showColon+0x34>
	for(uint8_t i = 50; i < 55; i++)
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b36      	cmp	r3, #54	; 0x36
 8000ff4:	d9b5      	bls.n	8000f62 <showColon+0x2e>
 8000ff6:	e03d      	b.n	8001074 <showColon+0x140>
					}
				}
			}
	}
	else{
		for(uint8_t i = 0; i < 5; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	733b      	strb	r3, [r7, #12]
 8000ffc:	e035      	b.n	800106a <showColon+0x136>
		{
			for(uint8_t j = 0; j < 8; j++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	72fb      	strb	r3, [r7, #11]
 8001002:	e02c      	b.n	800105e <showColon+0x12a>
			{
				for(uint8_t k = 0; k < 3; k++)
 8001004:	2300      	movs	r3, #0
 8001006:	72bb      	strb	r3, [r7, #10]
 8001008:	e023      	b.n	8001052 <showColon+0x11e>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = 0;
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	1898      	adds	r0, r3, r2
 8001012:	7afa      	ldrb	r2, [r7, #11]
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	441a      	add	r2, r3
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	01db      	lsls	r3, r3, #7
 8001020:	461c      	mov	r4, r3
 8001022:	7b3a      	ldrb	r2, [r7, #12]
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <showColon+0x14c>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	0899      	lsrs	r1, r3, #2
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	18e2      	adds	r2, r4, r3
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	4413      	add	r3, r2
 8001044:	4403      	add	r3, r0
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <showColon+0x150>)
 8001048:	2100      	movs	r1, #0
 800104a:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	3301      	adds	r3, #1
 8001050:	72bb      	strb	r3, [r7, #10]
 8001052:	7abb      	ldrb	r3, [r7, #10]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d9d8      	bls.n	800100a <showColon+0xd6>
			for(uint8_t j = 0; j < 8; j++)
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	3301      	adds	r3, #1
 800105c:	72fb      	strb	r3, [r7, #11]
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d9cf      	bls.n	8001004 <showColon+0xd0>
		for(uint8_t i = 0; i < 5; i++)
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	733b      	strb	r3, [r7, #12]
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d9c6      	bls.n	8000ffe <showColon+0xca>
 8001070:	e000      	b.n	8001074 <showColon+0x140>
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8001072:	bf00      	nop
				}
			}
		}
	}
}
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bcb0      	pop	{r4, r5, r7}
 800107a:	4770      	bx	lr
 800107c:	080121a0 	.word	0x080121a0
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	240002d4 	.word	0x240002d4

08001088 <showSlash>:
void showSlash(uint8_t x0, uint8_t y0, uint8_t show)
{
 8001088:	b4b0      	push	{r4, r5, r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	460b      	mov	r3, r1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	717b      	strb	r3, [r7, #5]
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b7b      	cmp	r3, #123	; 0x7b
 800109e:	f200 8092 	bhi.w	80011c6 <showSlash+0x13e>
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b78      	cmp	r3, #120	; 0x78
 80010a6:	f200 808e 	bhi.w	80011c6 <showSlash+0x13e>
	if(show){
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d04d      	beq.n	800114c <showSlash+0xc4>
	for(uint8_t i = 55; i < 60; i++)
 80010b0:	2337      	movs	r3, #55	; 0x37
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e046      	b.n	8001144 <showSlash+0xbc>
			{
				for(uint8_t j = 0; j < 8; j++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	73bb      	strb	r3, [r7, #14]
 80010ba:	e03d      	b.n	8001138 <showSlash+0xb0>
				{
					for(uint8_t k = 0; k < 3; k++)
 80010bc:	2300      	movs	r3, #0
 80010be:	737b      	strb	r3, [r7, #13]
 80010c0:	e034      	b.n	800112c <showSlash+0xa4>
					{
						Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = ((Tahoma5x8[i] & (0x01 << j)) >> j) * 255;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <showSlash+0x148>)
 80010c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ca:	4619      	mov	r1, r3
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	ea01 0203 	and.w	r2, r1, r3
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	fa42 f303 	asr.w	r3, r2, r3
 80010de:	b2dc      	uxtb	r4, r3
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	1898      	adds	r0, r3, r2
 80010e8:	7bba      	ldrb	r2, [r7, #14]
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	441a      	add	r2, r3
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	01db      	lsls	r3, r3, #7
 80010f6:	461d      	mov	r5, r3
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <showSlash+0x14c>)
 80010fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001100:	0899      	lsrs	r1, r3, #2
 8001102:	460b      	mov	r3, r1
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	18ea      	adds	r2, r5, r3
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	4413      	add	r3, r2
 800111a:	4403      	add	r3, r0
 800111c:	4622      	mov	r2, r4
 800111e:	4252      	negs	r2, r2
 8001120:	b2d1      	uxtb	r1, r2
 8001122:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <showSlash+0x150>)
 8001124:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k < 3; k++)
 8001126:	7b7b      	ldrb	r3, [r7, #13]
 8001128:	3301      	adds	r3, #1
 800112a:	737b      	strb	r3, [r7, #13]
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d9c7      	bls.n	80010c2 <showSlash+0x3a>
				for(uint8_t j = 0; j < 8; j++)
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	3301      	adds	r3, #1
 8001136:	73bb      	strb	r3, [r7, #14]
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d9be      	bls.n	80010bc <showSlash+0x34>
	for(uint8_t i = 55; i < 60; i++)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3301      	adds	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b3b      	cmp	r3, #59	; 0x3b
 8001148:	d9b5      	bls.n	80010b6 <showSlash+0x2e>
 800114a:	e03d      	b.n	80011c8 <showSlash+0x140>
					}
				}
			}
	}
	else{
		for(uint8_t i = 0; i < 5; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	733b      	strb	r3, [r7, #12]
 8001150:	e035      	b.n	80011be <showSlash+0x136>
		{
			for(uint8_t j = 0; j < 8; j++)
 8001152:	2300      	movs	r3, #0
 8001154:	72fb      	strb	r3, [r7, #11]
 8001156:	e02c      	b.n	80011b2 <showSlash+0x12a>
			{
				for(uint8_t k = 0; k < 3; k++)
 8001158:	2300      	movs	r3, #0
 800115a:	72bb      	strb	r3, [r7, #10]
 800115c:	e023      	b.n	80011a6 <showSlash+0x11e>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = 0;
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	1898      	adds	r0, r3, r2
 8001166:	7afa      	ldrb	r2, [r7, #11]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	441a      	add	r2, r3
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	01db      	lsls	r3, r3, #7
 8001174:	461c      	mov	r4, r3
 8001176:	7b3a      	ldrb	r2, [r7, #12]
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <showSlash+0x14c>)
 800117a:	fba3 1302 	umull	r1, r3, r3, r2
 800117e:	0899      	lsrs	r1, r3, #2
 8001180:	460b      	mov	r3, r1
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	18e2      	adds	r2, r4, r3
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	4413      	add	r3, r2
 8001198:	4403      	add	r3, r0
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <showSlash+0x150>)
 800119c:	2100      	movs	r1, #0
 800119e:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	3301      	adds	r3, #1
 80011a4:	72bb      	strb	r3, [r7, #10]
 80011a6:	7abb      	ldrb	r3, [r7, #10]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d9d8      	bls.n	800115e <showSlash+0xd6>
			for(uint8_t j = 0; j < 8; j++)
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	3301      	adds	r3, #1
 80011b0:	72fb      	strb	r3, [r7, #11]
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	d9cf      	bls.n	8001158 <showSlash+0xd0>
		for(uint8_t i = 0; i < 5; i++)
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	733b      	strb	r3, [r7, #12]
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d9c6      	bls.n	8001152 <showSlash+0xca>
 80011c4:	e000      	b.n	80011c8 <showSlash+0x140>
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 80011c6:	bf00      	nop
				}
			}
		}
	}
}
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bcb0      	pop	{r4, r5, r7}
 80011ce:	4770      	bx	lr
 80011d0:	080121a0 	.word	0x080121a0
 80011d4:	cccccccd 	.word	0xcccccccd
 80011d8:	240002d4 	.word	0x240002d4

080011dc <clearScreen>:
void clearScreen(){
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
	for(long i = 0; i < LCD_BUFFER_SIZE; i+=3){
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e011      	b.n	800120c <clearScreen+0x30>
		Framememory[i]=0;	// Red = 0
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <clearScreen+0x48>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
		Framememory[i+1]=0;	// Green = 0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <clearScreen+0x48>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	54d1      	strb	r1, [r2, r3]
		Framememory[i+2]=0;	// Blue = 0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3302      	adds	r3, #2
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <clearScreen+0x48>)
 8001202:	2100      	movs	r1, #0
 8001204:	54d1      	strb	r1, [r2, r3]
	for(long i = 0; i < LCD_BUFFER_SIZE; i+=3){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3303      	adds	r3, #3
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001212:	dbe9      	blt.n	80011e8 <clearScreen+0xc>
//			HAL_Delay(1);
	}
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	240002d4 	.word	0x240002d4

08001228 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4]; // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_TIMEx_PWMN_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001234:	f00a fd95 	bl	800bd62 <HAL_TIMEx_PWMN_Stop_DMA>
	datasentflag=1;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2401bb98 	.word	0x2401bb98
 800124c:	2400c2f8 	.word	0x2400c2f8

08001250 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0]=LEDnum;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	b2d9      	uxtb	r1, r3
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <Set_LED+0x58>)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1]=Green;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	b2d9      	uxtb	r1, r3
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <Set_LED+0x58>)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	460a      	mov	r2, r1
 8001278:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2]=Red;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	b2d9      	uxtb	r1, r3
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <Set_LED+0x58>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3]=Blue;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <Set_LED+0x58>)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	460a      	mov	r2, r1
 8001298:	70da      	strb	r2, [r3, #3]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2401b3b0 	.word	0x2401b3b0
 80012ac:	00000000 	.word	0x00000000

080012b0 <Set_Brightness>:

#define PI 3.141459265

void Set_Brightness(int brightness)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	ed2d 8b02 	vpush	{d8}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b2d      	cmp	r3, #45	; 0x2d
 80012c0:	dd01      	ble.n	80012c6 <Set_Brightness+0x16>
 80012c2:	232d      	movs	r3, #45	; 0x2d
 80012c4:	607b      	str	r3, [r7, #4]
	for(int i=0; i<MAX_LED; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e051      	b.n	8001370 <Set_Brightness+0xc0>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80012cc:	4a32      	ldr	r2, [pc, #200]	; (8001398 <Set_Brightness+0xe8>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80012d4:	4a31      	ldr	r2, [pc, #196]	; (800139c <Set_Brightness+0xec>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for(int j=1; j<4; j++)
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e040      	b.n	8001364 <Set_Brightness+0xb4>
		{
			float angle = 90 - brightness;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f0:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI/180;
 80012f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001388 <Set_Brightness+0xd8>
 8001300:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001304:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001390 <Set_Brightness+0xe0>
 8001308:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800130c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <Set_Brightness+0xe8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	441a      	add	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001332:	eeb0 0b47 	vmov.f64	d0, d7
 8001336:	f00c ffaf 	bl	800e298 <tan>
 800133a:	eeb0 6b40 	vmov.f64	d6, d0
 800133e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001342:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001346:	edc7 7a00 	vstr	s15, [r7]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2d9      	uxtb	r1, r3
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <Set_Brightness+0xec>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	441a      	add	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
		for(int j=1; j<4; j++)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	3301      	adds	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b03      	cmp	r3, #3
 8001368:	ddbb      	ble.n	80012e2 <Set_Brightness+0x32>
	for(int i=0; i<MAX_LED; i++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b07      	cmp	r3, #7
 8001374:	ddaa      	ble.n	80012cc <Set_Brightness+0x1c>
		}
	}
#endif
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	ecbd 8b02 	vpop	{d8}
 8001382:	bd80      	pop	{r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	6527212c 	.word	0x6527212c
 800138c:	400921b5 	.word	0x400921b5
 8001390:	00000000 	.word	0x00000000
 8001394:	40668000 	.word	0x40668000
 8001398:	2401b3b0 	.word	0x2401b3b0
 800139c:	2401b8e0 	.word	0x2401b8e0

080013a0 <ws2812b_send>:

uint16_t pwmData[(24*MAX_LED)+50];

void ws2812b_send(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	e036      	b.n	800141e <ws2812b_send+0x7e>
	{
	#if USE_BRIGHTNESS
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80013b0:	4a2e      	ldr	r2, [pc, #184]	; (800146c <ws2812b_send+0xcc>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	041a      	lsls	r2, r3, #16
 80013bc:	492b      	ldr	r1, [pc, #172]	; (800146c <ws2812b_send+0xcc>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	789b      	ldrb	r3, [r3, #2]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	431a      	orrs	r2, r3
 80013ca:	4928      	ldr	r1, [pc, #160]	; (800146c <ws2812b_send+0xcc>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	607b      	str	r3, [r7, #4]
	#else
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
	#endif

			for (int i=23; i>=0; i--)
 80013d8:	2317      	movs	r3, #23
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e019      	b.n	8001412 <ws2812b_send+0x72>
			{
				if (color&(1<<i))
 80013de:	2201      	movs	r2, #1
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <ws2812b_send+0x5c>
				{
					pwmData[indx] = 200;  // 2/3 of 300
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <ws2812b_send+0xd0>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	21c8      	movs	r1, #200	; 0xc8
 80013f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013fa:	e004      	b.n	8001406 <ws2812b_send+0x66>
				}

				else pwmData[indx] = 100;  // 1/3 of 300
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <ws2812b_send+0xd0>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2164      	movs	r1, #100	; 0x64
 8001402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				indx++;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
			for (int i=23; i>=0; i--)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3b01      	subs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dae2      	bge.n	80013de <ws2812b_send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	3301      	adds	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b07      	cmp	r3, #7
 8001422:	ddc5      	ble.n	80013b0 <ws2812b_send+0x10>
			}

	}

	for (int i=0; i<50; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	e00a      	b.n	8001440 <ws2812b_send+0xa0>
	{
		pwmData[indx] = 0;
 800142a:	4a11      	ldr	r2, [pc, #68]	; (8001470 <ws2812b_send+0xd0>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2100      	movs	r1, #0
 8001430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b31      	cmp	r3, #49	; 0x31
 8001444:	ddf1      	ble.n	800142a <ws2812b_send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <ws2812b_send+0xd0>)
 800144c:	2100      	movs	r1, #0
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <ws2812b_send+0xd4>)
 8001450:	f009 fb3c 	bl	800aacc <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001454:	bf00      	nop
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <ws2812b_send+0xd8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0fb      	beq.n	8001456 <ws2812b_send+0xb6>
	datasentflag = 0;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <ws2812b_send+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2401b8e0 	.word	0x2401b8e0
 8001470:	2401b988 	.word	0x2401b988
 8001474:	2401bb98 	.word	0x2401bb98
 8001478:	2400c2f8 	.word	0x2400c2f8
 800147c:	00000000 	.word	0x00000000

08001480 <Get_Omega>:
double omega_x;
double omega_y;
double omega_z;

void Get_Omega(double new_angle_x, double new_angle_y, double new_angle_z)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	ed87 0b04 	vstr	d0, [r7, #16]
 800148a:	ed87 1b02 	vstr	d1, [r7, #8]
 800148e:	ed87 2b00 	vstr	d2, [r7]
	omega_x = fabs(new_angle_x - old_angle_x);
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <Get_Omega+0xf0>)
 8001494:	ed93 7b00 	vldr	d7, [r3]
 8001498:	ed97 6b04 	vldr	d6, [r7, #16]
 800149c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014a0:	eeb0 7bc7 	vabs.f64	d7, d7
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <Get_Omega+0xf4>)
 80014a6:	ed83 7b00 	vstr	d7, [r3]
	omega_y = fabs(new_angle_y - old_angle_y);
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <Get_Omega+0xf8>)
 80014ac:	ed93 7b00 	vldr	d7, [r3]
 80014b0:	ed97 6b02 	vldr	d6, [r7, #8]
 80014b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014b8:	eeb0 7bc7 	vabs.f64	d7, d7
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <Get_Omega+0xfc>)
 80014be:	ed83 7b00 	vstr	d7, [r3]
	omega_z = fabs(new_angle_z - old_angle_z);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <Get_Omega+0x100>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ed97 6b00 	vldr	d6, [r7]
 80014cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014d0:	eeb0 7bc7 	vabs.f64	d7, d7
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <Get_Omega+0x104>)
 80014d6:	ed83 7b00 	vstr	d7, [r3]

	if(omega_x > 6)
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <Get_Omega+0xf4>)
 80014dc:	ed93 7b00 	vldr	d7, [r3]
 80014e0:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80014e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd05      	ble.n	80014fa <Get_Omega+0x7a>
	{
		omega_x = 0.3;
 80014ee:	4921      	ldr	r1, [pc, #132]	; (8001574 <Get_Omega+0xf4>)
 80014f0:	a31d      	add	r3, pc, #116	; (adr r3, 8001568 <Get_Omega+0xe8>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(omega_y > 6)
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <Get_Omega+0xfc>)
 80014fc:	ed93 7b00 	vldr	d7, [r3]
 8001500:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001504:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	dd05      	ble.n	800151a <Get_Omega+0x9a>
	{
		omega_y = 0.3;
 800150e:	491b      	ldr	r1, [pc, #108]	; (800157c <Get_Omega+0xfc>)
 8001510:	a315      	add	r3, pc, #84	; (adr r3, 8001568 <Get_Omega+0xe8>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(omega_z > 6)
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Get_Omega+0x104>)
 800151c:	ed93 7b00 	vldr	d7, [r3]
 8001520:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd05      	ble.n	800153a <Get_Omega+0xba>
	{
		omega_z = 0.3;
 800152e:	4915      	ldr	r1, [pc, #84]	; (8001584 <Get_Omega+0x104>)
 8001530:	a30d      	add	r3, pc, #52	; (adr r3, 8001568 <Get_Omega+0xe8>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	e9c1 2300 	strd	r2, r3, [r1]
	}

	old_angle_x = new_angle_x;
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <Get_Omega+0xf0>)
 800153c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001540:	e9c1 2300 	strd	r2, r3, [r1]
	old_angle_y = new_angle_y;
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <Get_Omega+0xf8>)
 8001546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800154a:	e9c1 2300 	strd	r2, r3, [r1]
	old_angle_z = new_angle_z;
 800154e:	490c      	ldr	r1, [pc, #48]	; (8001580 <Get_Omega+0x100>)
 8001550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001554:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	f3af 8000 	nop.w
 8001568:	33333333 	.word	0x33333333
 800156c:	3fd33333 	.word	0x3fd33333
 8001570:	2400c300 	.word	0x2400c300
 8001574:	2400c330 	.word	0x2400c330
 8001578:	2400c308 	.word	0x2400c308
 800157c:	2401b980 	.word	0x2401b980
 8001580:	2400c310 	.word	0x2400c310
 8001584:	2401b900 	.word	0x2401b900

08001588 <Set_All_LED>:

void Set_All_LED(double x, double y, double z)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001592:	ed87 1b02 	vstr	d1, [r7, #8]
 8001596:	ed87 2b00 	vstr	d2, [r7]
	int red = x*40;
 800159a:	ed97 7b04 	vldr	d7, [r7, #16]
 800159e:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001658 <Set_All_LED+0xd0>
 80015a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80015aa:	ee17 3a90 	vmov	r3, s15
 80015ae:	623b      	str	r3, [r7, #32]
	int green = y*40;
 80015b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001658 <Set_All_LED+0xd0>
 80015b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	61fb      	str	r3, [r7, #28]
	int blue = z*40;
 80015c6:	ed97 7b00 	vldr	d7, [r7]
 80015ca:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001658 <Set_All_LED+0xd0>
 80015ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80015d6:	ee17 3a90 	vmov	r3, s15
 80015da:	61bb      	str	r3, [r7, #24]

	for(int i=0; i<8; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	e008      	b.n	80015f4 <Set_All_LED+0x6c>
	{
		Set_LED(i,red,green,blue);
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	6a39      	ldr	r1, [r7, #32]
 80015e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015ea:	f7ff fe31 	bl	8001250 <Set_LED>
	for(int i=0; i<8; i++)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	3301      	adds	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	ddf3      	ble.n	80015e2 <Set_All_LED+0x5a>
	}

	if (x+y+z > 6)
 80015fa:	ed97 6b04 	vldr	d6, [r7, #16]
 80015fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8001602:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001606:	ed97 7b00 	vldr	d7, [r7]
 800160a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800160e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8001612:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	dd03      	ble.n	8001624 <Set_All_LED+0x9c>
	{
		Set_Brightness(45);
 800161c:	202d      	movs	r0, #45	; 0x2d
 800161e:	f7ff fe47 	bl	80012b0 <Set_Brightness>
	}
	else
	{
		Set_Brightness((x+y+z)*7);
	}
}
 8001622:	e013      	b.n	800164c <Set_All_LED+0xc4>
		Set_Brightness((x+y+z)*7);
 8001624:	ed97 6b04 	vldr	d6, [r7, #16]
 8001628:	ed97 7b02 	vldr	d7, [r7, #8]
 800162c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001630:	ed97 7b00 	vldr	d7, [r7]
 8001634:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001638:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 800163c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001640:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001644:	ee17 0a90 	vmov	r0, s15
 8001648:	f7ff fe32 	bl	80012b0 <Set_Brightness>
}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	f3af 8000 	nop.w
 8001658:	00000000 	.word	0x00000000
 800165c:	40440000 	.word	0x40440000

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	ed2d 8b02 	vpush	{d8}
 8001666:	b098      	sub	sp, #96	; 0x60
 8001668:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	float ax=0;
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	657b      	str	r3, [r7, #84]	; 0x54
	float ay=0;
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
	float dt=0.5;
 8001676:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
	float vx=ax*dt;
 800167c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001680:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001688:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float vy=ay*dt;
 800168c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001690:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float posx=59.0;
 800169c:	4bb6      	ldr	r3, [pc, #728]	; (8001978 <main+0x318>)
 800169e:	653b      	str	r3, [r7, #80]	; 0x50
	float posy=55.0;
 80016a0:	4bb6      	ldr	r3, [pc, #728]	; (800197c <main+0x31c>)
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	float sx=0.0;
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
	float sy=0.0;
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80016b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b4:	64bb      	str	r3, [r7, #72]	; 0x48
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80016b6:	bf00      	nop
 80016b8:	4bb1      	ldr	r3, [pc, #708]	; (8001980 <main+0x320>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <main+0x6e>
 80016c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dcf4      	bgt.n	80016b8 <main+0x58>
		;
	if (timeout < 0) {
 80016ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da01      	bge.n	80016d8 <main+0x78>
		Error_Handler();
 80016d4:	f000 fe50 	bl	8002378 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d8:	f001 fb74 	bl	8002dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016dc:	f000 fab6 	bl	8001c4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80016e0:	4ba7      	ldr	r3, [pc, #668]	; (8001980 <main+0x320>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4aa6      	ldr	r2, [pc, #664]	; (8001980 <main+0x320>)
 80016e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4ba3      	ldr	r3, [pc, #652]	; (8001980 <main+0x320>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80016fe:	2000      	movs	r0, #0
 8001700:	f005 f96c 	bl	80069dc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8001704:	2100      	movs	r1, #0
 8001706:	2000      	movs	r0, #0
 8001708:	f005 f982 	bl	8006a10 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8001712:	bf00      	nop
 8001714:	4b9a      	ldr	r3, [pc, #616]	; (8001980 <main+0x320>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d104      	bne.n	800172a <main+0xca>
 8001720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001722:	1e5a      	subs	r2, r3, #1
 8001724:	64ba      	str	r2, [r7, #72]	; 0x48
 8001726:	2b00      	cmp	r3, #0
 8001728:	dcf4      	bgt.n	8001714 <main+0xb4>
		;
	if (timeout < 0) {
 800172a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800172c:	2b00      	cmp	r3, #0
 800172e:	da01      	bge.n	8001734 <main+0xd4>
		Error_Handler();
 8001730:	f000 fe22 	bl	8002378 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001734:	f000 fd72 	bl	800221c <MX_GPIO_Init>
  MX_ETH_Init();
 8001738:	f000 fb0e 	bl	8001d58 <MX_ETH_Init>
  MX_DMA_Init();
 800173c:	f000 fd36 	bl	80021ac <MX_DMA_Init>
  MX_SPI1_Init();
 8001740:	f000 fbb2 	bl	8001ea8 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001744:	f000 fd00 	bl	8002148 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8001748:	f000 fb52 	bl	8001df0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800174c:	f000 fcb0 	bl	80020b0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001750:	f000 fc02 	bl	8001f58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//	uint8_t x = 0;
	ST7735.hspi = &hspi1;
 8001754:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <main+0x324>)
 8001756:	4a8c      	ldr	r2, [pc, #560]	; (8001988 <main+0x328>)
 8001758:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 800175a:	4b8a      	ldr	r3, [pc, #552]	; (8001984 <main+0x324>)
 800175c:	4a8b      	ldr	r2, [pc, #556]	; (800198c <main+0x32c>)
 800175e:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8001760:	4b88      	ldr	r3, [pc, #544]	; (8001984 <main+0x324>)
 8001762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001766:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8001768:	4b86      	ldr	r3, [pc, #536]	; (8001984 <main+0x324>)
 800176a:	4a88      	ldr	r2, [pc, #544]	; (800198c <main+0x32c>)
 800176c:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <main+0x324>)
 8001770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001774:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8001776:	4b83      	ldr	r3, [pc, #524]	; (8001984 <main+0x324>)
 8001778:	4a85      	ldr	r2, [pc, #532]	; (8001990 <main+0x330>)
 800177a:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 800177c:	4b81      	ldr	r3, [pc, #516]	; (8001984 <main+0x324>)
 800177e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001782:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 8001784:	487f      	ldr	r0, [pc, #508]	; (8001984 <main+0x324>)
 8001786:	f7ff f819 	bl	80007bc <LCD_init>
	LCD_flush(&ST7735);
 800178a:	487e      	ldr	r0, [pc, #504]	; (8001984 <main+0x324>)
 800178c:	f7ff f8d0 	bl	8000930 <LCD_flush>

	uint8_t Round = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t j = 0; // Show Colon Logic
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	clearScreen();
 800179c:	f7ff fd1e 	bl	80011dc <clearScreen>

	uint8_t MSG[35] = {'\0'};				// Message buffer for debug
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	221f      	movs	r2, #31
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00d fecf 	bl	800f550 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GetTick() - lastUpdate2 >= 20)		// Lock shared variable (quaternion)
 80017b2:	f001 fb8d 	bl	8002ed0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	4b76      	ldr	r3, [pc, #472]	; (8001994 <main+0x334>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b13      	cmp	r3, #19
 80017c0:	f240 8172 	bls.w	8001aa8 <main+0x448>
		{
			lastUpdate2 = HAL_GetTick();
 80017c4:	f001 fb84 	bl	8002ed0 <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a72      	ldr	r2, [pc, #456]	; (8001994 <main+0x334>)
 80017cc:	6013      	str	r3, [r2, #0]
			while(1){
				if(HAL_HSEM_FastTake(1) == HAL_OK) break;	// Wait until shared memory is available then lock it
 80017ce:	2001      	movs	r0, #1
 80017d0:	f005 f904 	bl	80069dc <HAL_HSEM_FastTake>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d000      	beq.n	80017dc <main+0x17c>
 80017da:	e7f8      	b.n	80017ce <main+0x16e>
 80017dc:	bf00      	nop
			}

			// Read shared quaternion components to display
//			len = sprintf(MSG, "q:%.2f\t%.2f\t%.2f\t%.2f\n", q->x, q->y, q->z, q->w);	// Read quaternion from shared memory to print out

			HAL_HSEM_Release(1, 0);				// Unlock shared variable
 80017de:	2100      	movs	r1, #0
 80017e0:	2001      	movs	r0, #1
 80017e2:	f005 f915 	bl	8006a10 <HAL_HSEM_Release>
			//klui
			convert2euler();
 80017e6:	f7ff fa0f 	bl	8000c08 <convert2euler>

			//klui code
			if(angle->roll >0){
 80017ea:	4b6b      	ldr	r3, [pc, #428]	; (8001998 <main+0x338>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	ed93 7b00 	vldr	d7, [r3]
 80017f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	dd10      	ble.n	800181e <main+0x1be>
				ax=(angle->roll-3.14)*10;
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <main+0x338>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	ed93 7b00 	vldr	d7, [r3]
 8001804:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001970 <main+0x310>
 8001808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800180c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001810:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001814:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001818:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800181c:	e00f      	b.n	800183e <main+0x1de>
			}
			else{
				ax=(angle->roll+3.14)*10;
 800181e:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <main+0x338>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	ed93 7b00 	vldr	d7, [r3]
 8001826:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001970 <main+0x310>
 800182a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800182e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001832:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800183a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			}
			ay=(angle->pitch)*10;
 800183e:	4b56      	ldr	r3, [pc, #344]	; (8001998 <main+0x338>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	ed93 7b02 	vldr	d7, [r3, #8]
 8001846:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800184a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800184e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001852:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			len = sprintf(MSG, "q:%.2f\t%.2f\n", ax, ay);	// Read quaternion from shared memory to print out
 8001856:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800185a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800185e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001866:	1d38      	adds	r0, r7, #4
 8001868:	ed8d 7b00 	vstr	d7, [sp]
 800186c:	ec53 2b16 	vmov	r2, r3, d6
 8001870:	494a      	ldr	r1, [pc, #296]	; (800199c <main+0x33c>)
 8001872:	f00e fab7 	bl	800fde4 <siprintf>
 8001876:	62b8      	str	r0, [r7, #40]	; 0x28

			HAL_UART_Transmit(&huart3, MSG, len, 100);	// Print quaternion for debug (via serial)
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	b29a      	uxth	r2, r3
 800187c:	1d39      	adds	r1, r7, #4
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	4847      	ldr	r0, [pc, #284]	; (80019a0 <main+0x340>)
 8001882:	f00a fc8c 	bl	800c19e <HAL_UART_Transmit>
			vx=ax*dt;	// Update ball x speed
 8001886:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800188a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800188e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001892:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			vy=ay*dt;	// Update ball y speed
 8001896:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800189a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			sx=vx*dt;
 80018a6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80018aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			sy=vy*dt;
 80018b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80018ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			posx+=sx;
 80018c6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80018ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			posy+=sy;
 80018d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			clearPosition();
 80018e6:	f7ff f835 	bl	8000954 <clearPosition>
			circle(round(posx),round(posy),10);
 80018ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80018ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f2:	eeb0 0b47 	vmov.f64	d0, d7
 80018f6:	f00c fc89 	bl	800e20c <round>
 80018fa:	eeb0 7b40 	vmov.f64	d7, d0
 80018fe:	eebd 8bc7 	vcvt.s32.f64	s16, d7
 8001902:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001906:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800190a:	eeb0 0b47 	vmov.f64	d0, d7
 800190e:	f00c fc7d 	bl	800e20c <round>
 8001912:	eeb0 7b40 	vmov.f64	d7, d0
 8001916:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800191a:	220a      	movs	r2, #10
 800191c:	ee17 1a90 	vmov	r1, s15
 8001920:	ee18 0a10 	vmov	r0, s16
 8001924:	f7ff f8de 	bl	8000ae4 <circle>
			coodinate2framememory();
 8001928:	f7ff f91c 	bl	8000b64 <coodinate2framememory>

			// Limit x position
			if(posx>118 || (posx==118 && vx>0)){
 800192c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001930:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80019a4 <main+0x344>
 8001934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	dc0f      	bgt.n	800195e <main+0x2fe>
 800193e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001942:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80019a4 <main+0x344>
 8001946:	eef4 7a47 	vcmp.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d12f      	bne.n	80019b0 <main+0x350>
 8001950:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	dd28      	ble.n	80019b0 <main+0x350>
				vx=0;
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
				posx=118;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <main+0x348>)
 8001966:	653b      	str	r3, [r7, #80]	; 0x50
 8001968:	e03d      	b.n	80019e6 <main+0x386>
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	51eb851f 	.word	0x51eb851f
 8001974:	40091eb8 	.word	0x40091eb8
 8001978:	426c0000 	.word	0x426c0000
 800197c:	425c0000 	.word	0x425c0000
 8001980:	58024400 	.word	0x58024400
 8001984:	2400c2dc 	.word	0x2400c2dc
 8001988:	2401bbe4 	.word	0x2401bbe4
 800198c:	58020c00 	.word	0x58020c00
 8001990:	58021800 	.word	0x58021800
 8001994:	2400c2d8 	.word	0x2400c2d8
 8001998:	2401bb70 	.word	0x2401bb70
 800199c:	08012180 	.word	0x08012180
 80019a0:	2401b448 	.word	0x2401b448
 80019a4:	42ec0000 	.word	0x42ec0000
 80019a8:	42ec0000 	.word	0x42ec0000
 80019ac:	42dc0000 	.word	0x42dc0000
			}
			else if(posx<0 || (posx==0 && vx<0)){
 80019b0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80019b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d40d      	bmi.n	80019da <main+0x37a>
 80019be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80019c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d10c      	bne.n	80019e6 <main+0x386>
 80019cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80019d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	d505      	bpl.n	80019e6 <main+0x386>
				vx=0;
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
				posx=0;
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
			}
			// Limit y position
			if(posy>110 || (posy==110 && vy>0)){
 80019e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80019ea:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80019ac <main+0x34c>
 80019ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	dc0f      	bgt.n	8001a18 <main+0x3b8>
 80019f8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80019fc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 80019ac <main+0x34c>
 8001a00:	eef4 7a47 	vcmp.f32	s15, s14
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d10c      	bne.n	8001a24 <main+0x3c4>
 8001a0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	dd05      	ble.n	8001a24 <main+0x3c4>
				vy=0;
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
				posy=110;
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <main+0x5c8>)
 8001a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a22:	e01a      	b.n	8001a5a <main+0x3fa>
			}
			else if(posy<0 || (posy==0 && vy<0)){
 8001a24:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	d40d      	bmi.n	8001a4e <main+0x3ee>
 8001a32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d10c      	bne.n	8001a5a <main+0x3fa>
 8001a40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d505      	bpl.n	8001a5a <main+0x3fa>
				vy=0;
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
				posy=0;
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			//end klui code

			//make
			Get_Omega(angle->roll, angle->pitch, angle->yaw);
 8001a5a:	4b74      	ldr	r3, [pc, #464]	; (8001c2c <main+0x5cc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	ed93 7b00 	vldr	d7, [r3]
 8001a62:	4b72      	ldr	r3, [pc, #456]	; (8001c2c <main+0x5cc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	ed93 6b02 	vldr	d6, [r3, #8]
 8001a6a:	4b70      	ldr	r3, [pc, #448]	; (8001c2c <main+0x5cc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	ed93 5b04 	vldr	d5, [r3, #16]
 8001a72:	eeb0 2b45 	vmov.f64	d2, d5
 8001a76:	eeb0 1b46 	vmov.f64	d1, d6
 8001a7a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a7e:	f7ff fcff 	bl	8001480 <Get_Omega>
			Set_All_LED(omega_x, omega_y, omega_z);
 8001a82:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <main+0x5d0>)
 8001a84:	ed93 7b00 	vldr	d7, [r3]
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <main+0x5d4>)
 8001a8a:	ed93 6b00 	vldr	d6, [r3]
 8001a8e:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <main+0x5d8>)
 8001a90:	ed93 5b00 	vldr	d5, [r3]
 8001a94:	eeb0 2b45 	vmov.f64	d2, d5
 8001a98:	eeb0 1b46 	vmov.f64	d1, d6
 8001a9c:	eeb0 0b47 	vmov.f64	d0, d7
 8001aa0:	f7ff fd72 	bl	8001588 <Set_All_LED>
			ws2812b_send();
 8001aa4:	f7ff fc7c 	bl	80013a0 <ws2812b_send>

		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(HAL_GetTick() - lastUpdate > 100)
 8001aa8:	f001 fa12 	bl	8002ed0 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <main+0x5dc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	f67f ae7c 	bls.w	80017b2 <main+0x152>
		  {
			  lastUpdate = HAL_GetTick();
 8001aba:	f001 fa09 	bl	8002ed0 <HAL_GetTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a5e      	ldr	r2, [pc, #376]	; (8001c3c <main+0x5dc>)
 8001ac2:	6013      	str	r3, [r2, #0]
			  Round++;
 8001ac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  if(Round >= 5){Round=0; j^=1;}
 8001ace:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d908      	bls.n	8001ae8 <main+0x488>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001adc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4955      	ldr	r1, [pc, #340]	; (8001c40 <main+0x5e0>)
 8001aec:	4855      	ldr	r0, [pc, #340]	; (8001c44 <main+0x5e4>)
 8001aee:	f007 fd85 	bl	80095fc <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8001af2:	2201      	movs	r2, #1
 8001af4:	4954      	ldr	r1, [pc, #336]	; (8001c48 <main+0x5e8>)
 8001af6:	4853      	ldr	r0, [pc, #332]	; (8001c44 <main+0x5e4>)
 8001af8:	f007 fe64 	bl	80097c4 <HAL_RTC_GetDate>

			  showDigit(7, 0, (NowTime.Hours & 0xF0) >> 4);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <main+0x5e0>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	2007      	movs	r0, #7
 8001b0a:	f7ff f961 	bl	8000dd0 <showDigit>
			  showDigit(13, 0, NowTime.Hours & 0x0F);
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <main+0x5e0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	200d      	movs	r0, #13
 8001b1e:	f7ff f957 	bl	8000dd0 <showDigit>
			  showColon(19,	0,	j);
 8001b22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b26:	461a      	mov	r2, r3
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2013      	movs	r0, #19
 8001b2c:	f7ff fa02 	bl	8000f34 <showColon>
			  showDigit(25, 0, (NowTime.Minutes & 0xF0) >> 4);
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <main+0x5e0>)
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2019      	movs	r0, #25
 8001b3e:	f7ff f947 	bl	8000dd0 <showDigit>
			  showDigit(31, 0, NowTime.Minutes & 0x0F);
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <main+0x5e0>)
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	201f      	movs	r0, #31
 8001b52:	f7ff f93d 	bl	8000dd0 <showDigit>
			  showColon(37,	0,	j);
 8001b56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2025      	movs	r0, #37	; 0x25
 8001b60:	f7ff f9e8 	bl	8000f34 <showColon>
			  showDigit(43, 0, (NowTime.Seconds & 0xF0) >> 4);
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <main+0x5e0>)
 8001b66:	789b      	ldrb	r3, [r3, #2]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2100      	movs	r1, #0
 8001b70:	202b      	movs	r0, #43	; 0x2b
 8001b72:	f7ff f92d 	bl	8000dd0 <showDigit>
			  showDigit(49, 0, NowTime.Seconds & 0x0F);
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <main+0x5e0>)
 8001b78:	789b      	ldrb	r3, [r3, #2]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	2031      	movs	r0, #49	; 0x31
 8001b86:	f7ff f923 	bl	8000dd0 <showDigit>

			  showDigit(61, 0, (NowDate.Date & 0xF0) >> 4);
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <main+0x5e8>)
 8001b8c:	789b      	ldrb	r3, [r3, #2]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	203d      	movs	r0, #61	; 0x3d
 8001b98:	f7ff f91a 	bl	8000dd0 <showDigit>
			  showDigit(67, 0, NowDate.Date & 0x0F);
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <main+0x5e8>)
 8001b9e:	789b      	ldrb	r3, [r3, #2]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2043      	movs	r0, #67	; 0x43
 8001bac:	f7ff f910 	bl	8000dd0 <showDigit>
			  showSlash(73, 0, 1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2049      	movs	r0, #73	; 0x49
 8001bb6:	f7ff fa67 	bl	8001088 <showSlash>
			  showDigit(79, 0, (NowDate.Month & 0xF0) >> 4);
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <main+0x5e8>)
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	204f      	movs	r0, #79	; 0x4f
 8001bc8:	f7ff f902 	bl	8000dd0 <showDigit>
			  showDigit(85, 0, NowDate.Month & 0x0F);
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <main+0x5e8>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2055      	movs	r0, #85	; 0x55
 8001bdc:	f7ff f8f8 	bl	8000dd0 <showDigit>
			  showSlash(91, 0, 1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2100      	movs	r1, #0
 8001be4:	205b      	movs	r0, #91	; 0x5b
 8001be6:	f7ff fa4f 	bl	8001088 <showSlash>
			  showDigit(97, 0, 2);
 8001bea:	2202      	movs	r2, #2
 8001bec:	2100      	movs	r1, #0
 8001bee:	2061      	movs	r0, #97	; 0x61
 8001bf0:	f7ff f8ee 	bl	8000dd0 <showDigit>
			  showDigit(103, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2067      	movs	r0, #103	; 0x67
 8001bfa:	f7ff f8e9 	bl	8000dd0 <showDigit>
			  showDigit(109, 0, (NowDate.Year & 0xF0) >> 4);
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <main+0x5e8>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	2100      	movs	r1, #0
 8001c0a:	206d      	movs	r0, #109	; 0x6d
 8001c0c:	f7ff f8e0 	bl	8000dd0 <showDigit>
			  showDigit(115, 0, NowDate.Year & 0x0F);
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <main+0x5e8>)
 8001c12:	78db      	ldrb	r3, [r3, #3]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2073      	movs	r0, #115	; 0x73
 8001c20:	f7ff f8d6 	bl	8000dd0 <showDigit>
		if (HAL_GetTick() - lastUpdate2 >= 20)		// Lock shared variable (quaternion)
 8001c24:	e5c5      	b.n	80017b2 <main+0x152>
 8001c26:	bf00      	nop
 8001c28:	42dc0000 	.word	0x42dc0000
 8001c2c:	2401bb70 	.word	0x2401bb70
 8001c30:	2400c330 	.word	0x2400c330
 8001c34:	2401b980 	.word	0x2401b980
 8001c38:	2401b900 	.word	0x2401b900
 8001c3c:	2400c2d4 	.word	0x2400c2d4
 8001c40:	2401bc6c 	.word	0x2401bc6c
 8001c44:	2401bb74 	.word	0x2401bb74
 8001c48:	2401bb6c 	.word	0x2401bb6c

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b09c      	sub	sp, #112	; 0x70
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	224c      	movs	r2, #76	; 0x4c
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00d fc78 	bl	800f550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2220      	movs	r2, #32
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00d fc72 	bl	800f550 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f005 f82b 	bl	8006cc8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <SystemClock_Config+0x100>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <SystemClock_Config+0x100>)
 8001c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <SystemClock_Config+0x100>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <SystemClock_Config+0x104>)
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <SystemClock_Config+0x104>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <SystemClock_Config+0x104>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ca4:	bf00      	nop
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <SystemClock_Config+0x100>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb2:	d1f8      	bne.n	8001ca6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <SystemClock_Config+0x108>)
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f023 0303 	bic.w	r3, r3, #3
 8001cbc:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <SystemClock_Config+0x108>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001cc4:	2309      	movs	r3, #9
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001cde:	2378      	movs	r3, #120	; 0x78
 8001ce0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f005 f84c 	bl	8006d9c <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d0a:	f000 fb35 	bl	8002378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	233f      	movs	r3, #63	; 0x3f
 8001d10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d12:	2303      	movs	r3, #3
 8001d14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d1e:	2340      	movs	r3, #64	; 0x40
 8001d20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d22:	2340      	movs	r3, #64	; 0x40
 8001d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d2c:	2340      	movs	r3, #64	; 0x40
 8001d2e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2104      	movs	r1, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 fc5d 	bl	80075f4 <HAL_RCC_ClockConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001d40:	f000 fb1a 	bl	8002378 <Error_Handler>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3770      	adds	r7, #112	; 0x70
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	58024800 	.word	0x58024800
 8001d50:	58000400 	.word	0x58000400
 8001d54:	58024400 	.word	0x58024400

08001d58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <MX_ETH_Init+0x84>)
 8001d60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d70:	22e1      	movs	r2, #225	; 0xe1
 8001d72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <MX_ETH_Init+0x88>)
 8001d8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <MX_ETH_Init+0x8c>)
 8001d96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <MX_ETH_Init+0x90>)
 8001d9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001da0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001da4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001da6:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <MX_ETH_Init+0x80>)
 8001da8:	f004 f838 	bl	8005e1c <HAL_ETH_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001db2:	f000 fae1 	bl	8002378 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001db6:	2234      	movs	r2, #52	; 0x34
 8001db8:	2100      	movs	r1, #0
 8001dba:	480c      	ldr	r0, [pc, #48]	; (8001dec <MX_ETH_Init+0x94>)
 8001dbc:	f00d fbc8 	bl	800f550 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <MX_ETH_Init+0x94>)
 8001dc2:	2221      	movs	r2, #33	; 0x21
 8001dc4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_ETH_Init+0x94>)
 8001dc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001dcc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <MX_ETH_Init+0x94>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2401bc80 	.word	0x2401bc80
 8001ddc:	40028000 	.word	0x40028000
 8001de0:	2400c318 	.word	0x2400c318
 8001de4:	24000254 	.word	0x24000254
 8001de8:	240001f4 	.word	0x240001f4
 8001dec:	2401bd08 	.word	0x2401bd08

08001df0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e04:	2300      	movs	r3, #0
 8001e06:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e0a:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <MX_RTC_Init+0xb4>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e16:	227f      	movs	r2, #127	; 0x7f
 8001e18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e1c:	22ff      	movs	r2, #255	; 0xff
 8001e1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e38:	4819      	ldr	r0, [pc, #100]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e3a:	f007 fac9 	bl	80093d0 <HAL_RTC_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001e44:	f000 fa98 	bl	8002378 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8001e48:	2323      	movs	r3, #35	; 0x23
 8001e4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x58;
 8001e4c:	2358      	movs	r3, #88	; 0x58
 8001e4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e64:	f007 fb2c 	bl	80094c0 <HAL_RTC_SetTime>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001e6e:	f000 fa83 	bl	8002378 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001e72:	2305      	movs	r3, #5
 8001e74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001e76:	2312      	movs	r3, #18
 8001e78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001e7a:	2331      	movs	r3, #49	; 0x31
 8001e7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8001e7e:	2321      	movs	r3, #33	; 0x21
 8001e80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e82:	463b      	mov	r3, r7
 8001e84:	2201      	movs	r2, #1
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_RTC_Init+0xb0>)
 8001e8a:	f007 fc13 	bl	80096b4 <HAL_RTC_SetDate>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001e94:	f000 fa70 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2401bb74 	.word	0x2401bb74
 8001ea4:	58004000 	.word	0x58004000

08001ea8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <MX_SPI1_Init+0xac>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001eb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001eb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ec0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ed6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ede:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_SPI1_Init+0xa8>)
 8001f3e:	f007 fd61 	bl	8009a04 <HAL_SPI_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001f48:	f000 fa16 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2401bbe4 	.word	0x2401bbe4
 8001f54:	40013000 	.word	0x40013000

08001f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b09a      	sub	sp, #104	; 0x68
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	222c      	movs	r2, #44	; 0x2c
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f00d fadc 	bl	800f550 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001f9a:	4a44      	ldr	r2, [pc, #272]	; (80020ac <MX_TIM1_Init+0x154>)
 8001f9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 600-1;
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fac:	f240 2257 	movw	r2, #599	; 0x257
 8001fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc4:	4838      	ldr	r0, [pc, #224]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fc6:	f008 fcc8 	bl	800a95a <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fd0:	f000 f9d2 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4831      	ldr	r0, [pc, #196]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fe2:	f009 f8ad 	bl	800b140 <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fec:	f000 f9c4 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ff0:	482d      	ldr	r0, [pc, #180]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001ff2:	f008 fd09 	bl	800aa08 <HAL_TIM_PWM_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ffc:	f000 f9bc 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800200c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002010:	4619      	mov	r1, r3
 8002012:	4825      	ldr	r0, [pc, #148]	; (80020a8 <MX_TIM1_Init+0x150>)
 8002014:	f009 ff42 	bl	800be9c <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800201e:	f000 f9ab 	bl	8002378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	; 0x60
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	4818      	ldr	r0, [pc, #96]	; (80020a8 <MX_TIM1_Init+0x150>)
 8002048:	f008 ff66 	bl	800af18 <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002052:	f000 f991 	bl	8002378 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <MX_TIM1_Init+0x150>)
 800208c:	f009 ff94 	bl	800bfb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002096:	f000 f96f 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800209a:	4803      	ldr	r0, [pc, #12]	; (80020a8 <MX_TIM1_Init+0x150>)
 800209c:	f000 fba4 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 80020a0:	bf00      	nop
 80020a2:	3768      	adds	r7, #104	; 0x68
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2401bb98 	.word	0x2401bb98
 80020ac:	40010000 	.word	0x40010000

080020b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <MX_USART3_UART_Init+0x94>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f8:	4811      	ldr	r0, [pc, #68]	; (8002140 <MX_USART3_UART_Init+0x90>)
 80020fa:	f00a f800 	bl	800c0fe <HAL_UART_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002104:	f000 f938 	bl	8002378 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002108:	2100      	movs	r1, #0
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <MX_USART3_UART_Init+0x90>)
 800210c:	f00b fcb0 	bl	800da70 <HAL_UARTEx_SetTxFifoThreshold>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002116:	f000 f92f 	bl	8002378 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800211a:	2100      	movs	r1, #0
 800211c:	4808      	ldr	r0, [pc, #32]	; (8002140 <MX_USART3_UART_Init+0x90>)
 800211e:	f00b fce5 	bl	800daec <HAL_UARTEx_SetRxFifoThreshold>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002128:	f000 f926 	bl	8002378 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <MX_USART3_UART_Init+0x90>)
 800212e:	f00b fc66 	bl	800d9fe <HAL_UARTEx_DisableFifoMode>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002138:	f000 f91e 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2401b448 	.word	0x2401b448
 8002144:	40004800 	.word	0x40004800

08002148 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002150:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002154:	2209      	movs	r2, #9
 8002156:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800215a:	2202      	movs	r2, #2
 800215c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002166:	2202      	movs	r2, #2
 8002168:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800216c:	2200      	movs	r2, #0
 800216e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800217e:	2201      	movs	r2, #1
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002184:	2201      	movs	r2, #1
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800218a:	2200      	movs	r2, #0
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002190:	f004 fc52 	bl	8006a38 <HAL_PCD_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800219a:	f000 f8ed 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2401b4d8 	.word	0x2401b4d8
 80021a8:	40080000 	.word	0x40080000

080021ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <MX_DMA_Init+0x6c>)
 80021b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <MX_DMA_Init+0x6c>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_DMA_Init+0x6c>)
 80021c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	200b      	movs	r0, #11
 80021d6:	f000 ffa6 	bl	8003126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021da:	200b      	movs	r0, #11
 80021dc:	f000 ffbd 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	200c      	movs	r0, #12
 80021e6:	f000 ff9e 	bl	8003126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021ea:	200c      	movs	r0, #12
 80021ec:	f000 ffb5 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	200d      	movs	r0, #13
 80021f6:	f000 ff96 	bl	8003126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021fa:	200d      	movs	r0, #13
 80021fc:	f000 ffad 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	200e      	movs	r0, #14
 8002206:	f000 ff8e 	bl	8003126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800220a:	200e      	movs	r0, #14
 800220c:	f000 ffa5 	bl	800315a <HAL_NVIC_EnableIRQ>

}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	58024400 	.word	0x58024400

0800221c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	4b4e      	ldr	r3, [pc, #312]	; (800236c <MX_GPIO_Init+0x150>)
 8002234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <MX_GPIO_Init+0x150>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <MX_GPIO_Init+0x150>)
 8002244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <MX_GPIO_Init+0x150>)
 8002252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002256:	4a45      	ldr	r2, [pc, #276]	; (800236c <MX_GPIO_Init+0x150>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002260:	4b42      	ldr	r3, [pc, #264]	; (800236c <MX_GPIO_Init+0x150>)
 8002262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <MX_GPIO_Init+0x150>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	4a3d      	ldr	r2, [pc, #244]	; (800236c <MX_GPIO_Init+0x150>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <MX_GPIO_Init+0x150>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800228c:	4b37      	ldr	r3, [pc, #220]	; (800236c <MX_GPIO_Init+0x150>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	4a36      	ldr	r2, [pc, #216]	; (800236c <MX_GPIO_Init+0x150>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <MX_GPIO_Init+0x150>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <MX_GPIO_Init+0x150>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	4a2e      	ldr	r2, [pc, #184]	; (800236c <MX_GPIO_Init+0x150>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <MX_GPIO_Init+0x150>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <MX_GPIO_Init+0x150>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ce:	4a27      	ldr	r2, [pc, #156]	; (800236c <MX_GPIO_Init+0x150>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <MX_GPIO_Init+0x150>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_GPIO_Init+0x150>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <MX_GPIO_Init+0x150>)
 80022ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_GPIO_Init+0x150>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800230a:	4819      	ldr	r0, [pc, #100]	; (8002370 <MX_GPIO_Init+0x154>)
 800230c:	f004 fb4c 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002316:	4816      	ldr	r0, [pc, #88]	; (8002370 <MX_GPIO_Init+0x154>)
 8002318:	f004 fb46 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800231c:	2201      	movs	r2, #1
 800231e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002322:	4814      	ldr	r0, [pc, #80]	; (8002374 <MX_GPIO_Init+0x158>)
 8002324:	f004 fb40 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8002328:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	2301      	movs	r3, #1
 8002330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <MX_GPIO_Init+0x154>)
 8002342:	f004 f981 	bl	8006648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_GPIO_Init+0x158>)
 8002360:	f004 f972 	bl	8006648 <HAL_GPIO_Init>

}
 8002364:	bf00      	nop
 8002366:	3730      	adds	r7, #48	; 0x30
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	58024400 	.word	0x58024400
 8002370:	58020c00 	.word	0x58020c00
 8002374:	58021800 	.word	0x58021800

08002378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x8>
	...

08002384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_MspInit+0x30>)
 800238c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002390:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_MspInit+0x30>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_MspInit+0x30>)
 800239c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	58024400 	.word	0x58024400

080023b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08e      	sub	sp, #56	; 0x38
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a59      	ldr	r2, [pc, #356]	; (800253c <HAL_ETH_MspInit+0x184>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 80ab 	bne.w	8002532 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80023dc:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_ETH_MspInit+0x188>)
 80023de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023e2:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_ETH_MspInit+0x188>)
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023ec:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_ETH_MspInit+0x188>)
 80023ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80023fa:	4b51      	ldr	r3, [pc, #324]	; (8002540 <HAL_ETH_MspInit+0x188>)
 80023fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <HAL_ETH_MspInit+0x188>)
 800240c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002418:	4b49      	ldr	r3, [pc, #292]	; (8002540 <HAL_ETH_MspInit+0x188>)
 800241a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800241e:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_ETH_MspInit+0x188>)
 800242a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243c:	4a40      	ldr	r2, [pc, #256]	; (8002540 <HAL_ETH_MspInit+0x188>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002446:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245a:	4a39      	ldr	r2, [pc, #228]	; (8002540 <HAL_ETH_MspInit+0x188>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	4a31      	ldr	r2, [pc, #196]	; (8002540 <HAL_ETH_MspInit+0x188>)
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <HAL_ETH_MspInit+0x188>)
 8002498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_ETH_MspInit+0x188>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80024ae:	2332      	movs	r3, #50	; 0x32
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024be:	230b      	movs	r3, #11
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c6:	4619      	mov	r1, r3
 80024c8:	481e      	ldr	r0, [pc, #120]	; (8002544 <HAL_ETH_MspInit+0x18c>)
 80024ca:	f004 f8bd 	bl	8006648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80024ce:	2386      	movs	r3, #134	; 0x86
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024de:	230b      	movs	r3, #11
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	4817      	ldr	r0, [pc, #92]	; (8002548 <HAL_ETH_MspInit+0x190>)
 80024ea:	f004 f8ad 	bl	8006648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002500:	230b      	movs	r3, #11
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4810      	ldr	r0, [pc, #64]	; (800254c <HAL_ETH_MspInit+0x194>)
 800250c:	f004 f89c 	bl	8006648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002510:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002522:	230b      	movs	r3, #11
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252a:	4619      	mov	r1, r3
 800252c:	4808      	ldr	r0, [pc, #32]	; (8002550 <HAL_ETH_MspInit+0x198>)
 800252e:	f004 f88b 	bl	8006648 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	3738      	adds	r7, #56	; 0x38
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40028000 	.word	0x40028000
 8002540:	58024400 	.word	0x58024400
 8002544:	58020800 	.word	0x58020800
 8002548:	58020000 	.word	0x58020000
 800254c:	58020400 	.word	0x58020400
 8002550:	58021800 	.word	0x58021800

08002554 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b2      	sub	sp, #200	; 0xc8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	22bc      	movs	r2, #188	; 0xbc
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f00c fff3 	bl	800f550 <memset>
  if(hrtc->Instance==RTC)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <HAL_RTC_MspInit+0x58>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d116      	bne.n	80025a2 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002574:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002578:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800257a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	4618      	mov	r0, r3
 8002588:	f005 fbc0 	bl	8007d0c <HAL_RCCEx_PeriphCLKConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002592:	f7ff fef1 	bl	8002378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RTC_MspInit+0x5c>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <HAL_RTC_MspInit+0x5c>)
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	37c8      	adds	r7, #200	; 0xc8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	58004000 	.word	0x58004000
 80025b0:	58024400 	.word	0x58024400

080025b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0ba      	sub	sp, #232	; 0xe8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	22bc      	movs	r2, #188	; 0xbc
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f00c ffbb 	bl	800f550 <memset>
  if(hspi->Instance==SPI1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_SPI_MspInit+0x174>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f040 809c 	bne.w	800271e <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f005 fb89 	bl	8007d0c <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002600:	f7ff feba 	bl	8002378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002604:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800260a:	4a48      	ldr	r2, [pc, #288]	; (800272c <HAL_SPI_MspInit+0x178>)
 800260c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002610:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002614:	4b45      	ldr	r3, [pc, #276]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	4b42      	ldr	r3, [pc, #264]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002628:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_SPI_MspInit+0x178>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002646:	4a39      	ldr	r2, [pc, #228]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_SPI_MspInit+0x178>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800265e:	2320      	movs	r3, #32
 8002660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002676:	2305      	movs	r3, #5
 8002678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002680:	4619      	mov	r1, r3
 8002682:	482b      	ldr	r0, [pc, #172]	; (8002730 <HAL_SPI_MspInit+0x17c>)
 8002684:	f003 ffe0 	bl	8006648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002688:	2320      	movs	r3, #32
 800268a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a0:	2305      	movs	r3, #5
 80026a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4821      	ldr	r0, [pc, #132]	; (8002734 <HAL_SPI_MspInit+0x180>)
 80026ae:	f003 ffcb 	bl	8006648 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_SPI_MspInit+0x188>)
 80026b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026ba:	2226      	movs	r2, #38	; 0x26
 80026bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026f2:	4811      	ldr	r0, [pc, #68]	; (8002738 <HAL_SPI_MspInit+0x184>)
 80026f4:	f000 fd4c 	bl	8003190 <HAL_DMA_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80026fe:	f7ff fe3b 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_SPI_MspInit+0x184>)
 8002706:	679a      	str	r2, [r3, #120]	; 0x78
 8002708:	4a0b      	ldr	r2, [pc, #44]	; (8002738 <HAL_SPI_MspInit+0x184>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	2023      	movs	r0, #35	; 0x23
 8002714:	f000 fd07 	bl	8003126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002718:	2023      	movs	r0, #35	; 0x23
 800271a:	f000 fd1e 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	37e8      	adds	r7, #232	; 0xe8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40013000 	.word	0x40013000
 800272c:	58024400 	.word	0x58024400
 8002730:	58020000 	.word	0x58020000
 8002734:	58020400 	.word	0x58020400
 8002738:	2401bd3c 	.word	0x2401bd3c
 800273c:	40020010 	.word	0x40020010

08002740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_TIM_Base_MspInit+0x98>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d13d      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_TIM_Base_MspInit+0x9c>)
 8002754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_TIM_Base_MspInit+0x9c>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_TIM_Base_MspInit+0x9c>)
 8002764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream3;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_TIM_Base_MspInit+0xa4>)
 8002774:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 8002778:	220b      	movs	r2, #11
 800277a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 800277e:	2240      	movs	r2, #64	; 0x40
 8002780:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 800278a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 8002792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002796:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 800279a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80027b2:	480b      	ldr	r0, [pc, #44]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 80027b4:	f000 fcec 	bl	8003190 <HAL_DMA_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80027be:	f7ff fddb 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <HAL_TIM_Base_MspInit+0xa0>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	58024400 	.word	0x58024400
 80027e0:	2400c338 	.word	0x2400c338
 80027e4:	40020058 	.word	0x40020058

080027e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_TIM_MspPostInit+0x6c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d11f      	bne.n	800284a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_TIM_MspPostInit+0x70>)
 800280c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002810:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_TIM_MspPostInit+0x70>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_TIM_MspPostInit+0x70>)
 800281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800283a:	2301      	movs	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_TIM_MspPostInit+0x74>)
 8002846:	f003 feff 	bl	8006648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40010000 	.word	0x40010000
 8002858:	58024400 	.word	0x58024400
 800285c:	58021000 	.word	0x58021000

08002860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0b8      	sub	sp, #224	; 0xe0
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	22bc      	movs	r2, #188	; 0xbc
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f00c fe65 	bl	800f550 <memset>
  if(huart->Instance==USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a57      	ldr	r2, [pc, #348]	; (80029e8 <HAL_UART_MspInit+0x188>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f040 80a6 	bne.w	80029de <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002892:	2302      	movs	r3, #2
 8002894:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4618      	mov	r0, r3
 80028a2:	f005 fa33 	bl	8007d0c <HAL_RCCEx_PeriphCLKConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80028ac:	f7ff fd64 	bl	8002378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b0:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_UART_MspInit+0x18c>)
 80028b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b6:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_UART_MspInit+0x18c>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_UART_MspInit+0x18c>)
 80028c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_UART_MspInit+0x18c>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d4:	4a45      	ldr	r2, [pc, #276]	; (80029ec <HAL_UART_MspInit+0x18c>)
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028de:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_UART_MspInit+0x18c>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002906:	2307      	movs	r3, #7
 8002908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800290c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002910:	4619      	mov	r1, r3
 8002912:	4837      	ldr	r0, [pc, #220]	; (80029f0 <HAL_UART_MspInit+0x190>)
 8002914:	f003 fe98 	bl	8006648 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_UART_MspInit+0x194>)
 800291a:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <HAL_UART_MspInit+0x198>)
 800291c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800291e:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002920:	222d      	movs	r2, #45	; 0x2d
 8002922:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_UART_MspInit+0x194>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002936:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_UART_MspInit+0x194>)
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_UART_MspInit+0x194>)
 800294e:	2200      	movs	r2, #0
 8002950:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002954:	2200      	movs	r2, #0
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002958:	4826      	ldr	r0, [pc, #152]	; (80029f4 <HAL_UART_MspInit+0x194>)
 800295a:	f000 fc19 	bl	8003190 <HAL_DMA_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002964:	f7ff fd08 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_UART_MspInit+0x194>)
 800296c:	67da      	str	r2, [r3, #124]	; 0x7c
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_UART_MspInit+0x194>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_UART_MspInit+0x19c>)
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_UART_MspInit+0x1a0>)
 8002978:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_UART_MspInit+0x19c>)
 800297c:	222e      	movs	r2, #46	; 0x2e
 800297e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_UART_MspInit+0x19c>)
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_UART_MspInit+0x19c>)
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_UART_MspInit+0x19c>)
 800298e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002992:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_UART_MspInit+0x19c>)
 8002996:	2200      	movs	r2, #0
 8002998:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0x19c>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_UART_MspInit+0x19c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x19c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_UART_MspInit+0x19c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029b2:	4812      	ldr	r0, [pc, #72]	; (80029fc <HAL_UART_MspInit+0x19c>)
 80029b4:	f000 fbec 	bl	8003190 <HAL_DMA_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80029be:	f7ff fcdb 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_UART_MspInit+0x19c>)
 80029c6:	679a      	str	r2, [r3, #120]	; 0x78
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_UART_MspInit+0x19c>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	2027      	movs	r0, #39	; 0x27
 80029d4:	f000 fba7 	bl	8003126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029d8:	2027      	movs	r0, #39	; 0x27
 80029da:	f000 fbbe 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029de:	bf00      	nop
 80029e0:	37e0      	adds	r7, #224	; 0xe0
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40004800 	.word	0x40004800
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58020c00 	.word	0x58020c00
 80029f4:	2401b3d0 	.word	0x2401b3d0
 80029f8:	40020028 	.word	0x40020028
 80029fc:	2401b908 	.word	0x2401b908
 8002a00:	40020040 	.word	0x40020040

08002a04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0b8      	sub	sp, #224	; 0xe0
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	22bc      	movs	r2, #188	; 0xbc
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00c fd93 	bl	800f550 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a37      	ldr	r2, [pc, #220]	; (8002b0c <HAL_PCD_MspInit+0x108>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d166      	bne.n	8002b02 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002a34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002a42:	2302      	movs	r3, #2
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8002a46:	2303      	movs	r3, #3
 8002a48:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002a4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a52:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8002a54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a58:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002a5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f005 f950 	bl	8007d0c <HAL_RCCEx_PeriphCLKConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8002a72:	f7ff fc81 	bl	8002378 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002a76:	f004 f981 	bl	8006d7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_PCD_MspInit+0x10c>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <HAL_PCD_MspInit+0x10c>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <HAL_PCD_MspInit+0x10c>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002a98:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002ab2:	230a      	movs	r3, #10
 8002ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002abc:	4619      	mov	r1, r3
 8002abe:	4815      	ldr	r0, [pc, #84]	; (8002b14 <HAL_PCD_MspInit+0x110>)
 8002ac0:	f003 fdc2 	bl	8006648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002adc:	4619      	mov	r1, r3
 8002ade:	480d      	ldr	r0, [pc, #52]	; (8002b14 <HAL_PCD_MspInit+0x110>)
 8002ae0:	f003 fdb2 	bl	8006648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_PCD_MspInit+0x10c>)
 8002ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_PCD_MspInit+0x10c>)
 8002aec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002af0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_PCD_MspInit+0x10c>)
 8002af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	37e0      	adds	r7, #224	; 0xe0
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40080000 	.word	0x40080000
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58020000 	.word	0x58020000

08002b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <NMI_Handler+0x4>

08002b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <HardFault_Handler+0x4>

08002b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <MemManage_Handler+0x4>

08002b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <BusFault_Handler+0x4>

08002b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <UsageFault_Handler+0x4>

08002b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b64:	f000 f9a0 	bl	8002ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <DMA1_Stream0_IRQHandler+0x10>)
 8002b72:	f001 fe35 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2401bd3c 	.word	0x2401bd3c

08002b80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b84:	4802      	ldr	r0, [pc, #8]	; (8002b90 <DMA1_Stream1_IRQHandler+0x10>)
 8002b86:	f001 fe2b 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2401b3d0 	.word	0x2401b3d0

08002b94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <DMA1_Stream2_IRQHandler+0x10>)
 8002b9a:	f001 fe21 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2401b908 	.word	0x2401b908

08002ba8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <DMA1_Stream3_IRQHandler+0x10>)
 8002bae:	f001 fe17 	bl	80047e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2400c338 	.word	0x2400c338

08002bbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <SPI1_IRQHandler+0x10>)
 8002bc2:	f007 fb61 	bl	800a288 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2401bbe4 	.word	0x2401bbe4

08002bd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <USART3_IRQHandler+0x10>)
 8002bd6:	f009 fb79 	bl	800c2cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2401b448 	.word	0x2401b448

08002be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
	return 1;
 8002be8:	2301      	movs	r3, #1
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_kill>:

int _kill(int pid, int sig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bfe:	f00c fc7d 	bl	800f4fc <__errno>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2216      	movs	r2, #22
 8002c06:	601a      	str	r2, [r3, #0]
	return -1;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_exit>:

void _exit (int status)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffe7 	bl	8002bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c26:	e7fe      	b.n	8002c26 <_exit+0x12>

08002c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e00a      	b.n	8002c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3a:	f3af 8000 	nop.w
 8002c3e:	4601      	mov	r1, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	b2ca      	uxtb	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbf0      	blt.n	8002c3a <_read+0x12>
	}

return len;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e009      	b.n	8002c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60ba      	str	r2, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf1      	blt.n	8002c74 <_write+0x12>
	}
	return len;
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_close>:

int _close(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d34:	f00c fbe2 	bl	800f4fc <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	24080000 	.word	0x24080000
 8002d64:	00000400 	.word	0x00000400
 8002d68:	2400c320 	.word	0x2400c320
 8002d6c:	2401bdc8 	.word	0x2401bdc8

08002d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d74:	f7fd fc88 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d78:	480c      	ldr	r0, [pc, #48]	; (8002dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d7a:	490d      	ldr	r1, [pc, #52]	; (8002db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d90:	4c0a      	ldr	r4, [pc, #40]	; (8002dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f00c fbb3 	bl	800f508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da2:	f7fe fc5d 	bl	8001660 <main>
  bx  lr
 8002da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002da8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002dac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002db0:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002db4:	08012884 	.word	0x08012884
  ldr r2, =_sbss
 8002db8:	240002b8 	.word	0x240002b8
  ldr r4, =_ebss
 8002dbc:	2401bdc8 	.word	0x2401bdc8

08002dc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC3_IRQHandler>
	...

08002dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f000 f9a0 	bl	8003110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dd0:	f004 fdc6 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_Init+0x68>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	4913      	ldr	r1, [pc, #76]	; (8002e30 <HAL_Init+0x6c>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_Init+0x68>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <HAL_Init+0x6c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <HAL_Init+0x70>)
 8002e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e08:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <HAL_Init+0x74>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 f814 	bl	8002e3c <HAL_InitTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e002      	b.n	8002e24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1e:	f7ff fab1 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	08012190 	.word	0x08012190
 8002e34:	24000004 	.word	0x24000004
 8002e38:	24000000 	.word	0x24000000

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_InitTick+0x60>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e021      	b.n	8002e94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_InitTick+0x64>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_InitTick+0x60>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f985 	bl	8003176 <HAL_SYSTICK_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00e      	b.n	8002e94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d80a      	bhi.n	8002e92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f000 f94f 	bl	8003126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <HAL_InitTick+0x68>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	24000020 	.word	0x24000020
 8002ea0:	24000000 	.word	0x24000000
 8002ea4:	2400001c 	.word	0x2400001c

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	24000020 	.word	0x24000020
 8002ecc:	2401bdb4 	.word	0x2401bdb4

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2401bdb4 	.word	0x2401bdb4

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d005      	beq.n	8002f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_Delay+0x44>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f0e:	bf00      	nop
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d8f7      	bhi.n	8002f10 <HAL_Delay+0x28>
  {
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	24000020 	.word	0x24000020

08002f30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_GetREVID+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0c1b      	lsrs	r3, r3, #16
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	5c001000 	.word	0x5c001000

08002f48 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f58:	4904      	ldr	r1, [pc, #16]	; (8002f6c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	58000400 	.word	0x58000400

08002f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	05fa0000 	.word	0x05fa0000

08002fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db0b      	blt.n	8002ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4907      	ldr	r1, [pc, #28]	; (800300c <__NVIC_EnableIRQ+0x38>)
 8002fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030dc:	d301      	bcc.n	80030e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030de:	2301      	movs	r3, #1
 80030e0:	e00f      	b.n	8003102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <SysTick_Config+0x40>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ea:	210f      	movs	r1, #15
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	f7ff ff8e 	bl	8003010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <SysTick_Config+0x40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <SysTick_Config+0x40>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ff29 	bl	8002f70 <__NVIC_SetPriorityGrouping>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff40 	bl	8002fb8 <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff90 	bl	8003064 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5f 	bl	8003010 <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff33 	bl	8002fd4 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa4 	bl	80030cc <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7ff fe9a 	bl	8002ed0 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e316      	b.n	80037d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a66      	ldr	r2, [pc, #408]	; (8003348 <HAL_DMA_Init+0x1b8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_DMA_Init+0x1bc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <HAL_DMA_Init+0x1c0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a62      	ldr	r2, [pc, #392]	; (8003354 <HAL_DMA_Init+0x1c4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a60      	ldr	r2, [pc, #384]	; (8003358 <HAL_DMA_Init+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5f      	ldr	r2, [pc, #380]	; (800335c <HAL_DMA_Init+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <HAL_DMA_Init+0x1d0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_DMA_Init+0x1d4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_DMA_Init+0x1d8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a59      	ldr	r2, [pc, #356]	; (800336c <HAL_DMA_Init+0x1dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_DMA_Init+0x1e0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_DMA_Init+0x1e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a54      	ldr	r2, [pc, #336]	; (8003378 <HAL_DMA_Init+0x1e8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a53      	ldr	r2, [pc, #332]	; (800337c <HAL_DMA_Init+0x1ec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a51      	ldr	r2, [pc, #324]	; (8003380 <HAL_DMA_Init+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Init+0xb8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_DMA_Init+0x1f4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_DMA_Init+0xbc>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_DMA_Init+0xbe>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 813b 	beq.w	80034ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a37      	ldr	r2, [pc, #220]	; (8003348 <HAL_DMA_Init+0x1b8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04a      	beq.n	8003304 <HAL_DMA_Init+0x174>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a36      	ldr	r2, [pc, #216]	; (800334c <HAL_DMA_Init+0x1bc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d045      	beq.n	8003304 <HAL_DMA_Init+0x174>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a34      	ldr	r2, [pc, #208]	; (8003350 <HAL_DMA_Init+0x1c0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d040      	beq.n	8003304 <HAL_DMA_Init+0x174>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a33      	ldr	r2, [pc, #204]	; (8003354 <HAL_DMA_Init+0x1c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d03b      	beq.n	8003304 <HAL_DMA_Init+0x174>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <HAL_DMA_Init+0x1c8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d036      	beq.n	8003304 <HAL_DMA_Init+0x174>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a30      	ldr	r2, [pc, #192]	; (800335c <HAL_DMA_Init+0x1cc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d031      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	; (8003360 <HAL_DMA_Init+0x1d0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02c      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <HAL_DMA_Init+0x1d4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d027      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <HAL_DMA_Init+0x1d8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2a      	ldr	r2, [pc, #168]	; (800336c <HAL_DMA_Init+0x1dc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d01d      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a28      	ldr	r2, [pc, #160]	; (8003370 <HAL_DMA_Init+0x1e0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_DMA_Init+0x1e4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <HAL_DMA_Init+0x1e8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	; (800337c <HAL_DMA_Init+0x1ec>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a22      	ldr	r2, [pc, #136]	; (8003380 <HAL_DMA_Init+0x1f0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_Init+0x174>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	; (8003384 <HAL_DMA_Init+0x1f4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d108      	bne.n	8003316 <HAL_DMA_Init+0x186>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e007      	b.n	8003326 <HAL_DMA_Init+0x196>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003326:	e02f      	b.n	8003388 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003328:	f7ff fdd2 	bl	8002ed0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b05      	cmp	r3, #5
 8003334:	d928      	bls.n	8003388 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e246      	b.n	80037d6 <HAL_DMA_Init+0x646>
 8003348:	40020010 	.word	0x40020010
 800334c:	40020028 	.word	0x40020028
 8003350:	40020040 	.word	0x40020040
 8003354:	40020058 	.word	0x40020058
 8003358:	40020070 	.word	0x40020070
 800335c:	40020088 	.word	0x40020088
 8003360:	400200a0 	.word	0x400200a0
 8003364:	400200b8 	.word	0x400200b8
 8003368:	40020410 	.word	0x40020410
 800336c:	40020428 	.word	0x40020428
 8003370:	40020440 	.word	0x40020440
 8003374:	40020458 	.word	0x40020458
 8003378:	40020470 	.word	0x40020470
 800337c:	40020488 	.word	0x40020488
 8003380:	400204a0 	.word	0x400204a0
 8003384:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1c8      	bne.n	8003328 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4b83      	ldr	r3, [pc, #524]	; (80035b0 <HAL_DMA_Init+0x420>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d107      	bne.n	80033ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4313      	orrs	r3, r2
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033ec:	4b71      	ldr	r3, [pc, #452]	; (80035b4 <HAL_DMA_Init+0x424>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b71      	ldr	r3, [pc, #452]	; (80035b8 <HAL_DMA_Init+0x428>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d328      	bcc.n	800344c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b28      	cmp	r3, #40	; 0x28
 8003400:	d903      	bls.n	800340a <HAL_DMA_Init+0x27a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b2e      	cmp	r3, #46	; 0x2e
 8003408:	d917      	bls.n	800343a <HAL_DMA_Init+0x2aa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b3e      	cmp	r3, #62	; 0x3e
 8003410:	d903      	bls.n	800341a <HAL_DMA_Init+0x28a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b42      	cmp	r3, #66	; 0x42
 8003418:	d90f      	bls.n	800343a <HAL_DMA_Init+0x2aa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b46      	cmp	r3, #70	; 0x46
 8003420:	d903      	bls.n	800342a <HAL_DMA_Init+0x29a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b48      	cmp	r3, #72	; 0x48
 8003428:	d907      	bls.n	800343a <HAL_DMA_Init+0x2aa>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b4e      	cmp	r3, #78	; 0x4e
 8003430:	d905      	bls.n	800343e <HAL_DMA_Init+0x2ae>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b52      	cmp	r3, #82	; 0x52
 8003438:	d801      	bhi.n	800343e <HAL_DMA_Init+0x2ae>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_DMA_Init+0x2b0>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800344a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b04      	cmp	r3, #4
 8003474:	d117      	bne.n	80034a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f002 fb3d 	bl	8005b08 <DMA_CheckFifoParam>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e197      	b.n	80037d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f002 fa78 	bl	80059a4 <DMA_CalcBaseAndBitshift>
 80034b4:	4603      	mov	r3, r0
 80034b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	223f      	movs	r2, #63	; 0x3f
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e0cd      	b.n	8003666 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3b      	ldr	r2, [pc, #236]	; (80035bc <HAL_DMA_Init+0x42c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a39      	ldr	r2, [pc, #228]	; (80035c0 <HAL_DMA_Init+0x430>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a38      	ldr	r2, [pc, #224]	; (80035c4 <HAL_DMA_Init+0x434>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d018      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a36      	ldr	r2, [pc, #216]	; (80035c8 <HAL_DMA_Init+0x438>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a35      	ldr	r2, [pc, #212]	; (80035cc <HAL_DMA_Init+0x43c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_Init+0x38a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a33      	ldr	r2, [pc, #204]	; (80035d0 <HAL_DMA_Init+0x440>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_DMA_Init+0x38a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <HAL_DMA_Init+0x444>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_DMA_Init+0x38a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a30      	ldr	r2, [pc, #192]	; (80035d8 <HAL_DMA_Init+0x448>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_DMA_Init+0x38e>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_DMA_Init+0x390>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8097 	beq.w	8003654 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a24      	ldr	r2, [pc, #144]	; (80035bc <HAL_DMA_Init+0x42c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d021      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <HAL_DMA_Init+0x430>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01c      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_DMA_Init+0x434>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d017      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <HAL_DMA_Init+0x438>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d012      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_DMA_Init+0x43c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00d      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_DMA_Init+0x440>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <HAL_DMA_Init+0x444>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <HAL_DMA_Init+0x3e4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_DMA_Init+0x448>)
 8003572:	4293      	cmp	r3, r2
 8003574:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_DMA_Init+0x44c>)
 8003592:	4013      	ands	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d020      	beq.n	80035e0 <HAL_DMA_Init+0x450>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d102      	bne.n	80035ac <HAL_DMA_Init+0x41c>
 80035a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035aa:	e01a      	b.n	80035e2 <HAL_DMA_Init+0x452>
 80035ac:	2300      	movs	r3, #0
 80035ae:	e018      	b.n	80035e2 <HAL_DMA_Init+0x452>
 80035b0:	fe10803f 	.word	0xfe10803f
 80035b4:	5c001000 	.word	0x5c001000
 80035b8:	ffff0000 	.word	0xffff0000
 80035bc:	58025408 	.word	0x58025408
 80035c0:	5802541c 	.word	0x5802541c
 80035c4:	58025430 	.word	0x58025430
 80035c8:	58025444 	.word	0x58025444
 80035cc:	58025458 	.word	0x58025458
 80035d0:	5802546c 	.word	0x5802546c
 80035d4:	58025480 	.word	0x58025480
 80035d8:	58025494 	.word	0x58025494
 80035dc:	fffe000f 	.word	0xfffe000f
 80035e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68d2      	ldr	r2, [r2, #12]
 80035e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003610:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b6e      	ldr	r3, [pc, #440]	; (80037e0 <HAL_DMA_Init+0x650>)
 8003628:	4413      	add	r3, r2
 800362a:	4a6e      	ldr	r2, [pc, #440]	; (80037e4 <HAL_DMA_Init+0x654>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f002 f9b3 	bl	80059a4 <DMA_CalcBaseAndBitshift>
 800363e:	4603      	mov	r3, r0
 8003640:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	409a      	lsls	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	e008      	b.n	8003666 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2203      	movs	r2, #3
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0b7      	b.n	80037d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5f      	ldr	r2, [pc, #380]	; (80037e8 <HAL_DMA_Init+0x658>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d072      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5d      	ldr	r2, [pc, #372]	; (80037ec <HAL_DMA_Init+0x65c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d06d      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a5c      	ldr	r2, [pc, #368]	; (80037f0 <HAL_DMA_Init+0x660>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d068      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_DMA_Init+0x664>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d063      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a59      	ldr	r2, [pc, #356]	; (80037f8 <HAL_DMA_Init+0x668>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d05e      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a57      	ldr	r2, [pc, #348]	; (80037fc <HAL_DMA_Init+0x66c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d059      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a56      	ldr	r2, [pc, #344]	; (8003800 <HAL_DMA_Init+0x670>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d054      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a54      	ldr	r2, [pc, #336]	; (8003804 <HAL_DMA_Init+0x674>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d04f      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a53      	ldr	r2, [pc, #332]	; (8003808 <HAL_DMA_Init+0x678>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a51      	ldr	r2, [pc, #324]	; (800380c <HAL_DMA_Init+0x67c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a50      	ldr	r2, [pc, #320]	; (8003810 <HAL_DMA_Init+0x680>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a4e      	ldr	r2, [pc, #312]	; (8003814 <HAL_DMA_Init+0x684>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4d      	ldr	r2, [pc, #308]	; (8003818 <HAL_DMA_Init+0x688>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	; (800381c <HAL_DMA_Init+0x68c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4a      	ldr	r2, [pc, #296]	; (8003820 <HAL_DMA_Init+0x690>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a48      	ldr	r2, [pc, #288]	; (8003824 <HAL_DMA_Init+0x694>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a47      	ldr	r2, [pc, #284]	; (8003828 <HAL_DMA_Init+0x698>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_DMA_Init+0x69c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a44      	ldr	r2, [pc, #272]	; (8003830 <HAL_DMA_Init+0x6a0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a42      	ldr	r2, [pc, #264]	; (8003834 <HAL_DMA_Init+0x6a4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a41      	ldr	r2, [pc, #260]	; (8003838 <HAL_DMA_Init+0x6a8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3f      	ldr	r2, [pc, #252]	; (800383c <HAL_DMA_Init+0x6ac>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3e      	ldr	r2, [pc, #248]	; (8003840 <HAL_DMA_Init+0x6b0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Init+0x5c6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_DMA_Init+0x6b4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_DMA_Init+0x5ca>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_DMA_Init+0x5cc>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d032      	beq.n	80037c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f002 fa4d 	bl	8005c00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b80      	cmp	r3, #128	; 0x80
 800376c:	d102      	bne.n	8003774 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003788:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_DMA_Init+0x624>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b08      	cmp	r3, #8
 8003798:	d80c      	bhi.n	80037b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f002 faca 	bl	8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	e008      	b.n	80037c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	a7fdabf8 	.word	0xa7fdabf8
 80037e4:	cccccccd 	.word	0xcccccccd
 80037e8:	40020010 	.word	0x40020010
 80037ec:	40020028 	.word	0x40020028
 80037f0:	40020040 	.word	0x40020040
 80037f4:	40020058 	.word	0x40020058
 80037f8:	40020070 	.word	0x40020070
 80037fc:	40020088 	.word	0x40020088
 8003800:	400200a0 	.word	0x400200a0
 8003804:	400200b8 	.word	0x400200b8
 8003808:	40020410 	.word	0x40020410
 800380c:	40020428 	.word	0x40020428
 8003810:	40020440 	.word	0x40020440
 8003814:	40020458 	.word	0x40020458
 8003818:	40020470 	.word	0x40020470
 800381c:	40020488 	.word	0x40020488
 8003820:	400204a0 	.word	0x400204a0
 8003824:	400204b8 	.word	0x400204b8
 8003828:	58025408 	.word	0x58025408
 800382c:	5802541c 	.word	0x5802541c
 8003830:	58025430 	.word	0x58025430
 8003834:	58025444 	.word	0x58025444
 8003838:	58025458 	.word	0x58025458
 800383c:	5802546c 	.word	0x5802546c
 8003840:	58025480 	.word	0x58025480
 8003844:	58025494 	.word	0x58025494

08003848 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e226      	b.n	8003cb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_DMA_Start_IT+0x2a>
 800386e:	2302      	movs	r3, #2
 8003870:	e21f      	b.n	8003cb2 <HAL_DMA_Start_IT+0x46a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	f040 820a 	bne.w	8003c9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <HAL_DMA_Start_IT+0x1f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04a      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a66      	ldr	r2, [pc, #408]	; (8003a40 <HAL_DMA_Start_IT+0x1f8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d045      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a65      	ldr	r2, [pc, #404]	; (8003a44 <HAL_DMA_Start_IT+0x1fc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d040      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a63      	ldr	r2, [pc, #396]	; (8003a48 <HAL_DMA_Start_IT+0x200>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d03b      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a62      	ldr	r2, [pc, #392]	; (8003a4c <HAL_DMA_Start_IT+0x204>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d036      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a60      	ldr	r2, [pc, #384]	; (8003a50 <HAL_DMA_Start_IT+0x208>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5f      	ldr	r2, [pc, #380]	; (8003a54 <HAL_DMA_Start_IT+0x20c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d02c      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5d      	ldr	r2, [pc, #372]	; (8003a58 <HAL_DMA_Start_IT+0x210>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d027      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5c      	ldr	r2, [pc, #368]	; (8003a5c <HAL_DMA_Start_IT+0x214>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a5a      	ldr	r2, [pc, #360]	; (8003a60 <HAL_DMA_Start_IT+0x218>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a59      	ldr	r2, [pc, #356]	; (8003a64 <HAL_DMA_Start_IT+0x21c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_DMA_Start_IT+0x220>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a56      	ldr	r2, [pc, #344]	; (8003a6c <HAL_DMA_Start_IT+0x224>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <HAL_DMA_Start_IT+0x228>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a53      	ldr	r2, [pc, #332]	; (8003a74 <HAL_DMA_Start_IT+0x22c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_DMA_Start_IT+0xee>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a51      	ldr	r2, [pc, #324]	; (8003a78 <HAL_DMA_Start_IT+0x230>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <HAL_DMA_Start_IT+0x100>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e007      	b.n	8003958 <HAL_DMA_Start_IT+0x110>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f001 fe74 	bl	800564c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <HAL_DMA_Start_IT+0x1f4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04a      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a33      	ldr	r2, [pc, #204]	; (8003a40 <HAL_DMA_Start_IT+0x1f8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d045      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a31      	ldr	r2, [pc, #196]	; (8003a44 <HAL_DMA_Start_IT+0x1fc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d040      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_DMA_Start_IT+0x200>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d03b      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <HAL_DMA_Start_IT+0x204>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d036      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HAL_DMA_Start_IT+0x208>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d031      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HAL_DMA_Start_IT+0x20c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d02c      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <HAL_DMA_Start_IT+0x210>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d027      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <HAL_DMA_Start_IT+0x214>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d022      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_DMA_Start_IT+0x218>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d01d      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <HAL_DMA_Start_IT+0x21c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a24      	ldr	r2, [pc, #144]	; (8003a68 <HAL_DMA_Start_IT+0x220>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_DMA_Start_IT+0x224>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a21      	ldr	r2, [pc, #132]	; (8003a70 <HAL_DMA_Start_IT+0x228>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_DMA_Start_IT+0x22c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_DMA_Start_IT+0x1bc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_DMA_Start_IT+0x230>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Start_IT+0x1c0>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_DMA_Start_IT+0x1c2>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d036      	beq.n	8003a7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 021e 	bic.w	r2, r3, #30
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0216 	orr.w	r2, r2, #22
 8003a20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03e      	beq.n	8003aa8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0208 	orr.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e035      	b.n	8003aa8 <HAL_DMA_Start_IT+0x260>
 8003a3c:	40020010 	.word	0x40020010
 8003a40:	40020028 	.word	0x40020028
 8003a44:	40020040 	.word	0x40020040
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	40020070 	.word	0x40020070
 8003a50:	40020088 	.word	0x40020088
 8003a54:	400200a0 	.word	0x400200a0
 8003a58:	400200b8 	.word	0x400200b8
 8003a5c:	40020410 	.word	0x40020410
 8003a60:	40020428 	.word	0x40020428
 8003a64:	40020440 	.word	0x40020440
 8003a68:	40020458 	.word	0x40020458
 8003a6c:	40020470 	.word	0x40020470
 8003a70:	40020488 	.word	0x40020488
 8003a74:	400204a0 	.word	0x400204a0
 8003a78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 020e 	bic.w	r2, r3, #14
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020a 	orr.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0204 	orr.w	r2, r2, #4
 8003aa6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a83      	ldr	r2, [pc, #524]	; (8003cbc <HAL_DMA_Start_IT+0x474>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d072      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a82      	ldr	r2, [pc, #520]	; (8003cc0 <HAL_DMA_Start_IT+0x478>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d06d      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_DMA_Start_IT+0x47c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d068      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7f      	ldr	r2, [pc, #508]	; (8003cc8 <HAL_DMA_Start_IT+0x480>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d063      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <HAL_DMA_Start_IT+0x484>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d05e      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7c      	ldr	r2, [pc, #496]	; (8003cd0 <HAL_DMA_Start_IT+0x488>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d059      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7a      	ldr	r2, [pc, #488]	; (8003cd4 <HAL_DMA_Start_IT+0x48c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d054      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a79      	ldr	r2, [pc, #484]	; (8003cd8 <HAL_DMA_Start_IT+0x490>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d04f      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a77      	ldr	r2, [pc, #476]	; (8003cdc <HAL_DMA_Start_IT+0x494>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a76      	ldr	r2, [pc, #472]	; (8003ce0 <HAL_DMA_Start_IT+0x498>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a74      	ldr	r2, [pc, #464]	; (8003ce4 <HAL_DMA_Start_IT+0x49c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a73      	ldr	r2, [pc, #460]	; (8003ce8 <HAL_DMA_Start_IT+0x4a0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a71      	ldr	r2, [pc, #452]	; (8003cec <HAL_DMA_Start_IT+0x4a4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a70      	ldr	r2, [pc, #448]	; (8003cf0 <HAL_DMA_Start_IT+0x4a8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6e      	ldr	r2, [pc, #440]	; (8003cf4 <HAL_DMA_Start_IT+0x4ac>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6d      	ldr	r2, [pc, #436]	; (8003cf8 <HAL_DMA_Start_IT+0x4b0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6b      	ldr	r2, [pc, #428]	; (8003cfc <HAL_DMA_Start_IT+0x4b4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_DMA_Start_IT+0x4b8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a68      	ldr	r2, [pc, #416]	; (8003d04 <HAL_DMA_Start_IT+0x4bc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a67      	ldr	r2, [pc, #412]	; (8003d08 <HAL_DMA_Start_IT+0x4c0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a65      	ldr	r2, [pc, #404]	; (8003d0c <HAL_DMA_Start_IT+0x4c4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a64      	ldr	r2, [pc, #400]	; (8003d10 <HAL_DMA_Start_IT+0x4c8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a62      	ldr	r2, [pc, #392]	; (8003d14 <HAL_DMA_Start_IT+0x4cc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_Start_IT+0x350>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a61      	ldr	r2, [pc, #388]	; (8003d18 <HAL_DMA_Start_IT+0x4d0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_DMA_Start_IT+0x354>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_DMA_Start_IT+0x356>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a37      	ldr	r2, [pc, #220]	; (8003cbc <HAL_DMA_Start_IT+0x474>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04a      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a36      	ldr	r2, [pc, #216]	; (8003cc0 <HAL_DMA_Start_IT+0x478>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d045      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a34      	ldr	r2, [pc, #208]	; (8003cc4 <HAL_DMA_Start_IT+0x47c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d040      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a33      	ldr	r2, [pc, #204]	; (8003cc8 <HAL_DMA_Start_IT+0x480>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d03b      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a31      	ldr	r2, [pc, #196]	; (8003ccc <HAL_DMA_Start_IT+0x484>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d036      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <HAL_DMA_Start_IT+0x488>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d031      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2e      	ldr	r2, [pc, #184]	; (8003cd4 <HAL_DMA_Start_IT+0x48c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02c      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_DMA_Start_IT+0x490>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d027      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	; (8003cdc <HAL_DMA_Start_IT+0x494>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d022      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <HAL_DMA_Start_IT+0x498>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01d      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_DMA_Start_IT+0x49c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <HAL_DMA_Start_IT+0x4a0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <HAL_DMA_Start_IT+0x4a4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <HAL_DMA_Start_IT+0x4a8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <HAL_DMA_Start_IT+0x4ac>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_DMA_Start_IT+0x430>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <HAL_DMA_Start_IT+0x4b0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <HAL_DMA_Start_IT+0x442>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e012      	b.n	8003cb0 <HAL_DMA_Start_IT+0x468>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e009      	b.n	8003cb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40020010 	.word	0x40020010
 8003cc0:	40020028 	.word	0x40020028
 8003cc4:	40020040 	.word	0x40020040
 8003cc8:	40020058 	.word	0x40020058
 8003ccc:	40020070 	.word	0x40020070
 8003cd0:	40020088 	.word	0x40020088
 8003cd4:	400200a0 	.word	0x400200a0
 8003cd8:	400200b8 	.word	0x400200b8
 8003cdc:	40020410 	.word	0x40020410
 8003ce0:	40020428 	.word	0x40020428
 8003ce4:	40020440 	.word	0x40020440
 8003ce8:	40020458 	.word	0x40020458
 8003cec:	40020470 	.word	0x40020470
 8003cf0:	40020488 	.word	0x40020488
 8003cf4:	400204a0 	.word	0x400204a0
 8003cf8:	400204b8 	.word	0x400204b8
 8003cfc:	58025408 	.word	0x58025408
 8003d00:	5802541c 	.word	0x5802541c
 8003d04:	58025430 	.word	0x58025430
 8003d08:	58025444 	.word	0x58025444
 8003d0c:	58025458 	.word	0x58025458
 8003d10:	5802546c 	.word	0x5802546c
 8003d14:	58025480 	.word	0x58025480
 8003d18:	58025494 	.word	0x58025494

08003d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003d24:	f7ff f8d4 	bl	8002ed0 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e2dc      	b.n	80042ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d008      	beq.n	8003d52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2280      	movs	r2, #128	; 0x80
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e2cd      	b.n	80042ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a76      	ldr	r2, [pc, #472]	; (8003f30 <HAL_DMA_Abort+0x214>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a74      	ldr	r2, [pc, #464]	; (8003f34 <HAL_DMA_Abort+0x218>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	; (8003f38 <HAL_DMA_Abort+0x21c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a71      	ldr	r2, [pc, #452]	; (8003f3c <HAL_DMA_Abort+0x220>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a70      	ldr	r2, [pc, #448]	; (8003f40 <HAL_DMA_Abort+0x224>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	; (8003f44 <HAL_DMA_Abort+0x228>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6d      	ldr	r2, [pc, #436]	; (8003f48 <HAL_DMA_Abort+0x22c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	; (8003f4c <HAL_DMA_Abort+0x230>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6a      	ldr	r2, [pc, #424]	; (8003f50 <HAL_DMA_Abort+0x234>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a68      	ldr	r2, [pc, #416]	; (8003f54 <HAL_DMA_Abort+0x238>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <HAL_DMA_Abort+0x23c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	; (8003f5c <HAL_DMA_Abort+0x240>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a64      	ldr	r2, [pc, #400]	; (8003f60 <HAL_DMA_Abort+0x244>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a62      	ldr	r2, [pc, #392]	; (8003f64 <HAL_DMA_Abort+0x248>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_DMA_Abort+0x24c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_Abort+0xd6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5f      	ldr	r2, [pc, #380]	; (8003f6c <HAL_DMA_Abort+0x250>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_DMA_Abort+0xda>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_Abort+0xdc>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 021e 	bic.w	r2, r2, #30
 8003e0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e00a      	b.n	8003e3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 020e 	bic.w	r2, r2, #14
 8003e32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <HAL_DMA_Abort+0x214>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d072      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <HAL_DMA_Abort+0x218>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d06d      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <HAL_DMA_Abort+0x21c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d068      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a37      	ldr	r2, [pc, #220]	; (8003f3c <HAL_DMA_Abort+0x220>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d063      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a36      	ldr	r2, [pc, #216]	; (8003f40 <HAL_DMA_Abort+0x224>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d05e      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a34      	ldr	r2, [pc, #208]	; (8003f44 <HAL_DMA_Abort+0x228>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d059      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a33      	ldr	r2, [pc, #204]	; (8003f48 <HAL_DMA_Abort+0x22c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d054      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a31      	ldr	r2, [pc, #196]	; (8003f4c <HAL_DMA_Abort+0x230>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d04f      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a30      	ldr	r2, [pc, #192]	; (8003f50 <HAL_DMA_Abort+0x234>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d04a      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2e      	ldr	r2, [pc, #184]	; (8003f54 <HAL_DMA_Abort+0x238>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d045      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2d      	ldr	r2, [pc, #180]	; (8003f58 <HAL_DMA_Abort+0x23c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <HAL_DMA_Abort+0x240>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d03b      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <HAL_DMA_Abort+0x244>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d036      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <HAL_DMA_Abort+0x248>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d031      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <HAL_DMA_Abort+0x24c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02c      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <HAL_DMA_Abort+0x250>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d027      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <HAL_DMA_Abort+0x254>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_DMA_Abort+0x258>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_DMA_Abort+0x25c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_DMA_Abort+0x260>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_DMA_Abort+0x264>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_DMA_Abort+0x268>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_DMA_Abort+0x26c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_DMA_Abort+0x20e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_DMA_Abort+0x270>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d132      	bne.n	8003f90 <HAL_DMA_Abort+0x274>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e031      	b.n	8003f92 <HAL_DMA_Abort+0x276>
 8003f2e:	bf00      	nop
 8003f30:	40020010 	.word	0x40020010
 8003f34:	40020028 	.word	0x40020028
 8003f38:	40020040 	.word	0x40020040
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	40020070 	.word	0x40020070
 8003f44:	40020088 	.word	0x40020088
 8003f48:	400200a0 	.word	0x400200a0
 8003f4c:	400200b8 	.word	0x400200b8
 8003f50:	40020410 	.word	0x40020410
 8003f54:	40020428 	.word	0x40020428
 8003f58:	40020440 	.word	0x40020440
 8003f5c:	40020458 	.word	0x40020458
 8003f60:	40020470 	.word	0x40020470
 8003f64:	40020488 	.word	0x40020488
 8003f68:	400204a0 	.word	0x400204a0
 8003f6c:	400204b8 	.word	0x400204b8
 8003f70:	58025408 	.word	0x58025408
 8003f74:	5802541c 	.word	0x5802541c
 8003f78:	58025430 	.word	0x58025430
 8003f7c:	58025444 	.word	0x58025444
 8003f80:	58025458 	.word	0x58025458
 8003f84:	5802546c 	.word	0x5802546c
 8003f88:	58025480 	.word	0x58025480
 8003f8c:	58025494 	.word	0x58025494
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6d      	ldr	r2, [pc, #436]	; (8004160 <HAL_DMA_Abort+0x444>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6b      	ldr	r2, [pc, #428]	; (8004164 <HAL_DMA_Abort+0x448>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6a      	ldr	r2, [pc, #424]	; (8004168 <HAL_DMA_Abort+0x44c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a68      	ldr	r2, [pc, #416]	; (800416c <HAL_DMA_Abort+0x450>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a67      	ldr	r2, [pc, #412]	; (8004170 <HAL_DMA_Abort+0x454>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a65      	ldr	r2, [pc, #404]	; (8004174 <HAL_DMA_Abort+0x458>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a64      	ldr	r2, [pc, #400]	; (8004178 <HAL_DMA_Abort+0x45c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a62      	ldr	r2, [pc, #392]	; (800417c <HAL_DMA_Abort+0x460>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a61      	ldr	r2, [pc, #388]	; (8004180 <HAL_DMA_Abort+0x464>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5f      	ldr	r2, [pc, #380]	; (8004184 <HAL_DMA_Abort+0x468>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <HAL_DMA_Abort+0x46c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5c      	ldr	r2, [pc, #368]	; (800418c <HAL_DMA_Abort+0x470>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5b      	ldr	r2, [pc, #364]	; (8004190 <HAL_DMA_Abort+0x474>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a59      	ldr	r2, [pc, #356]	; (8004194 <HAL_DMA_Abort+0x478>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_DMA_Abort+0x47c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Abort+0x32a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a56      	ldr	r2, [pc, #344]	; (800419c <HAL_DMA_Abort+0x480>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <HAL_DMA_Abort+0x33c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e007      	b.n	8004068 <HAL_DMA_Abort+0x34c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004068:	e013      	b.n	8004092 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406a:	f7fe ff31 	bl	8002ed0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b05      	cmp	r3, #5
 8004076:	d90c      	bls.n	8004092 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e12d      	b.n	80042ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <HAL_DMA_Abort+0x444>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d04a      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <HAL_DMA_Abort+0x448>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d045      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <HAL_DMA_Abort+0x44c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d040      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_DMA_Abort+0x450>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d03b      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a29      	ldr	r2, [pc, #164]	; (8004170 <HAL_DMA_Abort+0x454>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d036      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a27      	ldr	r2, [pc, #156]	; (8004174 <HAL_DMA_Abort+0x458>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d031      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_DMA_Abort+0x45c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d02c      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_DMA_Abort+0x460>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d027      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <HAL_DMA_Abort+0x464>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d022      	beq.n	800413e <HAL_DMA_Abort+0x422>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a21      	ldr	r2, [pc, #132]	; (8004184 <HAL_DMA_Abort+0x468>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01d      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <HAL_DMA_Abort+0x46c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d018      	beq.n	800413e <HAL_DMA_Abort+0x422>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_DMA_Abort+0x470>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <HAL_DMA_Abort+0x474>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_DMA_Abort+0x478>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_DMA_Abort+0x422>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <HAL_DMA_Abort+0x47c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_DMA_Abort+0x422>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_DMA_Abort+0x480>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_DMA_Abort+0x426>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_DMA_Abort+0x428>
 8004142:	2300      	movs	r3, #0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02b      	beq.n	80041a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	223f      	movs	r2, #63	; 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	e02a      	b.n	80041b6 <HAL_DMA_Abort+0x49a>
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2201      	movs	r2, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a4f      	ldr	r2, [pc, #316]	; (80042f8 <HAL_DMA_Abort+0x5dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d072      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4d      	ldr	r2, [pc, #308]	; (80042fc <HAL_DMA_Abort+0x5e0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d06d      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4c      	ldr	r2, [pc, #304]	; (8004300 <HAL_DMA_Abort+0x5e4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d068      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <HAL_DMA_Abort+0x5e8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d063      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a49      	ldr	r2, [pc, #292]	; (8004308 <HAL_DMA_Abort+0x5ec>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d05e      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a47      	ldr	r2, [pc, #284]	; (800430c <HAL_DMA_Abort+0x5f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d059      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a46      	ldr	r2, [pc, #280]	; (8004310 <HAL_DMA_Abort+0x5f4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d054      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a44      	ldr	r2, [pc, #272]	; (8004314 <HAL_DMA_Abort+0x5f8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04f      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a43      	ldr	r2, [pc, #268]	; (8004318 <HAL_DMA_Abort+0x5fc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d04a      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a41      	ldr	r2, [pc, #260]	; (800431c <HAL_DMA_Abort+0x600>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d045      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a40      	ldr	r2, [pc, #256]	; (8004320 <HAL_DMA_Abort+0x604>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d040      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3e      	ldr	r2, [pc, #248]	; (8004324 <HAL_DMA_Abort+0x608>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d03b      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3d      	ldr	r2, [pc, #244]	; (8004328 <HAL_DMA_Abort+0x60c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d036      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3b      	ldr	r2, [pc, #236]	; (800432c <HAL_DMA_Abort+0x610>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d031      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3a      	ldr	r2, [pc, #232]	; (8004330 <HAL_DMA_Abort+0x614>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d02c      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a38      	ldr	r2, [pc, #224]	; (8004334 <HAL_DMA_Abort+0x618>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d027      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a37      	ldr	r2, [pc, #220]	; (8004338 <HAL_DMA_Abort+0x61c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d022      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a35      	ldr	r2, [pc, #212]	; (800433c <HAL_DMA_Abort+0x620>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01d      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a34      	ldr	r2, [pc, #208]	; (8004340 <HAL_DMA_Abort+0x624>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a32      	ldr	r2, [pc, #200]	; (8004344 <HAL_DMA_Abort+0x628>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_DMA_Abort+0x62c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_DMA_Abort+0x630>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <HAL_DMA_Abort+0x634>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_DMA_Abort+0x58a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <HAL_DMA_Abort+0x638>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_Abort+0x58e>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_DMA_Abort+0x590>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8
 8004338:	58025408 	.word	0x58025408
 800433c:	5802541c 	.word	0x5802541c
 8004340:	58025430 	.word	0x58025430
 8004344:	58025444 	.word	0x58025444
 8004348:	58025458 	.word	0x58025458
 800434c:	5802546c 	.word	0x5802546c
 8004350:	58025480 	.word	0x58025480
 8004354:	58025494 	.word	0x58025494

08004358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e205      	b.n	8004776 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d004      	beq.n	8004380 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2280      	movs	r2, #128	; 0x80
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e1fa      	b.n	8004776 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a8c      	ldr	r2, [pc, #560]	; (80045b8 <HAL_DMA_Abort_IT+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d04a      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a8b      	ldr	r2, [pc, #556]	; (80045bc <HAL_DMA_Abort_IT+0x264>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d045      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a89      	ldr	r2, [pc, #548]	; (80045c0 <HAL_DMA_Abort_IT+0x268>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d040      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a88      	ldr	r2, [pc, #544]	; (80045c4 <HAL_DMA_Abort_IT+0x26c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d03b      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a86      	ldr	r2, [pc, #536]	; (80045c8 <HAL_DMA_Abort_IT+0x270>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d036      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a85      	ldr	r2, [pc, #532]	; (80045cc <HAL_DMA_Abort_IT+0x274>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d031      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a83      	ldr	r2, [pc, #524]	; (80045d0 <HAL_DMA_Abort_IT+0x278>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02c      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a82      	ldr	r2, [pc, #520]	; (80045d4 <HAL_DMA_Abort_IT+0x27c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d027      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a80      	ldr	r2, [pc, #512]	; (80045d8 <HAL_DMA_Abort_IT+0x280>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d022      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a7f      	ldr	r2, [pc, #508]	; (80045dc <HAL_DMA_Abort_IT+0x284>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01d      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7d      	ldr	r2, [pc, #500]	; (80045e0 <HAL_DMA_Abort_IT+0x288>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7c      	ldr	r2, [pc, #496]	; (80045e4 <HAL_DMA_Abort_IT+0x28c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7a      	ldr	r2, [pc, #488]	; (80045e8 <HAL_DMA_Abort_IT+0x290>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a79      	ldr	r2, [pc, #484]	; (80045ec <HAL_DMA_Abort_IT+0x294>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <HAL_DMA_Abort_IT+0x298>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_DMA_Abort_IT+0xc8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a76      	ldr	r2, [pc, #472]	; (80045f4 <HAL_DMA_Abort_IT+0x29c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_DMA_Abort_IT+0xcc>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_DMA_Abort_IT+0xce>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d065      	beq.n	80044f6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a60      	ldr	r2, [pc, #384]	; (80045b8 <HAL_DMA_Abort_IT+0x260>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d04a      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5e      	ldr	r2, [pc, #376]	; (80045bc <HAL_DMA_Abort_IT+0x264>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d045      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a5d      	ldr	r2, [pc, #372]	; (80045c0 <HAL_DMA_Abort_IT+0x268>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d040      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5b      	ldr	r2, [pc, #364]	; (80045c4 <HAL_DMA_Abort_IT+0x26c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d03b      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a5a      	ldr	r2, [pc, #360]	; (80045c8 <HAL_DMA_Abort_IT+0x270>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d036      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_DMA_Abort_IT+0x274>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d031      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a57      	ldr	r2, [pc, #348]	; (80045d0 <HAL_DMA_Abort_IT+0x278>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02c      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a55      	ldr	r2, [pc, #340]	; (80045d4 <HAL_DMA_Abort_IT+0x27c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d027      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a54      	ldr	r2, [pc, #336]	; (80045d8 <HAL_DMA_Abort_IT+0x280>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a52      	ldr	r2, [pc, #328]	; (80045dc <HAL_DMA_Abort_IT+0x284>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a51      	ldr	r2, [pc, #324]	; (80045e0 <HAL_DMA_Abort_IT+0x288>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a4f      	ldr	r2, [pc, #316]	; (80045e4 <HAL_DMA_Abort_IT+0x28c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4e      	ldr	r2, [pc, #312]	; (80045e8 <HAL_DMA_Abort_IT+0x290>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_DMA_Abort_IT+0x294>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_DMA_Abort_IT+0x298>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x17a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a49      	ldr	r2, [pc, #292]	; (80045f4 <HAL_DMA_Abort_IT+0x29c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d108      	bne.n	80044e4 <HAL_DMA_Abort_IT+0x18c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e147      	b.n	8004774 <HAL_DMA_Abort_IT+0x41c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e13e      	b.n	8004774 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 020e 	bic.w	r2, r2, #14
 8004504:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_DMA_Abort_IT+0x260>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d04a      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a29      	ldr	r2, [pc, #164]	; (80045bc <HAL_DMA_Abort_IT+0x264>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d045      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_DMA_Abort_IT+0x268>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d040      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <HAL_DMA_Abort_IT+0x26c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d03b      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <HAL_DMA_Abort_IT+0x270>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d036      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a23      	ldr	r2, [pc, #140]	; (80045cc <HAL_DMA_Abort_IT+0x274>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d031      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <HAL_DMA_Abort_IT+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d02c      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a20      	ldr	r2, [pc, #128]	; (80045d4 <HAL_DMA_Abort_IT+0x27c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d027      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_DMA_Abort_IT+0x280>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <HAL_DMA_Abort_IT+0x284>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01d      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_DMA_Abort_IT+0x288>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_DMA_Abort_IT+0x28c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_DMA_Abort_IT+0x290>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_DMA_Abort_IT+0x294>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_DMA_Abort_IT+0x298>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_DMA_Abort_IT+0x24e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_DMA_Abort_IT+0x29c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d128      	bne.n	80045f8 <HAL_DMA_Abort_IT+0x2a0>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e027      	b.n	8004608 <HAL_DMA_Abort_IT+0x2b0>
 80045b8:	40020010 	.word	0x40020010
 80045bc:	40020028 	.word	0x40020028
 80045c0:	40020040 	.word	0x40020040
 80045c4:	40020058 	.word	0x40020058
 80045c8:	40020070 	.word	0x40020070
 80045cc:	40020088 	.word	0x40020088
 80045d0:	400200a0 	.word	0x400200a0
 80045d4:	400200b8 	.word	0x400200b8
 80045d8:	40020410 	.word	0x40020410
 80045dc:	40020428 	.word	0x40020428
 80045e0:	40020440 	.word	0x40020440
 80045e4:	40020458 	.word	0x40020458
 80045e8:	40020470 	.word	0x40020470
 80045ec:	40020488 	.word	0x40020488
 80045f0:	400204a0 	.word	0x400204a0
 80045f4:	400204b8 	.word	0x400204b8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5c      	ldr	r2, [pc, #368]	; (8004780 <HAL_DMA_Abort_IT+0x428>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d072      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5b      	ldr	r2, [pc, #364]	; (8004784 <HAL_DMA_Abort_IT+0x42c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d06d      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a59      	ldr	r2, [pc, #356]	; (8004788 <HAL_DMA_Abort_IT+0x430>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d068      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a58      	ldr	r2, [pc, #352]	; (800478c <HAL_DMA_Abort_IT+0x434>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d063      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a56      	ldr	r2, [pc, #344]	; (8004790 <HAL_DMA_Abort_IT+0x438>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d05e      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a55      	ldr	r2, [pc, #340]	; (8004794 <HAL_DMA_Abort_IT+0x43c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d059      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a53      	ldr	r2, [pc, #332]	; (8004798 <HAL_DMA_Abort_IT+0x440>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d054      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a52      	ldr	r2, [pc, #328]	; (800479c <HAL_DMA_Abort_IT+0x444>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04f      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_DMA_Abort_IT+0x448>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04a      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_DMA_Abort_IT+0x44c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d045      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a4d      	ldr	r2, [pc, #308]	; (80047a8 <HAL_DMA_Abort_IT+0x450>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d040      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4c      	ldr	r2, [pc, #304]	; (80047ac <HAL_DMA_Abort_IT+0x454>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d03b      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4a      	ldr	r2, [pc, #296]	; (80047b0 <HAL_DMA_Abort_IT+0x458>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d036      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a49      	ldr	r2, [pc, #292]	; (80047b4 <HAL_DMA_Abort_IT+0x45c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d031      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a47      	ldr	r2, [pc, #284]	; (80047b8 <HAL_DMA_Abort_IT+0x460>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d02c      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a46      	ldr	r2, [pc, #280]	; (80047bc <HAL_DMA_Abort_IT+0x464>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d027      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a44      	ldr	r2, [pc, #272]	; (80047c0 <HAL_DMA_Abort_IT+0x468>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a43      	ldr	r2, [pc, #268]	; (80047c4 <HAL_DMA_Abort_IT+0x46c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01d      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a41      	ldr	r2, [pc, #260]	; (80047c8 <HAL_DMA_Abort_IT+0x470>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <HAL_DMA_Abort_IT+0x474>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3e      	ldr	r2, [pc, #248]	; (80047d0 <HAL_DMA_Abort_IT+0x478>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <HAL_DMA_Abort_IT+0x47c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a3b      	ldr	r2, [pc, #236]	; (80047d8 <HAL_DMA_Abort_IT+0x480>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_DMA_Abort_IT+0x3a0>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a3a      	ldr	r2, [pc, #232]	; (80047dc <HAL_DMA_Abort_IT+0x484>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_DMA_Abort_IT+0x3a4>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_DMA_Abort_IT+0x3a6>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004710:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004730:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004748:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004752:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40020010 	.word	0x40020010
 8004784:	40020028 	.word	0x40020028
 8004788:	40020040 	.word	0x40020040
 800478c:	40020058 	.word	0x40020058
 8004790:	40020070 	.word	0x40020070
 8004794:	40020088 	.word	0x40020088
 8004798:	400200a0 	.word	0x400200a0
 800479c:	400200b8 	.word	0x400200b8
 80047a0:	40020410 	.word	0x40020410
 80047a4:	40020428 	.word	0x40020428
 80047a8:	40020440 	.word	0x40020440
 80047ac:	40020458 	.word	0x40020458
 80047b0:	40020470 	.word	0x40020470
 80047b4:	40020488 	.word	0x40020488
 80047b8:	400204a0 	.word	0x400204a0
 80047bc:	400204b8 	.word	0x400204b8
 80047c0:	58025408 	.word	0x58025408
 80047c4:	5802541c 	.word	0x5802541c
 80047c8:	58025430 	.word	0x58025430
 80047cc:	58025444 	.word	0x58025444
 80047d0:	58025458 	.word	0x58025458
 80047d4:	5802546c 	.word	0x5802546c
 80047d8:	58025480 	.word	0x58025480
 80047dc:	58025494 	.word	0x58025494

080047e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047ec:	4b67      	ldr	r3, [pc, #412]	; (800498c <HAL_DMA_IRQHandler+0x1ac>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a67      	ldr	r2, [pc, #412]	; (8004990 <HAL_DMA_IRQHandler+0x1b0>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	0a9b      	lsrs	r3, r3, #10
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a5f      	ldr	r2, [pc, #380]	; (8004994 <HAL_DMA_IRQHandler+0x1b4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d04a      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a5d      	ldr	r2, [pc, #372]	; (8004998 <HAL_DMA_IRQHandler+0x1b8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d045      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a5c      	ldr	r2, [pc, #368]	; (800499c <HAL_DMA_IRQHandler+0x1bc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d040      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a5a      	ldr	r2, [pc, #360]	; (80049a0 <HAL_DMA_IRQHandler+0x1c0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d03b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a59      	ldr	r2, [pc, #356]	; (80049a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d036      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a57      	ldr	r2, [pc, #348]	; (80049a8 <HAL_DMA_IRQHandler+0x1c8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d031      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a56      	ldr	r2, [pc, #344]	; (80049ac <HAL_DMA_IRQHandler+0x1cc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d02c      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a54      	ldr	r2, [pc, #336]	; (80049b0 <HAL_DMA_IRQHandler+0x1d0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d027      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a53      	ldr	r2, [pc, #332]	; (80049b4 <HAL_DMA_IRQHandler+0x1d4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a51      	ldr	r2, [pc, #324]	; (80049b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01d      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a50      	ldr	r2, [pc, #320]	; (80049bc <HAL_DMA_IRQHandler+0x1dc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a4e      	ldr	r2, [pc, #312]	; (80049c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a4d      	ldr	r2, [pc, #308]	; (80049c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a4b      	ldr	r2, [pc, #300]	; (80049c8 <HAL_DMA_IRQHandler+0x1e8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a4a      	ldr	r2, [pc, #296]	; (80049cc <HAL_DMA_IRQHandler+0x1ec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xd2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a48      	ldr	r2, [pc, #288]	; (80049d0 <HAL_DMA_IRQHandler+0x1f0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_DMA_IRQHandler+0xd6>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_IRQHandler+0xd8>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 842b 	beq.w	8005114 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2208      	movs	r2, #8
 80048c8:	409a      	lsls	r2, r3
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80a2 	beq.w	8004a18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <HAL_DMA_IRQHandler+0x1b4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d04a      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <HAL_DMA_IRQHandler+0x1b8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d045      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_DMA_IRQHandler+0x1bc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d040      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <HAL_DMA_IRQHandler+0x1c0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d03b      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d036      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <HAL_DMA_IRQHandler+0x1c8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d031      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <HAL_DMA_IRQHandler+0x1cc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d02c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <HAL_DMA_IRQHandler+0x1d0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d027      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_DMA_IRQHandler+0x1d4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d01d      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_DMA_IRQHandler+0x1dc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <HAL_DMA_IRQHandler+0x1e8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <HAL_DMA_IRQHandler+0x1ec>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_DMA_IRQHandler+0x194>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <HAL_DMA_IRQHandler+0x1f0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d12f      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x1f4>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e02e      	b.n	80049e8 <HAL_DMA_IRQHandler+0x208>
 800498a:	bf00      	nop
 800498c:	24000000 	.word	0x24000000
 8004990:	1b4e81b5 	.word	0x1b4e81b5
 8004994:	40020010 	.word	0x40020010
 8004998:	40020028 	.word	0x40020028
 800499c:	40020040 	.word	0x40020040
 80049a0:	40020058 	.word	0x40020058
 80049a4:	40020070 	.word	0x40020070
 80049a8:	40020088 	.word	0x40020088
 80049ac:	400200a0 	.word	0x400200a0
 80049b0:	400200b8 	.word	0x400200b8
 80049b4:	40020410 	.word	0x40020410
 80049b8:	40020428 	.word	0x40020428
 80049bc:	40020440 	.word	0x40020440
 80049c0:	40020458 	.word	0x40020458
 80049c4:	40020470 	.word	0x40020470
 80049c8:	40020488 	.word	0x40020488
 80049cc:	400204a0 	.word	0x400204a0
 80049d0:	400204b8 	.word	0x400204b8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2208      	movs	r2, #8
 8004a06:	409a      	lsls	r2, r3
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d06e      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a69      	ldr	r2, [pc, #420]	; (8004bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d04a      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a67      	ldr	r2, [pc, #412]	; (8004bdc <HAL_DMA_IRQHandler+0x3fc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d045      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a66      	ldr	r2, [pc, #408]	; (8004be0 <HAL_DMA_IRQHandler+0x400>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d040      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a64      	ldr	r2, [pc, #400]	; (8004be4 <HAL_DMA_IRQHandler+0x404>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a63      	ldr	r2, [pc, #396]	; (8004be8 <HAL_DMA_IRQHandler+0x408>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d036      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a61      	ldr	r2, [pc, #388]	; (8004bec <HAL_DMA_IRQHandler+0x40c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d031      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a60      	ldr	r2, [pc, #384]	; (8004bf0 <HAL_DMA_IRQHandler+0x410>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d02c      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5e      	ldr	r2, [pc, #376]	; (8004bf4 <HAL_DMA_IRQHandler+0x414>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d027      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5d      	ldr	r2, [pc, #372]	; (8004bf8 <HAL_DMA_IRQHandler+0x418>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d022      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5b      	ldr	r2, [pc, #364]	; (8004bfc <HAL_DMA_IRQHandler+0x41c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a5a      	ldr	r2, [pc, #360]	; (8004c00 <HAL_DMA_IRQHandler+0x420>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <HAL_DMA_IRQHandler+0x424>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a57      	ldr	r2, [pc, #348]	; (8004c08 <HAL_DMA_IRQHandler+0x428>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a55      	ldr	r2, [pc, #340]	; (8004c0c <HAL_DMA_IRQHandler+0x42c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a54      	ldr	r2, [pc, #336]	; (8004c10 <HAL_DMA_IRQHandler+0x430>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_DMA_IRQHandler+0x2ee>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a52      	ldr	r2, [pc, #328]	; (8004c14 <HAL_DMA_IRQHandler+0x434>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10a      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0x304>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e003      	b.n	8004aec <HAL_DMA_IRQHandler+0x30c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2201      	movs	r2, #1
 8004afa:	409a      	lsls	r2, r3
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f043 0202 	orr.w	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	2204      	movs	r2, #4
 8004b16:	409a      	lsls	r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 808f 	beq.w	8004c40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2c      	ldr	r2, [pc, #176]	; (8004bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d04a      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <HAL_DMA_IRQHandler+0x3fc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d045      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <HAL_DMA_IRQHandler+0x400>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d040      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <HAL_DMA_IRQHandler+0x404>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d03b      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <HAL_DMA_IRQHandler+0x408>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d036      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a24      	ldr	r2, [pc, #144]	; (8004bec <HAL_DMA_IRQHandler+0x40c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d031      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_DMA_IRQHandler+0x410>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d02c      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <HAL_DMA_IRQHandler+0x414>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d027      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <HAL_DMA_IRQHandler+0x418>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <HAL_DMA_IRQHandler+0x41c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_DMA_IRQHandler+0x420>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <HAL_DMA_IRQHandler+0x424>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <HAL_DMA_IRQHandler+0x428>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <HAL_DMA_IRQHandler+0x42c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <HAL_DMA_IRQHandler+0x430>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x3e2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <HAL_DMA_IRQHandler+0x434>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d12a      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x438>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e023      	b.n	8004c20 <HAL_DMA_IRQHandler+0x440>
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	f043 0204 	orr.w	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2210      	movs	r2, #16
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80a6 	beq.w	8004da2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a85      	ldr	r2, [pc, #532]	; (8004e70 <HAL_DMA_IRQHandler+0x690>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d04a      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a83      	ldr	r2, [pc, #524]	; (8004e74 <HAL_DMA_IRQHandler+0x694>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d045      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a82      	ldr	r2, [pc, #520]	; (8004e78 <HAL_DMA_IRQHandler+0x698>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d040      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a80      	ldr	r2, [pc, #512]	; (8004e7c <HAL_DMA_IRQHandler+0x69c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d03b      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7f      	ldr	r2, [pc, #508]	; (8004e80 <HAL_DMA_IRQHandler+0x6a0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d036      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a7d      	ldr	r2, [pc, #500]	; (8004e84 <HAL_DMA_IRQHandler+0x6a4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d031      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7c      	ldr	r2, [pc, #496]	; (8004e88 <HAL_DMA_IRQHandler+0x6a8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d02c      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a7a      	ldr	r2, [pc, #488]	; (8004e8c <HAL_DMA_IRQHandler+0x6ac>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d027      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a79      	ldr	r2, [pc, #484]	; (8004e90 <HAL_DMA_IRQHandler+0x6b0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d022      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a77      	ldr	r2, [pc, #476]	; (8004e94 <HAL_DMA_IRQHandler+0x6b4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01d      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a76      	ldr	r2, [pc, #472]	; (8004e98 <HAL_DMA_IRQHandler+0x6b8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a74      	ldr	r2, [pc, #464]	; (8004e9c <HAL_DMA_IRQHandler+0x6bc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a73      	ldr	r2, [pc, #460]	; (8004ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a71      	ldr	r2, [pc, #452]	; (8004ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a70      	ldr	r2, [pc, #448]	; (8004ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x516>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6e      	ldr	r2, [pc, #440]	; (8004eac <HAL_DMA_IRQHandler+0x6cc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10a      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x52c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e009      	b.n	8004d20 <HAL_DMA_IRQHandler+0x540>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d03e      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d018      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d108      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d024      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
 8004d60:	e01f      	b.n	8004da2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01b      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
 8004d72:	e016      	b.n	8004da2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0208 	bic.w	r2, r2, #8
 8004d90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2220      	movs	r2, #32
 8004dac:	409a      	lsls	r2, r3
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8110 	beq.w	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <HAL_DMA_IRQHandler+0x690>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04a      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <HAL_DMA_IRQHandler+0x694>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d045      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a29      	ldr	r2, [pc, #164]	; (8004e78 <HAL_DMA_IRQHandler+0x698>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d040      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a28      	ldr	r2, [pc, #160]	; (8004e7c <HAL_DMA_IRQHandler+0x69c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d03b      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <HAL_DMA_IRQHandler+0x6a0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d036      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <HAL_DMA_IRQHandler+0x6a4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d031      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <HAL_DMA_IRQHandler+0x6a8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02c      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <HAL_DMA_IRQHandler+0x6ac>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d027      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <HAL_DMA_IRQHandler+0x6b0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <HAL_DMA_IRQHandler+0x6b4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <HAL_DMA_IRQHandler+0x6b8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <HAL_DMA_IRQHandler+0x6bc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1a      	ldr	r2, [pc, #104]	; (8004ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x678>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <HAL_DMA_IRQHandler+0x6cc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d12b      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x6d0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e02a      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x6e4>
 8004e6e:	bf00      	nop
 8004e70:	40020010 	.word	0x40020010
 8004e74:	40020028 	.word	0x40020028
 8004e78:	40020040 	.word	0x40020040
 8004e7c:	40020058 	.word	0x40020058
 8004e80:	40020070 	.word	0x40020070
 8004e84:	40020088 	.word	0x40020088
 8004e88:	400200a0 	.word	0x400200a0
 8004e8c:	400200b8 	.word	0x400200b8
 8004e90:	40020410 	.word	0x40020410
 8004e94:	40020428 	.word	0x40020428
 8004e98:	40020440 	.word	0x40020440
 8004e9c:	40020458 	.word	0x40020458
 8004ea0:	40020470 	.word	0x40020470
 8004ea4:	40020488 	.word	0x40020488
 8004ea8:	400204a0 	.word	0x400204a0
 8004eac:	400204b8 	.word	0x400204b8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8087 	beq.w	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d139      	bne.n	8004f5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0216 	bic.w	r2, r2, #22
 8004ef4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <HAL_DMA_IRQHandler+0x736>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0208 	bic.w	r2, r2, #8
 8004f24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	223f      	movs	r2, #63	; 0x3f
 8004f30:	409a      	lsls	r2, r3
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 834a 	beq.w	80055e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
          }
          return;
 8004f58:	e344      	b.n	80055e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d018      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02c      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
 8004f86:	e027      	b.n	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d023      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e01e      	b.n	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
 8004fb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8306 	beq.w	80055ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8088 	beq.w	8005100 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7a      	ldr	r2, [pc, #488]	; (80051e8 <HAL_DMA_IRQHandler+0xa08>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04a      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a79      	ldr	r2, [pc, #484]	; (80051ec <HAL_DMA_IRQHandler+0xa0c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d045      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a77      	ldr	r2, [pc, #476]	; (80051f0 <HAL_DMA_IRQHandler+0xa10>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d040      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a76      	ldr	r2, [pc, #472]	; (80051f4 <HAL_DMA_IRQHandler+0xa14>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d03b      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a74      	ldr	r2, [pc, #464]	; (80051f8 <HAL_DMA_IRQHandler+0xa18>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a73      	ldr	r2, [pc, #460]	; (80051fc <HAL_DMA_IRQHandler+0xa1c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d031      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a71      	ldr	r2, [pc, #452]	; (8005200 <HAL_DMA_IRQHandler+0xa20>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02c      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a70      	ldr	r2, [pc, #448]	; (8005204 <HAL_DMA_IRQHandler+0xa24>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <HAL_DMA_IRQHandler+0xa28>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a6d      	ldr	r2, [pc, #436]	; (800520c <HAL_DMA_IRQHandler+0xa2c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6b      	ldr	r2, [pc, #428]	; (8005210 <HAL_DMA_IRQHandler+0xa30>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6a      	ldr	r2, [pc, #424]	; (8005214 <HAL_DMA_IRQHandler+0xa34>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a68      	ldr	r2, [pc, #416]	; (8005218 <HAL_DMA_IRQHandler+0xa38>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a67      	ldr	r2, [pc, #412]	; (800521c <HAL_DMA_IRQHandler+0xa3c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a65      	ldr	r2, [pc, #404]	; (8005220 <HAL_DMA_IRQHandler+0xa40>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_IRQHandler+0x8b8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a64      	ldr	r2, [pc, #400]	; (8005224 <HAL_DMA_IRQHandler+0xa44>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <HAL_DMA_IRQHandler+0x8ca>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e007      	b.n	80050ba <HAL_DMA_IRQHandler+0x8da>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d307      	bcc.n	80050d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f2      	bne.n	80050ba <HAL_DMA_IRQHandler+0x8da>
 80050d4:	e000      	b.n	80050d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2203      	movs	r2, #3
 80050ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80050ee:	e003      	b.n	80050f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8272 	beq.w	80055ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
 8005112:	e26c      	b.n	80055ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a43      	ldr	r2, [pc, #268]	; (8005228 <HAL_DMA_IRQHandler+0xa48>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a42      	ldr	r2, [pc, #264]	; (800522c <HAL_DMA_IRQHandler+0xa4c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a40      	ldr	r2, [pc, #256]	; (8005230 <HAL_DMA_IRQHandler+0xa50>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3f      	ldr	r2, [pc, #252]	; (8005234 <HAL_DMA_IRQHandler+0xa54>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a3d      	ldr	r2, [pc, #244]	; (8005238 <HAL_DMA_IRQHandler+0xa58>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3c      	ldr	r2, [pc, #240]	; (800523c <HAL_DMA_IRQHandler+0xa5c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a3a      	ldr	r2, [pc, #232]	; (8005240 <HAL_DMA_IRQHandler+0xa60>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_DMA_IRQHandler+0x984>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a39      	ldr	r2, [pc, #228]	; (8005244 <HAL_DMA_IRQHandler+0xa64>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_DMA_IRQHandler+0x988>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_DMA_IRQHandler+0x98a>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 823f 	beq.w	80055ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2204      	movs	r2, #4
 8005182:	409a      	lsls	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80cd 	beq.w	8005328 <HAL_DMA_IRQHandler+0xb48>
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80c7 	beq.w	8005328 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2204      	movs	r2, #4
 80051a4:	409a      	lsls	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d049      	beq.n	8005248 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8210 	beq.w	80055e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d0:	e20a      	b.n	80055e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8206 	beq.w	80055e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e4:	e200      	b.n	80055e8 <HAL_DMA_IRQHandler+0xe08>
 80051e6:	bf00      	nop
 80051e8:	40020010 	.word	0x40020010
 80051ec:	40020028 	.word	0x40020028
 80051f0:	40020040 	.word	0x40020040
 80051f4:	40020058 	.word	0x40020058
 80051f8:	40020070 	.word	0x40020070
 80051fc:	40020088 	.word	0x40020088
 8005200:	400200a0 	.word	0x400200a0
 8005204:	400200b8 	.word	0x400200b8
 8005208:	40020410 	.word	0x40020410
 800520c:	40020428 	.word	0x40020428
 8005210:	40020440 	.word	0x40020440
 8005214:	40020458 	.word	0x40020458
 8005218:	40020470 	.word	0x40020470
 800521c:	40020488 	.word	0x40020488
 8005220:	400204a0 	.word	0x400204a0
 8005224:	400204b8 	.word	0x400204b8
 8005228:	58025408 	.word	0x58025408
 800522c:	5802541c 	.word	0x5802541c
 8005230:	58025430 	.word	0x58025430
 8005234:	58025444 	.word	0x58025444
 8005238:	58025458 	.word	0x58025458
 800523c:	5802546c 	.word	0x5802546c
 8005240:	58025480 	.word	0x58025480
 8005244:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d160      	bne.n	8005314 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a8c      	ldr	r2, [pc, #560]	; (8005488 <HAL_DMA_IRQHandler+0xca8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d04a      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a8a      	ldr	r2, [pc, #552]	; (800548c <HAL_DMA_IRQHandler+0xcac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d045      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a89      	ldr	r2, [pc, #548]	; (8005490 <HAL_DMA_IRQHandler+0xcb0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d040      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a87      	ldr	r2, [pc, #540]	; (8005494 <HAL_DMA_IRQHandler+0xcb4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d03b      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a86      	ldr	r2, [pc, #536]	; (8005498 <HAL_DMA_IRQHandler+0xcb8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d036      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a84      	ldr	r2, [pc, #528]	; (800549c <HAL_DMA_IRQHandler+0xcbc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d031      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a83      	ldr	r2, [pc, #524]	; (80054a0 <HAL_DMA_IRQHandler+0xcc0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d02c      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a81      	ldr	r2, [pc, #516]	; (80054a4 <HAL_DMA_IRQHandler+0xcc4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d027      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a80      	ldr	r2, [pc, #512]	; (80054a8 <HAL_DMA_IRQHandler+0xcc8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d022      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7e      	ldr	r2, [pc, #504]	; (80054ac <HAL_DMA_IRQHandler+0xccc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01d      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a7d      	ldr	r2, [pc, #500]	; (80054b0 <HAL_DMA_IRQHandler+0xcd0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d018      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a7b      	ldr	r2, [pc, #492]	; (80054b4 <HAL_DMA_IRQHandler+0xcd4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7a      	ldr	r2, [pc, #488]	; (80054b8 <HAL_DMA_IRQHandler+0xcd8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00e      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a78      	ldr	r2, [pc, #480]	; (80054bc <HAL_DMA_IRQHandler+0xcdc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a77      	ldr	r2, [pc, #476]	; (80054c0 <HAL_DMA_IRQHandler+0xce0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_DMA_IRQHandler+0xb12>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a75      	ldr	r2, [pc, #468]	; (80054c4 <HAL_DMA_IRQHandler+0xce4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d108      	bne.n	8005304 <HAL_DMA_IRQHandler+0xb24>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0208 	bic.w	r2, r2, #8
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e007      	b.n	8005314 <HAL_DMA_IRQHandler+0xb34>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0204 	bic.w	r2, r2, #4
 8005312:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8165 	beq.w	80055e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005326:	e15f      	b.n	80055e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	2202      	movs	r2, #2
 8005332:	409a      	lsls	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80c5 	beq.w	80054c8 <HAL_DMA_IRQHandler+0xce8>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80bf 	beq.w	80054c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2202      	movs	r2, #2
 8005354:	409a      	lsls	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d018      	beq.n	8005396 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 813a 	beq.w	80055ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005380:	e134      	b.n	80055ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8130 	beq.w	80055ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005394:	e12a      	b.n	80055ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d168      	bne.n	8005472 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a38      	ldr	r2, [pc, #224]	; (8005488 <HAL_DMA_IRQHandler+0xca8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04a      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a37      	ldr	r2, [pc, #220]	; (800548c <HAL_DMA_IRQHandler+0xcac>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d045      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a35      	ldr	r2, [pc, #212]	; (8005490 <HAL_DMA_IRQHandler+0xcb0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d040      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a34      	ldr	r2, [pc, #208]	; (8005494 <HAL_DMA_IRQHandler+0xcb4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03b      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a32      	ldr	r2, [pc, #200]	; (8005498 <HAL_DMA_IRQHandler+0xcb8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a31      	ldr	r2, [pc, #196]	; (800549c <HAL_DMA_IRQHandler+0xcbc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d031      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <HAL_DMA_IRQHandler+0xcc0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <HAL_DMA_IRQHandler+0xcc4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d027      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <HAL_DMA_IRQHandler+0xcc8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <HAL_DMA_IRQHandler+0xccc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <HAL_DMA_IRQHandler+0xcd0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_DMA_IRQHandler+0xcd4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <HAL_DMA_IRQHandler+0xcd8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a25      	ldr	r2, [pc, #148]	; (80054bc <HAL_DMA_IRQHandler+0xcdc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a23      	ldr	r2, [pc, #140]	; (80054c0 <HAL_DMA_IRQHandler+0xce0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_DMA_IRQHandler+0xc60>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <HAL_DMA_IRQHandler+0xce4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <HAL_DMA_IRQHandler+0xc72>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0214 	bic.w	r2, r2, #20
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e007      	b.n	8005462 <HAL_DMA_IRQHandler+0xc82>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 020a 	bic.w	r2, r2, #10
 8005460:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80b8 	beq.w	80055ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005484:	e0b2      	b.n	80055ec <HAL_DMA_IRQHandler+0xe0c>
 8005486:	bf00      	nop
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	40020040 	.word	0x40020040
 8005494:	40020058 	.word	0x40020058
 8005498:	40020070 	.word	0x40020070
 800549c:	40020088 	.word	0x40020088
 80054a0:	400200a0 	.word	0x400200a0
 80054a4:	400200b8 	.word	0x400200b8
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020428 	.word	0x40020428
 80054b0:	40020440 	.word	0x40020440
 80054b4:	40020458 	.word	0x40020458
 80054b8:	40020470 	.word	0x40020470
 80054bc:	40020488 	.word	0x40020488
 80054c0:	400204a0 	.word	0x400204a0
 80054c4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2208      	movs	r2, #8
 80054d2:	409a      	lsls	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8088 	beq.w	80055ee <HAL_DMA_IRQHandler+0xe0e>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8082 	beq.w	80055ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a41      	ldr	r2, [pc, #260]	; (80055f4 <HAL_DMA_IRQHandler+0xe14>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d04a      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3f      	ldr	r2, [pc, #252]	; (80055f8 <HAL_DMA_IRQHandler+0xe18>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d045      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3e      	ldr	r2, [pc, #248]	; (80055fc <HAL_DMA_IRQHandler+0xe1c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d040      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <HAL_DMA_IRQHandler+0xe20>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d03b      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <HAL_DMA_IRQHandler+0xe24>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d036      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a39      	ldr	r2, [pc, #228]	; (8005608 <HAL_DMA_IRQHandler+0xe28>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d031      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a38      	ldr	r2, [pc, #224]	; (800560c <HAL_DMA_IRQHandler+0xe2c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d02c      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a36      	ldr	r2, [pc, #216]	; (8005610 <HAL_DMA_IRQHandler+0xe30>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d027      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a35      	ldr	r2, [pc, #212]	; (8005614 <HAL_DMA_IRQHandler+0xe34>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d022      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a33      	ldr	r2, [pc, #204]	; (8005618 <HAL_DMA_IRQHandler+0xe38>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01d      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a32      	ldr	r2, [pc, #200]	; (800561c <HAL_DMA_IRQHandler+0xe3c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d018      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a30      	ldr	r2, [pc, #192]	; (8005620 <HAL_DMA_IRQHandler+0xe40>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <HAL_DMA_IRQHandler+0xe44>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00e      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <HAL_DMA_IRQHandler+0xe48>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2c      	ldr	r2, [pc, #176]	; (800562c <HAL_DMA_IRQHandler+0xe4c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_DMA_IRQHandler+0xdaa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <HAL_DMA_IRQHandler+0xe50>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <HAL_DMA_IRQHandler+0xdbc>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 021c 	bic.w	r2, r2, #28
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e007      	b.n	80055ac <HAL_DMA_IRQHandler+0xdcc>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 020e 	bic.w	r2, r2, #14
 80055aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2201      	movs	r2, #1
 80055b6:	409a      	lsls	r2, r3
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
 80055e2:	e004      	b.n	80055ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80055e4:	bf00      	nop
 80055e6:	e002      	b.n	80055ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e8:	bf00      	nop
 80055ea:	e000      	b.n	80055ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055ee:	3728      	adds	r7, #40	; 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40020010 	.word	0x40020010
 80055f8:	40020028 	.word	0x40020028
 80055fc:	40020040 	.word	0x40020040
 8005600:	40020058 	.word	0x40020058
 8005604:	40020070 	.word	0x40020070
 8005608:	40020088 	.word	0x40020088
 800560c:	400200a0 	.word	0x400200a0
 8005610:	400200b8 	.word	0x400200b8
 8005614:	40020410 	.word	0x40020410
 8005618:	40020428 	.word	0x40020428
 800561c:	40020440 	.word	0x40020440
 8005620:	40020458 	.word	0x40020458
 8005624:	40020470 	.word	0x40020470
 8005628:	40020488 	.word	0x40020488
 800562c:	400204a0 	.word	0x400204a0
 8005630:	400204b8 	.word	0x400204b8

08005634 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a84      	ldr	r2, [pc, #528]	; (800587c <DMA_SetConfig+0x230>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d072      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a82      	ldr	r2, [pc, #520]	; (8005880 <DMA_SetConfig+0x234>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d06d      	beq.n	8005756 <DMA_SetConfig+0x10a>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a81      	ldr	r2, [pc, #516]	; (8005884 <DMA_SetConfig+0x238>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d068      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7f      	ldr	r2, [pc, #508]	; (8005888 <DMA_SetConfig+0x23c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d063      	beq.n	8005756 <DMA_SetConfig+0x10a>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a7e      	ldr	r2, [pc, #504]	; (800588c <DMA_SetConfig+0x240>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d05e      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a7c      	ldr	r2, [pc, #496]	; (8005890 <DMA_SetConfig+0x244>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d059      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7b      	ldr	r2, [pc, #492]	; (8005894 <DMA_SetConfig+0x248>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d054      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a79      	ldr	r2, [pc, #484]	; (8005898 <DMA_SetConfig+0x24c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d04f      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a78      	ldr	r2, [pc, #480]	; (800589c <DMA_SetConfig+0x250>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d04a      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a76      	ldr	r2, [pc, #472]	; (80058a0 <DMA_SetConfig+0x254>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d045      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a75      	ldr	r2, [pc, #468]	; (80058a4 <DMA_SetConfig+0x258>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d040      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a73      	ldr	r2, [pc, #460]	; (80058a8 <DMA_SetConfig+0x25c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d03b      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a72      	ldr	r2, [pc, #456]	; (80058ac <DMA_SetConfig+0x260>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d036      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a70      	ldr	r2, [pc, #448]	; (80058b0 <DMA_SetConfig+0x264>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d031      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a6f      	ldr	r2, [pc, #444]	; (80058b4 <DMA_SetConfig+0x268>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d02c      	beq.n	8005756 <DMA_SetConfig+0x10a>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a6d      	ldr	r2, [pc, #436]	; (80058b8 <DMA_SetConfig+0x26c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d027      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a6c      	ldr	r2, [pc, #432]	; (80058bc <DMA_SetConfig+0x270>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d022      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a6a      	ldr	r2, [pc, #424]	; (80058c0 <DMA_SetConfig+0x274>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01d      	beq.n	8005756 <DMA_SetConfig+0x10a>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a69      	ldr	r2, [pc, #420]	; (80058c4 <DMA_SetConfig+0x278>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d018      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <DMA_SetConfig+0x27c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <DMA_SetConfig+0x10a>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a66      	ldr	r2, [pc, #408]	; (80058cc <DMA_SetConfig+0x280>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a64      	ldr	r2, [pc, #400]	; (80058d0 <DMA_SetConfig+0x284>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d009      	beq.n	8005756 <DMA_SetConfig+0x10a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a63      	ldr	r2, [pc, #396]	; (80058d4 <DMA_SetConfig+0x288>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <DMA_SetConfig+0x10a>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a61      	ldr	r2, [pc, #388]	; (80058d8 <DMA_SetConfig+0x28c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <DMA_SetConfig+0x10e>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <DMA_SetConfig+0x110>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005768:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800577a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a3e      	ldr	r2, [pc, #248]	; (800587c <DMA_SetConfig+0x230>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d04a      	beq.n	800581c <DMA_SetConfig+0x1d0>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <DMA_SetConfig+0x234>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d045      	beq.n	800581c <DMA_SetConfig+0x1d0>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a3b      	ldr	r2, [pc, #236]	; (8005884 <DMA_SetConfig+0x238>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d040      	beq.n	800581c <DMA_SetConfig+0x1d0>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3a      	ldr	r2, [pc, #232]	; (8005888 <DMA_SetConfig+0x23c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d03b      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a38      	ldr	r2, [pc, #224]	; (800588c <DMA_SetConfig+0x240>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d036      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a37      	ldr	r2, [pc, #220]	; (8005890 <DMA_SetConfig+0x244>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d031      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a35      	ldr	r2, [pc, #212]	; (8005894 <DMA_SetConfig+0x248>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d02c      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a34      	ldr	r2, [pc, #208]	; (8005898 <DMA_SetConfig+0x24c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d027      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a32      	ldr	r2, [pc, #200]	; (800589c <DMA_SetConfig+0x250>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d022      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a31      	ldr	r2, [pc, #196]	; (80058a0 <DMA_SetConfig+0x254>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d01d      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <DMA_SetConfig+0x258>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2e      	ldr	r2, [pc, #184]	; (80058a8 <DMA_SetConfig+0x25c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <DMA_SetConfig+0x260>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <DMA_SetConfig+0x1d0>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2b      	ldr	r2, [pc, #172]	; (80058b0 <DMA_SetConfig+0x264>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <DMA_SetConfig+0x1d0>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <DMA_SetConfig+0x268>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <DMA_SetConfig+0x1d0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <DMA_SetConfig+0x26c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d101      	bne.n	8005820 <DMA_SetConfig+0x1d4>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <DMA_SetConfig+0x1d6>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d05a      	beq.n	80058dc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	223f      	movs	r2, #63	; 0x3f
 8005830:	409a      	lsls	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005844:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d108      	bne.n	8005868 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005866:	e087      	b.n	8005978 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
}
 8005878:	e07e      	b.n	8005978 <DMA_SetConfig+0x32c>
 800587a:	bf00      	nop
 800587c:	40020010 	.word	0x40020010
 8005880:	40020028 	.word	0x40020028
 8005884:	40020040 	.word	0x40020040
 8005888:	40020058 	.word	0x40020058
 800588c:	40020070 	.word	0x40020070
 8005890:	40020088 	.word	0x40020088
 8005894:	400200a0 	.word	0x400200a0
 8005898:	400200b8 	.word	0x400200b8
 800589c:	40020410 	.word	0x40020410
 80058a0:	40020428 	.word	0x40020428
 80058a4:	40020440 	.word	0x40020440
 80058a8:	40020458 	.word	0x40020458
 80058ac:	40020470 	.word	0x40020470
 80058b0:	40020488 	.word	0x40020488
 80058b4:	400204a0 	.word	0x400204a0
 80058b8:	400204b8 	.word	0x400204b8
 80058bc:	58025408 	.word	0x58025408
 80058c0:	5802541c 	.word	0x5802541c
 80058c4:	58025430 	.word	0x58025430
 80058c8:	58025444 	.word	0x58025444
 80058cc:	58025458 	.word	0x58025458
 80058d0:	5802546c 	.word	0x5802546c
 80058d4:	58025480 	.word	0x58025480
 80058d8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a28      	ldr	r2, [pc, #160]	; (8005984 <DMA_SetConfig+0x338>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <DMA_SetConfig+0x2e0>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a27      	ldr	r2, [pc, #156]	; (8005988 <DMA_SetConfig+0x33c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d01d      	beq.n	800592c <DMA_SetConfig+0x2e0>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a25      	ldr	r2, [pc, #148]	; (800598c <DMA_SetConfig+0x340>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <DMA_SetConfig+0x2e0>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a24      	ldr	r2, [pc, #144]	; (8005990 <DMA_SetConfig+0x344>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <DMA_SetConfig+0x2e0>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a22      	ldr	r2, [pc, #136]	; (8005994 <DMA_SetConfig+0x348>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <DMA_SetConfig+0x2e0>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a21      	ldr	r2, [pc, #132]	; (8005998 <DMA_SetConfig+0x34c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <DMA_SetConfig+0x2e0>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1f      	ldr	r2, [pc, #124]	; (800599c <DMA_SetConfig+0x350>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <DMA_SetConfig+0x2e0>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <DMA_SetConfig+0x354>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d101      	bne.n	8005930 <DMA_SetConfig+0x2e4>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <DMA_SetConfig+0x2e6>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2201      	movs	r2, #1
 8005940:	409a      	lsls	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d108      	bne.n	8005968 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	60da      	str	r2, [r3, #12]
}
 8005966:	e007      	b.n	8005978 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	58025408 	.word	0x58025408
 8005988:	5802541c 	.word	0x5802541c
 800598c:	58025430 	.word	0x58025430
 8005990:	58025444 	.word	0x58025444
 8005994:	58025458 	.word	0x58025458
 8005998:	5802546c 	.word	0x5802546c
 800599c:	58025480 	.word	0x58025480
 80059a0:	58025494 	.word	0x58025494

080059a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a42      	ldr	r2, [pc, #264]	; (8005abc <DMA_CalcBaseAndBitshift+0x118>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d04a      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a41      	ldr	r2, [pc, #260]	; (8005ac0 <DMA_CalcBaseAndBitshift+0x11c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d045      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a3f      	ldr	r2, [pc, #252]	; (8005ac4 <DMA_CalcBaseAndBitshift+0x120>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d040      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a3e      	ldr	r2, [pc, #248]	; (8005ac8 <DMA_CalcBaseAndBitshift+0x124>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d03b      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3c      	ldr	r2, [pc, #240]	; (8005acc <DMA_CalcBaseAndBitshift+0x128>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d036      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3b      	ldr	r2, [pc, #236]	; (8005ad0 <DMA_CalcBaseAndBitshift+0x12c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d031      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <DMA_CalcBaseAndBitshift+0x130>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02c      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a38      	ldr	r2, [pc, #224]	; (8005ad8 <DMA_CalcBaseAndBitshift+0x134>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d027      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a36      	ldr	r2, [pc, #216]	; (8005adc <DMA_CalcBaseAndBitshift+0x138>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d022      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a35      	ldr	r2, [pc, #212]	; (8005ae0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d01d      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <DMA_CalcBaseAndBitshift+0x140>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d018      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a32      	ldr	r2, [pc, #200]	; (8005ae8 <DMA_CalcBaseAndBitshift+0x144>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a30      	ldr	r2, [pc, #192]	; (8005aec <DMA_CalcBaseAndBitshift+0x148>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00e      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d009      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <DMA_CalcBaseAndBitshift+0x150>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <DMA_CalcBaseAndBitshift+0xa8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2c      	ldr	r2, [pc, #176]	; (8005af8 <DMA_CalcBaseAndBitshift+0x154>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <DMA_CalcBaseAndBitshift+0xac>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <DMA_CalcBaseAndBitshift+0xae>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d024      	beq.n	8005aa0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	3b10      	subs	r3, #16
 8005a5e:	4a27      	ldr	r2, [pc, #156]	; (8005afc <DMA_CalcBaseAndBitshift+0x158>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a70:	5cd3      	ldrb	r3, [r2, r3]
 8005a72:	461a      	mov	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d908      	bls.n	8005a90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <DMA_CalcBaseAndBitshift+0x160>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	1d1a      	adds	r2, r3, #4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	659a      	str	r2, [r3, #88]	; 0x58
 8005a8e:	e00d      	b.n	8005aac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <DMA_CalcBaseAndBitshift+0x160>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a9e:	e005      	b.n	8005aac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40020010 	.word	0x40020010
 8005ac0:	40020028 	.word	0x40020028
 8005ac4:	40020040 	.word	0x40020040
 8005ac8:	40020058 	.word	0x40020058
 8005acc:	40020070 	.word	0x40020070
 8005ad0:	40020088 	.word	0x40020088
 8005ad4:	400200a0 	.word	0x400200a0
 8005ad8:	400200b8 	.word	0x400200b8
 8005adc:	40020410 	.word	0x40020410
 8005ae0:	40020428 	.word	0x40020428
 8005ae4:	40020440 	.word	0x40020440
 8005ae8:	40020458 	.word	0x40020458
 8005aec:	40020470 	.word	0x40020470
 8005af0:	40020488 	.word	0x40020488
 8005af4:	400204a0 	.word	0x400204a0
 8005af8:	400204b8 	.word	0x400204b8
 8005afc:	aaaaaaab 	.word	0xaaaaaaab
 8005b00:	08012218 	.word	0x08012218
 8005b04:	fffffc00 	.word	0xfffffc00

08005b08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d120      	bne.n	8005b5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d858      	bhi.n	8005bd6 <DMA_CheckFifoParam+0xce>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <DMA_CheckFifoParam+0x24>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b4f 	.word	0x08005b4f
 8005b34:	08005b3d 	.word	0x08005b3d
 8005b38:	08005bd7 	.word	0x08005bd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d048      	beq.n	8005bda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b4c:	e045      	b.n	8005bda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b56:	d142      	bne.n	8005bde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b5c:	e03f      	b.n	8005bde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b66:	d123      	bne.n	8005bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d838      	bhi.n	8005be2 <DMA_CheckFifoParam+0xda>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <DMA_CheckFifoParam+0x70>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b8f 	.word	0x08005b8f
 8005b80:	08005b89 	.word	0x08005b89
 8005b84:	08005ba1 	.word	0x08005ba1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b8c:	e030      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d025      	beq.n	8005be6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b9e:	e022      	b.n	8005be6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ba8:	d11f      	bne.n	8005bea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bae:	e01c      	b.n	8005bea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d902      	bls.n	8005bbe <DMA_CheckFifoParam+0xb6>
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d003      	beq.n	8005bc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005bbc:	e018      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc2:	e015      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00e      	beq.n	8005bee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8005bd4:	e00b      	b.n	8005bee <DMA_CheckFifoParam+0xe6>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e00a      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e008      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bde:	bf00      	nop
 8005be0:	e006      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <DMA_CheckFifoParam+0xe8>
    break;
 8005bee:	bf00      	nop
    }
  }

  return status;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a38      	ldr	r2, [pc, #224]	; (8005cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d022      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a36      	ldr	r2, [pc, #216]	; (8005cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01d      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d018      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a33      	ldr	r2, [pc, #204]	; (8005d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a32      	ldr	r2, [pc, #200]	; (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a30      	ldr	r2, [pc, #192]	; (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2f      	ldr	r2, [pc, #188]	; (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a2d      	ldr	r2, [pc, #180]	; (8005d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01a      	beq.n	8005c9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	3b08      	subs	r3, #8
 8005c70:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a24      	ldr	r2, [pc, #144]	; (8005d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	2201      	movs	r2, #1
 8005c96:	409a      	lsls	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c9c:	e024      	b.n	8005ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	3b10      	subs	r3, #16
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d806      	bhi.n	8005cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d902      	bls.n	8005cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005cd8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	58025408 	.word	0x58025408
 8005cf8:	5802541c 	.word	0x5802541c
 8005cfc:	58025430 	.word	0x58025430
 8005d00:	58025444 	.word	0x58025444
 8005d04:	58025458 	.word	0x58025458
 8005d08:	5802546c 	.word	0x5802546c
 8005d0c:	58025480 	.word	0x58025480
 8005d10:	58025494 	.word	0x58025494
 8005d14:	cccccccd 	.word	0xcccccccd
 8005d18:	16009600 	.word	0x16009600
 8005d1c:	58025880 	.word	0x58025880
 8005d20:	aaaaaaab 	.word	0xaaaaaaab
 8005d24:	400204b8 	.word	0x400204b8
 8005d28:	4002040f 	.word	0x4002040f
 8005d2c:	10008200 	.word	0x10008200
 8005d30:	40020880 	.word	0x40020880

08005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d04a      	beq.n	8005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d847      	bhi.n	8005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a25      	ldr	r2, [pc, #148]	; (8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d022      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d01d      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d018      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a21      	ldr	r2, [pc, #132]	; (8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00e      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d101      	bne.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	461a      	mov	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005dbc:	671a      	str	r2, [r3, #112]	; 0x70
 8005dbe:	e009      	b.n	8005dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005dd2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	2201      	movs	r2, #1
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	58025408 	.word	0x58025408
 8005df0:	5802541c 	.word	0x5802541c
 8005df4:	58025430 	.word	0x58025430
 8005df8:	58025444 	.word	0x58025444
 8005dfc:	58025458 	.word	0x58025458
 8005e00:	5802546c 	.word	0x5802546c
 8005e04:	58025480 	.word	0x58025480
 8005e08:	58025494 	.word	0x58025494
 8005e0c:	1600963f 	.word	0x1600963f
 8005e10:	58025940 	.word	0x58025940
 8005e14:	1000823f 	.word	0x1000823f
 8005e18:	40020940 	.word	0x40020940

08005e1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e0c6      	b.n	8005fbc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc fabe 	bl	80023b8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2223      	movs	r2, #35	; 0x23
 8005e40:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e42:	4b60      	ldr	r3, [pc, #384]	; (8005fc4 <HAL_ETH_Init+0x1a8>)
 8005e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e48:	4a5e      	ldr	r2, [pc, #376]	; (8005fc4 <HAL_ETH_Init+0x1a8>)
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
 8005e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e52:	4b5c      	ldr	r3, [pc, #368]	; (8005fc4 <HAL_ETH_Init+0x1a8>)
 8005e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7a1b      	ldrb	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f7fd f86d 	bl	8002f48 <HAL_SYSCFG_ETHInterfaceSelect>
 8005e6e:	e003      	b.n	8005e78 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005e70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005e74:	f7fd f868 	bl	8002f48 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e90:	f7fd f81e 	bl	8002ed0 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e96:	e00f      	b.n	8005eb8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005e98:	f7fd f81a 	bl	8002ed0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ea6:	d907      	bls.n	8005eb8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2204      	movs	r2, #4
 8005eac:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	22e0      	movs	r2, #224	; 0xe0
 8005eb2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e081      	b.n	8005fbc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fac0 	bl	8006450 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005ed0:	f001 fec0 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	4a3c      	ldr	r2, [pc, #240]	; (8005fc8 <HAL_ETH_Init+0x1ac>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	0c9a      	lsrs	r2, r3, #18
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3a01      	subs	r2, #1
 8005ee4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa13 	bl	8006314 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005f04:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005f08:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	22e0      	movs	r2, #224	; 0xe0
 8005f20:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e04a      	b.n	8005fbc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	f241 1308 	movw	r3, #4360	; 0x1108
 8005f2e:	4413      	add	r3, r2
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <HAL_ETH_Init+0x1b0>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6952      	ldr	r2, [r2, #20]
 8005f3a:	0052      	lsls	r2, r2, #1
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	6809      	ldr	r1, [r1, #0]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	f241 1308 	movw	r3, #4360	; 0x1108
 8005f46:	440b      	add	r3, r1
 8005f48:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fad8 	bl	8006500 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fb1c 	bl	800658e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	3305      	adds	r3, #5
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	021a      	lsls	r2, r3, #8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	3303      	adds	r3, #3
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	061a      	lsls	r2, r3, #24
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	3302      	adds	r3, #2
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	041b      	lsls	r3, r3, #16
 8005f88:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005fa2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005fa4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2210      	movs	r2, #16
 8005fb8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	431bde83 	.word	0x431bde83
 8005fcc:	ffff8001 	.word	0xffff8001

08005fd0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005fe2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	791b      	ldrb	r3, [r3, #4]
 8005fe8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005fea:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	7b1b      	ldrb	r3, [r3, #12]
 8005ff0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005ff2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	7b5b      	ldrb	r3, [r3, #13]
 8005ff8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005ffa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	7b9b      	ldrb	r3, [r3, #14]
 8006000:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8006002:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	7bdb      	ldrb	r3, [r3, #15]
 8006008:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800600a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	7c12      	ldrb	r2, [r2, #16]
 8006010:	2a00      	cmp	r2, #0
 8006012:	d102      	bne.n	800601a <ETH_SetMACConfig+0x4a>
 8006014:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006018:	e000      	b.n	800601c <ETH_SetMACConfig+0x4c>
 800601a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800601c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	7c52      	ldrb	r2, [r2, #17]
 8006022:	2a00      	cmp	r2, #0
 8006024:	d102      	bne.n	800602c <ETH_SetMACConfig+0x5c>
 8006026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800602a:	e000      	b.n	800602e <ETH_SetMACConfig+0x5e>
 800602c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800602e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	7c9b      	ldrb	r3, [r3, #18]
 8006034:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006036:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800603c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8006042:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	7f1b      	ldrb	r3, [r3, #28]
 8006048:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800604a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	7f5b      	ldrb	r3, [r3, #29]
 8006050:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8006052:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	7f92      	ldrb	r2, [r2, #30]
 8006058:	2a00      	cmp	r2, #0
 800605a:	d102      	bne.n	8006062 <ETH_SetMACConfig+0x92>
 800605c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006060:	e000      	b.n	8006064 <ETH_SetMACConfig+0x94>
 8006062:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006064:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	7fdb      	ldrb	r3, [r3, #31]
 800606a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800606c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006074:	2a00      	cmp	r2, #0
 8006076:	d102      	bne.n	800607e <ETH_SetMACConfig+0xae>
 8006078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800607c:	e000      	b.n	8006080 <ETH_SetMACConfig+0xb0>
 800607e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006080:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006086:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800608e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006090:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b56      	ldr	r3, [pc, #344]	; (80061fc <ETH_SetMACConfig+0x22c>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	430b      	orrs	r3, r1
 80060ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80060bc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80060c6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060ce:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80060d0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80060d8:	2a00      	cmp	r2, #0
 80060da:	d102      	bne.n	80060e2 <ETH_SetMACConfig+0x112>
 80060dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060e0:	e000      	b.n	80060e4 <ETH_SetMACConfig+0x114>
 80060e2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80060e4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	4b42      	ldr	r3, [pc, #264]	; (8006200 <ETH_SetMACConfig+0x230>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	430b      	orrs	r3, r1
 8006100:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006108:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	4b3a      	ldr	r3, [pc, #232]	; (8006204 <ETH_SetMACConfig+0x234>)
 800611a:	4013      	ands	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	430b      	orrs	r3, r1
 8006124:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800612c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006132:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800613a:	2a00      	cmp	r2, #0
 800613c:	d101      	bne.n	8006142 <ETH_SetMACConfig+0x172>
 800613e:	2280      	movs	r2, #128	; 0x80
 8006140:	e000      	b.n	8006144 <ETH_SetMACConfig+0x174>
 8006142:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006144:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006156:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800615a:	4013      	ands	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	430b      	orrs	r3, r1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800616c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006174:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	f023 0103 	bic.w	r1, r3, #3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	430a      	orrs	r2, r1
 800618e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800619a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	d101      	bne.n	80061be <ETH_SetMACConfig+0x1ee>
 80061ba:	2240      	movs	r2, #64	; 0x40
 80061bc:	e000      	b.n	80061c0 <ETH_SetMACConfig+0x1f0>
 80061be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80061c0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80061c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80061ca:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80061d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80061e0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	00048083 	.word	0x00048083
 8006200:	c0f88000 	.word	0xc0f88000
 8006204:	fffffef0 	.word	0xfffffef0

08006208 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b38      	ldr	r3, [pc, #224]	; (8006300 <ETH_SetDMAConfig+0xf8>)
 800621e:	4013      	ands	r3, r2
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	6809      	ldr	r1, [r1, #0]
 8006228:	431a      	orrs	r2, r3
 800622a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800622e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	791b      	ldrb	r3, [r3, #4]
 8006234:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800623a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	7b1b      	ldrb	r3, [r3, #12]
 8006240:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	f241 0304 	movw	r3, #4100	; 0x1004
 800624e:	4413      	add	r3, r2
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b2c      	ldr	r3, [pc, #176]	; (8006304 <ETH_SetDMAConfig+0xfc>)
 8006254:	4013      	ands	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6811      	ldr	r1, [r2, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	431a      	orrs	r2, r3
 800625e:	f241 0304 	movw	r3, #4100	; 0x1004
 8006262:	440b      	add	r3, r1
 8006264:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	7b5b      	ldrb	r3, [r3, #13]
 800626a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b22      	ldr	r3, [pc, #136]	; (8006308 <ETH_SetDMAConfig+0x100>)
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6811      	ldr	r1, [r2, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	431a      	orrs	r2, r3
 800628a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800628e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	7d1b      	ldrb	r3, [r3, #20]
 8006298:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800629a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	7f5b      	ldrb	r3, [r3, #29]
 80062a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80062ae:	4413      	add	r3, r2
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <ETH_SetDMAConfig+0x104>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	431a      	orrs	r2, r3
 80062be:	f241 1304 	movw	r3, #4356	; 0x1104
 80062c2:	440b      	add	r3, r1
 80062c4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	7f1b      	ldrb	r3, [r3, #28]
 80062ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80062dc:	4413      	add	r3, r2
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <ETH_SetDMAConfig+0x108>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6811      	ldr	r1, [r2, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	f241 1308 	movw	r3, #4360	; 0x1108
 80062f0:	440b      	add	r3, r1
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	ffff87fd 	.word	0xffff87fd
 8006304:	ffff2ffe 	.word	0xffff2ffe
 8006308:	fffec000 	.word	0xfffec000
 800630c:	ffc0efef 	.word	0xffc0efef
 8006310:	7fc0ffff 	.word	0x7fc0ffff

08006314 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0a4      	sub	sp, #144	; 0x90
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006322:	2300      	movs	r3, #0
 8006324:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006326:	2300      	movs	r3, #0
 8006328:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800632c:	2300      	movs	r3, #0
 800632e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006344:	2300      	movs	r3, #0
 8006346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006354:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800635c:	2300      	movs	r3, #0
 800635e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006360:	2300      	movs	r3, #0
 8006362:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006366:	2300      	movs	r3, #0
 8006368:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800636c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006370:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006372:	2300      	movs	r3, #0
 8006374:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006378:	2300      	movs	r3, #0
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006388:	2300      	movs	r3, #0
 800638a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800638e:	2300      	movs	r3, #0
 8006390:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006392:	2300      	movs	r3, #0
 8006394:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006396:	2300      	movs	r3, #0
 8006398:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80063ac:	2320      	movs	r3, #32
 80063ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80063be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80063c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063c8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80063d0:	2302      	movs	r3, #2
 80063d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80063ee:	2300      	movs	r3, #0
 80063f0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80063f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fde6 	bl	8005fd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006404:	2301      	movs	r3, #1
 8006406:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006408:	2301      	movs	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800640c:	2300      	movs	r3, #0
 800640e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006416:	2300      	movs	r3, #0
 8006418:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800641a:	2300      	movs	r3, #0
 800641c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800641e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006422:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006424:	2300      	movs	r3, #0
 8006426:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800642c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006434:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800643a:	f107 0308 	add.w	r3, r7, #8
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fee1 	bl	8006208 <ETH_SetDMAConfig>
}
 8006446:	bf00      	nop
 8006448:	3790      	adds	r7, #144	; 0x90
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006460:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006468:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800646a:	f001 fbf3 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 800646e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d908      	bls.n	800648a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d804      	bhi.n	800648a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e027      	b.n	80064da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d908      	bls.n	80064a4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d204      	bcs.n	80064a4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e01a      	b.n	80064da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d303      	bcc.n	80064b4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d911      	bls.n	80064d8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d908      	bls.n	80064ce <ETH_MAC_MDIO_ClkConfig+0x7e>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4a0f      	ldr	r2, [pc, #60]	; (80064fc <ETH_MAC_MDIO_ClkConfig+0xac>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d804      	bhi.n	80064ce <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e005      	b.n	80064da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e000      	b.n	80064da <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80064d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	01312cff 	.word	0x01312cff
 80064f0:	02160ebf 	.word	0x02160ebf
 80064f4:	03938700 	.word	0x03938700
 80064f8:	05f5e0ff 	.word	0x05f5e0ff
 80064fc:	08f0d17f 	.word	0x08f0d17f

08006500 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e01d      	b.n	800654a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68d9      	ldr	r1, [r3, #12]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4613      	mov	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	4413      	add	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	440b      	add	r3, r1
 800651e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2200      	movs	r2, #0
 800652a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	3206      	adds	r2, #6
 8006540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d9de      	bls.n	800650e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	f241 132c 	movw	r3, #4396	; 0x112c
 800655e:	4413      	add	r3, r2
 8006560:	2203      	movs	r2, #3
 8006562:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68d9      	ldr	r1, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f241 1314 	movw	r3, #4372	; 0x1114
 8006570:	4413      	add	r3, r2
 8006572:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e024      	b.n	80065e6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6919      	ldr	r1, [r3, #16]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4613      	mov	r3, r2
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4413      	add	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	440b      	add	r3, r1
 80065ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2200      	movs	r2, #0
 80065b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2200      	movs	r2, #0
 80065c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3310      	adds	r3, #16
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d9d7      	bls.n	800659c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	f241 1330 	movw	r3, #4400	; 0x1130
 8006612:	4413      	add	r3, r2
 8006614:	2203      	movs	r2, #3
 8006616:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6919      	ldr	r1, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	f241 131c 	movw	r3, #4380	; 0x111c
 8006624:	4413      	add	r3, r2
 8006626:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	f241 1328 	movw	r3, #4392	; 0x1128
 8006638:	4413      	add	r3, r2
 800663a:	6019      	str	r1, [r3, #0]
}
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006648:	b480      	push	{r7}
 800664a:	b089      	sub	sp, #36	; 0x24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006656:	4b89      	ldr	r3, [pc, #548]	; (800687c <HAL_GPIO_Init+0x234>)
 8006658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800665a:	e194      	b.n	8006986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	4013      	ands	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8186 	beq.w	8006980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d005      	beq.n	800668c <HAL_GPIO_Init+0x44>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d130      	bne.n	80066ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	2203      	movs	r2, #3
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4013      	ands	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066c2:	2201      	movs	r2, #1
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43db      	mvns	r3, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4013      	ands	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 0201 	and.w	r2, r3, #1
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d017      	beq.n	800672a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	2203      	movs	r2, #3
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d123      	bne.n	800677e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	08da      	lsrs	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3208      	adds	r2, #8
 800673e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	220f      	movs	r2, #15
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4313      	orrs	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	08da      	lsrs	r2, r3, #3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3208      	adds	r2, #8
 8006778:	69b9      	ldr	r1, [r7, #24]
 800677a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	2203      	movs	r2, #3
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	43db      	mvns	r3, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4013      	ands	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 0203 	and.w	r2, r3, #3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80e0 	beq.w	8006980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c0:	4b2f      	ldr	r3, [pc, #188]	; (8006880 <HAL_GPIO_Init+0x238>)
 80067c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067c6:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <HAL_GPIO_Init+0x238>)
 80067c8:	f043 0302 	orr.w	r3, r3, #2
 80067cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_GPIO_Init+0x238>)
 80067d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067de:	4a29      	ldr	r2, [pc, #164]	; (8006884 <HAL_GPIO_Init+0x23c>)
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	089b      	lsrs	r3, r3, #2
 80067e4:	3302      	adds	r3, #2
 80067e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	220f      	movs	r2, #15
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <HAL_GPIO_Init+0x240>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d052      	beq.n	80068b0 <HAL_GPIO_Init+0x268>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1f      	ldr	r2, [pc, #124]	; (800688c <HAL_GPIO_Init+0x244>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d031      	beq.n	8006876 <HAL_GPIO_Init+0x22e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a1e      	ldr	r2, [pc, #120]	; (8006890 <HAL_GPIO_Init+0x248>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d02b      	beq.n	8006872 <HAL_GPIO_Init+0x22a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <HAL_GPIO_Init+0x24c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d025      	beq.n	800686e <HAL_GPIO_Init+0x226>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a1c      	ldr	r2, [pc, #112]	; (8006898 <HAL_GPIO_Init+0x250>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01f      	beq.n	800686a <HAL_GPIO_Init+0x222>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <HAL_GPIO_Init+0x254>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d019      	beq.n	8006866 <HAL_GPIO_Init+0x21e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <HAL_GPIO_Init+0x258>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_GPIO_Init+0x21a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <HAL_GPIO_Init+0x25c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00d      	beq.n	800685e <HAL_GPIO_Init+0x216>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <HAL_GPIO_Init+0x260>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d007      	beq.n	800685a <HAL_GPIO_Init+0x212>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a17      	ldr	r2, [pc, #92]	; (80068ac <HAL_GPIO_Init+0x264>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d101      	bne.n	8006856 <HAL_GPIO_Init+0x20e>
 8006852:	2309      	movs	r3, #9
 8006854:	e02d      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 8006856:	230a      	movs	r3, #10
 8006858:	e02b      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 800685a:	2308      	movs	r3, #8
 800685c:	e029      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 800685e:	2307      	movs	r3, #7
 8006860:	e027      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 8006862:	2306      	movs	r3, #6
 8006864:	e025      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 8006866:	2305      	movs	r3, #5
 8006868:	e023      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 800686a:	2304      	movs	r3, #4
 800686c:	e021      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 800686e:	2303      	movs	r3, #3
 8006870:	e01f      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 8006872:	2302      	movs	r3, #2
 8006874:	e01d      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 8006876:	2301      	movs	r3, #1
 8006878:	e01b      	b.n	80068b2 <HAL_GPIO_Init+0x26a>
 800687a:	bf00      	nop
 800687c:	58000080 	.word	0x58000080
 8006880:	58024400 	.word	0x58024400
 8006884:	58000400 	.word	0x58000400
 8006888:	58020000 	.word	0x58020000
 800688c:	58020400 	.word	0x58020400
 8006890:	58020800 	.word	0x58020800
 8006894:	58020c00 	.word	0x58020c00
 8006898:	58021000 	.word	0x58021000
 800689c:	58021400 	.word	0x58021400
 80068a0:	58021800 	.word	0x58021800
 80068a4:	58021c00 	.word	0x58021c00
 80068a8:	58022000 	.word	0x58022000
 80068ac:	58022400 	.word	0x58022400
 80068b0:	2300      	movs	r3, #0
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	f002 0203 	and.w	r2, r2, #3
 80068b8:	0092      	lsls	r2, r2, #2
 80068ba:	4093      	lsls	r3, r2
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4313      	orrs	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068c2:	4938      	ldr	r1, [pc, #224]	; (80069a4 <HAL_GPIO_Init+0x35c>)
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	3302      	adds	r3, #2
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	43db      	mvns	r3, r3
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	4013      	ands	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	43db      	mvns	r3, r3
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4013      	ands	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	43db      	mvns	r3, r3
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	4013      	ands	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	43db      	mvns	r3, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	4013      	ands	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	f47f ae63 	bne.w	800665c <HAL_GPIO_Init+0x14>
  }
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	3724      	adds	r7, #36	; 0x24
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	58000400 	.word	0x58000400

080069a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
 80069b4:	4613      	mov	r3, r2
 80069b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069b8:	787b      	ldrb	r3, [r7, #1]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069c4:	e003      	b.n	80069ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069c6:	887b      	ldrh	r3, [r7, #2]
 80069c8:	041a      	lsls	r2, r3, #16
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	619a      	str	r2, [r3, #24]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80069e4:	4a08      	ldr	r2, [pc, #32]	; (8006a08 <HAL_HSEM_FastTake+0x2c>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3320      	adds	r3, #32
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	4a07      	ldr	r2, [pc, #28]	; (8006a0c <HAL_HSEM_FastTake+0x30>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d101      	bne.n	80069f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	58026400 	.word	0x58026400
 8006a0c:	80000300 	.word	0x80000300

08006a10 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006a1a:	4906      	ldr	r1, [pc, #24]	; (8006a34 <HAL_HSEM_Release+0x24>)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	58026400 	.word	0x58026400

08006a38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a3a:	b08f      	sub	sp, #60	; 0x3c
 8006a3c:	af0a      	add	r7, sp, #40	; 0x28
 8006a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e116      	b.n	8006c78 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fb ffcd 	bl	8002a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f007 f929 	bl	800dce0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	687e      	ldr	r6, [r7, #4]
 8006a96:	466d      	mov	r5, sp
 8006a98:	f106 0410 	add.w	r4, r6, #16
 8006a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8006aac:	1d33      	adds	r3, r6, #4
 8006aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ab0:	6838      	ldr	r0, [r7, #0]
 8006ab2:	f007 f8a7 	bl	800dc04 <USB_CoreInit>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0d7      	b.n	8006c78 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f007 f917 	bl	800dd02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
 8006ad8:	e04a      	b.n	8006b70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	1a9b      	subs	r3, r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	333d      	adds	r3, #61	; 0x3d
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	333c      	adds	r3, #60	; 0x3c
 8006afe:	7bfa      	ldrb	r2, [r7, #15]
 8006b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b02:	7bfa      	ldrb	r2, [r7, #15]
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	b298      	uxth	r0, r3
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3342      	adds	r3, #66	; 0x42
 8006b16:	4602      	mov	r2, r0
 8006b18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	333f      	adds	r3, #63	; 0x3f
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b2e:	7bfa      	ldrb	r2, [r7, #15]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	3344      	adds	r3, #68	; 0x44
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b42:	7bfa      	ldrb	r2, [r7, #15]
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	3348      	adds	r3, #72	; 0x48
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b56:	7bfa      	ldrb	r2, [r7, #15]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3350      	adds	r3, #80	; 0x50
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d3af      	bcc.n	8006ada <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
 8006b7e:	e044      	b.n	8006c0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b80:	7bfa      	ldrb	r2, [r7, #15]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b96:	7bfa      	ldrb	r2, [r7, #15]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006ba8:	7bfa      	ldrb	r2, [r7, #15]
 8006baa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006bac:	7bfa      	ldrb	r2, [r7, #15]
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006bc2:	7bfa      	ldrb	r2, [r7, #15]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006bd8:	7bfa      	ldrb	r2, [r7, #15]
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bee:	7bfa      	ldrb	r2, [r7, #15]
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	3301      	adds	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]
 8006c0a:	7bfa      	ldrb	r2, [r7, #15]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d3b5      	bcc.n	8006b80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	603b      	str	r3, [r7, #0]
 8006c1a:	687e      	ldr	r6, [r7, #4]
 8006c1c:	466d      	mov	r5, sp
 8006c1e:	f106 0410 	add.w	r4, r6, #16
 8006c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c32:	1d33      	adds	r3, r6, #4
 8006c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c36:	6838      	ldr	r0, [r7, #0]
 8006c38:	f007 f8b0 	bl	800dd9c <USB_DevInit>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e014      	b.n	8006c78 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d102      	bne.n	8006c6c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f80a 	bl	8006c80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f007 fa6a 	bl	800e14a <USB_DevDisconnect>

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	10000003 	.word	0x10000003

08006cc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006cd0:	4b29      	ldr	r3, [pc, #164]	; (8006d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d00a      	beq.n	8006cf2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cdc:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d001      	beq.n	8006cee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e040      	b.n	8006d70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e03e      	b.n	8006d70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006cfa:	491f      	ldr	r1, [pc, #124]	; (8006d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d02:	f7fc f8e5 	bl	8002ed0 <HAL_GetTick>
 8006d06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d08:	e009      	b.n	8006d1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d0a:	f7fc f8e1 	bl	8002ed0 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d18:	d901      	bls.n	8006d1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e028      	b.n	8006d70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d1e:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2a:	d1ee      	bne.n	8006d0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b1e      	cmp	r3, #30
 8006d30:	d008      	beq.n	8006d44 <HAL_PWREx_ConfigSupply+0x7c>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b2e      	cmp	r3, #46	; 0x2e
 8006d36:	d005      	beq.n	8006d44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b1d      	cmp	r3, #29
 8006d3c:	d002      	beq.n	8006d44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b2d      	cmp	r3, #45	; 0x2d
 8006d42:	d114      	bne.n	8006d6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006d44:	f7fc f8c4 	bl	8002ed0 <HAL_GetTick>
 8006d48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d4a:	e009      	b.n	8006d60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d4c:	f7fc f8c0 	bl	8002ed0 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5a:	d901      	bls.n	8006d60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e007      	b.n	8006d70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6c:	d1ee      	bne.n	8006d4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	58024800 	.word	0x58024800

08006d7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4a04      	ldr	r2, [pc, #16]	; (8006d98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d8a:	60d3      	str	r3, [r2, #12]
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	58024800 	.word	0x58024800

08006d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08c      	sub	sp, #48	; 0x30
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f000 bc1c 	b.w	80075e8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8087 	beq.w	8006ecc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dbe:	4b9e      	ldr	r3, [pc, #632]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dc8:	4b9b      	ldr	r3, [pc, #620]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d007      	beq.n	8006de4 <HAL_RCC_OscConfig+0x48>
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	2b18      	cmp	r3, #24
 8006dd8:	d110      	bne.n	8006dfc <HAL_RCC_OscConfig+0x60>
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de4:	4b94      	ldr	r3, [pc, #592]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d06c      	beq.n	8006eca <HAL_RCC_OscConfig+0x12e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d168      	bne.n	8006eca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e3f5      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e04:	d106      	bne.n	8006e14 <HAL_RCC_OscConfig+0x78>
 8006e06:	4b8c      	ldr	r3, [pc, #560]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a8b      	ldr	r2, [pc, #556]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e02e      	b.n	8006e72 <HAL_RCC_OscConfig+0xd6>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10c      	bne.n	8006e36 <HAL_RCC_OscConfig+0x9a>
 8006e1c:	4b86      	ldr	r3, [pc, #536]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a85      	ldr	r2, [pc, #532]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	4b83      	ldr	r3, [pc, #524]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a82      	ldr	r2, [pc, #520]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	e01d      	b.n	8006e72 <HAL_RCC_OscConfig+0xd6>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e3e:	d10c      	bne.n	8006e5a <HAL_RCC_OscConfig+0xbe>
 8006e40:	4b7d      	ldr	r3, [pc, #500]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a7c      	ldr	r2, [pc, #496]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4b7a      	ldr	r3, [pc, #488]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a79      	ldr	r2, [pc, #484]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	e00b      	b.n	8006e72 <HAL_RCC_OscConfig+0xd6>
 8006e5a:	4b77      	ldr	r3, [pc, #476]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a76      	ldr	r2, [pc, #472]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b74      	ldr	r3, [pc, #464]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a73      	ldr	r2, [pc, #460]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d013      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fc f829 	bl	8002ed0 <HAL_GetTick>
 8006e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e82:	f7fc f825 	bl	8002ed0 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b64      	cmp	r3, #100	; 0x64
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e3a9      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e94:	4b68      	ldr	r3, [pc, #416]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0xe6>
 8006ea0:	e014      	b.n	8006ecc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea2:	f7fc f815 	bl	8002ed0 <HAL_GetTick>
 8006ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eaa:	f7fc f811 	bl	8002ed0 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b64      	cmp	r3, #100	; 0x64
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e395      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ebc:	4b5e      	ldr	r3, [pc, #376]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <HAL_RCC_OscConfig+0x10e>
 8006ec8:	e000      	b.n	8006ecc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80ca 	beq.w	800706e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eda:	4b57      	ldr	r3, [pc, #348]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ee4:	4b54      	ldr	r3, [pc, #336]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <HAL_RCC_OscConfig+0x164>
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2b18      	cmp	r3, #24
 8006ef4:	d156      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x208>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d151      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f00:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCC_OscConfig+0x17c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e367      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f18:	4b47      	ldr	r3, [pc, #284]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f023 0219 	bic.w	r2, r3, #25
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4944      	ldr	r1, [pc, #272]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f2a:	f7fb ffd1 	bl	8002ed0 <HAL_GetTick>
 8006f2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f32:	f7fb ffcd 	bl	8002ed0 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e351      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f44:	4b3c      	ldr	r3, [pc, #240]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f50:	f7fb ffee 	bl	8002f30 <HAL_GetREVID>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d817      	bhi.n	8006f8e <HAL_RCC_OscConfig+0x1f2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d108      	bne.n	8006f78 <HAL_RCC_OscConfig+0x1dc>
 8006f66:	4b34      	ldr	r3, [pc, #208]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f6e:	4a32      	ldr	r2, [pc, #200]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f76:	e07a      	b.n	800706e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f78:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	031b      	lsls	r3, r3, #12
 8006f86:	492c      	ldr	r1, [pc, #176]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f8c:	e06f      	b.n	800706e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8e:	4b2a      	ldr	r3, [pc, #168]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	4926      	ldr	r1, [pc, #152]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fa2:	e064      	b.n	800706e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d047      	beq.n	800703c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fac:	4b22      	ldr	r3, [pc, #136]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f023 0219 	bic.w	r2, r3, #25
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	491f      	ldr	r1, [pc, #124]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbe:	f7fb ff87 	bl	8002ed0 <HAL_GetTick>
 8006fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fc6:	f7fb ff83 	bl	8002ed0 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e307      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fd8:	4b17      	ldr	r3, [pc, #92]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0f0      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe4:	f7fb ffa4 	bl	8002f30 <HAL_GetREVID>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d817      	bhi.n	8007022 <HAL_RCC_OscConfig+0x286>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d108      	bne.n	800700c <HAL_RCC_OscConfig+0x270>
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007002:	4a0d      	ldr	r2, [pc, #52]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8007004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007008:	6053      	str	r3, [r2, #4]
 800700a:	e030      	b.n	800706e <HAL_RCC_OscConfig+0x2d2>
 800700c:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	031b      	lsls	r3, r3, #12
 800701a:	4907      	ldr	r1, [pc, #28]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 800701c:	4313      	orrs	r3, r2
 800701e:	604b      	str	r3, [r1, #4]
 8007020:	e025      	b.n	800706e <HAL_RCC_OscConfig+0x2d2>
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	4901      	ldr	r1, [pc, #4]	; (8007038 <HAL_RCC_OscConfig+0x29c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	604b      	str	r3, [r1, #4]
 8007036:	e01a      	b.n	800706e <HAL_RCC_OscConfig+0x2d2>
 8007038:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800703c:	4b9e      	ldr	r3, [pc, #632]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a9d      	ldr	r2, [pc, #628]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fb ff42 	bl	8002ed0 <HAL_GetTick>
 800704c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007050:	f7fb ff3e 	bl	8002ed0 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e2c2      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007062:	4b95      	ldr	r3, [pc, #596]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80a9 	beq.w	80071ce <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800707c:	4b8e      	ldr	r3, [pc, #568]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007084:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007086:	4b8c      	ldr	r3, [pc, #560]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b08      	cmp	r3, #8
 8007090:	d007      	beq.n	80070a2 <HAL_RCC_OscConfig+0x306>
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b18      	cmp	r3, #24
 8007096:	d13a      	bne.n	800710e <HAL_RCC_OscConfig+0x372>
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d135      	bne.n	800710e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070a2:	4b85      	ldr	r3, [pc, #532]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_RCC_OscConfig+0x31e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e296      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070ba:	f7fb ff39 	bl	8002f30 <HAL_GetREVID>
 80070be:	4603      	mov	r3, r0
 80070c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d817      	bhi.n	80070f8 <HAL_RCC_OscConfig+0x35c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d108      	bne.n	80070e2 <HAL_RCC_OscConfig+0x346>
 80070d0:	4b79      	ldr	r3, [pc, #484]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070d8:	4a77      	ldr	r2, [pc, #476]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80070da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070e0:	e075      	b.n	80071ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070e2:	4b75      	ldr	r3, [pc, #468]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	069b      	lsls	r3, r3, #26
 80070f0:	4971      	ldr	r1, [pc, #452]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070f6:	e06a      	b.n	80071ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070f8:	4b6f      	ldr	r3, [pc, #444]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	496c      	ldr	r1, [pc, #432]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007108:	4313      	orrs	r3, r2
 800710a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800710c:	e05f      	b.n	80071ce <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d042      	beq.n	800719c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007116:	4b68      	ldr	r3, [pc, #416]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a67      	ldr	r2, [pc, #412]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007122:	f7fb fed5 	bl	8002ed0 <HAL_GetTick>
 8007126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800712a:	f7fb fed1 	bl	8002ed0 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e255      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800713c:	4b5e      	ldr	r3, [pc, #376]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f0      	beq.n	800712a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007148:	f7fb fef2 	bl	8002f30 <HAL_GetREVID>
 800714c:	4603      	mov	r3, r0
 800714e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007152:	4293      	cmp	r3, r2
 8007154:	d817      	bhi.n	8007186 <HAL_RCC_OscConfig+0x3ea>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	2b20      	cmp	r3, #32
 800715c:	d108      	bne.n	8007170 <HAL_RCC_OscConfig+0x3d4>
 800715e:	4b56      	ldr	r3, [pc, #344]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007166:	4a54      	ldr	r2, [pc, #336]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800716c:	6053      	str	r3, [r2, #4]
 800716e:	e02e      	b.n	80071ce <HAL_RCC_OscConfig+0x432>
 8007170:	4b51      	ldr	r3, [pc, #324]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	069b      	lsls	r3, r3, #26
 800717e:	494e      	ldr	r1, [pc, #312]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007180:	4313      	orrs	r3, r2
 8007182:	604b      	str	r3, [r1, #4]
 8007184:	e023      	b.n	80071ce <HAL_RCC_OscConfig+0x432>
 8007186:	4b4c      	ldr	r3, [pc, #304]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	061b      	lsls	r3, r3, #24
 8007194:	4948      	ldr	r1, [pc, #288]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	60cb      	str	r3, [r1, #12]
 800719a:	e018      	b.n	80071ce <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800719c:	4b46      	ldr	r3, [pc, #280]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a45      	ldr	r2, [pc, #276]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80071a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a8:	f7fb fe92 	bl	8002ed0 <HAL_GetTick>
 80071ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071b0:	f7fb fe8e 	bl	8002ed0 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e212      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071c2:	4b3d      	ldr	r3, [pc, #244]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d036      	beq.n	8007248 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d019      	beq.n	8007216 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e2:	4b35      	ldr	r3, [pc, #212]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80071e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e6:	4a34      	ldr	r2, [pc, #208]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ee:	f7fb fe6f 	bl	8002ed0 <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071f6:	f7fb fe6b 	bl	8002ed0 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e1ef      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007208:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800720a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x45a>
 8007214:	e018      	b.n	8007248 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007216:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721a:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007222:	f7fb fe55 	bl	8002ed0 <HAL_GetTick>
 8007226:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800722a:	f7fb fe51 	bl	8002ed0 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e1d5      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800723c:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800723e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f0      	bne.n	800722a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d039      	beq.n	80072c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d019      	beq.n	8007290 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800725c:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007266:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007268:	f7fb fe32 	bl	8002ed0 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007270:	f7fb fe2e 	bl	8002ed0 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e1b2      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x4d4>
 800728e:	e01b      	b.n	80072c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <HAL_RCC_OscConfig+0x51c>)
 8007296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800729a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800729c:	f7fb fe18 	bl	8002ed0 <HAL_GetTick>
 80072a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072a2:	e00b      	b.n	80072bc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072a4:	f7fb fe14 	bl	8002ed0 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d904      	bls.n	80072bc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e198      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
 80072b6:	bf00      	nop
 80072b8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072bc:	4ba3      	ldr	r3, [pc, #652]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1ed      	bne.n	80072a4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8081 	beq.w	80073d8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072d6:	4b9e      	ldr	r3, [pc, #632]	; (8007550 <HAL_RCC_OscConfig+0x7b4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a9d      	ldr	r2, [pc, #628]	; (8007550 <HAL_RCC_OscConfig+0x7b4>)
 80072dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072e2:	f7fb fdf5 	bl	8002ed0 <HAL_GetTick>
 80072e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072ea:	f7fb fdf1 	bl	8002ed0 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b64      	cmp	r3, #100	; 0x64
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e175      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072fc:	4b94      	ldr	r3, [pc, #592]	; (8007550 <HAL_RCC_OscConfig+0x7b4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d106      	bne.n	800731e <HAL_RCC_OscConfig+0x582>
 8007310:	4b8e      	ldr	r3, [pc, #568]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	4a8d      	ldr	r2, [pc, #564]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	6713      	str	r3, [r2, #112]	; 0x70
 800731c:	e02d      	b.n	800737a <HAL_RCC_OscConfig+0x5de>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0x5a4>
 8007326:	4b89      	ldr	r3, [pc, #548]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	4a88      	ldr	r2, [pc, #544]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	6713      	str	r3, [r2, #112]	; 0x70
 8007332:	4b86      	ldr	r3, [pc, #536]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	4a85      	ldr	r2, [pc, #532]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007338:	f023 0304 	bic.w	r3, r3, #4
 800733c:	6713      	str	r3, [r2, #112]	; 0x70
 800733e:	e01c      	b.n	800737a <HAL_RCC_OscConfig+0x5de>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b05      	cmp	r3, #5
 8007346:	d10c      	bne.n	8007362 <HAL_RCC_OscConfig+0x5c6>
 8007348:	4b80      	ldr	r3, [pc, #512]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	4a7f      	ldr	r2, [pc, #508]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800734e:	f043 0304 	orr.w	r3, r3, #4
 8007352:	6713      	str	r3, [r2, #112]	; 0x70
 8007354:	4b7d      	ldr	r3, [pc, #500]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	4a7c      	ldr	r2, [pc, #496]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	6713      	str	r3, [r2, #112]	; 0x70
 8007360:	e00b      	b.n	800737a <HAL_RCC_OscConfig+0x5de>
 8007362:	4b7a      	ldr	r3, [pc, #488]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	4a79      	ldr	r2, [pc, #484]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	6713      	str	r3, [r2, #112]	; 0x70
 800736e:	4b77      	ldr	r3, [pc, #476]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	4a76      	ldr	r2, [pc, #472]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007374:	f023 0304 	bic.w	r3, r3, #4
 8007378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d015      	beq.n	80073ae <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fb fda5 	bl	8002ed0 <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fb fda1 	bl	8002ed0 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e123      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073a0:	4b6a      	ldr	r3, [pc, #424]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0ee      	beq.n	800738a <HAL_RCC_OscConfig+0x5ee>
 80073ac:	e014      	b.n	80073d8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ae:	f7fb fd8f 	bl	8002ed0 <HAL_GetTick>
 80073b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073b4:	e00a      	b.n	80073cc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073b6:	f7fb fd8b 	bl	8002ed0 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e10d      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073cc:	4b5f      	ldr	r3, [pc, #380]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ee      	bne.n	80073b6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8102 	beq.w	80075e6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073e2:	4b5a      	ldr	r3, [pc, #360]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ea:	2b18      	cmp	r3, #24
 80073ec:	f000 80bd 	beq.w	800756a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	f040 8095 	bne.w	8007524 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073fa:	4b54      	ldr	r3, [pc, #336]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a53      	ldr	r2, [pc, #332]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007406:	f7fb fd63 	bl	8002ed0 <HAL_GetTick>
 800740a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800740e:	f7fb fd5f 	bl	8002ed0 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e0e3      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007420:	4b4a      	ldr	r3, [pc, #296]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f0      	bne.n	800740e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800742c:	4b47      	ldr	r3, [pc, #284]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800742e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007430:	4b48      	ldr	r3, [pc, #288]	; (8007554 <HAL_RCC_OscConfig+0x7b8>)
 8007432:	4013      	ands	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800743c:	0112      	lsls	r2, r2, #4
 800743e:	430a      	orrs	r2, r1
 8007440:	4942      	ldr	r1, [pc, #264]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007442:	4313      	orrs	r3, r2
 8007444:	628b      	str	r3, [r1, #40]	; 0x28
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	3b01      	subs	r3, #1
 800744c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007454:	3b01      	subs	r3, #1
 8007456:	025b      	lsls	r3, r3, #9
 8007458:	b29b      	uxth	r3, r3
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	3b01      	subs	r3, #1
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	3b01      	subs	r3, #1
 8007470:	061b      	lsls	r3, r3, #24
 8007472:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007476:	4935      	ldr	r1, [pc, #212]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007478:	4313      	orrs	r3, r2
 800747a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800747c:	4b33      	ldr	r3, [pc, #204]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	4a32      	ldr	r2, [pc, #200]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007488:	4b30      	ldr	r3, [pc, #192]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800748a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748c:	4b32      	ldr	r3, [pc, #200]	; (8007558 <HAL_RCC_OscConfig+0x7bc>)
 800748e:	4013      	ands	r3, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007494:	00d2      	lsls	r2, r2, #3
 8007496:	492d      	ldr	r1, [pc, #180]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007498:	4313      	orrs	r3, r2
 800749a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800749c:	4b2b      	ldr	r3, [pc, #172]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f023 020c 	bic.w	r2, r3, #12
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	4928      	ldr	r1, [pc, #160]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074ae:	4b27      	ldr	r3, [pc, #156]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	f023 0202 	bic.w	r2, r3, #2
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ba:	4924      	ldr	r1, [pc, #144]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074c0:	4b22      	ldr	r3, [pc, #136]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4a21      	ldr	r2, [pc, #132]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074cc:	4b1f      	ldr	r3, [pc, #124]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	4a1e      	ldr	r2, [pc, #120]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a1b      	ldr	r2, [pc, #108]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80074e4:	4b19      	ldr	r3, [pc, #100]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a18      	ldr	r2, [pc, #96]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074f0:	4b16      	ldr	r3, [pc, #88]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a15      	ldr	r2, [pc, #84]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 80074f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fb fce8 	bl	8002ed0 <HAL_GetTick>
 8007500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007504:	f7fb fce4 	bl	8002ed0 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e068      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007516:	4b0d      	ldr	r3, [pc, #52]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f0      	beq.n	8007504 <HAL_RCC_OscConfig+0x768>
 8007522:	e060      	b.n	80075e6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007524:	4b09      	ldr	r3, [pc, #36]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a08      	ldr	r2, [pc, #32]	; (800754c <HAL_RCC_OscConfig+0x7b0>)
 800752a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800752e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fb fcce 	bl	8002ed0 <HAL_GetTick>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007536:	e011      	b.n	800755c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007538:	f7fb fcca 	bl	8002ed0 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d90a      	bls.n	800755c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e04e      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
 8007550:	58024800 	.word	0x58024800
 8007554:	fffffc0c 	.word	0xfffffc0c
 8007558:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800755c:	4b24      	ldr	r3, [pc, #144]	; (80075f0 <HAL_RCC_OscConfig+0x854>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e7      	bne.n	8007538 <HAL_RCC_OscConfig+0x79c>
 8007568:	e03d      	b.n	80075e6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800756a:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <HAL_RCC_OscConfig+0x854>)
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007570:	4b1f      	ldr	r3, [pc, #124]	; (80075f0 <HAL_RCC_OscConfig+0x854>)
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b01      	cmp	r3, #1
 800757c:	d031      	beq.n	80075e2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f003 0203 	and.w	r2, r3, #3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007588:	429a      	cmp	r2, r3
 800758a:	d12a      	bne.n	80075e2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	091b      	lsrs	r3, r3, #4
 8007590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007598:	429a      	cmp	r2, r3
 800759a:	d122      	bne.n	80075e2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d11a      	bne.n	80075e2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	0a5b      	lsrs	r3, r3, #9
 80075b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d111      	bne.n	80075e2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	0c1b      	lsrs	r3, r3, #16
 80075c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d108      	bne.n	80075e2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	0e1b      	lsrs	r3, r3, #24
 80075d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075de:	429a      	cmp	r2, r3
 80075e0:	d001      	beq.n	80075e6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3730      	adds	r7, #48	; 0x30
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	58024400 	.word	0x58024400

080075f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e19c      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007608:	4b8a      	ldr	r3, [pc, #552]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d910      	bls.n	8007638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007616:	4b87      	ldr	r3, [pc, #540]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f023 020f 	bic.w	r2, r3, #15
 800761e:	4985      	ldr	r1, [pc, #532]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	4313      	orrs	r3, r2
 8007624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b83      	ldr	r3, [pc, #524]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e184      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d010      	beq.n	8007666 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	4b7b      	ldr	r3, [pc, #492]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007650:	429a      	cmp	r2, r3
 8007652:	d908      	bls.n	8007666 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007654:	4b78      	ldr	r3, [pc, #480]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	4975      	ldr	r1, [pc, #468]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007662:	4313      	orrs	r3, r2
 8007664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d010      	beq.n	8007694 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695a      	ldr	r2, [r3, #20]
 8007676:	4b70      	ldr	r3, [pc, #448]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800767e:	429a      	cmp	r2, r3
 8007680:	d908      	bls.n	8007694 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007682:	4b6d      	ldr	r3, [pc, #436]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	496a      	ldr	r1, [pc, #424]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007690:	4313      	orrs	r3, r2
 8007692:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	d010      	beq.n	80076c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	4b64      	ldr	r3, [pc, #400]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d908      	bls.n	80076c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076b0:	4b61      	ldr	r3, [pc, #388]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	495e      	ldr	r1, [pc, #376]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d010      	beq.n	80076f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	4b59      	ldr	r3, [pc, #356]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076da:	429a      	cmp	r2, r3
 80076dc:	d908      	bls.n	80076f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076de:	4b56      	ldr	r3, [pc, #344]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	4953      	ldr	r1, [pc, #332]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d010      	beq.n	800771e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	4b4d      	ldr	r3, [pc, #308]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	429a      	cmp	r2, r3
 800770a:	d908      	bls.n	800771e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800770c:	4b4a      	ldr	r3, [pc, #296]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f023 020f 	bic.w	r2, r3, #15
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	4947      	ldr	r1, [pc, #284]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 800771a:	4313      	orrs	r3, r2
 800771c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d055      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800772a:	4b43      	ldr	r3, [pc, #268]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	4940      	ldr	r1, [pc, #256]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007738:	4313      	orrs	r3, r2
 800773a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d107      	bne.n	8007754 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007744:	4b3c      	ldr	r3, [pc, #240]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d121      	bne.n	8007794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e0f6      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d107      	bne.n	800776c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800775c:	4b36      	ldr	r3, [pc, #216]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d115      	bne.n	8007794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0ea      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d107      	bne.n	8007784 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007774:	4b30      	ldr	r3, [pc, #192]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0de      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007784:	4b2c      	ldr	r3, [pc, #176]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0d6      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007794:	4b28      	ldr	r3, [pc, #160]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f023 0207 	bic.w	r2, r3, #7
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4925      	ldr	r1, [pc, #148]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a6:	f7fb fb93 	bl	8002ed0 <HAL_GetTick>
 80077aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ac:	e00a      	b.n	80077c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ae:	f7fb fb8f 	bl	8002ed0 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077bc:	4293      	cmp	r3, r2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e0be      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c4:	4b1c      	ldr	r3, [pc, #112]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d1eb      	bne.n	80077ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d010      	beq.n	8007804 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d208      	bcs.n	8007804 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f2:	4b11      	ldr	r3, [pc, #68]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f023 020f 	bic.w	r2, r3, #15
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	490e      	ldr	r1, [pc, #56]	; (8007838 <HAL_RCC_ClockConfig+0x244>)
 8007800:	4313      	orrs	r3, r2
 8007802:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d214      	bcs.n	800783c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f023 020f 	bic.w	r2, r3, #15
 800781a:	4906      	ldr	r1, [pc, #24]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	4313      	orrs	r3, r2
 8007820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007822:	4b04      	ldr	r3, [pc, #16]	; (8007834 <HAL_RCC_ClockConfig+0x240>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d005      	beq.n	800783c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e086      	b.n	8007942 <HAL_RCC_ClockConfig+0x34e>
 8007834:	52002000 	.word	0x52002000
 8007838:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	d010      	beq.n	800786a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	4b3f      	ldr	r3, [pc, #252]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007854:	429a      	cmp	r2, r3
 8007856:	d208      	bcs.n	800786a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007858:	4b3c      	ldr	r3, [pc, #240]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	4939      	ldr	r1, [pc, #228]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 8007866:	4313      	orrs	r3, r2
 8007868:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d010      	beq.n	8007898 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	4b34      	ldr	r3, [pc, #208]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007882:	429a      	cmp	r2, r3
 8007884:	d208      	bcs.n	8007898 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007886:	4b31      	ldr	r3, [pc, #196]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	492e      	ldr	r1, [pc, #184]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 8007894:	4313      	orrs	r3, r2
 8007896:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d010      	beq.n	80078c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	4b28      	ldr	r3, [pc, #160]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d208      	bcs.n	80078c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078b4:	4b25      	ldr	r3, [pc, #148]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	4922      	ldr	r1, [pc, #136]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d010      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	4b1d      	ldr	r3, [pc, #116]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078de:	429a      	cmp	r2, r3
 80078e0:	d208      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078e2:	4b1a      	ldr	r3, [pc, #104]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	4917      	ldr	r1, [pc, #92]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078f4:	f000 f834 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 80078f8:	4602      	mov	r2, r0
 80078fa:	4b14      	ldr	r3, [pc, #80]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	4912      	ldr	r1, [pc, #72]	; (8007950 <HAL_RCC_ClockConfig+0x35c>)
 8007906:	5ccb      	ldrb	r3, [r1, r3]
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
 8007910:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007912:	4b0e      	ldr	r3, [pc, #56]	; (800794c <HAL_RCC_ClockConfig+0x358>)
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	4a0d      	ldr	r2, [pc, #52]	; (8007950 <HAL_RCC_ClockConfig+0x35c>)
 800791c:	5cd3      	ldrb	r3, [r2, r3]
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
 8007928:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <HAL_RCC_ClockConfig+0x360>)
 800792a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800792c:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <HAL_RCC_ClockConfig+0x364>)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <HAL_RCC_ClockConfig+0x368>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f7fb fa80 	bl	8002e3c <HAL_InitTick>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400
 8007950:	08012190 	.word	0x08012190
 8007954:	24000004 	.word	0x24000004
 8007958:	24000000 	.word	0x24000000
 800795c:	2400001c 	.word	0x2400001c

08007960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	; 0x24
 8007964:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007966:	4bb3      	ldr	r3, [pc, #716]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800796e:	2b18      	cmp	r3, #24
 8007970:	f200 8155 	bhi.w	8007c1e <HAL_RCC_GetSysClockFreq+0x2be>
 8007974:	a201      	add	r2, pc, #4	; (adr r2, 800797c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	080079e1 	.word	0x080079e1
 8007980:	08007c1f 	.word	0x08007c1f
 8007984:	08007c1f 	.word	0x08007c1f
 8007988:	08007c1f 	.word	0x08007c1f
 800798c:	08007c1f 	.word	0x08007c1f
 8007990:	08007c1f 	.word	0x08007c1f
 8007994:	08007c1f 	.word	0x08007c1f
 8007998:	08007c1f 	.word	0x08007c1f
 800799c:	08007a07 	.word	0x08007a07
 80079a0:	08007c1f 	.word	0x08007c1f
 80079a4:	08007c1f 	.word	0x08007c1f
 80079a8:	08007c1f 	.word	0x08007c1f
 80079ac:	08007c1f 	.word	0x08007c1f
 80079b0:	08007c1f 	.word	0x08007c1f
 80079b4:	08007c1f 	.word	0x08007c1f
 80079b8:	08007c1f 	.word	0x08007c1f
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	08007c1f 	.word	0x08007c1f
 80079c4:	08007c1f 	.word	0x08007c1f
 80079c8:	08007c1f 	.word	0x08007c1f
 80079cc:	08007c1f 	.word	0x08007c1f
 80079d0:	08007c1f 	.word	0x08007c1f
 80079d4:	08007c1f 	.word	0x08007c1f
 80079d8:	08007c1f 	.word	0x08007c1f
 80079dc:	08007a13 	.word	0x08007a13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e0:	4b94      	ldr	r3, [pc, #592]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ec:	4b91      	ldr	r3, [pc, #580]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	4a90      	ldr	r2, [pc, #576]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80079fe:	e111      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a00:	4b8d      	ldr	r3, [pc, #564]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a02:	61bb      	str	r3, [r7, #24]
    break;
 8007a04:	e10e      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a06:	4b8d      	ldr	r3, [pc, #564]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a08:	61bb      	str	r3, [r7, #24]
    break;
 8007a0a:	e10b      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a0c:	4b8c      	ldr	r3, [pc, #560]	; (8007c40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a0e:	61bb      	str	r3, [r7, #24]
    break;
 8007a10:	e108      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a12:	4b88      	ldr	r3, [pc, #544]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a1c:	4b85      	ldr	r3, [pc, #532]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	091b      	lsrs	r3, r3, #4
 8007a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a28:	4b82      	ldr	r3, [pc, #520]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a32:	4b80      	ldr	r3, [pc, #512]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a36:	08db      	lsrs	r3, r3, #3
 8007a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	fb02 f303 	mul.w	r3, r2, r3
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 80e1 	beq.w	8007c18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	f000 8083 	beq.w	8007b64 <HAL_RCC_GetSysClockFreq+0x204>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	f200 80a1 	bhi.w	8007ba8 <HAL_RCC_GetSysClockFreq+0x248>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_RCC_GetSysClockFreq+0x114>
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d056      	beq.n	8007b20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a72:	e099      	b.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a74:	4b6f      	ldr	r3, [pc, #444]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d02d      	beq.n	8007adc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a80:	4b6c      	ldr	r3, [pc, #432]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	08db      	lsrs	r3, r3, #3
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	4a6b      	ldr	r2, [pc, #428]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aaa:	4b62      	ldr	r3, [pc, #392]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8007abe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ada:	e087      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aee:	4b51      	ldr	r3, [pc, #324]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1e:	e065      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b32:	4b40      	ldr	r3, [pc, #256]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b62:	e043      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b76:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba6:	e021      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bba:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007bec:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	0a5b      	lsrs	r3, r3, #9
 8007bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	ee07 3a90 	vmov	s15, r3
 8007c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c10:	ee17 3a90 	vmov	r3, s15
 8007c14:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c16:	e005      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
    break;
 8007c1c:	e002      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c20:	61bb      	str	r3, [r7, #24]
    break;
 8007c22:	bf00      	nop
  }

  return sysclockfreq;
 8007c24:	69bb      	ldr	r3, [r7, #24]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3724      	adds	r7, #36	; 0x24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400
 8007c38:	03d09000 	.word	0x03d09000
 8007c3c:	003d0900 	.word	0x003d0900
 8007c40:	007a1200 	.word	0x007a1200
 8007c44:	46000000 	.word	0x46000000
 8007c48:	4c742400 	.word	0x4c742400
 8007c4c:	4a742400 	.word	0x4a742400
 8007c50:	4af42400 	.word	0x4af42400

08007c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c5a:	f7ff fe81 	bl	8007960 <HAL_RCC_GetSysClockFreq>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	490f      	ldr	r1, [pc, #60]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c6c:	5ccb      	ldrb	r3, [r1, r3]
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c82:	5cd3      	ldrb	r3, [r2, r3]
 8007c84:	f003 031f 	and.w	r3, r3, #31
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	4a07      	ldr	r2, [pc, #28]	; (8007cac <HAL_RCC_GetHCLKFreq+0x58>)
 8007c90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c92:	4a07      	ldr	r2, [pc, #28]	; (8007cb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <HAL_RCC_GetHCLKFreq+0x58>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	58024400 	.word	0x58024400
 8007ca8:	08012190 	.word	0x08012190
 8007cac:	24000004 	.word	0x24000004
 8007cb0:	24000000 	.word	0x24000000

08007cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cb8:	f7ff ffcc 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	4904      	ldr	r1, [pc, #16]	; (8007cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cca:	5ccb      	ldrb	r3, [r1, r3]
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	08012190 	.word	0x08012190

08007ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ce4:	f7ff ffb6 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4904      	ldr	r1, [pc, #16]	; (8007d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	58024400 	.word	0x58024400
 8007d08:	08012190 	.word	0x08012190

08007d0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d14:	2300      	movs	r3, #0
 8007d16:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d03f      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d30:	d02a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d36:	d824      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d3c:	d018      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d42:	d81e      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d4c:	d007      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d4e:	e018      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d50:	4bab      	ldr	r3, [pc, #684]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	4aaa      	ldr	r2, [pc, #680]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d5c:	e015      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3304      	adds	r3, #4
 8007d62:	2102      	movs	r1, #2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 f9cf 	bl	8009108 <RCCEx_PLL2_Config>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d6e:	e00c      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3324      	adds	r3, #36	; 0x24
 8007d74:	2102      	movs	r1, #2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fa78 	bl	800926c <RCCEx_PLL3_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d80:	e003      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
      break;
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d90:	4b9b      	ldr	r3, [pc, #620]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d9c:	4998      	ldr	r1, [pc, #608]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	650b      	str	r3, [r1, #80]	; 0x50
 8007da2:	e001      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d03d      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d826      	bhi.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007de7 	.word	0x08007de7
 8007dcc:	08007df9 	.word	0x08007df9
 8007dd0:	08007e11 	.word	0x08007e11
 8007dd4:	08007e11 	.word	0x08007e11
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd8:	4b89      	ldr	r3, [pc, #548]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	4a88      	ldr	r2, [pc, #544]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007de4:	e015      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3304      	adds	r3, #4
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 f98b 	bl	8009108 <RCCEx_PLL2_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007df6:	e00c      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3324      	adds	r3, #36	; 0x24
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fa34 	bl	800926c <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e08:	e003      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0e:	e000      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e18:	4b79      	ldr	r3, [pc, #484]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1c:	f023 0207 	bic.w	r2, r3, #7
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e24:	4976      	ldr	r1, [pc, #472]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	650b      	str	r3, [r1, #80]	; 0x50
 8007e2a:	e001      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d042      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e44:	d02b      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e4a:	d825      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e4c:	2bc0      	cmp	r3, #192	; 0xc0
 8007e4e:	d028      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e50:	2bc0      	cmp	r3, #192	; 0xc0
 8007e52:	d821      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e54:	2b80      	cmp	r3, #128	; 0x80
 8007e56:	d016      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d81d      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007e60:	2b40      	cmp	r3, #64	; 0x40
 8007e62:	d007      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007e64:	e018      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e66:	4b66      	ldr	r3, [pc, #408]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	4a65      	ldr	r2, [pc, #404]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e72:	e017      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 f944 	bl	8009108 <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e84:	e00e      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f9ed 	bl	800926c <RCCEx_PLL3_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e96:	e005      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9c:	e002      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007eaa:	4b55      	ldr	r3, [pc, #340]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb6:	4952      	ldr	r1, [pc, #328]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	650b      	str	r3, [r1, #80]	; 0x50
 8007ebc:	e001      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d049      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ed8:	d030      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ede:	d82a      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ee4:	d02c      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007eea:	d824      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ef0:	d018      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ef6:	d81e      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f00:	d007      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f02:	e018      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f04:	4b3e      	ldr	r3, [pc, #248]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	4a3d      	ldr	r2, [pc, #244]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f10:	e017      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2100      	movs	r1, #0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 f8f5 	bl	8009108 <RCCEx_PLL2_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f22:	e00e      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f99e 	bl	800926c <RCCEx_PLL3_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f34:	e005      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3a:	e002      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f48:	4b2d      	ldr	r3, [pc, #180]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f56:	492a      	ldr	r1, [pc, #168]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8007f5c:	e001      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d04c      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f78:	d030      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f7e:	d82a      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f84:	d02c      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007f86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f8a:	d824      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f90:	d018      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f96:	d81e      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fa0:	d007      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007fa2:	e018      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fb0:	e017      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 f8a5 	bl	8009108 <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fc2:	e00e      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3324      	adds	r3, #36	; 0x24
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 f94e 	bl	800926c <RCCEx_PLL3_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fd4:	e005      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fda:	e002      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e000      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10d      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ff6:	4902      	ldr	r1, [pc, #8]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	658b      	str	r3, [r1, #88]	; 0x58
 8007ffc:	e004      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d032      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008018:	2b30      	cmp	r3, #48	; 0x30
 800801a:	d01c      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d817      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d00c      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d813      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d016      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800802c:	2b10      	cmp	r3, #16
 800802e:	d10f      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4baf      	ldr	r3, [pc, #700]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	4aae      	ldr	r2, [pc, #696]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800803c:	e00e      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3304      	adds	r3, #4
 8008042:	2102      	movs	r1, #2
 8008044:	4618      	mov	r0, r3
 8008046:	f001 f85f 	bl	8009108 <RCCEx_PLL2_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800804e:	e005      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
      break;
 8008054:	e002      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800805a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008062:	4ba3      	ldr	r3, [pc, #652]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008066:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806e:	49a0      	ldr	r1, [pc, #640]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008070:	4313      	orrs	r3, r2
 8008072:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008074:	e001      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d047      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800808e:	d030      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008094:	d82a      	bhi.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800809a:	d02c      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800809c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080a0:	d824      	bhi.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80080a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a6:	d018      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ac:	d81e      	bhi.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80080b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b6:	d007      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80080b8:	e018      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ba:	4b8d      	ldr	r3, [pc, #564]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	4a8c      	ldr	r2, [pc, #560]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080c6:	e017      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 f81a 	bl	8009108 <RCCEx_PLL2_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080d8:	e00e      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3324      	adds	r3, #36	; 0x24
 80080de:	2100      	movs	r1, #0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f8c3 	bl	800926c <RCCEx_PLL3_Config>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080ea:	e005      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	75fb      	strb	r3, [r7, #23]
      break;
 80080f0:	e002      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80080f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080fe:	4b7c      	ldr	r3, [pc, #496]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810a:	4979      	ldr	r1, [pc, #484]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800810c:	4313      	orrs	r3, r2
 800810e:	650b      	str	r3, [r1, #80]	; 0x50
 8008110:	e001      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d049      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800812a:	d02e      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800812c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008130:	d828      	bhi.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008136:	d02a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800813c:	d822      	bhi.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800813e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008142:	d026      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008148:	d81c      	bhi.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800814a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800814e:	d010      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008154:	d816      	bhi.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01d      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800815a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815e:	d111      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	2101      	movs	r1, #1
 8008166:	4618      	mov	r0, r3
 8008168:	f000 ffce 	bl	8009108 <RCCEx_PLL2_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008170:	e012      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3324      	adds	r3, #36	; 0x24
 8008176:	2101      	movs	r1, #1
 8008178:	4618      	mov	r0, r3
 800817a:	f001 f877 	bl	800926c <RCCEx_PLL3_Config>
 800817e:	4603      	mov	r3, r0
 8008180:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008182:	e009      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	75fb      	strb	r3, [r7, #23]
      break;
 8008188:	e006      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800818a:	bf00      	nop
 800818c:	e004      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800818e:	bf00      	nop
 8008190:	e002      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800819e:	4b54      	ldr	r3, [pc, #336]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	4951      	ldr	r1, [pc, #324]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	650b      	str	r3, [r1, #80]	; 0x50
 80081b0:	e001      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d04b      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081cc:	d02e      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80081ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081d2:	d828      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d02a      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80081da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081de:	d822      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081e4:	d026      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80081e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081ea:	d81c      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f0:	d010      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80081f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f6:	d816      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01d      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80081fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008200:	d111      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3304      	adds	r3, #4
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f000 ff7d 	bl	8009108 <RCCEx_PLL2_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008212:	e012      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	2101      	movs	r1, #1
 800821a:	4618      	mov	r0, r3
 800821c:	f001 f826 	bl	800926c <RCCEx_PLL3_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008224:	e009      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	75fb      	strb	r3, [r7, #23]
      break;
 800822a:	e006      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800822c:	bf00      	nop
 800822e:	e004      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008230:	bf00      	nop
 8008232:	e002      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008244:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800824e:	4928      	ldr	r1, [pc, #160]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008250:	4313      	orrs	r3, r2
 8008252:	658b      	str	r3, [r1, #88]	; 0x58
 8008254:	e001      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d02f      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800826e:	d00e      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008274:	d814      	bhi.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d015      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800827a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800827e:	d10f      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800828a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800828c:	e00c      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3304      	adds	r3, #4
 8008292:	2101      	movs	r1, #1
 8008294:	4618      	mov	r0, r3
 8008296:	f000 ff37 	bl	8009108 <RCCEx_PLL2_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800829e:	e003      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
      break;
 80082a4:	e000      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80082a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d109      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082ae:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ba:	490d      	ldr	r1, [pc, #52]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	650b      	str	r3, [r1, #80]	; 0x50
 80082c0:	e001      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d033      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d81c      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80082da:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80082dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e0:	0800831b 	.word	0x0800831b
 80082e4:	080082f5 	.word	0x080082f5
 80082e8:	08008303 	.word	0x08008303
 80082ec:	0800831b 	.word	0x0800831b
 80082f0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f4:	4bb8      	ldr	r3, [pc, #736]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	4ab7      	ldr	r2, [pc, #732]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008300:	e00c      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3304      	adds	r3, #4
 8008306:	2102      	movs	r1, #2
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fefd 	bl	8009108 <RCCEx_PLL2_Config>
 800830e:	4603      	mov	r3, r0
 8008310:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008312:	e003      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
      break;
 8008318:	e000      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800831a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008322:	4bad      	ldr	r3, [pc, #692]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008326:	f023 0203 	bic.w	r2, r3, #3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	49aa      	ldr	r1, [pc, #680]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008330:	4313      	orrs	r3, r2
 8008332:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008334:	e001      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8086 	beq.w	8008454 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008348:	4ba4      	ldr	r3, [pc, #656]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4aa3      	ldr	r2, [pc, #652]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800834e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008354:	f7fa fdbc 	bl	8002ed0 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800835a:	e009      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800835c:	f7fa fdb8 	bl	8002ed0 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b64      	cmp	r3, #100	; 0x64
 8008368:	d902      	bls.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	75fb      	strb	r3, [r7, #23]
        break;
 800836e:	e005      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008370:	4b9a      	ldr	r3, [pc, #616]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0ef      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d166      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008382:	4b95      	ldr	r3, [pc, #596]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800838c:	4053      	eors	r3, r2
 800838e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008392:	2b00      	cmp	r3, #0
 8008394:	d013      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008396:	4b90      	ldr	r3, [pc, #576]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800839e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083a0:	4b8d      	ldr	r3, [pc, #564]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a4:	4a8c      	ldr	r2, [pc, #560]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083ac:	4b8a      	ldr	r3, [pc, #552]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	4a89      	ldr	r2, [pc, #548]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083b8:	4a87      	ldr	r2, [pc, #540]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c8:	d115      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ca:	f7fa fd81 	bl	8002ed0 <HAL_GetTick>
 80083ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083d0:	e00b      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083d2:	f7fa fd7d 	bl	8002ed0 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d902      	bls.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	75fb      	strb	r3, [r7, #23]
            break;
 80083e8:	e005      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ea:	4b7b      	ldr	r3, [pc, #492]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0ed      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d126      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800840a:	d10d      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800840c:	4b72      	ldr	r3, [pc, #456]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800841a:	0919      	lsrs	r1, r3, #4
 800841c:	4b70      	ldr	r3, [pc, #448]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800841e:	400b      	ands	r3, r1
 8008420:	496d      	ldr	r1, [pc, #436]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008422:	4313      	orrs	r3, r2
 8008424:	610b      	str	r3, [r1, #16]
 8008426:	e005      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008428:	4b6b      	ldr	r3, [pc, #428]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	4a6a      	ldr	r2, [pc, #424]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800842e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008432:	6113      	str	r3, [r2, #16]
 8008434:	4b68      	ldr	r3, [pc, #416]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800843e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008442:	4965      	ldr	r1, [pc, #404]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008444:	4313      	orrs	r3, r2
 8008446:	670b      	str	r3, [r1, #112]	; 0x70
 8008448:	e004      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	75bb      	strb	r3, [r7, #22]
 800844e:	e001      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d07e      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008464:	2b28      	cmp	r3, #40	; 0x28
 8008466:	d867      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	0800853f 	.word	0x0800853f
 8008474:	08008539 	.word	0x08008539
 8008478:	08008539 	.word	0x08008539
 800847c:	08008539 	.word	0x08008539
 8008480:	08008539 	.word	0x08008539
 8008484:	08008539 	.word	0x08008539
 8008488:	08008539 	.word	0x08008539
 800848c:	08008539 	.word	0x08008539
 8008490:	08008515 	.word	0x08008515
 8008494:	08008539 	.word	0x08008539
 8008498:	08008539 	.word	0x08008539
 800849c:	08008539 	.word	0x08008539
 80084a0:	08008539 	.word	0x08008539
 80084a4:	08008539 	.word	0x08008539
 80084a8:	08008539 	.word	0x08008539
 80084ac:	08008539 	.word	0x08008539
 80084b0:	08008527 	.word	0x08008527
 80084b4:	08008539 	.word	0x08008539
 80084b8:	08008539 	.word	0x08008539
 80084bc:	08008539 	.word	0x08008539
 80084c0:	08008539 	.word	0x08008539
 80084c4:	08008539 	.word	0x08008539
 80084c8:	08008539 	.word	0x08008539
 80084cc:	08008539 	.word	0x08008539
 80084d0:	0800853f 	.word	0x0800853f
 80084d4:	08008539 	.word	0x08008539
 80084d8:	08008539 	.word	0x08008539
 80084dc:	08008539 	.word	0x08008539
 80084e0:	08008539 	.word	0x08008539
 80084e4:	08008539 	.word	0x08008539
 80084e8:	08008539 	.word	0x08008539
 80084ec:	08008539 	.word	0x08008539
 80084f0:	0800853f 	.word	0x0800853f
 80084f4:	08008539 	.word	0x08008539
 80084f8:	08008539 	.word	0x08008539
 80084fc:	08008539 	.word	0x08008539
 8008500:	08008539 	.word	0x08008539
 8008504:	08008539 	.word	0x08008539
 8008508:	08008539 	.word	0x08008539
 800850c:	08008539 	.word	0x08008539
 8008510:	0800853f 	.word	0x0800853f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	2101      	movs	r1, #1
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fdf4 	bl	8009108 <RCCEx_PLL2_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008524:	e00c      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3324      	adds	r3, #36	; 0x24
 800852a:	2101      	movs	r1, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fe9d 	bl	800926c <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008536:	e003      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
      break;
 800853c:	e000      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800853e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008546:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008552:	4921      	ldr	r1, [pc, #132]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008554:	4313      	orrs	r3, r2
 8008556:	654b      	str	r3, [r1, #84]	; 0x54
 8008558:	e001      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d03e      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856e:	2b05      	cmp	r3, #5
 8008570:	d820      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085bb 	.word	0x080085bb
 800857c:	08008591 	.word	0x08008591
 8008580:	080085a3 	.word	0x080085a3
 8008584:	080085bb 	.word	0x080085bb
 8008588:	080085bb 	.word	0x080085bb
 800858c:	080085bb 	.word	0x080085bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	2101      	movs	r1, #1
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fdb6 	bl	8009108 <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085a0:	e00c      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3324      	adds	r3, #36	; 0x24
 80085a6:	2101      	movs	r1, #1
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fe5f 	bl	800926c <RCCEx_PLL3_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085b2:	e003      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
      break;
 80085b8:	e000      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80085ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d110      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c6:	f023 0207 	bic.w	r2, r3, #7
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ce:	4902      	ldr	r1, [pc, #8]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	654b      	str	r3, [r1, #84]	; 0x54
 80085d4:	e008      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80085d6:	bf00      	nop
 80085d8:	58024400 	.word	0x58024400
 80085dc:	58024800 	.word	0x58024800
 80085e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d039      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d820      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008647 	.word	0x08008647
 8008608:	0800861d 	.word	0x0800861d
 800860c:	0800862f 	.word	0x0800862f
 8008610:	08008647 	.word	0x08008647
 8008614:	08008647 	.word	0x08008647
 8008618:	08008647 	.word	0x08008647
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fd70 	bl	8009108 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800862c:	e00c      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3324      	adds	r3, #36	; 0x24
 8008632:	2101      	movs	r1, #1
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fe19 	bl	800926c <RCCEx_PLL3_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800863e:	e003      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
      break;
 8008644:	e000      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800864e:	4bb7      	ldr	r3, [pc, #732]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008652:	f023 0207 	bic.w	r2, r3, #7
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865c:	49b3      	ldr	r1, [pc, #716]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800865e:	4313      	orrs	r3, r2
 8008660:	658b      	str	r3, [r1, #88]	; 0x58
 8008662:	e001      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d04b      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800867a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800867e:	d02e      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008684:	d828      	bhi.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868a:	d02a      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008690:	d822      	bhi.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008696:	d026      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800869c:	d81c      	bhi.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800869e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a2:	d010      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80086a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a8:	d816      	bhi.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01d      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80086ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086b2:	d111      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3304      	adds	r3, #4
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fd24 	bl	8009108 <RCCEx_PLL2_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086c4:	e012      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3324      	adds	r3, #36	; 0x24
 80086ca:	2102      	movs	r1, #2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fdcd 	bl	800926c <RCCEx_PLL3_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086d6:	e009      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
      break;
 80086dc:	e006      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086de:	bf00      	nop
 80086e0:	e004      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086e2:	bf00      	nop
 80086e4:	e002      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086e6:	bf00      	nop
 80086e8:	e000      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086f2:	4b8e      	ldr	r3, [pc, #568]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008700:	498a      	ldr	r1, [pc, #552]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008702:	4313      	orrs	r3, r2
 8008704:	654b      	str	r3, [r1, #84]	; 0x54
 8008706:	e001      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d04b      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800871e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008722:	d02e      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008728:	d828      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800872a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800872e:	d02a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008734:	d822      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800873a:	d026      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800873c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008740:	d81c      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008746:	d010      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800874c:	d816      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01d      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008756:	d111      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	2100      	movs	r1, #0
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fcd2 	bl	8009108 <RCCEx_PLL2_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008768:	e012      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3324      	adds	r3, #36	; 0x24
 800876e:	2102      	movs	r1, #2
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fd7b 	bl	800926c <RCCEx_PLL3_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800877a:	e009      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
      break;
 8008780:	e006      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008782:	bf00      	nop
 8008784:	e004      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800878e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008796:	4b65      	ldr	r3, [pc, #404]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087a4:	4961      	ldr	r1, [pc, #388]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	658b      	str	r3, [r1, #88]	; 0x58
 80087aa:	e001      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04b      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087c6:	d02e      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80087c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087cc:	d828      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d2:	d02a      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80087d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d8:	d822      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087de:	d026      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80087e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087e4:	d81c      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ea:	d010      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80087ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f0:	d816      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01d      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80087f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fa:	d111      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3304      	adds	r3, #4
 8008800:	2100      	movs	r1, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fc80 	bl	8009108 <RCCEx_PLL2_Config>
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800880c:	e012      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3324      	adds	r3, #36	; 0x24
 8008812:	2102      	movs	r1, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fd29 	bl	800926c <RCCEx_PLL3_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800881e:	e009      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
      break;
 8008824:	e006      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008826:	bf00      	nop
 8008828:	e004      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800882a:	bf00      	nop
 800882c:	e002      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800882e:	bf00      	nop
 8008830:	e000      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800883a:	4b3c      	ldr	r3, [pc, #240]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008848:	4938      	ldr	r1, [pc, #224]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800884a:	4313      	orrs	r3, r2
 800884c:	658b      	str	r3, [r1, #88]	; 0x58
 800884e:	e001      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01a      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886a:	d10a      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3324      	adds	r3, #36	; 0x24
 8008870:	2102      	movs	r1, #2
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fcfa 	bl	800926c <RCCEx_PLL3_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008882:	4b2a      	ldr	r3, [pc, #168]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008890:	4926      	ldr	r1, [pc, #152]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008892:	4313      	orrs	r3, r2
 8008894:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0310 	and.w	r3, r3, #16
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01a      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ac:	d10a      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3324      	adds	r3, #36	; 0x24
 80088b2:	2102      	movs	r1, #2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fcd9 	bl	800926c <RCCEx_PLL3_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088c4:	4b19      	ldr	r3, [pc, #100]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088d2:	4916      	ldr	r1, [pc, #88]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d036      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ee:	d01f      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80088f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f4:	d817      	bhi.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80088fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088fe:	d009      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008900:	e011      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fbfd 	bl	8009108 <RCCEx_PLL2_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008912:	e00e      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3324      	adds	r3, #36	; 0x24
 8008918:	2102      	movs	r1, #2
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fca6 	bl	800926c <RCCEx_PLL3_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008924:	e005      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
      break;
 800892a:	e002      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800892c:	58024400 	.word	0x58024400
      break;
 8008930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10a      	bne.n	800894e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008938:	4b93      	ldr	r3, [pc, #588]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800893a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008946:	4990      	ldr	r1, [pc, #576]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008948:	4313      	orrs	r3, r2
 800894a:	658b      	str	r3, [r1, #88]	; 0x58
 800894c:	e001      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d033      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008964:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008968:	d01c      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800896a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800896e:	d816      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008974:	d003      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800897a:	d007      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800897c:	e00f      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800897e:	4b82      	ldr	r3, [pc, #520]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	4a81      	ldr	r2, [pc, #516]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800898a:	e00c      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3324      	adds	r3, #36	; 0x24
 8008990:	2101      	movs	r1, #1
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fc6a 	bl	800926c <RCCEx_PLL3_Config>
 8008998:	4603      	mov	r3, r0
 800899a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800899c:	e003      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]
      break;
 80089a2:	e000      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80089a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089ac:	4b76      	ldr	r3, [pc, #472]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ba:	4973      	ldr	r1, [pc, #460]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	654b      	str	r3, [r1, #84]	; 0x54
 80089c0:	e001      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d029      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80089da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089de:	d007      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80089e0:	e00f      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e2:	4b69      	ldr	r3, [pc, #420]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4a68      	ldr	r2, [pc, #416]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089ee:	e00b      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2102      	movs	r1, #2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fb86 	bl	8009108 <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a00:	e002      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
      break;
 8008a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d109      	bne.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a0e:	4b5e      	ldr	r3, [pc, #376]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	495b      	ldr	r1, [pc, #364]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a20:	e001      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3324      	adds	r3, #36	; 0x24
 8008a36:	2102      	movs	r1, #2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fc17 	bl	800926c <RCCEx_PLL3_Config>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d030      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a5c:	d017      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a62:	d811      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a68:	d013      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6e:	d80b      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d010      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a78:	d106      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a7a:	4b43      	ldr	r3, [pc, #268]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	4a42      	ldr	r2, [pc, #264]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008a86:	e007      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a8c:	e004      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a8e:	bf00      	nop
 8008a90:	e002      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a92:	bf00      	nop
 8008a94:	e000      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a9e:	4b3a      	ldr	r3, [pc, #232]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aaa:	4937      	ldr	r1, [pc, #220]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	654b      	str	r3, [r1, #84]	; 0x54
 8008ab0:	e001      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d008      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ac2:	4b31      	ldr	r3, [pc, #196]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	492e      	ldr	r1, [pc, #184]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ae0:	4b29      	ldr	r3, [pc, #164]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008aee:	4926      	ldr	r1, [pc, #152]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b00:	4b21      	ldr	r3, [pc, #132]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b0c:	491e      	ldr	r1, [pc, #120]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	4a19      	ldr	r2, [pc, #100]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b28:	6113      	str	r3, [r2, #16]
 8008b2a:	4b17      	ldr	r3, [pc, #92]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b34:	4914      	ldr	r1, [pc, #80]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da08      	bge.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4e:	490e      	ldr	r1, [pc, #56]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b60:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6e:	4906      	ldr	r1, [pc, #24]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008b74:	7dbb      	ldrb	r3, [r7, #22]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e000      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	58024400 	.word	0x58024400

08008b8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b90:	f7ff f860 	bl	8007c54 <HAL_RCC_GetHCLKFreq>
 8008b94:	4602      	mov	r2, r0
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	091b      	lsrs	r3, r3, #4
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	4904      	ldr	r1, [pc, #16]	; (8008bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ba2:	5ccb      	ldrb	r3, [r1, r3]
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	08012190 	.word	0x08012190

08008bb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	; 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bc0:	4ba1      	ldr	r3, [pc, #644]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008bca:	4b9f      	ldr	r3, [pc, #636]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	0b1b      	lsrs	r3, r3, #12
 8008bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bd6:	4b9c      	ldr	r3, [pc, #624]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	091b      	lsrs	r3, r3, #4
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008be2:	4b99      	ldr	r3, [pc, #612]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be6:	08db      	lsrs	r3, r3, #3
 8008be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	fb02 f303 	mul.w	r3, r2, r3
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8111 	beq.w	8008e28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	f000 8083 	beq.w	8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	f200 80a1 	bhi.w	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d056      	beq.n	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c22:	e099      	b.n	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c24:	4b88      	ldr	r3, [pc, #544]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d02d      	beq.n	8008c8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c30:	4b85      	ldr	r3, [pc, #532]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	08db      	lsrs	r3, r3, #3
 8008c36:	f003 0303 	and.w	r3, r3, #3
 8008c3a:	4a84      	ldr	r2, [pc, #528]	; (8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5a:	4b7b      	ldr	r3, [pc, #492]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c8a:	e087      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9e:	4b6a      	ldr	r3, [pc, #424]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cce:	e065      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce2:	4b59      	ldr	r3, [pc, #356]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d12:	e043      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	4b48      	ldr	r3, [pc, #288]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d56:	e021      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b37      	ldr	r3, [pc, #220]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d9c:	4b2a      	ldr	r3, [pc, #168]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	0a5b      	lsrs	r3, r3, #9
 8008da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc2:	ee17 2a90 	vmov	r2, s15
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008dca:	4b1f      	ldr	r3, [pc, #124]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	0c1b      	lsrs	r3, r3, #16
 8008dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd4:	ee07 3a90 	vmov	s15, r3
 8008dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df0:	ee17 2a90 	vmov	r2, s15
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008df8:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	0e1b      	lsrs	r3, r3, #24
 8008dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1e:	ee17 2a90 	vmov	r2, s15
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e26:	e008      	b.n	8008e3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	609a      	str	r2, [r3, #8]
}
 8008e3a:	bf00      	nop
 8008e3c:	3724      	adds	r7, #36	; 0x24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	03d09000 	.word	0x03d09000
 8008e50:	46000000 	.word	0x46000000
 8008e54:	4c742400 	.word	0x4c742400
 8008e58:	4a742400 	.word	0x4a742400
 8008e5c:	4af42400 	.word	0x4af42400

08008e60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b089      	sub	sp, #36	; 0x24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e68:	4ba1      	ldr	r3, [pc, #644]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008e72:	4b9f      	ldr	r3, [pc, #636]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	0d1b      	lsrs	r3, r3, #20
 8008e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e7e:	4b9c      	ldr	r3, [pc, #624]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e82:	0a1b      	lsrs	r3, r3, #8
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008e8a:	4b99      	ldr	r3, [pc, #612]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	08db      	lsrs	r3, r3, #3
 8008e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 8111 	beq.w	80090d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	f000 8083 	beq.w	8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	f200 80a1 	bhi.w	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d056      	beq.n	8008f78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008eca:	e099      	b.n	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ecc:	4b88      	ldr	r3, [pc, #544]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d02d      	beq.n	8008f34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ed8:	4b85      	ldr	r3, [pc, #532]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	08db      	lsrs	r3, r3, #3
 8008ede:	f003 0303 	and.w	r3, r3, #3
 8008ee2:	4a84      	ldr	r2, [pc, #528]	; (80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f02:	4b7b      	ldr	r3, [pc, #492]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f16:	eddf 5a78 	vldr	s11, [pc, #480]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f32:	e087      	b.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80090fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f46:	4b6a      	ldr	r3, [pc, #424]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f76:	e065      	b.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8a:	4b59      	ldr	r3, [pc, #356]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fba:	e043      	b.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fce:	4b48      	ldr	r3, [pc, #288]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ffe:	e021      	b.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800900e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009012:	4b37      	ldr	r3, [pc, #220]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009022:	ed97 6a03 	vldr	s12, [r7, #12]
 8009026:	eddf 5a34 	vldr	s11, [pc, #208]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800902a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009042:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009044:	4b2a      	ldr	r3, [pc, #168]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009048:	0a5b      	lsrs	r3, r3, #9
 800904a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800905a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800906a:	ee17 2a90 	vmov	r2, s15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009072:	4b1f      	ldr	r3, [pc, #124]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	0c1b      	lsrs	r3, r3, #16
 8009078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800907c:	ee07 3a90 	vmov	s15, r3
 8009080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800908c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009098:	ee17 2a90 	vmov	r2, s15
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80090a0:	4b13      	ldr	r3, [pc, #76]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a4:	0e1b      	lsrs	r3, r3, #24
 80090a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80090be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c6:	ee17 2a90 	vmov	r2, s15
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090ce:	e008      	b.n	80090e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	609a      	str	r2, [r3, #8]
}
 80090e2:	bf00      	nop
 80090e4:	3724      	adds	r7, #36	; 0x24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	58024400 	.word	0x58024400
 80090f4:	03d09000 	.word	0x03d09000
 80090f8:	46000000 	.word	0x46000000
 80090fc:	4c742400 	.word	0x4c742400
 8009100:	4a742400 	.word	0x4a742400
 8009104:	4af42400 	.word	0x4af42400

08009108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009116:	4b53      	ldr	r3, [pc, #332]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b03      	cmp	r3, #3
 8009120:	d101      	bne.n	8009126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e099      	b.n	800925a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009126:	4b4f      	ldr	r3, [pc, #316]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a4e      	ldr	r2, [pc, #312]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800912c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009132:	f7f9 fecd 	bl	8002ed0 <HAL_GetTick>
 8009136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009138:	e008      	b.n	800914c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800913a:	f7f9 fec9 	bl	8002ed0 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b02      	cmp	r3, #2
 8009146:	d901      	bls.n	800914c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e086      	b.n	800925a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800914c:	4b45      	ldr	r3, [pc, #276]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1f0      	bne.n	800913a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009158:	4b42      	ldr	r3, [pc, #264]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	031b      	lsls	r3, r3, #12
 8009166:	493f      	ldr	r1, [pc, #252]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 8009168:	4313      	orrs	r3, r2
 800916a:	628b      	str	r3, [r1, #40]	; 0x28
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	3b01      	subs	r3, #1
 8009172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	3b01      	subs	r3, #1
 800917c:	025b      	lsls	r3, r3, #9
 800917e:	b29b      	uxth	r3, r3
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	3b01      	subs	r3, #1
 8009188:	041b      	lsls	r3, r3, #16
 800918a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	3b01      	subs	r3, #1
 8009196:	061b      	lsls	r3, r3, #24
 8009198:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800919c:	4931      	ldr	r1, [pc, #196]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091a2:	4b30      	ldr	r3, [pc, #192]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	492d      	ldr	r1, [pc, #180]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091b4:	4b2b      	ldr	r3, [pc, #172]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	f023 0220 	bic.w	r2, r3, #32
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	4928      	ldr	r1, [pc, #160]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091c6:	4b27      	ldr	r3, [pc, #156]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	4a26      	ldr	r2, [pc, #152]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091cc:	f023 0310 	bic.w	r3, r3, #16
 80091d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80091d2:	4b24      	ldr	r3, [pc, #144]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d6:	4b24      	ldr	r3, [pc, #144]	; (8009268 <RCCEx_PLL2_Config+0x160>)
 80091d8:	4013      	ands	r3, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	69d2      	ldr	r2, [r2, #28]
 80091de:	00d2      	lsls	r2, r2, #3
 80091e0:	4920      	ldr	r1, [pc, #128]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80091e6:	4b1f      	ldr	r3, [pc, #124]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	4a1e      	ldr	r2, [pc, #120]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	f043 0310 	orr.w	r3, r3, #16
 80091f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091f8:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a19      	ldr	r2, [pc, #100]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 80091fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009204:	e00f      	b.n	8009226 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d106      	bne.n	800921a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800920c:	4b15      	ldr	r3, [pc, #84]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4a14      	ldr	r2, [pc, #80]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 8009212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009218:	e005      	b.n	8009226 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800921a:	4b12      	ldr	r3, [pc, #72]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a11      	ldr	r2, [pc, #68]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 8009220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009224:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009226:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a0e      	ldr	r2, [pc, #56]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800922c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009232:	f7f9 fe4d 	bl	8002ed0 <HAL_GetTick>
 8009236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009238:	e008      	b.n	800924c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800923a:	f7f9 fe49 	bl	8002ed0 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d901      	bls.n	800924c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e006      	b.n	800925a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800924c:	4b05      	ldr	r3, [pc, #20]	; (8009264 <RCCEx_PLL2_Config+0x15c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0f0      	beq.n	800923a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	58024400 	.word	0x58024400
 8009268:	ffff0007 	.word	0xffff0007

0800926c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800927a:	4b53      	ldr	r3, [pc, #332]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	2b03      	cmp	r3, #3
 8009284:	d101      	bne.n	800928a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e099      	b.n	80093be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800928a:	4b4f      	ldr	r3, [pc, #316]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a4e      	ldr	r2, [pc, #312]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009296:	f7f9 fe1b 	bl	8002ed0 <HAL_GetTick>
 800929a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800929c:	e008      	b.n	80092b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800929e:	f7f9 fe17 	bl	8002ed0 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d901      	bls.n	80092b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e086      	b.n	80093be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092b0:	4b45      	ldr	r3, [pc, #276]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f0      	bne.n	800929e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80092bc:	4b42      	ldr	r3, [pc, #264]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	051b      	lsls	r3, r3, #20
 80092ca:	493f      	ldr	r1, [pc, #252]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	4313      	orrs	r3, r2
 80092ce:	628b      	str	r3, [r1, #40]	; 0x28
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	3b01      	subs	r3, #1
 80092e0:	025b      	lsls	r3, r3, #9
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	041b      	lsls	r3, r3, #16
 80092ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	061b      	lsls	r3, r3, #24
 80092fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009300:	4931      	ldr	r1, [pc, #196]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009306:	4b30      	ldr	r3, [pc, #192]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	492d      	ldr	r1, [pc, #180]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009314:	4313      	orrs	r3, r2
 8009316:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009318:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	4928      	ldr	r1, [pc, #160]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009326:	4313      	orrs	r3, r2
 8009328:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800932a:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	4a26      	ldr	r2, [pc, #152]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009336:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800933a:	4b24      	ldr	r3, [pc, #144]	; (80093cc <RCCEx_PLL3_Config+0x160>)
 800933c:	4013      	ands	r3, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	69d2      	ldr	r2, [r2, #28]
 8009342:	00d2      	lsls	r2, r2, #3
 8009344:	4920      	ldr	r1, [pc, #128]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800934a:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800935c:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a19      	ldr	r2, [pc, #100]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009368:	e00f      	b.n	800938a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d106      	bne.n	800937e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009370:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009376:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800937a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800937c:	e005      	b.n	800938a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	4a11      	ldr	r2, [pc, #68]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009388:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800938a:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a0e      	ldr	r2, [pc, #56]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 8009390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009396:	f7f9 fd9b 	bl	8002ed0 <HAL_GetTick>
 800939a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800939c:	e008      	b.n	80093b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800939e:	f7f9 fd97 	bl	8002ed0 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d901      	bls.n	80093b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e006      	b.n	80093be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <RCCEx_PLL3_Config+0x15c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0f0      	beq.n	800939e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	58024400 	.word	0x58024400
 80093cc:	ffff0007 	.word	0xffff0007

080093d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d067      	beq.n	80094b2 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7f9 f8ac 	bl	8002554 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	22ca      	movs	r2, #202	; 0xca
 800940a:	625a      	str	r2, [r3, #36]	; 0x24
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2253      	movs	r2, #83	; 0x53
 8009412:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa49 	bl	80098ac <RTC_EnterInitMode>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d13b      	bne.n	800949c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6899      	ldr	r1, [r3, #8]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b23      	ldr	r3, [pc, #140]	; (80094bc <HAL_RTC_Init+0xec>)
 8009430:	400b      	ands	r3, r1
 8009432:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6899      	ldr	r1, [r3, #8]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	0419      	lsls	r1, r3, #16
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa55 	bl	8009914 <RTC_ExitInitMode>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d113      	bne.n	800949c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0203 	bic.w	r2, r2, #3
 8009482:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	69da      	ldr	r2, [r3, #28]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	22ff      	movs	r2, #255	; 0xff
 80094a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	ff8fffbf 	.word	0xff8fffbf

080094c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_RTC_SetTime+0x1a>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e089      	b.n	80095ee <HAL_RTC_SetTime+0x12e>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2202      	movs	r2, #2
 80094e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	22ca      	movs	r2, #202	; 0xca
 80094f0:	625a      	str	r2, [r3, #36]	; 0x24
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2253      	movs	r2, #83	; 0x53
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f9d6 	bl	80098ac <RTC_EnterInitMode>
 8009500:	4603      	mov	r3, r0
 8009502:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009504:	7cfb      	ldrb	r3, [r7, #19]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d161      	bne.n	80095ce <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d126      	bne.n	800955e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2200      	movs	r2, #0
 8009522:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fa31 	bl	8009990 <RTC_ByteToBcd2>
 800952e:	4603      	mov	r3, r0
 8009530:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fa2a 	bl	8009990 <RTC_ByteToBcd2>
 800953c:	4603      	mov	r3, r0
 800953e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009540:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	789b      	ldrb	r3, [r3, #2]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fa22 	bl	8009990 <RTC_ByteToBcd2>
 800954c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800954e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	78db      	ldrb	r3, [r3, #3]
 8009556:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	e018      	b.n	8009590 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2200      	movs	r2, #0
 8009570:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800957e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009584:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	78db      	ldrb	r3, [r3, #3]
 800958a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	6979      	ldr	r1, [r7, #20]
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <HAL_RTC_SetTime+0x138>)
 8009598:	400b      	ands	r3, r1
 800959a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6899      	ldr	r1, [r3, #8]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f9a5 	bl	8009914 <RTC_ExitInitMode>
 80095ca:	4603      	mov	r3, r0
 80095cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	22ff      	movs	r2, #255	; 0xff
 80095d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80095d6:	7cfb      	ldrb	r3, [r7, #19]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80095ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd90      	pop	{r4, r7, pc}
 80095f6:	bf00      	nop
 80095f8:	007f7f7f 	.word	0x007f7f7f

080095fc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <HAL_RTC_GetTime+0xb4>)
 8009628:	4013      	ands	r3, r2
 800962a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009636:	b2da      	uxtb	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009646:	b2da      	uxtb	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009654:	b2da      	uxtb	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	0d9b      	lsrs	r3, r3, #22
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d11a      	bne.n	80096a6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f9ab 	bl	80099d0 <RTC_Bcd2ToByte>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f9a2 	bl	80099d0 <RTC_Bcd2ToByte>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	789b      	ldrb	r3, [r3, #2]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 f999 	bl	80099d0 <RTC_Bcd2ToByte>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	007f7f7f 	.word	0x007f7f7f

080096b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80096b4:	b590      	push	{r4, r7, lr}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <HAL_RTC_SetDate+0x1a>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e073      	b.n	80097b6 <HAL_RTC_SetDate+0x102>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2202      	movs	r2, #2
 80096da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10e      	bne.n	8009702 <HAL_RTC_SetDate+0x4e>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	f003 0310 	and.w	r3, r3, #16
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	f023 0310 	bic.w	r3, r3, #16
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	330a      	adds	r3, #10
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11c      	bne.n	8009742 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	78db      	ldrb	r3, [r3, #3]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 f93f 	bl	8009990 <RTC_ByteToBcd2>
 8009712:	4603      	mov	r3, r0
 8009714:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	4618      	mov	r0, r3
 800971c:	f000 f938 	bl	8009990 <RTC_ByteToBcd2>
 8009720:	4603      	mov	r3, r0
 8009722:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009724:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	789b      	ldrb	r3, [r3, #2]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f930 	bl	8009990 <RTC_ByteToBcd2>
 8009730:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009732:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	e00e      	b.n	8009760 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	78db      	ldrb	r3, [r3, #3]
 8009746:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800974e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009754:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	22ca      	movs	r2, #202	; 0xca
 8009766:	625a      	str	r2, [r3, #36]	; 0x24
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2253      	movs	r2, #83	; 0x53
 800976e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f89b 	bl	80098ac <RTC_EnterInitMode>
 8009776:	4603      	mov	r3, r0
 8009778:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800977a:	7cfb      	ldrb	r3, [r7, #19]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	6979      	ldr	r1, [r7, #20]
 8009786:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <HAL_RTC_SetDate+0x10c>)
 8009788:	400b      	ands	r3, r1
 800978a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f8c1 	bl	8009914 <RTC_ExitInitMode>
 8009792:	4603      	mov	r3, r0
 8009794:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	22ff      	movs	r2, #255	; 0xff
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800979e:	7cfb      	ldrb	r3, [r7, #19]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d103      	bne.n	80097ac <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80097b4:	7cfb      	ldrb	r3, [r7, #19]


}
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd90      	pop	{r4, r7, pc}
 80097be:	bf00      	nop
 80097c0:	00ffff3f 	.word	0x00ffff3f

080097c4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	4b21      	ldr	r3, [pc, #132]	; (800985c <HAL_RTC_GetDate+0x98>)
 80097d8:	4013      	ands	r3, r2
 80097da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	0c1b      	lsrs	r3, r3, #16
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	0b5b      	lsrs	r3, r3, #13
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	b2da      	uxtb	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d11a      	bne.n	8009850 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	78db      	ldrb	r3, [r3, #3]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f8d6 	bl	80099d0 <RTC_Bcd2ToByte>
 8009824:	4603      	mov	r3, r0
 8009826:	461a      	mov	r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	4618      	mov	r0, r3
 8009832:	f000 f8cd 	bl	80099d0 <RTC_Bcd2ToByte>
 8009836:	4603      	mov	r3, r0
 8009838:	461a      	mov	r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	789b      	ldrb	r3, [r3, #2]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f8c4 	bl	80099d0 <RTC_Bcd2ToByte>
 8009848:	4603      	mov	r3, r0
 800984a:	461a      	mov	r2, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	00ffff3f 	.word	0x00ffff3f

08009860 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009876:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009878:	f7f9 fb2a 	bl	8002ed0 <HAL_GetTick>
 800987c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800987e:	e009      	b.n	8009894 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009880:	f7f9 fb26 	bl	8002ed0 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800988e:	d901      	bls.n	8009894 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e007      	b.n	80098a4 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f003 0320 	and.w	r3, r3, #32
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0ee      	beq.n	8009880 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d120      	bne.n	8009908 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f04f 32ff 	mov.w	r2, #4294967295
 80098ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80098d0:	f7f9 fafe 	bl	8002ed0 <HAL_GetTick>
 80098d4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80098d6:	e00d      	b.n	80098f4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80098d8:	f7f9 fafa 	bl	8002ed0 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098e6:	d905      	bls.n	80098f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2203      	movs	r2, #3
 80098f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d102      	bne.n	8009908 <RTC_EnterInitMode+0x5c>
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2b03      	cmp	r3, #3
 8009906:	d1e7      	bne.n	80098d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009920:	4b1a      	ldr	r3, [pc, #104]	; (800998c <RTC_ExitInitMode+0x78>)
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	4a19      	ldr	r2, [pc, #100]	; (800998c <RTC_ExitInitMode+0x78>)
 8009926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800992a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800992c:	4b17      	ldr	r3, [pc, #92]	; (800998c <RTC_ExitInitMode+0x78>)
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f003 0320 	and.w	r3, r3, #32
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10c      	bne.n	8009952 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ff91 	bl	8009860 <HAL_RTC_WaitForSynchro>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01e      	beq.n	8009982 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2203      	movs	r2, #3
 8009948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	73fb      	strb	r3, [r7, #15]
 8009950:	e017      	b.n	8009982 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009952:	4b0e      	ldr	r3, [pc, #56]	; (800998c <RTC_ExitInitMode+0x78>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	4a0d      	ldr	r2, [pc, #52]	; (800998c <RTC_ExitInitMode+0x78>)
 8009958:	f023 0320 	bic.w	r3, r3, #32
 800995c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff ff7e 	bl	8009860 <HAL_RTC_WaitForSynchro>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2203      	movs	r2, #3
 800996e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009976:	4b05      	ldr	r3, [pc, #20]	; (800998c <RTC_ExitInitMode+0x78>)
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	4a04      	ldr	r2, [pc, #16]	; (800998c <RTC_ExitInitMode+0x78>)
 800997c:	f043 0320 	orr.w	r3, r3, #32
 8009980:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009982:	7bfb      	ldrb	r3, [r7, #15]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	58004000 	.word	0x58004000

08009990 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80099a2:	e005      	b.n	80099b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3301      	adds	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	3b0a      	subs	r3, #10
 80099ae:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	2b09      	cmp	r3, #9
 80099b4:	d8f6      	bhi.n	80099a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	b2db      	uxtb	r3, r3
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	091b      	lsrs	r3, r3, #4
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	0092      	lsls	r2, r2, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	4413      	add	r3, r2
 80099f6:	b2db      	uxtb	r3, r3
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e0f1      	b.n	8009bfa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a78      	ldr	r2, [pc, #480]	; (8009c04 <HAL_SPI_Init+0x200>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00f      	beq.n	8009a46 <HAL_SPI_Init+0x42>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a77      	ldr	r2, [pc, #476]	; (8009c08 <HAL_SPI_Init+0x204>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00a      	beq.n	8009a46 <HAL_SPI_Init+0x42>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a75      	ldr	r2, [pc, #468]	; (8009c0c <HAL_SPI_Init+0x208>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d005      	beq.n	8009a46 <HAL_SPI_Init+0x42>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	2b0f      	cmp	r3, #15
 8009a40:	d901      	bls.n	8009a46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e0d9      	b.n	8009bfa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 ff6c 	bl	800a924 <SPI_GetPacketSize>
 8009a4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a6c      	ldr	r2, [pc, #432]	; (8009c04 <HAL_SPI_Init+0x200>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d00c      	beq.n	8009a72 <HAL_SPI_Init+0x6e>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a6a      	ldr	r2, [pc, #424]	; (8009c08 <HAL_SPI_Init+0x204>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d007      	beq.n	8009a72 <HAL_SPI_Init+0x6e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a69      	ldr	r2, [pc, #420]	; (8009c0c <HAL_SPI_Init+0x208>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d002      	beq.n	8009a72 <HAL_SPI_Init+0x6e>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d811      	bhi.n	8009a96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a76:	4a63      	ldr	r2, [pc, #396]	; (8009c04 <HAL_SPI_Init+0x200>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d009      	beq.n	8009a90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a61      	ldr	r2, [pc, #388]	; (8009c08 <HAL_SPI_Init+0x204>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_SPI_Init+0x8c>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a60      	ldr	r2, [pc, #384]	; (8009c0c <HAL_SPI_Init+0x208>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d104      	bne.n	8009a9a <HAL_SPI_Init+0x96>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b10      	cmp	r3, #16
 8009a94:	d901      	bls.n	8009a9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e0af      	b.n	8009bfa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7f8 fd80 	bl	80025b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0201 	bic.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009ad6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ae0:	d119      	bne.n	8009b16 <HAL_SPI_Init+0x112>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aea:	d103      	bne.n	8009af4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10c      	bne.n	8009b16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b04:	d107      	bne.n	8009b16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	69da      	ldr	r2, [r3, #28]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b28:	ea42 0103 	orr.w	r1, r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b76:	ea42 0103 	orr.w	r1, r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d113      	bne.n	8009bb6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ba0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	40013000 	.word	0x40013000
 8009c08:	40003800 	.word	0x40003800
 8009c0c:	40003c00 	.word	0x40003c00

08009c10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	; 0x28
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3320      	adds	r3, #32
 8009c26:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d101      	bne.n	8009c3a <HAL_SPI_Transmit+0x2a>
 8009c36:	2302      	movs	r3, #2
 8009c38:	e1d7      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c42:	f7f9 f945 	bl	8002ed0 <HAL_GetTick>
 8009c46:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d007      	beq.n	8009c64 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009c54:	2302      	movs	r3, #2
 8009c56:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c60:	7efb      	ldrb	r3, [r7, #27]
 8009c62:	e1c2      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <HAL_SPI_Transmit+0x60>
 8009c6a:	88fb      	ldrh	r3, [r7, #6]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d107      	bne.n	8009c80 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009c7c:	7efb      	ldrb	r3, [r7, #27]
 8009c7e:	e1b4      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2203      	movs	r2, #3
 8009c84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	88fa      	ldrh	r2, [r7, #6]
 8009ca2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009cd0:	d107      	bne.n	8009ce2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	4b96      	ldr	r3, [pc, #600]	; (8009f44 <HAL_SPI_Transmit+0x334>)
 8009cea:	4013      	ands	r3, r2
 8009cec:	88f9      	ldrh	r1, [r7, #6]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0201 	orr.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d0e:	d107      	bne.n	8009d20 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2b0f      	cmp	r3, #15
 8009d26:	d947      	bls.n	8009db8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009d28:	e03f      	b.n	8009daa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d114      	bne.n	8009d62 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6812      	ldr	r2, [r2, #0]
 8009d42:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d48:	1d1a      	adds	r2, r3, #4
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d60:	e023      	b.n	8009daa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d62:	f7f9 f8b5 	bl	8002ed0 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d803      	bhi.n	8009d7a <HAL_SPI_Transmit+0x16a>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	d102      	bne.n	8009d80 <HAL_SPI_Transmit+0x170>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d114      	bne.n	8009daa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 fd01 	bl	800a788 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e11f      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1b9      	bne.n	8009d2a <HAL_SPI_Transmit+0x11a>
 8009db6:	e0f2      	b.n	8009f9e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	f240 80e7 	bls.w	8009f90 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009dc2:	e05d      	b.n	8009e80 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d132      	bne.n	8009e38 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d918      	bls.n	8009e10 <HAL_SPI_Transmit+0x200>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d014      	beq.n	8009e10 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df6:	1d1a      	adds	r2, r3, #4
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	3b02      	subs	r3, #2
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e0e:	e037      	b.n	8009e80 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e14:	881a      	ldrh	r2, [r3, #0]
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1e:	1c9a      	adds	r2, r3, #2
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e36:	e023      	b.n	8009e80 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e38:	f7f9 f84a 	bl	8002ed0 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d803      	bhi.n	8009e50 <HAL_SPI_Transmit+0x240>
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4e:	d102      	bne.n	8009e56 <HAL_SPI_Transmit+0x246>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d114      	bne.n	8009e80 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f000 fc96 	bl	800a788 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e0b4      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d19b      	bne.n	8009dc4 <HAL_SPI_Transmit+0x1b4>
 8009e8c:	e087      	b.n	8009f9e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d155      	bne.n	8009f48 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d918      	bls.n	8009eda <HAL_SPI_Transmit+0x2ca>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eac:	2b40      	cmp	r3, #64	; 0x40
 8009eae:	d914      	bls.n	8009eda <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6812      	ldr	r2, [r2, #0]
 8009eba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec0:	1d1a      	adds	r2, r3, #4
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3b04      	subs	r3, #4
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009ed8:	e05a      	b.n	8009f90 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d917      	bls.n	8009f16 <HAL_SPI_Transmit+0x306>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d013      	beq.n	8009f16 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef2:	881a      	ldrh	r2, [r3, #0]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009efc:	1c9a      	adds	r2, r3, #2
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	3b02      	subs	r3, #2
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f14:	e03c      	b.n	8009f90 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3320      	adds	r3, #32
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	3b01      	subs	r3, #1
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f40:	e026      	b.n	8009f90 <HAL_SPI_Transmit+0x380>
 8009f42:	bf00      	nop
 8009f44:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f48:	f7f8 ffc2 	bl	8002ed0 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d803      	bhi.n	8009f60 <HAL_SPI_Transmit+0x350>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5e:	d102      	bne.n	8009f66 <HAL_SPI_Transmit+0x356>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d114      	bne.n	8009f90 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 fc0e 	bl	800a788 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e02c      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f47f af78 	bne.w	8009e8e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2108      	movs	r1, #8
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fc8d 	bl	800a8c8 <SPI_WaitOnFlagUntilTimeout>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fba:	f043 0220 	orr.w	r2, r3, #32
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 fbdf 	bl	800a788 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e000      	b.n	8009fea <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009fe8:	7efb      	ldrb	r3, [r7, #27]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop

08009ff4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	4613      	mov	r3, r2
 800a000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_SPI_Transmit_DMA+0x20>
 800a010:	2302      	movs	r3, #2
 800a012:	e12c      	b.n	800a26e <HAL_SPI_Transmit_DMA+0x27a>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	d007      	beq.n	800a038 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800a028:	2302      	movs	r3, #2
 800a02a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	e11a      	b.n	800a26e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <HAL_SPI_Transmit_DMA+0x50>
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d107      	bne.n	800a054 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	e10c      	b.n	800a26e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2203      	movs	r2, #3
 800a058:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a0a4:	d107      	bne.n	800a0b6 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0b4:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	d905      	bls.n	800a0ca <HAL_SPI_Transmit_DMA+0xd6>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0c8:	d10f      	bne.n	800a0ea <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a0ce:	2b07      	cmp	r3, #7
 800a0d0:	d913      	bls.n	800a0fa <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0dc:	d00d      	beq.n	800a0fa <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0e2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e8:	d007      	beq.n	800a0fa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	e0b9      	b.n	800a26e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	d820      	bhi.n	800a144 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a10c:	d109      	bne.n	800a122 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a114:	b29b      	uxth	r3, r3
 800a116:	3301      	adds	r3, #1
 800a118:	105b      	asrs	r3, r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a12c:	d11e      	bne.n	800a16c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a134:	b29b      	uxth	r3, r3
 800a136:	3303      	adds	r3, #3
 800a138:	109b      	asrs	r3, r3, #2
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a142:	e013      	b.n	800a16c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b0f      	cmp	r3, #15
 800a14a:	d80f      	bhi.n	800a16c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a156:	d109      	bne.n	800a16c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3301      	adds	r3, #1
 800a162:	105b      	asrs	r3, r3, #1
 800a164:	b29a      	uxth	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a170:	4a41      	ldr	r2, [pc, #260]	; (800a278 <HAL_SPI_Transmit_DMA+0x284>)
 800a172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a178:	4a40      	ldr	r2, [pc, #256]	; (800a27c <HAL_SPI_Transmit_DMA+0x288>)
 800a17a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a180:	4a3f      	ldr	r2, [pc, #252]	; (800a280 <HAL_SPI_Transmit_DMA+0x28c>)
 800a182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a188:	2200      	movs	r2, #0
 800a18a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a19a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3320      	adds	r3, #32
 800a1ac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a1b6:	f7f9 fb47 	bl	8003848 <HAL_DMA_Start_IT>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d013      	beq.n	800a1e8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c6:	f043 0210 	orr.w	r2, r3, #16
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	e042      	b.n	800a26e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f2:	d108      	bne.n	800a206 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6859      	ldr	r1, [r3, #4]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b21      	ldr	r3, [pc, #132]	; (800a284 <HAL_SPI_Transmit_DMA+0x290>)
 800a200:	400b      	ands	r3, r1
 800a202:	6053      	str	r3, [r2, #4]
 800a204:	e009      	b.n	800a21a <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4b1d      	ldr	r3, [pc, #116]	; (800a284 <HAL_SPI_Transmit_DMA+0x290>)
 800a20e:	4013      	ands	r3, r2
 800a210:	88f9      	ldrh	r1, [r7, #6]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	430b      	orrs	r3, r1
 800a218:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a228:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800a238:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f042 0201 	orr.w	r2, r2, #1
 800a248:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a252:	d107      	bne.n	800a264 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a262:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	0800a6f3 	.word	0x0800a6f3
 800a27c:	0800a6ad 	.word	0x0800a6ad
 800a280:	0800a70f 	.word	0x0800a70f
 800a284:	ffff0000 	.word	0xffff0000

0800a288 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	; 0x28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a2a0:	6a3a      	ldr	r2, [r7, #32]
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a2ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3330      	adds	r3, #48	; 0x30
 800a2c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d113      	bne.n	800a2f6 <HAL_SPI_IRQHandler+0x6e>
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	f003 0320 	and.w	r3, r3, #32
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10e      	bne.n	800a2f6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
    handled = 1UL;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10f      	bne.n	800a320 <HAL_SPI_IRQHandler+0x98>
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a310:	2b00      	cmp	r3, #0
 800a312:	d105      	bne.n	800a320 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
    handled = 1UL;
 800a31c:	2301      	movs	r3, #1
 800a31e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	f003 0320 	and.w	r3, r3, #32
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10f      	bne.n	800a34a <HAL_SPI_IRQHandler+0xc2>
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d105      	bne.n	800a34a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
    handled = 1UL;
 800a346:	2301      	movs	r3, #1
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f040 816f 	bne.w	800a630 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	f003 0308 	and.w	r3, r3, #8
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 80a0 	beq.w	800a49e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0208 	orr.w	r2, r2, #8
 800a36c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	699a      	ldr	r2, [r3, #24]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f042 0210 	orr.w	r2, r2, #16
 800a37c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	699a      	ldr	r2, [r3, #24]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a38c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0208 	bic.w	r2, r2, #8
 800a39c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00f      	beq.n	800a3c8 <HAL_SPI_IRQHandler+0x140>
 800a3a8:	7cfb      	ldrb	r3, [r7, #19]
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d004      	beq.n	800a3b8 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <HAL_SPI_IRQHandler+0x140>
 800a3b8:	7cfb      	ldrb	r3, [r7, #19]
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d059      	beq.n	800a472 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d154      	bne.n	800a472 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d13d      	bne.n	800a452 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a3d6:	e036      	b.n	800a446 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	2b0f      	cmp	r3, #15
 800a3de:	d90b      	bls.n	800a3f8 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3ea:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3f0:	1d1a      	adds	r2, r3, #4
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	665a      	str	r2, [r3, #100]	; 0x64
 800a3f6:	e01d      	b.n	800a434 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	2b07      	cmp	r3, #7
 800a3fe:	d90b      	bls.n	800a418 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	8812      	ldrh	r2, [r2, #0]
 800a408:	b292      	uxth	r2, r2
 800a40a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a410:	1c9a      	adds	r2, r3, #2
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	665a      	str	r2, [r3, #100]	; 0x64
 800a416:	e00d      	b.n	800a434 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a424:	7812      	ldrb	r2, [r2, #0]
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1c2      	bne.n	800a3d8 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f998 	bl	800a788 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f914 	bl	800a698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a470:	e0e3      	b.n	800a63a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a472:	7cfb      	ldrb	r3, [r7, #19]
 800a474:	2b05      	cmp	r3, #5
 800a476:	d103      	bne.n	800a480 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f8f9 	bl	800a670 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a47e:	e0d9      	b.n	800a634 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a480:	7cfb      	ldrb	r3, [r7, #19]
 800a482:	2b04      	cmp	r3, #4
 800a484:	d103      	bne.n	800a48e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f8e8 	bl	800a65c <HAL_SPI_RxCpltCallback>
    return;
 800a48c:	e0d2      	b.n	800a634 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a48e:	7cfb      	ldrb	r3, [r7, #19]
 800a490:	2b03      	cmp	r3, #3
 800a492:	f040 80cf 	bne.w	800a634 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f8d6 	bl	800a648 <HAL_SPI_TxCpltCallback>
    return;
 800a49c:	e0ca      	b.n	800a634 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00d      	beq.n	800a4c4 <HAL_SPI_IRQHandler+0x23c>
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	f003 0308 	and.w	r3, r3, #8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d008      	beq.n	800a4c4 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	699a      	ldr	r2, [r3, #24]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4c0:	619a      	str	r2, [r3, #24]

    return;
 800a4c2:	e0ba      	b.n	800a63a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80b5 	beq.w	800a63a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00f      	beq.n	800a4fa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e0:	f043 0204 	orr.w	r2, r3, #4
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	699a      	ldr	r2, [r3, #24]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00f      	beq.n	800a524 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50a:	f043 0201 	orr.w	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	699a      	ldr	r2, [r3, #24]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a522:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00f      	beq.n	800a54e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a534:	f043 0208 	orr.w	r2, r3, #8
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699a      	ldr	r2, [r3, #24]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a54c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00f      	beq.n	800a578 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a55e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699a      	ldr	r2, [r3, #24]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0220 	orr.w	r2, r2, #32
 800a576:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d05a      	beq.n	800a638 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0201 	bic.w	r2, r2, #1
 800a590:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6919      	ldr	r1, [r3, #16]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	4b28      	ldr	r3, [pc, #160]	; (800a640 <HAL_SPI_IRQHandler+0x3b8>)
 800a59e:	400b      	ands	r3, r1
 800a5a0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5ac:	d138      	bne.n	800a620 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a5bc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d013      	beq.n	800a5ee <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ca:	4a1e      	ldr	r2, [pc, #120]	; (800a644 <HAL_SPI_IRQHandler+0x3bc>)
 800a5cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7f9 fec0 	bl	8004358 <HAL_DMA_Abort_IT>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d007      	beq.n	800a5ee <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d020      	beq.n	800a638 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5fa:	4a12      	ldr	r2, [pc, #72]	; (800a644 <HAL_SPI_IRQHandler+0x3bc>)
 800a5fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a602:	4618      	mov	r0, r3
 800a604:	f7f9 fea8 	bl	8004358 <HAL_DMA_Abort_IT>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d014      	beq.n	800a638 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a614:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a61e:	e00b      	b.n	800a638 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f835 	bl	800a698 <HAL_SPI_ErrorCallback>
    return;
 800a62e:	e003      	b.n	800a638 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a630:	bf00      	nop
 800a632:	e002      	b.n	800a63a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a638:	bf00      	nop
  }
}
 800a63a:	3728      	adds	r7, #40	; 0x28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	fffffc94 	.word	0xfffffc94
 800a644:	0800a755 	.word	0x0800a755

0800a648 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b07      	cmp	r3, #7
 800a6c4:	d011      	beq.n	800a6ea <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6ca:	69db      	ldr	r3, [r3, #28]
 800a6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6d0:	d103      	bne.n	800a6da <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff ffb8 	bl	800a648 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a6d8:	e007      	b.n	800a6ea <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	691a      	ldr	r2, [r3, #16]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0208 	orr.w	r2, r2, #8
 800a6e8:	611a      	str	r2, [r3, #16]
}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7ff ffbf 	bl	800a684 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7fa ff89 	bl	8005634 <HAL_DMA_GetError>
 800a722:	4603      	mov	r3, r0
 800a724:	2b02      	cmp	r3, #2
 800a726:	d011      	beq.n	800a74c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 f82d 	bl	800a788 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a734:	f043 0210 	orr.w	r2, r3, #16
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2201      	movs	r2, #1
 800a742:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff ffa6 	bl	800a698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a74c:	bf00      	nop
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a760:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7ff ff8c 	bl	800a698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0208 	orr.w	r2, r2, #8
 800a7a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0210 	orr.w	r2, r2, #16
 800a7b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 0201 	bic.w	r2, r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6919      	ldr	r1, [r3, #16]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b3c      	ldr	r3, [pc, #240]	; (800a8c4 <SPI_CloseTransfer+0x13c>)
 800a7d4:	400b      	ands	r3, r1
 800a7d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a7e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d014      	beq.n	800a81e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00f      	beq.n	800a81e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a804:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f042 0220 	orr.w	r2, r2, #32
 800a81c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b03      	cmp	r3, #3
 800a828:	d014      	beq.n	800a854 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00f      	beq.n	800a854 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a83a:	f043 0204 	orr.w	r2, r3, #4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a852:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a864:	f043 0201 	orr.w	r2, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	699a      	ldr	r2, [r3, #24]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a87c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00f      	beq.n	800a8a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a88e:	f043 0208 	orr.w	r2, r3, #8
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699a      	ldr	r2, [r3, #24]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	fffffc90 	.word	0xfffffc90

0800a8c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	603b      	str	r3, [r7, #0]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a8d8:	e010      	b.n	800a8fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8da:	f7f8 faf9 	bl	8002ed0 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d803      	bhi.n	800a8f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d102      	bne.n	800a8f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e00f      	b.n	800a91c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695a      	ldr	r2, [r3, #20]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	4013      	ands	r3, r2
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	429a      	cmp	r2, r3
 800a90a:	bf0c      	ite	eq
 800a90c:	2301      	moveq	r3, #1
 800a90e:	2300      	movne	r3, #0
 800a910:	b2db      	uxtb	r3, r3
 800a912:	461a      	mov	r2, r3
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	429a      	cmp	r2, r3
 800a918:	d0df      	beq.n	800a8da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a930:	095b      	lsrs	r3, r3, #5
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	3301      	adds	r3, #1
 800a93c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	3307      	adds	r3, #7
 800a942:	08db      	lsrs	r3, r3, #3
 800a944:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e049      	b.n	800aa00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7f7 fedd 	bl	8002740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2202      	movs	r2, #2
 800a98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3304      	adds	r3, #4
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f000 fdaf 	bl	800b4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e049      	b.n	800aaae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f841 	bl	800aab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3304      	adds	r3, #4
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f000 fd58 	bl	800b4fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
	...

0800aacc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d109      	bne.n	800aaf8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	bf0c      	ite	eq
 800aaf0:	2301      	moveq	r3, #1
 800aaf2:	2300      	movne	r3, #0
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	e03c      	b.n	800ab72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d109      	bne.n	800ab12 <HAL_TIM_PWM_Start_DMA+0x46>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	bf0c      	ite	eq
 800ab0a:	2301      	moveq	r3, #1
 800ab0c:	2300      	movne	r3, #0
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	e02f      	b.n	800ab72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d109      	bne.n	800ab2c <HAL_TIM_PWM_Start_DMA+0x60>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	bf0c      	ite	eq
 800ab24:	2301      	moveq	r3, #1
 800ab26:	2300      	movne	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	e022      	b.n	800ab72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b0c      	cmp	r3, #12
 800ab30:	d109      	bne.n	800ab46 <HAL_TIM_PWM_Start_DMA+0x7a>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	bf0c      	ite	eq
 800ab3e:	2301      	moveq	r3, #1
 800ab40:	2300      	movne	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	e015      	b.n	800ab72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d109      	bne.n	800ab60 <HAL_TIM_PWM_Start_DMA+0x94>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	bf0c      	ite	eq
 800ab58:	2301      	moveq	r3, #1
 800ab5a:	2300      	movne	r3, #0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	e008      	b.n	800ab72 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	bf0c      	ite	eq
 800ab6c:	2301      	moveq	r3, #1
 800ab6e:	2300      	movne	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800ab76:	2302      	movs	r3, #2
 800ab78:	e1b0      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d109      	bne.n	800ab94 <HAL_TIM_PWM_Start_DMA+0xc8>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	bf0c      	ite	eq
 800ab8c:	2301      	moveq	r3, #1
 800ab8e:	2300      	movne	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	e03c      	b.n	800ac0e <HAL_TIM_PWM_Start_DMA+0x142>
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d109      	bne.n	800abae <HAL_TIM_PWM_Start_DMA+0xe2>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	bf0c      	ite	eq
 800aba6:	2301      	moveq	r3, #1
 800aba8:	2300      	movne	r3, #0
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	e02f      	b.n	800ac0e <HAL_TIM_PWM_Start_DMA+0x142>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d109      	bne.n	800abc8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	e022      	b.n	800ac0e <HAL_TIM_PWM_Start_DMA+0x142>
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2b0c      	cmp	r3, #12
 800abcc:	d109      	bne.n	800abe2 <HAL_TIM_PWM_Start_DMA+0x116>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	bf0c      	ite	eq
 800abda:	2301      	moveq	r3, #1
 800abdc:	2300      	movne	r3, #0
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	e015      	b.n	800ac0e <HAL_TIM_PWM_Start_DMA+0x142>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b10      	cmp	r3, #16
 800abe6:	d109      	bne.n	800abfc <HAL_TIM_PWM_Start_DMA+0x130>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	e008      	b.n	800ac0e <HAL_TIM_PWM_Start_DMA+0x142>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	bf0c      	ite	eq
 800ac08:	2301      	moveq	r3, #1
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d034      	beq.n	800ac7c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <HAL_TIM_PWM_Start_DMA+0x156>
 800ac18:	887b      	ldrh	r3, [r7, #2]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e15c      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d104      	bne.n	800ac32 <HAL_TIM_PWM_Start_DMA+0x166>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac30:	e026      	b.n	800ac80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d104      	bne.n	800ac42 <HAL_TIM_PWM_Start_DMA+0x176>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac40:	e01e      	b.n	800ac80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d104      	bne.n	800ac52 <HAL_TIM_PWM_Start_DMA+0x186>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac50:	e016      	b.n	800ac80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b0c      	cmp	r3, #12
 800ac56:	d104      	bne.n	800ac62 <HAL_TIM_PWM_Start_DMA+0x196>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac60:	e00e      	b.n	800ac80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d104      	bne.n	800ac72 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac70:	e006      	b.n	800ac80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2202      	movs	r2, #2
 800ac76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac7a:	e001      	b.n	800ac80 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e12d      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2b0c      	cmp	r3, #12
 800ac84:	f200 80ae 	bhi.w	800ade4 <HAL_TIM_PWM_Start_DMA+0x318>
 800ac88:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800acc5 	.word	0x0800acc5
 800ac94:	0800ade5 	.word	0x0800ade5
 800ac98:	0800ade5 	.word	0x0800ade5
 800ac9c:	0800ade5 	.word	0x0800ade5
 800aca0:	0800ad0d 	.word	0x0800ad0d
 800aca4:	0800ade5 	.word	0x0800ade5
 800aca8:	0800ade5 	.word	0x0800ade5
 800acac:	0800ade5 	.word	0x0800ade5
 800acb0:	0800ad55 	.word	0x0800ad55
 800acb4:	0800ade5 	.word	0x0800ade5
 800acb8:	0800ade5 	.word	0x0800ade5
 800acbc:	0800ade5 	.word	0x0800ade5
 800acc0:	0800ad9d 	.word	0x0800ad9d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	4a86      	ldr	r2, [pc, #536]	; (800aee4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800acca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	4a85      	ldr	r2, [pc, #532]	; (800aee8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800acd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	4a84      	ldr	r2, [pc, #528]	; (800aeec <HAL_TIM_PWM_Start_DMA+0x420>)
 800acda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3334      	adds	r3, #52	; 0x34
 800ace8:	461a      	mov	r2, r3
 800acea:	887b      	ldrh	r3, [r7, #2]
 800acec:	f7f8 fdac 	bl	8003848 <HAL_DMA_Start_IT>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e0f0      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad08:	60da      	str	r2, [r3, #12]
      break;
 800ad0a:	e06e      	b.n	800adea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	4a74      	ldr	r2, [pc, #464]	; (800aee4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ad12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad18:	4a73      	ldr	r2, [pc, #460]	; (800aee8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ad1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad20:	4a72      	ldr	r2, [pc, #456]	; (800aeec <HAL_TIM_PWM_Start_DMA+0x420>)
 800ad22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ad28:	6879      	ldr	r1, [r7, #4]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3338      	adds	r3, #56	; 0x38
 800ad30:	461a      	mov	r2, r3
 800ad32:	887b      	ldrh	r3, [r7, #2]
 800ad34:	f7f8 fd88 	bl	8003848 <HAL_DMA_Start_IT>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e0cc      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68da      	ldr	r2, [r3, #12]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad50:	60da      	str	r2, [r3, #12]
      break;
 800ad52:	e04a      	b.n	800adea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	4a62      	ldr	r2, [pc, #392]	; (800aee4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ad5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad60:	4a61      	ldr	r2, [pc, #388]	; (800aee8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800ad62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	4a60      	ldr	r2, [pc, #384]	; (800aeec <HAL_TIM_PWM_Start_DMA+0x420>)
 800ad6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	333c      	adds	r3, #60	; 0x3c
 800ad78:	461a      	mov	r2, r3
 800ad7a:	887b      	ldrh	r3, [r7, #2]
 800ad7c:	f7f8 fd64 	bl	8003848 <HAL_DMA_Start_IT>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e0a8      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad98:	60da      	str	r2, [r3, #12]
      break;
 800ad9a:	e026      	b.n	800adea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	4a50      	ldr	r2, [pc, #320]	; (800aee4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800ada2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada8:	4a4f      	ldr	r2, [pc, #316]	; (800aee8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb0:	4a4e      	ldr	r2, [pc, #312]	; (800aeec <HAL_TIM_PWM_Start_DMA+0x420>)
 800adb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3340      	adds	r3, #64	; 0x40
 800adc0:	461a      	mov	r2, r3
 800adc2:	887b      	ldrh	r3, [r7, #2]
 800adc4:	f7f8 fd40 	bl	8003848 <HAL_DMA_Start_IT>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e084      	b.n	800aedc <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ade0:	60da      	str	r2, [r3, #12]
      break;
 800ade2:	e002      	b.n	800adea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	75fb      	strb	r3, [r7, #23]
      break;
 800ade8:	bf00      	nop
  }

  if (status == HAL_OK)
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d174      	bne.n	800aeda <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2201      	movs	r2, #1
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 ff8d 	bl	800bd18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a3b      	ldr	r2, [pc, #236]	; (800aef0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d013      	beq.n	800ae30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a39      	ldr	r2, [pc, #228]	; (800aef4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d00e      	beq.n	800ae30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a38      	ldr	r2, [pc, #224]	; (800aef8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d009      	beq.n	800ae30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a36      	ldr	r2, [pc, #216]	; (800aefc <HAL_TIM_PWM_Start_DMA+0x430>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d004      	beq.n	800ae30 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a35      	ldr	r2, [pc, #212]	; (800af00 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d101      	bne.n	800ae34 <HAL_TIM_PWM_Start_DMA+0x368>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <HAL_TIM_PWM_Start_DMA+0x36a>
 800ae34:	2300      	movs	r3, #0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a28      	ldr	r2, [pc, #160]	; (800aef0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d022      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5c:	d01d      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a28      	ldr	r2, [pc, #160]	; (800af04 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d018      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a26      	ldr	r2, [pc, #152]	; (800af08 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d013      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a25      	ldr	r2, [pc, #148]	; (800af0c <HAL_TIM_PWM_Start_DMA+0x440>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d00e      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a1c      	ldr	r2, [pc, #112]	; (800aef4 <HAL_TIM_PWM_Start_DMA+0x428>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d009      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a21      	ldr	r2, [pc, #132]	; (800af10 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d004      	beq.n	800ae9a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a18      	ldr	r2, [pc, #96]	; (800aef8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d115      	bne.n	800aec6 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <HAL_TIM_PWM_Start_DMA+0x448>)
 800aea2:	4013      	ands	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2b06      	cmp	r3, #6
 800aeaa:	d015      	beq.n	800aed8 <HAL_TIM_PWM_Start_DMA+0x40c>
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeb2:	d011      	beq.n	800aed8 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f042 0201 	orr.w	r2, r2, #1
 800aec2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec4:	e008      	b.n	800aed8 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f042 0201 	orr.w	r2, r2, #1
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	e000      	b.n	800aeda <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	0800b3eb 	.word	0x0800b3eb
 800aee8:	0800b493 	.word	0x0800b493
 800aeec:	0800b359 	.word	0x0800b359
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400
 800aef8:	40014000 	.word	0x40014000
 800aefc:	40014400 	.word	0x40014400
 800af00:	40014800 	.word	0x40014800
 800af04:	40000400 	.word	0x40000400
 800af08:	40000800 	.word	0x40000800
 800af0c:	40000c00 	.word	0x40000c00
 800af10:	40001800 	.word	0x40001800
 800af14:	00010007 	.word	0x00010007

0800af18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af32:	2302      	movs	r3, #2
 800af34:	e0ff      	b.n	800b136 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b14      	cmp	r3, #20
 800af42:	f200 80f0 	bhi.w	800b126 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800afa1 	.word	0x0800afa1
 800af50:	0800b127 	.word	0x0800b127
 800af54:	0800b127 	.word	0x0800b127
 800af58:	0800b127 	.word	0x0800b127
 800af5c:	0800afe1 	.word	0x0800afe1
 800af60:	0800b127 	.word	0x0800b127
 800af64:	0800b127 	.word	0x0800b127
 800af68:	0800b127 	.word	0x0800b127
 800af6c:	0800b023 	.word	0x0800b023
 800af70:	0800b127 	.word	0x0800b127
 800af74:	0800b127 	.word	0x0800b127
 800af78:	0800b127 	.word	0x0800b127
 800af7c:	0800b063 	.word	0x0800b063
 800af80:	0800b127 	.word	0x0800b127
 800af84:	0800b127 	.word	0x0800b127
 800af88:	0800b127 	.word	0x0800b127
 800af8c:	0800b0a5 	.word	0x0800b0a5
 800af90:	0800b127 	.word	0x0800b127
 800af94:	0800b127 	.word	0x0800b127
 800af98:	0800b127 	.word	0x0800b127
 800af9c:	0800b0e5 	.word	0x0800b0e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 fb42 	bl	800b630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	699a      	ldr	r2, [r3, #24]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f042 0208 	orr.w	r2, r2, #8
 800afba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699a      	ldr	r2, [r3, #24]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0204 	bic.w	r2, r2, #4
 800afca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6999      	ldr	r1, [r3, #24]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	691a      	ldr	r2, [r3, #16]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	619a      	str	r2, [r3, #24]
      break;
 800afde:	e0a5      	b.n	800b12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fbb2 	bl	800b750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	699a      	ldr	r2, [r3, #24]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800affa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699a      	ldr	r2, [r3, #24]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b00a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6999      	ldr	r1, [r3, #24]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	021a      	lsls	r2, r3, #8
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	430a      	orrs	r2, r1
 800b01e:	619a      	str	r2, [r3, #24]
      break;
 800b020:	e084      	b.n	800b12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fc1b 	bl	800b864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69da      	ldr	r2, [r3, #28]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f042 0208 	orr.w	r2, r2, #8
 800b03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f022 0204 	bic.w	r2, r2, #4
 800b04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69d9      	ldr	r1, [r3, #28]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	61da      	str	r2, [r3, #28]
      break;
 800b060:	e064      	b.n	800b12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68b9      	ldr	r1, [r7, #8]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fc83 	bl	800b974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69da      	ldr	r2, [r3, #28]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b07c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69da      	ldr	r2, [r3, #28]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b08c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69d9      	ldr	r1, [r3, #28]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	021a      	lsls	r2, r3, #8
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	61da      	str	r2, [r3, #28]
      break;
 800b0a2:	e043      	b.n	800b12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fccc 	bl	800ba48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f042 0208 	orr.w	r2, r2, #8
 800b0be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 0204 	bic.w	r2, r2, #4
 800b0ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	691a      	ldr	r2, [r3, #16]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0e2:	e023      	b.n	800b12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fd10 	bl	800bb10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b10e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	021a      	lsls	r2, r3, #8
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b124:	e002      	b.n	800b12c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	75fb      	strb	r3, [r7, #23]
      break;
 800b12a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b134:	7dfb      	ldrb	r3, [r7, #23]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop

0800b140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b154:	2b01      	cmp	r3, #1
 800b156:	d101      	bne.n	800b15c <HAL_TIM_ConfigClockSource+0x1c>
 800b158:	2302      	movs	r3, #2
 800b15a:	e0dc      	b.n	800b316 <HAL_TIM_ConfigClockSource+0x1d6>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	4b6a      	ldr	r3, [pc, #424]	; (800b320 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b178:	4013      	ands	r3, r2
 800b17a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a64      	ldr	r2, [pc, #400]	; (800b324 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	f000 80a9 	beq.w	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b198:	4a62      	ldr	r2, [pc, #392]	; (800b324 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	f200 80ae 	bhi.w	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1a0:	4a61      	ldr	r2, [pc, #388]	; (800b328 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	f000 80a1 	beq.w	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b1a8:	4a5f      	ldr	r2, [pc, #380]	; (800b328 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	f200 80a6 	bhi.w	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1b0:	4a5e      	ldr	r2, [pc, #376]	; (800b32c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	f000 8099 	beq.w	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b1b8:	4a5c      	ldr	r2, [pc, #368]	; (800b32c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	f200 809e 	bhi.w	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1c4:	f000 8091 	beq.w	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b1c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1cc:	f200 8096 	bhi.w	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1d4:	f000 8089 	beq.w	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b1d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1dc:	f200 808e 	bhi.w	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1e4:	d03e      	beq.n	800b264 <HAL_TIM_ConfigClockSource+0x124>
 800b1e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ea:	f200 8087 	bhi.w	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f2:	f000 8086 	beq.w	800b302 <HAL_TIM_ConfigClockSource+0x1c2>
 800b1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1fa:	d87f      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b1fc:	2b70      	cmp	r3, #112	; 0x70
 800b1fe:	d01a      	beq.n	800b236 <HAL_TIM_ConfigClockSource+0xf6>
 800b200:	2b70      	cmp	r3, #112	; 0x70
 800b202:	d87b      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b204:	2b60      	cmp	r3, #96	; 0x60
 800b206:	d050      	beq.n	800b2aa <HAL_TIM_ConfigClockSource+0x16a>
 800b208:	2b60      	cmp	r3, #96	; 0x60
 800b20a:	d877      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b20c:	2b50      	cmp	r3, #80	; 0x50
 800b20e:	d03c      	beq.n	800b28a <HAL_TIM_ConfigClockSource+0x14a>
 800b210:	2b50      	cmp	r3, #80	; 0x50
 800b212:	d873      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b214:	2b40      	cmp	r3, #64	; 0x40
 800b216:	d058      	beq.n	800b2ca <HAL_TIM_ConfigClockSource+0x18a>
 800b218:	2b40      	cmp	r3, #64	; 0x40
 800b21a:	d86f      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b21c:	2b30      	cmp	r3, #48	; 0x30
 800b21e:	d064      	beq.n	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b220:	2b30      	cmp	r3, #48	; 0x30
 800b222:	d86b      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b224:	2b20      	cmp	r3, #32
 800b226:	d060      	beq.n	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b228:	2b20      	cmp	r3, #32
 800b22a:	d867      	bhi.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d05c      	beq.n	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b230:	2b10      	cmp	r3, #16
 800b232:	d05a      	beq.n	800b2ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b234:	e062      	b.n	800b2fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	6899      	ldr	r1, [r3, #8]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f000 fd47 	bl	800bcd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	609a      	str	r2, [r3, #8]
      break;
 800b262:	e04f      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	6899      	ldr	r1, [r3, #8]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f000 fd30 	bl	800bcd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b286:	609a      	str	r2, [r3, #8]
      break;
 800b288:	e03c      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	6859      	ldr	r1, [r3, #4]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	461a      	mov	r2, r3
 800b298:	f000 fca0 	bl	800bbdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2150      	movs	r1, #80	; 0x50
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 fcfa 	bl	800bc9c <TIM_ITRx_SetConfig>
      break;
 800b2a8:	e02c      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	6859      	ldr	r1, [r3, #4]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	f000 fcbf 	bl	800bc3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2160      	movs	r1, #96	; 0x60
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 fcea 	bl	800bc9c <TIM_ITRx_SetConfig>
      break;
 800b2c8:	e01c      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	6859      	ldr	r1, [r3, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	f000 fc80 	bl	800bbdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2140      	movs	r1, #64	; 0x40
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fcda 	bl	800bc9c <TIM_ITRx_SetConfig>
      break;
 800b2e8:	e00c      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	f000 fcd1 	bl	800bc9c <TIM_ITRx_SetConfig>
      break;
 800b2fa:	e003      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b300:	e000      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	ffceff88 	.word	0xffceff88
 800b324:	00100040 	.word	0x00100040
 800b328:	00100030 	.word	0x00100030
 800b32c:	00100020 	.word	0x00100020

0800b330 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b364:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d107      	bne.n	800b380 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2201      	movs	r2, #1
 800b374:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b37e:	e02a      	b.n	800b3d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d107      	bne.n	800b39a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2202      	movs	r2, #2
 800b38e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b398:	e01d      	b.n	800b3d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d107      	bne.n	800b3b4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3b2:	e010      	b.n	800b3d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d107      	bne.n	800b3ce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3cc:	e003      	b.n	800b3d6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff ffb4 	bl	800b344 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	771a      	strb	r2, [r3, #28]
}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d10b      	bne.n	800b41a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2201      	movs	r2, #1
 800b406:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d136      	bne.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b418:	e031      	b.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	429a      	cmp	r2, r3
 800b422:	d10b      	bne.n	800b43c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2202      	movs	r2, #2
 800b428:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d125      	bne.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b43a:	e020      	b.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	429a      	cmp	r2, r3
 800b444:	d10b      	bne.n	800b45e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2204      	movs	r2, #4
 800b44a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d114      	bne.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b45c:	e00f      	b.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	429a      	cmp	r2, r3
 800b466:	d10a      	bne.n	800b47e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2208      	movs	r2, #8
 800b46c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7f5 fed2 	bl	8001228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	771a      	strb	r2, [r3, #28]
}
 800b48a:	bf00      	nop
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d103      	bne.n	800b4b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	771a      	strb	r2, [r3, #28]
 800b4b0:	e019      	b.n	800b4e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d103      	bne.n	800b4c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	771a      	strb	r2, [r3, #28]
 800b4c2:	e010      	b.n	800b4e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d103      	bne.n	800b4d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2204      	movs	r2, #4
 800b4d2:	771a      	strb	r2, [r3, #28]
 800b4d4:	e007      	b.n	800b4e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d102      	bne.n	800b4e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2208      	movs	r2, #8
 800b4e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff ff22 	bl	800b330 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	771a      	strb	r2, [r3, #28]
}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a40      	ldr	r2, [pc, #256]	; (800b610 <TIM_Base_SetConfig+0x114>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d013      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b51a:	d00f      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a3d      	ldr	r2, [pc, #244]	; (800b614 <TIM_Base_SetConfig+0x118>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d00b      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a3c      	ldr	r2, [pc, #240]	; (800b618 <TIM_Base_SetConfig+0x11c>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d007      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a3b      	ldr	r2, [pc, #236]	; (800b61c <TIM_Base_SetConfig+0x120>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d003      	beq.n	800b53c <TIM_Base_SetConfig+0x40>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a3a      	ldr	r2, [pc, #232]	; (800b620 <TIM_Base_SetConfig+0x124>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d108      	bne.n	800b54e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a2f      	ldr	r2, [pc, #188]	; (800b610 <TIM_Base_SetConfig+0x114>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d01f      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b55c:	d01b      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a2c      	ldr	r2, [pc, #176]	; (800b614 <TIM_Base_SetConfig+0x118>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d017      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a2b      	ldr	r2, [pc, #172]	; (800b618 <TIM_Base_SetConfig+0x11c>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d013      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <TIM_Base_SetConfig+0x120>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d00f      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a29      	ldr	r2, [pc, #164]	; (800b620 <TIM_Base_SetConfig+0x124>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d00b      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a28      	ldr	r2, [pc, #160]	; (800b624 <TIM_Base_SetConfig+0x128>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d007      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a27      	ldr	r2, [pc, #156]	; (800b628 <TIM_Base_SetConfig+0x12c>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d003      	beq.n	800b596 <TIM_Base_SetConfig+0x9a>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a26      	ldr	r2, [pc, #152]	; (800b62c <TIM_Base_SetConfig+0x130>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d108      	bne.n	800b5a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a10      	ldr	r2, [pc, #64]	; (800b610 <TIM_Base_SetConfig+0x114>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00f      	beq.n	800b5f4 <TIM_Base_SetConfig+0xf8>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a12      	ldr	r2, [pc, #72]	; (800b620 <TIM_Base_SetConfig+0x124>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00b      	beq.n	800b5f4 <TIM_Base_SetConfig+0xf8>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a11      	ldr	r2, [pc, #68]	; (800b624 <TIM_Base_SetConfig+0x128>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d007      	beq.n	800b5f4 <TIM_Base_SetConfig+0xf8>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a10      	ldr	r2, [pc, #64]	; (800b628 <TIM_Base_SetConfig+0x12c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d003      	beq.n	800b5f4 <TIM_Base_SetConfig+0xf8>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a0f      	ldr	r2, [pc, #60]	; (800b62c <TIM_Base_SetConfig+0x130>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d103      	bne.n	800b5fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	691a      	ldr	r2, [r3, #16]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	615a      	str	r2, [r3, #20]
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	40010000 	.word	0x40010000
 800b614:	40000400 	.word	0x40000400
 800b618:	40000800 	.word	0x40000800
 800b61c:	40000c00 	.word	0x40000c00
 800b620:	40010400 	.word	0x40010400
 800b624:	40014000 	.word	0x40014000
 800b628:	40014400 	.word	0x40014400
 800b62c:	40014800 	.word	0x40014800

0800b630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	f023 0201 	bic.w	r2, r3, #1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4b37      	ldr	r3, [pc, #220]	; (800b738 <TIM_OC1_SetConfig+0x108>)
 800b65c:	4013      	ands	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 0303 	bic.w	r3, r3, #3
 800b666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f023 0302 	bic.w	r3, r3, #2
 800b678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	4313      	orrs	r3, r2
 800b682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a2d      	ldr	r2, [pc, #180]	; (800b73c <TIM_OC1_SetConfig+0x10c>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d00f      	beq.n	800b6ac <TIM_OC1_SetConfig+0x7c>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a2c      	ldr	r2, [pc, #176]	; (800b740 <TIM_OC1_SetConfig+0x110>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00b      	beq.n	800b6ac <TIM_OC1_SetConfig+0x7c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a2b      	ldr	r2, [pc, #172]	; (800b744 <TIM_OC1_SetConfig+0x114>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d007      	beq.n	800b6ac <TIM_OC1_SetConfig+0x7c>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a2a      	ldr	r2, [pc, #168]	; (800b748 <TIM_OC1_SetConfig+0x118>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d003      	beq.n	800b6ac <TIM_OC1_SetConfig+0x7c>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a29      	ldr	r2, [pc, #164]	; (800b74c <TIM_OC1_SetConfig+0x11c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d10c      	bne.n	800b6c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f023 0308 	bic.w	r3, r3, #8
 800b6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f023 0304 	bic.w	r3, r3, #4
 800b6c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a1c      	ldr	r2, [pc, #112]	; (800b73c <TIM_OC1_SetConfig+0x10c>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d00f      	beq.n	800b6ee <TIM_OC1_SetConfig+0xbe>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a1b      	ldr	r2, [pc, #108]	; (800b740 <TIM_OC1_SetConfig+0x110>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00b      	beq.n	800b6ee <TIM_OC1_SetConfig+0xbe>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a1a      	ldr	r2, [pc, #104]	; (800b744 <TIM_OC1_SetConfig+0x114>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d007      	beq.n	800b6ee <TIM_OC1_SetConfig+0xbe>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a19      	ldr	r2, [pc, #100]	; (800b748 <TIM_OC1_SetConfig+0x118>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_OC1_SetConfig+0xbe>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a18      	ldr	r2, [pc, #96]	; (800b74c <TIM_OC1_SetConfig+0x11c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d111      	bne.n	800b712 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	4313      	orrs	r3, r2
 800b706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	4313      	orrs	r3, r2
 800b710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	621a      	str	r2, [r3, #32]
}
 800b72c:	bf00      	nop
 800b72e:	371c      	adds	r7, #28
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	fffeff8f 	.word	0xfffeff8f
 800b73c:	40010000 	.word	0x40010000
 800b740:	40010400 	.word	0x40010400
 800b744:	40014000 	.word	0x40014000
 800b748:	40014400 	.word	0x40014400
 800b74c:	40014800 	.word	0x40014800

0800b750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	f023 0210 	bic.w	r2, r3, #16
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a1b      	ldr	r3, [r3, #32]
 800b76a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4b34      	ldr	r3, [pc, #208]	; (800b84c <TIM_OC2_SetConfig+0xfc>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4313      	orrs	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f023 0320 	bic.w	r3, r3, #32
 800b79a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	011b      	lsls	r3, r3, #4
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a29      	ldr	r2, [pc, #164]	; (800b850 <TIM_OC2_SetConfig+0x100>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d003      	beq.n	800b7b8 <TIM_OC2_SetConfig+0x68>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a28      	ldr	r2, [pc, #160]	; (800b854 <TIM_OC2_SetConfig+0x104>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d10d      	bne.n	800b7d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a1e      	ldr	r2, [pc, #120]	; (800b850 <TIM_OC2_SetConfig+0x100>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d00f      	beq.n	800b7fc <TIM_OC2_SetConfig+0xac>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a1d      	ldr	r2, [pc, #116]	; (800b854 <TIM_OC2_SetConfig+0x104>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d00b      	beq.n	800b7fc <TIM_OC2_SetConfig+0xac>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a1c      	ldr	r2, [pc, #112]	; (800b858 <TIM_OC2_SetConfig+0x108>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d007      	beq.n	800b7fc <TIM_OC2_SetConfig+0xac>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a1b      	ldr	r2, [pc, #108]	; (800b85c <TIM_OC2_SetConfig+0x10c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d003      	beq.n	800b7fc <TIM_OC2_SetConfig+0xac>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a1a      	ldr	r2, [pc, #104]	; (800b860 <TIM_OC2_SetConfig+0x110>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d113      	bne.n	800b824 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b80a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	4313      	orrs	r3, r2
 800b816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	4313      	orrs	r3, r2
 800b822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	621a      	str	r2, [r3, #32]
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	feff8fff 	.word	0xfeff8fff
 800b850:	40010000 	.word	0x40010000
 800b854:	40010400 	.word	0x40010400
 800b858:	40014000 	.word	0x40014000
 800b85c:	40014400 	.word	0x40014400
 800b860:	40014800 	.word	0x40014800

0800b864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4b33      	ldr	r3, [pc, #204]	; (800b95c <TIM_OC3_SetConfig+0xf8>)
 800b890:	4013      	ands	r3, r2
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	021b      	lsls	r3, r3, #8
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a28      	ldr	r2, [pc, #160]	; (800b960 <TIM_OC3_SetConfig+0xfc>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d003      	beq.n	800b8ca <TIM_OC3_SetConfig+0x66>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a27      	ldr	r2, [pc, #156]	; (800b964 <TIM_OC3_SetConfig+0x100>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d10d      	bne.n	800b8e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	021b      	lsls	r3, r3, #8
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a1d      	ldr	r2, [pc, #116]	; (800b960 <TIM_OC3_SetConfig+0xfc>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d00f      	beq.n	800b90e <TIM_OC3_SetConfig+0xaa>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a1c      	ldr	r2, [pc, #112]	; (800b964 <TIM_OC3_SetConfig+0x100>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d00b      	beq.n	800b90e <TIM_OC3_SetConfig+0xaa>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a1b      	ldr	r2, [pc, #108]	; (800b968 <TIM_OC3_SetConfig+0x104>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d007      	beq.n	800b90e <TIM_OC3_SetConfig+0xaa>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a1a      	ldr	r2, [pc, #104]	; (800b96c <TIM_OC3_SetConfig+0x108>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d003      	beq.n	800b90e <TIM_OC3_SetConfig+0xaa>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a19      	ldr	r2, [pc, #100]	; (800b970 <TIM_OC3_SetConfig+0x10c>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d113      	bne.n	800b936 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	695b      	ldr	r3, [r3, #20]
 800b922:	011b      	lsls	r3, r3, #4
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	4313      	orrs	r3, r2
 800b934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	621a      	str	r2, [r3, #32]
}
 800b950:	bf00      	nop
 800b952:	371c      	adds	r7, #28
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	fffeff8f 	.word	0xfffeff8f
 800b960:	40010000 	.word	0x40010000
 800b964:	40010400 	.word	0x40010400
 800b968:	40014000 	.word	0x40014000
 800b96c:	40014400 	.word	0x40014400
 800b970:	40014800 	.word	0x40014800

0800b974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b974:	b480      	push	{r7}
 800b976:	b087      	sub	sp, #28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4b24      	ldr	r3, [pc, #144]	; (800ba30 <TIM_OC4_SetConfig+0xbc>)
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	021b      	lsls	r3, r3, #8
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	031b      	lsls	r3, r3, #12
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a19      	ldr	r2, [pc, #100]	; (800ba34 <TIM_OC4_SetConfig+0xc0>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d00f      	beq.n	800b9f4 <TIM_OC4_SetConfig+0x80>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4a18      	ldr	r2, [pc, #96]	; (800ba38 <TIM_OC4_SetConfig+0xc4>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00b      	beq.n	800b9f4 <TIM_OC4_SetConfig+0x80>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4a17      	ldr	r2, [pc, #92]	; (800ba3c <TIM_OC4_SetConfig+0xc8>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d007      	beq.n	800b9f4 <TIM_OC4_SetConfig+0x80>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a16      	ldr	r2, [pc, #88]	; (800ba40 <TIM_OC4_SetConfig+0xcc>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d003      	beq.n	800b9f4 <TIM_OC4_SetConfig+0x80>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a15      	ldr	r2, [pc, #84]	; (800ba44 <TIM_OC4_SetConfig+0xd0>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d109      	bne.n	800ba08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	019b      	lsls	r3, r3, #6
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	621a      	str	r2, [r3, #32]
}
 800ba22:	bf00      	nop
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	feff8fff 	.word	0xfeff8fff
 800ba34:	40010000 	.word	0x40010000
 800ba38:	40010400 	.word	0x40010400
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	40014400 	.word	0x40014400
 800ba44:	40014800 	.word	0x40014800

0800ba48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	4b21      	ldr	r3, [pc, #132]	; (800baf8 <TIM_OC5_SetConfig+0xb0>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	041b      	lsls	r3, r3, #16
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a18      	ldr	r2, [pc, #96]	; (800bafc <TIM_OC5_SetConfig+0xb4>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00f      	beq.n	800babe <TIM_OC5_SetConfig+0x76>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a17      	ldr	r2, [pc, #92]	; (800bb00 <TIM_OC5_SetConfig+0xb8>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d00b      	beq.n	800babe <TIM_OC5_SetConfig+0x76>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a16      	ldr	r2, [pc, #88]	; (800bb04 <TIM_OC5_SetConfig+0xbc>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d007      	beq.n	800babe <TIM_OC5_SetConfig+0x76>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a15      	ldr	r2, [pc, #84]	; (800bb08 <TIM_OC5_SetConfig+0xc0>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d003      	beq.n	800babe <TIM_OC5_SetConfig+0x76>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a14      	ldr	r2, [pc, #80]	; (800bb0c <TIM_OC5_SetConfig+0xc4>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d109      	bne.n	800bad2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bac4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	021b      	lsls	r3, r3, #8
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	685a      	ldr	r2, [r3, #4]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	621a      	str	r2, [r3, #32]
}
 800baec:	bf00      	nop
 800baee:	371c      	adds	r7, #28
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	fffeff8f 	.word	0xfffeff8f
 800bafc:	40010000 	.word	0x40010000
 800bb00:	40010400 	.word	0x40010400
 800bb04:	40014000 	.word	0x40014000
 800bb08:	40014400 	.word	0x40014400
 800bb0c:	40014800 	.word	0x40014800

0800bb10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4b22      	ldr	r3, [pc, #136]	; (800bbc4 <TIM_OC6_SetConfig+0xb4>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	021b      	lsls	r3, r3, #8
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	051b      	lsls	r3, r3, #20
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a19      	ldr	r2, [pc, #100]	; (800bbc8 <TIM_OC6_SetConfig+0xb8>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d00f      	beq.n	800bb88 <TIM_OC6_SetConfig+0x78>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a18      	ldr	r2, [pc, #96]	; (800bbcc <TIM_OC6_SetConfig+0xbc>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00b      	beq.n	800bb88 <TIM_OC6_SetConfig+0x78>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a17      	ldr	r2, [pc, #92]	; (800bbd0 <TIM_OC6_SetConfig+0xc0>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d007      	beq.n	800bb88 <TIM_OC6_SetConfig+0x78>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a16      	ldr	r2, [pc, #88]	; (800bbd4 <TIM_OC6_SetConfig+0xc4>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d003      	beq.n	800bb88 <TIM_OC6_SetConfig+0x78>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a15      	ldr	r2, [pc, #84]	; (800bbd8 <TIM_OC6_SetConfig+0xc8>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d109      	bne.n	800bb9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	029b      	lsls	r3, r3, #10
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	621a      	str	r2, [r3, #32]
}
 800bbb6:	bf00      	nop
 800bbb8:	371c      	adds	r7, #28
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	feff8fff 	.word	0xfeff8fff
 800bbc8:	40010000 	.word	0x40010000
 800bbcc:	40010400 	.word	0x40010400
 800bbd0:	40014000 	.word	0x40014000
 800bbd4:	40014400 	.word	0x40014400
 800bbd8:	40014800 	.word	0x40014800

0800bbdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b087      	sub	sp, #28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	f023 0201 	bic.w	r2, r3, #1
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	011b      	lsls	r3, r3, #4
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f023 030a 	bic.w	r3, r3, #10
 800bc18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	621a      	str	r2, [r3, #32]
}
 800bc2e:	bf00      	nop
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b087      	sub	sp, #28
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	60f8      	str	r0, [r7, #12]
 800bc42:	60b9      	str	r1, [r7, #8]
 800bc44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	f023 0210 	bic.w	r2, r3, #16
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	031b      	lsls	r3, r3, #12
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	011b      	lsls	r3, r3, #4
 800bc7c:	693a      	ldr	r2, [r7, #16]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	621a      	str	r2, [r3, #32]
}
 800bc8e:	bf00      	nop
 800bc90:	371c      	adds	r7, #28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
	...

0800bc9c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <TIM_ITRx_SetConfig+0x38>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	f043 0307 	orr.w	r3, r3, #7
 800bcbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	609a      	str	r2, [r3, #8]
}
 800bcc6:	bf00      	nop
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	ffcfff8f 	.word	0xffcfff8f

0800bcd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b087      	sub	sp, #28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
 800bce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	021a      	lsls	r2, r3, #8
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	697a      	ldr	r2, [r7, #20]
 800bd0a:	609a      	str	r2, [r3, #8]
}
 800bd0c:	bf00      	nop
 800bd0e:	371c      	adds	r7, #28
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f003 031f 	and.w	r3, r3, #31
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6a1a      	ldr	r2, [r3, #32]
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	43db      	mvns	r3, r3
 800bd3a:	401a      	ands	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6a1a      	ldr	r2, [r3, #32]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f003 031f 	and.w	r3, r3, #31
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd50:	431a      	orrs	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	621a      	str	r2, [r3, #32]
}
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b08      	cmp	r3, #8
 800bd74:	d025      	beq.n	800bdc2 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b08      	cmp	r3, #8
 800bd7a:	d830      	bhi.n	800bdde <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <HAL_TIMEx_PWMN_Stop_DMA+0x28>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d00e      	beq.n	800bda6 <HAL_TIMEx_PWMN_Stop_DMA+0x44>
 800bd88:	e029      	b.n	800bdde <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bd98:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7f8 fada 	bl	8004358 <HAL_DMA_Abort_IT>
      break;
 800bda4:	e01e      	b.n	800bde4 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdb4:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7f8 facc 	bl	8004358 <HAL_DMA_Abort_IT>
      break;
 800bdc0:	e010      	b.n	800bde4 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdd0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f8 fabe 	bl	8004358 <HAL_DMA_Abort_IT>
      break;
 800bddc:	e002      	b.n	800bde4 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	73fb      	strb	r3, [r7, #15]
      break;
 800bde2:	bf00      	nop
  }

  if (status == HAL_OK)
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d152      	bne.n	800be90 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
  {
    /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 f95e 	bl	800c0b4 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6a1a      	ldr	r2, [r3, #32]
 800bdfe:	f241 1311 	movw	r3, #4369	; 0x1111
 800be02:	4013      	ands	r3, r2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10f      	bne.n	800be28 <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6a1a      	ldr	r2, [r3, #32]
 800be0e:	f240 4344 	movw	r3, #1092	; 0x444
 800be12:	4013      	ands	r3, r2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d107      	bne.n	800be28 <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	6a1a      	ldr	r2, [r3, #32]
 800be2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800be32:	4013      	ands	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10f      	bne.n	800be58 <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6a1a      	ldr	r2, [r3, #32]
 800be3e:	f240 4344 	movw	r3, #1092	; 0x444
 800be42:	4013      	ands	r3, r2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d107      	bne.n	800be58 <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f022 0201 	bic.w	r2, r2, #1
 800be56:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d104      	bne.n	800be68 <HAL_TIMEx_PWMN_Stop_DMA+0x106>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2201      	movs	r2, #1
 800be62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be66:	e013      	b.n	800be90 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	d104      	bne.n	800be78 <HAL_TIMEx_PWMN_Stop_DMA+0x116>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be76:	e00b      	b.n	800be90 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b08      	cmp	r3, #8
 800be7c:	d104      	bne.n	800be88 <HAL_TIMEx_PWMN_Stop_DMA+0x126>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be86:	e003      	b.n	800be90 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beac:	2b01      	cmp	r3, #1
 800beae:	d101      	bne.n	800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800beb0:	2302      	movs	r3, #2
 800beb2:	e06d      	b.n	800bf90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a30      	ldr	r2, [pc, #192]	; (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d004      	beq.n	800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a2f      	ldr	r2, [pc, #188]	; (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d108      	bne.n	800befa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800beee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a20      	ldr	r2, [pc, #128]	; (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d022      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf26:	d01d      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a1d      	ldr	r2, [pc, #116]	; (800bfa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d018      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a1c      	ldr	r2, [pc, #112]	; (800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d013      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a1a      	ldr	r2, [pc, #104]	; (800bfac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d00e      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a15      	ldr	r2, [pc, #84]	; (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d009      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a16      	ldr	r2, [pc, #88]	; (800bfb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d004      	beq.n	800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a15      	ldr	r2, [pc, #84]	; (800bfb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d10c      	bne.n	800bf7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	40010000 	.word	0x40010000
 800bfa0:	40010400 	.word	0x40010400
 800bfa4:	40000400 	.word	0x40000400
 800bfa8:	40000800 	.word	0x40000800
 800bfac:	40000c00 	.word	0x40000c00
 800bfb0:	40001800 	.word	0x40001800
 800bfb4:	40014000 	.word	0x40014000

0800bfb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d101      	bne.n	800bfd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	e065      	b.n	800c0a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4313      	orrs	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	4313      	orrs	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	695b      	ldr	r3, [r3, #20]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c03a:	4313      	orrs	r3, r2
 800c03c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	041b      	lsls	r3, r3, #16
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a16      	ldr	r2, [pc, #88]	; (800c0ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d004      	beq.n	800c062 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a14      	ldr	r2, [pc, #80]	; (800c0b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d115      	bne.n	800c08e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	051b      	lsls	r3, r3, #20
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	40010000 	.word	0x40010000
 800c0b0:	40010400 	.word	0x40010400

0800c0b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f003 031f 	and.w	r3, r3, #31
 800c0c6:	2204      	movs	r2, #4
 800c0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6a1a      	ldr	r2, [r3, #32]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	43db      	mvns	r3, r3
 800c0d6:	401a      	ands	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6a1a      	ldr	r2, [r3, #32]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f003 031f 	and.w	r3, r3, #31
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ec:	431a      	orrs	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	621a      	str	r2, [r3, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	371c      	adds	r7, #28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e042      	b.n	800c196 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7f6 fb9c 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2224      	movs	r2, #36	; 0x24
 800c12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f022 0201 	bic.w	r2, r2, #1
 800c13e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fc81 	bl	800ca48 <UART_SetConfig>
 800c146:	4603      	mov	r3, r0
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d101      	bne.n	800c150 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e022      	b.n	800c196 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 f9d5 	bl	800d508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c16c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c17c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f042 0201 	orr.w	r2, r2, #1
 800c18c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fa5c 	bl	800d64c <UART_CheckIdleState>
 800c194:	4603      	mov	r3, r0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b08a      	sub	sp, #40	; 0x28
 800c1a2:	af02      	add	r7, sp, #8
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	603b      	str	r3, [r7, #0]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	f040 8083 	bne.w	800c2c0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <HAL_UART_Transmit+0x28>
 800c1c0:	88fb      	ldrh	r3, [r7, #6]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e07b      	b.n	800c2c2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d101      	bne.n	800c1d8 <HAL_UART_Transmit+0x3a>
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	e074      	b.n	800c2c2 <HAL_UART_Transmit+0x124>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2221      	movs	r2, #33	; 0x21
 800c1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1f0:	f7f6 fe6e 	bl	8002ed0 <HAL_GetTick>
 800c1f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	88fa      	ldrh	r2, [r7, #6]
 800c1fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	88fa      	ldrh	r2, [r7, #6]
 800c202:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c20e:	d108      	bne.n	800c222 <HAL_UART_Transmit+0x84>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d104      	bne.n	800c222 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	61bb      	str	r3, [r7, #24]
 800c220:	e003      	b.n	800c22a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c232:	e02c      	b.n	800c28e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2200      	movs	r2, #0
 800c23c:	2180      	movs	r1, #128	; 0x80
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f001 fa4f 	bl	800d6e2 <UART_WaitOnFlagUntilTimeout>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e039      	b.n	800c2c2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10b      	bne.n	800c26c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	461a      	mov	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c262:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	3302      	adds	r3, #2
 800c268:	61bb      	str	r3, [r7, #24]
 800c26a:	e007      	b.n	800c27c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	781a      	ldrb	r2, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	3301      	adds	r3, #1
 800c27a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c282:	b29b      	uxth	r3, r3
 800c284:	3b01      	subs	r3, #1
 800c286:	b29a      	uxth	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c294:	b29b      	uxth	r3, r3
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1cc      	bne.n	800c234 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2140      	movs	r1, #64	; 0x40
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f001 fa1c 	bl	800d6e2 <UART_WaitOnFlagUntilTimeout>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e006      	b.n	800c2c2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e000      	b.n	800c2c2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c2c0:	2302      	movs	r3, #2
  }
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b0ba      	sub	sp, #232	; 0xe8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	69db      	ldr	r3, [r3, #28]
 800c2da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c2f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c2f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c304:	2b00      	cmp	r3, #0
 800c306:	d11b      	bne.n	800c340 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30c:	f003 0320 	and.w	r3, r3, #32
 800c310:	2b00      	cmp	r3, #0
 800c312:	d015      	beq.n	800c340 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c318:	f003 0320 	and.w	r3, r3, #32
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d105      	bne.n	800c32c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 835a 	beq.w	800c9ea <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	4798      	blx	r3
      }
      return;
 800c33e:	e354      	b.n	800c9ea <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 811f 	beq.w	800c588 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c34a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c34e:	4b8b      	ldr	r3, [pc, #556]	; (800c57c <HAL_UART_IRQHandler+0x2b0>)
 800c350:	4013      	ands	r3, r2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d106      	bne.n	800c364 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c356:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c35a:	4b89      	ldr	r3, [pc, #548]	; (800c580 <HAL_UART_IRQHandler+0x2b4>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f000 8112 	beq.w	800c588 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d011      	beq.n	800c394 <HAL_UART_IRQHandler+0xc8>
 800c370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2201      	movs	r2, #1
 800c382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38a:	f043 0201 	orr.w	r2, r3, #1
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d011      	beq.n	800c3c4 <HAL_UART_IRQHandler+0xf8>
 800c3a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00b      	beq.n	800c3c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ba:	f043 0204 	orr.w	r2, r3, #4
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d011      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x128>
 800c3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00b      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ea:	f043 0202 	orr.w	r2, r3, #2
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d017      	beq.n	800c430 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c404:	f003 0320 	and.w	r3, r3, #32
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d105      	bne.n	800c418 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c40c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c410:	4b5a      	ldr	r3, [pc, #360]	; (800c57c <HAL_UART_IRQHandler+0x2b0>)
 800c412:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00b      	beq.n	800c430 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2208      	movs	r2, #8
 800c41e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c426:	f043 0208 	orr.w	r2, r3, #8
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d012      	beq.n	800c462 <HAL_UART_IRQHandler+0x196>
 800c43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00c      	beq.n	800c462 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c458:	f043 0220 	orr.w	r2, r3, #32
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 82c0 	beq.w	800c9ee <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c472:	f003 0320 	and.w	r3, r3, #32
 800c476:	2b00      	cmp	r3, #0
 800c478:	d013      	beq.n	800c4a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	2b00      	cmp	r3, #0
 800c484:	d105      	bne.n	800c492 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c48a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d007      	beq.n	800c4a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b6:	2b40      	cmp	r3, #64	; 0x40
 800c4b8:	d005      	beq.n	800c4c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c4ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d04f      	beq.n	800c566 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f001 f9d4 	bl	800d874 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d6:	2b40      	cmp	r3, #64	; 0x40
 800c4d8:	d141      	bne.n	800c55e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c50a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c516:	e841 2300 	strex	r3, r2, [r1]
 800c51a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1d9      	bne.n	800c4da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d013      	beq.n	800c556 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c532:	4a14      	ldr	r2, [pc, #80]	; (800c584 <HAL_UART_IRQHandler+0x2b8>)
 800c534:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f7 ff0c 	bl	8004358 <HAL_DMA_Abort_IT>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d017      	beq.n	800c576 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c550:	4610      	mov	r0, r2
 800c552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c554:	e00f      	b.n	800c576 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fa60 	bl	800ca1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c55c:	e00b      	b.n	800c576 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fa5c 	bl	800ca1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c564:	e007      	b.n	800c576 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa58 	bl	800ca1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c574:	e23b      	b.n	800c9ee <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c576:	bf00      	nop
    return;
 800c578:	e239      	b.n	800c9ee <HAL_UART_IRQHandler+0x722>
 800c57a:	bf00      	nop
 800c57c:	10000001 	.word	0x10000001
 800c580:	04000120 	.word	0x04000120
 800c584:	0800d941 	.word	0x0800d941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	f040 81ce 	bne.w	800c92e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c596:	f003 0310 	and.w	r3, r3, #16
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 81c7 	beq.w	800c92e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 81c0 	beq.w	800c92e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2210      	movs	r2, #16
 800c5b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c0:	2b40      	cmp	r3, #64	; 0x40
 800c5c2:	f040 813b 	bne.w	800c83c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a8b      	ldr	r2, [pc, #556]	; (800c7fc <HAL_UART_IRQHandler+0x530>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d059      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a89      	ldr	r2, [pc, #548]	; (800c800 <HAL_UART_IRQHandler+0x534>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d053      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a87      	ldr	r2, [pc, #540]	; (800c804 <HAL_UART_IRQHandler+0x538>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d04d      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a85      	ldr	r2, [pc, #532]	; (800c808 <HAL_UART_IRQHandler+0x53c>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d047      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a83      	ldr	r2, [pc, #524]	; (800c80c <HAL_UART_IRQHandler+0x540>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d041      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a81      	ldr	r2, [pc, #516]	; (800c810 <HAL_UART_IRQHandler+0x544>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d03b      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a7f      	ldr	r2, [pc, #508]	; (800c814 <HAL_UART_IRQHandler+0x548>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d035      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a7d      	ldr	r2, [pc, #500]	; (800c818 <HAL_UART_IRQHandler+0x54c>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d02f      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a7b      	ldr	r2, [pc, #492]	; (800c81c <HAL_UART_IRQHandler+0x550>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d029      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a79      	ldr	r2, [pc, #484]	; (800c820 <HAL_UART_IRQHandler+0x554>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d023      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a77      	ldr	r2, [pc, #476]	; (800c824 <HAL_UART_IRQHandler+0x558>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d01d      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a75      	ldr	r2, [pc, #468]	; (800c828 <HAL_UART_IRQHandler+0x55c>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d017      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a73      	ldr	r2, [pc, #460]	; (800c82c <HAL_UART_IRQHandler+0x560>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d011      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a71      	ldr	r2, [pc, #452]	; (800c830 <HAL_UART_IRQHandler+0x564>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d00b      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a6f      	ldr	r2, [pc, #444]	; (800c834 <HAL_UART_IRQHandler+0x568>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d005      	beq.n	800c686 <HAL_UART_IRQHandler+0x3ba>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a6d      	ldr	r2, [pc, #436]	; (800c838 <HAL_UART_IRQHandler+0x56c>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d105      	bne.n	800c692 <HAL_UART_IRQHandler+0x3c6>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	e004      	b.n	800c69c <HAL_UART_IRQHandler+0x3d0>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 81a4 	beq.w	800c9f2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	f080 819c 	bcs.w	800c9f2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ce:	f000 8086 	beq.w	800c7de <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6de:	e853 3f00 	ldrex	r3, [r3]
 800c6e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c700:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c708:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c70c:	e841 2300 	strex	r3, r2, [r1]
 800c710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1da      	bne.n	800c6d2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3308      	adds	r3, #8
 800c722:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c726:	e853 3f00 	ldrex	r3, [r3]
 800c72a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c72c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c72e:	f023 0301 	bic.w	r3, r3, #1
 800c732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3308      	adds	r3, #8
 800c73c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c740:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c744:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c746:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c748:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c74c:	e841 2300 	strex	r3, r2, [r1]
 800c750:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1e1      	bne.n	800c71c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3308      	adds	r3, #8
 800c75e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c762:	e853 3f00 	ldrex	r3, [r3]
 800c766:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c76a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c76e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3308      	adds	r3, #8
 800c778:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c77c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c77e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c780:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c782:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c784:	e841 2300 	strex	r3, r2, [r1]
 800c788:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e3      	bne.n	800c758 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2220      	movs	r2, #32
 800c794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ae:	f023 0310 	bic.w	r3, r3, #16
 800c7b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7c8:	e841 2300 	strex	r3, r2, [r1]
 800c7cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e4      	bne.n	800c79e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7f7 fa9f 	bl	8003d1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f91c 	bl	800ca30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7f8:	e0fb      	b.n	800c9f2 <HAL_UART_IRQHandler+0x726>
 800c7fa:	bf00      	nop
 800c7fc:	40020010 	.word	0x40020010
 800c800:	40020028 	.word	0x40020028
 800c804:	40020040 	.word	0x40020040
 800c808:	40020058 	.word	0x40020058
 800c80c:	40020070 	.word	0x40020070
 800c810:	40020088 	.word	0x40020088
 800c814:	400200a0 	.word	0x400200a0
 800c818:	400200b8 	.word	0x400200b8
 800c81c:	40020410 	.word	0x40020410
 800c820:	40020428 	.word	0x40020428
 800c824:	40020440 	.word	0x40020440
 800c828:	40020458 	.word	0x40020458
 800c82c:	40020470 	.word	0x40020470
 800c830:	40020488 	.word	0x40020488
 800c834:	400204a0 	.word	0x400204a0
 800c838:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c848:	b29b      	uxth	r3, r3
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c856:	b29b      	uxth	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 80cc 	beq.w	800c9f6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c85e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80c7 	beq.w	800c9f6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	e853 3f00 	ldrex	r3, [r3]
 800c874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c87c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	461a      	mov	r2, r3
 800c886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c88a:	647b      	str	r3, [r7, #68]	; 0x44
 800c88c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e4      	bne.n	800c868 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	623b      	str	r3, [r7, #32]
   return(result);
 800c8ae:	6a3a      	ldr	r2, [r7, #32]
 800c8b0:	4b54      	ldr	r3, [pc, #336]	; (800ca04 <HAL_UART_IRQHandler+0x738>)
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3308      	adds	r3, #8
 800c8be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c8c2:	633a      	str	r2, [r7, #48]	; 0x30
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ca:	e841 2300 	strex	r3, r2, [r1]
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1e3      	bne.n	800c89e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f023 0310 	bic.w	r3, r3, #16
 800c8fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	461a      	mov	r2, r3
 800c908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c90c:	61fb      	str	r3, [r7, #28]
 800c90e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c910:	69b9      	ldr	r1, [r7, #24]
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	e841 2300 	strex	r3, r2, [r1]
 800c918:	617b      	str	r3, [r7, #20]
   return(result);
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1e4      	bne.n	800c8ea <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f882 	bl	800ca30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c92c:	e063      	b.n	800c9f6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00e      	beq.n	800c958 <HAL_UART_IRQHandler+0x68c>
 800c93a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c93e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c942:	2b00      	cmp	r3, #0
 800c944:	d008      	beq.n	800c958 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c94e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f001 f836 	bl	800d9c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c956:	e051      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c95c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c960:	2b00      	cmp	r3, #0
 800c962:	d014      	beq.n	800c98e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d105      	bne.n	800c97c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d008      	beq.n	800c98e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c980:	2b00      	cmp	r3, #0
 800c982:	d03a      	beq.n	800c9fa <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	4798      	blx	r3
    }
    return;
 800c98c:	e035      	b.n	800c9fa <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c996:	2b00      	cmp	r3, #0
 800c998:	d009      	beq.n	800c9ae <HAL_UART_IRQHandler+0x6e2>
 800c99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 ffe0 	bl	800d96c <UART_EndTransmit_IT>
    return;
 800c9ac:	e026      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d009      	beq.n	800c9ce <HAL_UART_IRQHandler+0x702>
 800c9ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d003      	beq.n	800c9ce <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 f80f 	bl	800d9ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9cc:	e016      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d010      	beq.n	800c9fc <HAL_UART_IRQHandler+0x730>
 800c9da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	da0c      	bge.n	800c9fc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fff7 	bl	800d9d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9e8:	e008      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
      return;
 800c9ea:	bf00      	nop
 800c9ec:	e006      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
    return;
 800c9ee:	bf00      	nop
 800c9f0:	e004      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
      return;
 800c9f2:	bf00      	nop
 800c9f4:	e002      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
      return;
 800c9f6:	bf00      	nop
 800c9f8:	e000      	b.n	800c9fc <HAL_UART_IRQHandler+0x730>
    return;
 800c9fa:	bf00      	nop
  }
}
 800c9fc:	37e8      	adds	r7, #232	; 0xe8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	effffffe 	.word	0xeffffffe

0800ca08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca48:	b5b0      	push	{r4, r5, r7, lr}
 800ca4a:	b08e      	sub	sp, #56	; 0x38
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	689a      	ldr	r2, [r3, #8]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	431a      	orrs	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	695b      	ldr	r3, [r3, #20]
 800ca64:	431a      	orrs	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	4bbf      	ldr	r3, [pc, #764]	; (800cd74 <UART_SetConfig+0x32c>)
 800ca76:	4013      	ands	r3, r2
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	6812      	ldr	r2, [r2, #0]
 800ca7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca7e:	430b      	orrs	r3, r1
 800ca80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68da      	ldr	r2, [r3, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4ab5      	ldr	r2, [pc, #724]	; (800cd78 <UART_SetConfig+0x330>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d004      	beq.n	800cab2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caae:	4313      	orrs	r3, r2
 800cab0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689a      	ldr	r2, [r3, #8]
 800cab8:	4bb0      	ldr	r3, [pc, #704]	; (800cd7c <UART_SetConfig+0x334>)
 800caba:	4013      	ands	r3, r2
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6812      	ldr	r2, [r2, #0]
 800cac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cac2:	430b      	orrs	r3, r1
 800cac4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cacc:	f023 010f 	bic.w	r1, r3, #15
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4aa7      	ldr	r2, [pc, #668]	; (800cd80 <UART_SetConfig+0x338>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d176      	bne.n	800cbd4 <UART_SetConfig+0x18c>
 800cae6:	4ba7      	ldr	r3, [pc, #668]	; (800cd84 <UART_SetConfig+0x33c>)
 800cae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800caee:	2b28      	cmp	r3, #40	; 0x28
 800caf0:	d86c      	bhi.n	800cbcc <UART_SetConfig+0x184>
 800caf2:	a201      	add	r2, pc, #4	; (adr r2, 800caf8 <UART_SetConfig+0xb0>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb9d 	.word	0x0800cb9d
 800cafc:	0800cbcd 	.word	0x0800cbcd
 800cb00:	0800cbcd 	.word	0x0800cbcd
 800cb04:	0800cbcd 	.word	0x0800cbcd
 800cb08:	0800cbcd 	.word	0x0800cbcd
 800cb0c:	0800cbcd 	.word	0x0800cbcd
 800cb10:	0800cbcd 	.word	0x0800cbcd
 800cb14:	0800cbcd 	.word	0x0800cbcd
 800cb18:	0800cba5 	.word	0x0800cba5
 800cb1c:	0800cbcd 	.word	0x0800cbcd
 800cb20:	0800cbcd 	.word	0x0800cbcd
 800cb24:	0800cbcd 	.word	0x0800cbcd
 800cb28:	0800cbcd 	.word	0x0800cbcd
 800cb2c:	0800cbcd 	.word	0x0800cbcd
 800cb30:	0800cbcd 	.word	0x0800cbcd
 800cb34:	0800cbcd 	.word	0x0800cbcd
 800cb38:	0800cbad 	.word	0x0800cbad
 800cb3c:	0800cbcd 	.word	0x0800cbcd
 800cb40:	0800cbcd 	.word	0x0800cbcd
 800cb44:	0800cbcd 	.word	0x0800cbcd
 800cb48:	0800cbcd 	.word	0x0800cbcd
 800cb4c:	0800cbcd 	.word	0x0800cbcd
 800cb50:	0800cbcd 	.word	0x0800cbcd
 800cb54:	0800cbcd 	.word	0x0800cbcd
 800cb58:	0800cbb5 	.word	0x0800cbb5
 800cb5c:	0800cbcd 	.word	0x0800cbcd
 800cb60:	0800cbcd 	.word	0x0800cbcd
 800cb64:	0800cbcd 	.word	0x0800cbcd
 800cb68:	0800cbcd 	.word	0x0800cbcd
 800cb6c:	0800cbcd 	.word	0x0800cbcd
 800cb70:	0800cbcd 	.word	0x0800cbcd
 800cb74:	0800cbcd 	.word	0x0800cbcd
 800cb78:	0800cbbd 	.word	0x0800cbbd
 800cb7c:	0800cbcd 	.word	0x0800cbcd
 800cb80:	0800cbcd 	.word	0x0800cbcd
 800cb84:	0800cbcd 	.word	0x0800cbcd
 800cb88:	0800cbcd 	.word	0x0800cbcd
 800cb8c:	0800cbcd 	.word	0x0800cbcd
 800cb90:	0800cbcd 	.word	0x0800cbcd
 800cb94:	0800cbcd 	.word	0x0800cbcd
 800cb98:	0800cbc5 	.word	0x0800cbc5
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba2:	e222      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cba4:	2304      	movs	r3, #4
 800cba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbaa:	e21e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cbac:	2308      	movs	r3, #8
 800cbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb2:	e21a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cbb4:	2310      	movs	r3, #16
 800cbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbba:	e216      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cbbc:	2320      	movs	r3, #32
 800cbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc2:	e212      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cbc4:	2340      	movs	r3, #64	; 0x40
 800cbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbca:	e20e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cbcc:	2380      	movs	r3, #128	; 0x80
 800cbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd2:	e20a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a6b      	ldr	r2, [pc, #428]	; (800cd88 <UART_SetConfig+0x340>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d130      	bne.n	800cc40 <UART_SetConfig+0x1f8>
 800cbde:	4b69      	ldr	r3, [pc, #420]	; (800cd84 <UART_SetConfig+0x33c>)
 800cbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbe2:	f003 0307 	and.w	r3, r3, #7
 800cbe6:	2b05      	cmp	r3, #5
 800cbe8:	d826      	bhi.n	800cc38 <UART_SetConfig+0x1f0>
 800cbea:	a201      	add	r2, pc, #4	; (adr r2, 800cbf0 <UART_SetConfig+0x1a8>)
 800cbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf0:	0800cc09 	.word	0x0800cc09
 800cbf4:	0800cc11 	.word	0x0800cc11
 800cbf8:	0800cc19 	.word	0x0800cc19
 800cbfc:	0800cc21 	.word	0x0800cc21
 800cc00:	0800cc29 	.word	0x0800cc29
 800cc04:	0800cc31 	.word	0x0800cc31
 800cc08:	2300      	movs	r3, #0
 800cc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0e:	e1ec      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc10:	2304      	movs	r3, #4
 800cc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc16:	e1e8      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc18:	2308      	movs	r3, #8
 800cc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1e:	e1e4      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc20:	2310      	movs	r3, #16
 800cc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc26:	e1e0      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc28:	2320      	movs	r3, #32
 800cc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc2e:	e1dc      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc30:	2340      	movs	r3, #64	; 0x40
 800cc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc36:	e1d8      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc38:	2380      	movs	r3, #128	; 0x80
 800cc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3e:	e1d4      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a51      	ldr	r2, [pc, #324]	; (800cd8c <UART_SetConfig+0x344>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d130      	bne.n	800ccac <UART_SetConfig+0x264>
 800cc4a:	4b4e      	ldr	r3, [pc, #312]	; (800cd84 <UART_SetConfig+0x33c>)
 800cc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4e:	f003 0307 	and.w	r3, r3, #7
 800cc52:	2b05      	cmp	r3, #5
 800cc54:	d826      	bhi.n	800cca4 <UART_SetConfig+0x25c>
 800cc56:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <UART_SetConfig+0x214>)
 800cc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5c:	0800cc75 	.word	0x0800cc75
 800cc60:	0800cc7d 	.word	0x0800cc7d
 800cc64:	0800cc85 	.word	0x0800cc85
 800cc68:	0800cc8d 	.word	0x0800cc8d
 800cc6c:	0800cc95 	.word	0x0800cc95
 800cc70:	0800cc9d 	.word	0x0800cc9d
 800cc74:	2300      	movs	r3, #0
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e1b6      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc7c:	2304      	movs	r3, #4
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e1b2      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc84:	2308      	movs	r3, #8
 800cc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8a:	e1ae      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc8c:	2310      	movs	r3, #16
 800cc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc92:	e1aa      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc94:	2320      	movs	r3, #32
 800cc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc9a:	e1a6      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca2:	e1a2      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cca4:	2380      	movs	r3, #128	; 0x80
 800cca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccaa:	e19e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a37      	ldr	r2, [pc, #220]	; (800cd90 <UART_SetConfig+0x348>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d130      	bne.n	800cd18 <UART_SetConfig+0x2d0>
 800ccb6:	4b33      	ldr	r3, [pc, #204]	; (800cd84 <UART_SetConfig+0x33c>)
 800ccb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccba:	f003 0307 	and.w	r3, r3, #7
 800ccbe:	2b05      	cmp	r3, #5
 800ccc0:	d826      	bhi.n	800cd10 <UART_SetConfig+0x2c8>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <UART_SetConfig+0x280>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800cce1 	.word	0x0800cce1
 800cccc:	0800cce9 	.word	0x0800cce9
 800ccd0:	0800ccf1 	.word	0x0800ccf1
 800ccd4:	0800ccf9 	.word	0x0800ccf9
 800ccd8:	0800cd01 	.word	0x0800cd01
 800ccdc:	0800cd09 	.word	0x0800cd09
 800cce0:	2300      	movs	r3, #0
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e180      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cce8:	2304      	movs	r3, #4
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e17c      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ccf0:	2308      	movs	r3, #8
 800ccf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf6:	e178      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ccf8:	2310      	movs	r3, #16
 800ccfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfe:	e174      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd00:	2320      	movs	r3, #32
 800cd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd06:	e170      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd08:	2340      	movs	r3, #64	; 0x40
 800cd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0e:	e16c      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd10:	2380      	movs	r3, #128	; 0x80
 800cd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd16:	e168      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a1d      	ldr	r2, [pc, #116]	; (800cd94 <UART_SetConfig+0x34c>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d142      	bne.n	800cda8 <UART_SetConfig+0x360>
 800cd22:	4b18      	ldr	r3, [pc, #96]	; (800cd84 <UART_SetConfig+0x33c>)
 800cd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	2b05      	cmp	r3, #5
 800cd2c:	d838      	bhi.n	800cda0 <UART_SetConfig+0x358>
 800cd2e:	a201      	add	r2, pc, #4	; (adr r2, 800cd34 <UART_SetConfig+0x2ec>)
 800cd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd34:	0800cd4d 	.word	0x0800cd4d
 800cd38:	0800cd55 	.word	0x0800cd55
 800cd3c:	0800cd5d 	.word	0x0800cd5d
 800cd40:	0800cd65 	.word	0x0800cd65
 800cd44:	0800cd6d 	.word	0x0800cd6d
 800cd48:	0800cd99 	.word	0x0800cd99
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd52:	e14a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd54:	2304      	movs	r3, #4
 800cd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5a:	e146      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd5c:	2308      	movs	r3, #8
 800cd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd62:	e142      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd64:	2310      	movs	r3, #16
 800cd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6a:	e13e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd6c:	2320      	movs	r3, #32
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e13a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cd74:	cfff69f3 	.word	0xcfff69f3
 800cd78:	58000c00 	.word	0x58000c00
 800cd7c:	11fff4ff 	.word	0x11fff4ff
 800cd80:	40011000 	.word	0x40011000
 800cd84:	58024400 	.word	0x58024400
 800cd88:	40004400 	.word	0x40004400
 800cd8c:	40004800 	.word	0x40004800
 800cd90:	40004c00 	.word	0x40004c00
 800cd94:	40005000 	.word	0x40005000
 800cd98:	2340      	movs	r3, #64	; 0x40
 800cd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9e:	e124      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cda0:	2380      	movs	r3, #128	; 0x80
 800cda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda6:	e120      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4acc      	ldr	r2, [pc, #816]	; (800d0e0 <UART_SetConfig+0x698>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d176      	bne.n	800cea0 <UART_SetConfig+0x458>
 800cdb2:	4bcc      	ldr	r3, [pc, #816]	; (800d0e4 <UART_SetConfig+0x69c>)
 800cdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdba:	2b28      	cmp	r3, #40	; 0x28
 800cdbc:	d86c      	bhi.n	800ce98 <UART_SetConfig+0x450>
 800cdbe:	a201      	add	r2, pc, #4	; (adr r2, 800cdc4 <UART_SetConfig+0x37c>)
 800cdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc4:	0800ce69 	.word	0x0800ce69
 800cdc8:	0800ce99 	.word	0x0800ce99
 800cdcc:	0800ce99 	.word	0x0800ce99
 800cdd0:	0800ce99 	.word	0x0800ce99
 800cdd4:	0800ce99 	.word	0x0800ce99
 800cdd8:	0800ce99 	.word	0x0800ce99
 800cddc:	0800ce99 	.word	0x0800ce99
 800cde0:	0800ce99 	.word	0x0800ce99
 800cde4:	0800ce71 	.word	0x0800ce71
 800cde8:	0800ce99 	.word	0x0800ce99
 800cdec:	0800ce99 	.word	0x0800ce99
 800cdf0:	0800ce99 	.word	0x0800ce99
 800cdf4:	0800ce99 	.word	0x0800ce99
 800cdf8:	0800ce99 	.word	0x0800ce99
 800cdfc:	0800ce99 	.word	0x0800ce99
 800ce00:	0800ce99 	.word	0x0800ce99
 800ce04:	0800ce79 	.word	0x0800ce79
 800ce08:	0800ce99 	.word	0x0800ce99
 800ce0c:	0800ce99 	.word	0x0800ce99
 800ce10:	0800ce99 	.word	0x0800ce99
 800ce14:	0800ce99 	.word	0x0800ce99
 800ce18:	0800ce99 	.word	0x0800ce99
 800ce1c:	0800ce99 	.word	0x0800ce99
 800ce20:	0800ce99 	.word	0x0800ce99
 800ce24:	0800ce81 	.word	0x0800ce81
 800ce28:	0800ce99 	.word	0x0800ce99
 800ce2c:	0800ce99 	.word	0x0800ce99
 800ce30:	0800ce99 	.word	0x0800ce99
 800ce34:	0800ce99 	.word	0x0800ce99
 800ce38:	0800ce99 	.word	0x0800ce99
 800ce3c:	0800ce99 	.word	0x0800ce99
 800ce40:	0800ce99 	.word	0x0800ce99
 800ce44:	0800ce89 	.word	0x0800ce89
 800ce48:	0800ce99 	.word	0x0800ce99
 800ce4c:	0800ce99 	.word	0x0800ce99
 800ce50:	0800ce99 	.word	0x0800ce99
 800ce54:	0800ce99 	.word	0x0800ce99
 800ce58:	0800ce99 	.word	0x0800ce99
 800ce5c:	0800ce99 	.word	0x0800ce99
 800ce60:	0800ce99 	.word	0x0800ce99
 800ce64:	0800ce91 	.word	0x0800ce91
 800ce68:	2301      	movs	r3, #1
 800ce6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6e:	e0bc      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ce70:	2304      	movs	r3, #4
 800ce72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce76:	e0b8      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ce78:	2308      	movs	r3, #8
 800ce7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7e:	e0b4      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ce80:	2310      	movs	r3, #16
 800ce82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce86:	e0b0      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ce88:	2320      	movs	r3, #32
 800ce8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce8e:	e0ac      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce96:	e0a8      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ce98:	2380      	movs	r3, #128	; 0x80
 800ce9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce9e:	e0a4      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a90      	ldr	r2, [pc, #576]	; (800d0e8 <UART_SetConfig+0x6a0>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d130      	bne.n	800cf0c <UART_SetConfig+0x4c4>
 800ceaa:	4b8e      	ldr	r3, [pc, #568]	; (800d0e4 <UART_SetConfig+0x69c>)
 800ceac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceae:	f003 0307 	and.w	r3, r3, #7
 800ceb2:	2b05      	cmp	r3, #5
 800ceb4:	d826      	bhi.n	800cf04 <UART_SetConfig+0x4bc>
 800ceb6:	a201      	add	r2, pc, #4	; (adr r2, 800cebc <UART_SetConfig+0x474>)
 800ceb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cebc:	0800ced5 	.word	0x0800ced5
 800cec0:	0800cedd 	.word	0x0800cedd
 800cec4:	0800cee5 	.word	0x0800cee5
 800cec8:	0800ceed 	.word	0x0800ceed
 800cecc:	0800cef5 	.word	0x0800cef5
 800ced0:	0800cefd 	.word	0x0800cefd
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceda:	e086      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cedc:	2304      	movs	r3, #4
 800cede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cee2:	e082      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cee4:	2308      	movs	r3, #8
 800cee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceea:	e07e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800ceec:	2310      	movs	r3, #16
 800ceee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef2:	e07a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cef4:	2320      	movs	r3, #32
 800cef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cefa:	e076      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf02:	e072      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf04:	2380      	movs	r3, #128	; 0x80
 800cf06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf0a:	e06e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a76      	ldr	r2, [pc, #472]	; (800d0ec <UART_SetConfig+0x6a4>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d130      	bne.n	800cf78 <UART_SetConfig+0x530>
 800cf16:	4b73      	ldr	r3, [pc, #460]	; (800d0e4 <UART_SetConfig+0x69c>)
 800cf18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf1a:	f003 0307 	and.w	r3, r3, #7
 800cf1e:	2b05      	cmp	r3, #5
 800cf20:	d826      	bhi.n	800cf70 <UART_SetConfig+0x528>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <UART_SetConfig+0x4e0>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800cf41 	.word	0x0800cf41
 800cf2c:	0800cf49 	.word	0x0800cf49
 800cf30:	0800cf51 	.word	0x0800cf51
 800cf34:	0800cf59 	.word	0x0800cf59
 800cf38:	0800cf61 	.word	0x0800cf61
 800cf3c:	0800cf69 	.word	0x0800cf69
 800cf40:	2300      	movs	r3, #0
 800cf42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf46:	e050      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf48:	2304      	movs	r3, #4
 800cf4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf4e:	e04c      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf50:	2308      	movs	r3, #8
 800cf52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf56:	e048      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf58:	2310      	movs	r3, #16
 800cf5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf5e:	e044      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf60:	2320      	movs	r3, #32
 800cf62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf66:	e040      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf68:	2340      	movs	r3, #64	; 0x40
 800cf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf6e:	e03c      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf70:	2380      	movs	r3, #128	; 0x80
 800cf72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf76:	e038      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a5c      	ldr	r2, [pc, #368]	; (800d0f0 <UART_SetConfig+0x6a8>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d130      	bne.n	800cfe4 <UART_SetConfig+0x59c>
 800cf82:	4b58      	ldr	r3, [pc, #352]	; (800d0e4 <UART_SetConfig+0x69c>)
 800cf84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf86:	f003 0307 	and.w	r3, r3, #7
 800cf8a:	2b05      	cmp	r3, #5
 800cf8c:	d826      	bhi.n	800cfdc <UART_SetConfig+0x594>
 800cf8e:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <UART_SetConfig+0x54c>)
 800cf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf94:	0800cfad 	.word	0x0800cfad
 800cf98:	0800cfb5 	.word	0x0800cfb5
 800cf9c:	0800cfbd 	.word	0x0800cfbd
 800cfa0:	0800cfc5 	.word	0x0800cfc5
 800cfa4:	0800cfcd 	.word	0x0800cfcd
 800cfa8:	0800cfd5 	.word	0x0800cfd5
 800cfac:	2302      	movs	r3, #2
 800cfae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfb2:	e01a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfb4:	2304      	movs	r3, #4
 800cfb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfba:	e016      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfbc:	2308      	movs	r3, #8
 800cfbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfc2:	e012      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfc4:	2310      	movs	r3, #16
 800cfc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfca:	e00e      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfcc:	2320      	movs	r3, #32
 800cfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfd2:	e00a      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfd4:	2340      	movs	r3, #64	; 0x40
 800cfd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfda:	e006      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfdc:	2380      	movs	r3, #128	; 0x80
 800cfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe2:	e002      	b.n	800cfea <UART_SetConfig+0x5a2>
 800cfe4:	2380      	movs	r3, #128	; 0x80
 800cfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a40      	ldr	r2, [pc, #256]	; (800d0f0 <UART_SetConfig+0x6a8>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	f040 80ef 	bne.w	800d1d4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cff6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cffa:	2b20      	cmp	r3, #32
 800cffc:	dc46      	bgt.n	800d08c <UART_SetConfig+0x644>
 800cffe:	2b02      	cmp	r3, #2
 800d000:	f2c0 8081 	blt.w	800d106 <UART_SetConfig+0x6be>
 800d004:	3b02      	subs	r3, #2
 800d006:	2b1e      	cmp	r3, #30
 800d008:	d87d      	bhi.n	800d106 <UART_SetConfig+0x6be>
 800d00a:	a201      	add	r2, pc, #4	; (adr r2, 800d010 <UART_SetConfig+0x5c8>)
 800d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d010:	0800d093 	.word	0x0800d093
 800d014:	0800d107 	.word	0x0800d107
 800d018:	0800d09b 	.word	0x0800d09b
 800d01c:	0800d107 	.word	0x0800d107
 800d020:	0800d107 	.word	0x0800d107
 800d024:	0800d107 	.word	0x0800d107
 800d028:	0800d0ab 	.word	0x0800d0ab
 800d02c:	0800d107 	.word	0x0800d107
 800d030:	0800d107 	.word	0x0800d107
 800d034:	0800d107 	.word	0x0800d107
 800d038:	0800d107 	.word	0x0800d107
 800d03c:	0800d107 	.word	0x0800d107
 800d040:	0800d107 	.word	0x0800d107
 800d044:	0800d107 	.word	0x0800d107
 800d048:	0800d0bb 	.word	0x0800d0bb
 800d04c:	0800d107 	.word	0x0800d107
 800d050:	0800d107 	.word	0x0800d107
 800d054:	0800d107 	.word	0x0800d107
 800d058:	0800d107 	.word	0x0800d107
 800d05c:	0800d107 	.word	0x0800d107
 800d060:	0800d107 	.word	0x0800d107
 800d064:	0800d107 	.word	0x0800d107
 800d068:	0800d107 	.word	0x0800d107
 800d06c:	0800d107 	.word	0x0800d107
 800d070:	0800d107 	.word	0x0800d107
 800d074:	0800d107 	.word	0x0800d107
 800d078:	0800d107 	.word	0x0800d107
 800d07c:	0800d107 	.word	0x0800d107
 800d080:	0800d107 	.word	0x0800d107
 800d084:	0800d107 	.word	0x0800d107
 800d088:	0800d0f9 	.word	0x0800d0f9
 800d08c:	2b40      	cmp	r3, #64	; 0x40
 800d08e:	d036      	beq.n	800d0fe <UART_SetConfig+0x6b6>
 800d090:	e039      	b.n	800d106 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d092:	f7fb fd7b 	bl	8008b8c <HAL_RCCEx_GetD3PCLK1Freq>
 800d096:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d098:	e03b      	b.n	800d112 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d09a:	f107 0314 	add.w	r3, r7, #20
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fb fd8a 	bl	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0a8:	e033      	b.n	800d112 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0aa:	f107 0308 	add.w	r3, r7, #8
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fb fed6 	bl	8008e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0b8:	e02b      	b.n	800d112 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0ba:	4b0a      	ldr	r3, [pc, #40]	; (800d0e4 <UART_SetConfig+0x69c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f003 0320 	and.w	r3, r3, #32
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d009      	beq.n	800d0da <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0c6:	4b07      	ldr	r3, [pc, #28]	; (800d0e4 <UART_SetConfig+0x69c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	08db      	lsrs	r3, r3, #3
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	4a08      	ldr	r2, [pc, #32]	; (800d0f4 <UART_SetConfig+0x6ac>)
 800d0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0d8:	e01b      	b.n	800d112 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d0da:	4b06      	ldr	r3, [pc, #24]	; (800d0f4 <UART_SetConfig+0x6ac>)
 800d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0de:	e018      	b.n	800d112 <UART_SetConfig+0x6ca>
 800d0e0:	40011400 	.word	0x40011400
 800d0e4:	58024400 	.word	0x58024400
 800d0e8:	40007800 	.word	0x40007800
 800d0ec:	40007c00 	.word	0x40007c00
 800d0f0:	58000c00 	.word	0x58000c00
 800d0f4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0f8:	4bc4      	ldr	r3, [pc, #784]	; (800d40c <UART_SetConfig+0x9c4>)
 800d0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0fc:	e009      	b.n	800d112 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d104:	e005      	b.n	800d112 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d106:	2300      	movs	r3, #0
 800d108:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 81da 	beq.w	800d4ce <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11e:	4abc      	ldr	r2, [pc, #752]	; (800d410 <UART_SetConfig+0x9c8>)
 800d120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d124:	461a      	mov	r2, r3
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	fbb3 f3f2 	udiv	r3, r3, r2
 800d12c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	4613      	mov	r3, r2
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	4413      	add	r3, r2
 800d138:	6a3a      	ldr	r2, [r7, #32]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d305      	bcc.n	800d14a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d144:	6a3a      	ldr	r2, [r7, #32]
 800d146:	429a      	cmp	r2, r3
 800d148:	d903      	bls.n	800d152 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d150:	e1bd      	b.n	800d4ce <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	4618      	mov	r0, r3
 800d156:	f04f 0100 	mov.w	r1, #0
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	4aac      	ldr	r2, [pc, #688]	; (800d410 <UART_SetConfig+0x9c8>)
 800d160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d164:	b29a      	uxth	r2, r3
 800d166:	f04f 0300 	mov.w	r3, #0
 800d16a:	f7f3 f911 	bl	8000390 <__aeabi_uldivmod>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	4610      	mov	r0, r2
 800d174:	4619      	mov	r1, r3
 800d176:	f04f 0200 	mov.w	r2, #0
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	020b      	lsls	r3, r1, #8
 800d180:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d184:	0202      	lsls	r2, r0, #8
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	6849      	ldr	r1, [r1, #4]
 800d18a:	0849      	lsrs	r1, r1, #1
 800d18c:	4608      	mov	r0, r1
 800d18e:	f04f 0100 	mov.w	r1, #0
 800d192:	1814      	adds	r4, r2, r0
 800d194:	eb43 0501 	adc.w	r5, r3, r1
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	461a      	mov	r2, r3
 800d19e:	f04f 0300 	mov.w	r3, #0
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	f7f3 f8f3 	bl	8000390 <__aeabi_uldivmod>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1b8:	d308      	bcc.n	800d1cc <UART_SetConfig+0x784>
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1c0:	d204      	bcs.n	800d1cc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1c8:	60da      	str	r2, [r3, #12]
 800d1ca:	e180      	b.n	800d4ce <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d1d2:	e17c      	b.n	800d4ce <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	69db      	ldr	r3, [r3, #28]
 800d1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1dc:	f040 80be 	bne.w	800d35c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800d1e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1e4:	2b20      	cmp	r3, #32
 800d1e6:	dc49      	bgt.n	800d27c <UART_SetConfig+0x834>
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	db7c      	blt.n	800d2e6 <UART_SetConfig+0x89e>
 800d1ec:	2b20      	cmp	r3, #32
 800d1ee:	d87a      	bhi.n	800d2e6 <UART_SetConfig+0x89e>
 800d1f0:	a201      	add	r2, pc, #4	; (adr r2, 800d1f8 <UART_SetConfig+0x7b0>)
 800d1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f6:	bf00      	nop
 800d1f8:	0800d283 	.word	0x0800d283
 800d1fc:	0800d28b 	.word	0x0800d28b
 800d200:	0800d2e7 	.word	0x0800d2e7
 800d204:	0800d2e7 	.word	0x0800d2e7
 800d208:	0800d293 	.word	0x0800d293
 800d20c:	0800d2e7 	.word	0x0800d2e7
 800d210:	0800d2e7 	.word	0x0800d2e7
 800d214:	0800d2e7 	.word	0x0800d2e7
 800d218:	0800d2a3 	.word	0x0800d2a3
 800d21c:	0800d2e7 	.word	0x0800d2e7
 800d220:	0800d2e7 	.word	0x0800d2e7
 800d224:	0800d2e7 	.word	0x0800d2e7
 800d228:	0800d2e7 	.word	0x0800d2e7
 800d22c:	0800d2e7 	.word	0x0800d2e7
 800d230:	0800d2e7 	.word	0x0800d2e7
 800d234:	0800d2e7 	.word	0x0800d2e7
 800d238:	0800d2b3 	.word	0x0800d2b3
 800d23c:	0800d2e7 	.word	0x0800d2e7
 800d240:	0800d2e7 	.word	0x0800d2e7
 800d244:	0800d2e7 	.word	0x0800d2e7
 800d248:	0800d2e7 	.word	0x0800d2e7
 800d24c:	0800d2e7 	.word	0x0800d2e7
 800d250:	0800d2e7 	.word	0x0800d2e7
 800d254:	0800d2e7 	.word	0x0800d2e7
 800d258:	0800d2e7 	.word	0x0800d2e7
 800d25c:	0800d2e7 	.word	0x0800d2e7
 800d260:	0800d2e7 	.word	0x0800d2e7
 800d264:	0800d2e7 	.word	0x0800d2e7
 800d268:	0800d2e7 	.word	0x0800d2e7
 800d26c:	0800d2e7 	.word	0x0800d2e7
 800d270:	0800d2e7 	.word	0x0800d2e7
 800d274:	0800d2e7 	.word	0x0800d2e7
 800d278:	0800d2d9 	.word	0x0800d2d9
 800d27c:	2b40      	cmp	r3, #64	; 0x40
 800d27e:	d02e      	beq.n	800d2de <UART_SetConfig+0x896>
 800d280:	e031      	b.n	800d2e6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d282:	f7fa fd17 	bl	8007cb4 <HAL_RCC_GetPCLK1Freq>
 800d286:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d288:	e033      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d28a:	f7fa fd29 	bl	8007ce0 <HAL_RCC_GetPCLK2Freq>
 800d28e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d290:	e02f      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d292:	f107 0314 	add.w	r3, r7, #20
 800d296:	4618      	mov	r0, r3
 800d298:	f7fb fc8e 	bl	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2a0:	e027      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2a2:	f107 0308 	add.w	r3, r7, #8
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fb fdda 	bl	8008e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2b0:	e01f      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2b2:	4b58      	ldr	r3, [pc, #352]	; (800d414 <UART_SetConfig+0x9cc>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 0320 	and.w	r3, r3, #32
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d009      	beq.n	800d2d2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2be:	4b55      	ldr	r3, [pc, #340]	; (800d414 <UART_SetConfig+0x9cc>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	08db      	lsrs	r3, r3, #3
 800d2c4:	f003 0303 	and.w	r3, r3, #3
 800d2c8:	4a53      	ldr	r2, [pc, #332]	; (800d418 <UART_SetConfig+0x9d0>)
 800d2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2d0:	e00f      	b.n	800d2f2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d2d2:	4b51      	ldr	r3, [pc, #324]	; (800d418 <UART_SetConfig+0x9d0>)
 800d2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2d6:	e00c      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2d8:	4b4c      	ldr	r3, [pc, #304]	; (800d40c <UART_SetConfig+0x9c4>)
 800d2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2dc:	e009      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2e4:	e005      	b.n	800d2f2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d2f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 80ea 	beq.w	800d4ce <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	4a44      	ldr	r2, [pc, #272]	; (800d410 <UART_SetConfig+0x9c8>)
 800d300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d304:	461a      	mov	r2, r3
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	fbb3 f3f2 	udiv	r3, r3, r2
 800d30c:	005a      	lsls	r2, r3, #1
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	085b      	lsrs	r3, r3, #1
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d31e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	2b0f      	cmp	r3, #15
 800d324:	d916      	bls.n	800d354 <UART_SetConfig+0x90c>
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d32c:	d212      	bcs.n	800d354 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d330:	b29b      	uxth	r3, r3
 800d332:	f023 030f 	bic.w	r3, r3, #15
 800d336:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	085b      	lsrs	r3, r3, #1
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	f003 0307 	and.w	r3, r3, #7
 800d342:	b29a      	uxth	r2, r3
 800d344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d346:	4313      	orrs	r3, r2
 800d348:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d350:	60da      	str	r2, [r3, #12]
 800d352:	e0bc      	b.n	800d4ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d35a:	e0b8      	b.n	800d4ce <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d35c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d360:	2b20      	cmp	r3, #32
 800d362:	dc4b      	bgt.n	800d3fc <UART_SetConfig+0x9b4>
 800d364:	2b00      	cmp	r3, #0
 800d366:	f2c0 8087 	blt.w	800d478 <UART_SetConfig+0xa30>
 800d36a:	2b20      	cmp	r3, #32
 800d36c:	f200 8084 	bhi.w	800d478 <UART_SetConfig+0xa30>
 800d370:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <UART_SetConfig+0x930>)
 800d372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d376:	bf00      	nop
 800d378:	0800d403 	.word	0x0800d403
 800d37c:	0800d41d 	.word	0x0800d41d
 800d380:	0800d479 	.word	0x0800d479
 800d384:	0800d479 	.word	0x0800d479
 800d388:	0800d425 	.word	0x0800d425
 800d38c:	0800d479 	.word	0x0800d479
 800d390:	0800d479 	.word	0x0800d479
 800d394:	0800d479 	.word	0x0800d479
 800d398:	0800d435 	.word	0x0800d435
 800d39c:	0800d479 	.word	0x0800d479
 800d3a0:	0800d479 	.word	0x0800d479
 800d3a4:	0800d479 	.word	0x0800d479
 800d3a8:	0800d479 	.word	0x0800d479
 800d3ac:	0800d479 	.word	0x0800d479
 800d3b0:	0800d479 	.word	0x0800d479
 800d3b4:	0800d479 	.word	0x0800d479
 800d3b8:	0800d445 	.word	0x0800d445
 800d3bc:	0800d479 	.word	0x0800d479
 800d3c0:	0800d479 	.word	0x0800d479
 800d3c4:	0800d479 	.word	0x0800d479
 800d3c8:	0800d479 	.word	0x0800d479
 800d3cc:	0800d479 	.word	0x0800d479
 800d3d0:	0800d479 	.word	0x0800d479
 800d3d4:	0800d479 	.word	0x0800d479
 800d3d8:	0800d479 	.word	0x0800d479
 800d3dc:	0800d479 	.word	0x0800d479
 800d3e0:	0800d479 	.word	0x0800d479
 800d3e4:	0800d479 	.word	0x0800d479
 800d3e8:	0800d479 	.word	0x0800d479
 800d3ec:	0800d479 	.word	0x0800d479
 800d3f0:	0800d479 	.word	0x0800d479
 800d3f4:	0800d479 	.word	0x0800d479
 800d3f8:	0800d46b 	.word	0x0800d46b
 800d3fc:	2b40      	cmp	r3, #64	; 0x40
 800d3fe:	d037      	beq.n	800d470 <UART_SetConfig+0xa28>
 800d400:	e03a      	b.n	800d478 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d402:	f7fa fc57 	bl	8007cb4 <HAL_RCC_GetPCLK1Freq>
 800d406:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d408:	e03c      	b.n	800d484 <UART_SetConfig+0xa3c>
 800d40a:	bf00      	nop
 800d40c:	003d0900 	.word	0x003d0900
 800d410:	08012220 	.word	0x08012220
 800d414:	58024400 	.word	0x58024400
 800d418:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d41c:	f7fa fc60 	bl	8007ce0 <HAL_RCC_GetPCLK2Freq>
 800d420:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d422:	e02f      	b.n	800d484 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d424:	f107 0314 	add.w	r3, r7, #20
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fb fbc5 	bl	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d432:	e027      	b.n	800d484 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d434:	f107 0308 	add.w	r3, r7, #8
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fb fd11 	bl	8008e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d442:	e01f      	b.n	800d484 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d444:	4b2c      	ldr	r3, [pc, #176]	; (800d4f8 <UART_SetConfig+0xab0>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0320 	and.w	r3, r3, #32
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d009      	beq.n	800d464 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d450:	4b29      	ldr	r3, [pc, #164]	; (800d4f8 <UART_SetConfig+0xab0>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	08db      	lsrs	r3, r3, #3
 800d456:	f003 0303 	and.w	r3, r3, #3
 800d45a:	4a28      	ldr	r2, [pc, #160]	; (800d4fc <UART_SetConfig+0xab4>)
 800d45c:	fa22 f303 	lsr.w	r3, r2, r3
 800d460:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d462:	e00f      	b.n	800d484 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d464:	4b25      	ldr	r3, [pc, #148]	; (800d4fc <UART_SetConfig+0xab4>)
 800d466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d468:	e00c      	b.n	800d484 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d46a:	4b25      	ldr	r3, [pc, #148]	; (800d500 <UART_SetConfig+0xab8>)
 800d46c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d46e:	e009      	b.n	800d484 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d476:	e005      	b.n	800d484 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d482:	bf00      	nop
    }

    if (pclk != 0U)
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	2b00      	cmp	r3, #0
 800d488:	d021      	beq.n	800d4ce <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48e:	4a1d      	ldr	r2, [pc, #116]	; (800d504 <UART_SetConfig+0xabc>)
 800d490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d494:	461a      	mov	r2, r3
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	fbb3 f2f2 	udiv	r2, r3, r2
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	085b      	lsrs	r3, r3, #1
 800d4a2:	441a      	add	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	2b0f      	cmp	r3, #15
 800d4b2:	d909      	bls.n	800d4c8 <UART_SetConfig+0xa80>
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4ba:	d205      	bcs.n	800d4c8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	60da      	str	r2, [r3, #12]
 800d4c6:	e002      	b.n	800d4ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d4ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3738      	adds	r7, #56	; 0x38
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	58024400 	.word	0x58024400
 800d4fc:	03d09000 	.word	0x03d09000
 800d500:	003d0900 	.word	0x003d0900
 800d504:	08012220 	.word	0x08012220

0800d508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00a      	beq.n	800d532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	430a      	orrs	r2, r1
 800d530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d536:	f003 0302 	and.w	r3, r3, #2
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00a      	beq.n	800d554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	430a      	orrs	r2, r1
 800d552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d558:	f003 0304 	and.w	r3, r3, #4
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00a      	beq.n	800d576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	430a      	orrs	r2, r1
 800d574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00a      	beq.n	800d598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	430a      	orrs	r2, r1
 800d596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59c:	f003 0310 	and.w	r3, r3, #16
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00a      	beq.n	800d5ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5be:	f003 0320 	and.w	r3, r3, #32
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00a      	beq.n	800d5dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01a      	beq.n	800d61e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d606:	d10a      	bne.n	800d61e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	430a      	orrs	r2, r1
 800d61c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	430a      	orrs	r2, r1
 800d63e:	605a      	str	r2, [r3, #4]
  }
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b086      	sub	sp, #24
 800d650:	af02      	add	r7, sp, #8
 800d652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d65c:	f7f5 fc38 	bl	8002ed0 <HAL_GetTick>
 800d660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f003 0308 	and.w	r3, r3, #8
 800d66c:	2b08      	cmp	r3, #8
 800d66e:	d10e      	bne.n	800d68e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f82f 	bl	800d6e2 <UART_WaitOnFlagUntilTimeout>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d68a:	2303      	movs	r3, #3
 800d68c:	e025      	b.n	800d6da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b04      	cmp	r3, #4
 800d69a:	d10e      	bne.n	800d6ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d69c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f819 	bl	800d6e2 <UART_WaitOnFlagUntilTimeout>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	e00f      	b.n	800d6da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2220      	movs	r2, #32
 800d6c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b09c      	sub	sp, #112	; 0x70
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	60f8      	str	r0, [r7, #12]
 800d6ea:	60b9      	str	r1, [r7, #8]
 800d6ec:	603b      	str	r3, [r7, #0]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6f2:	e0a9      	b.n	800d848 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fa:	f000 80a5 	beq.w	800d848 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6fe:	f7f5 fbe7 	bl	8002ed0 <HAL_GetTick>
 800d702:	4602      	mov	r2, r0
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d302      	bcc.n	800d714 <UART_WaitOnFlagUntilTimeout+0x32>
 800d70e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d710:	2b00      	cmp	r3, #0
 800d712:	d140      	bne.n	800d796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d728:	667b      	str	r3, [r7, #100]	; 0x64
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d732:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d734:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e6      	bne.n	800d714 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3308      	adds	r3, #8
 800d74c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d750:	e853 3f00 	ldrex	r3, [r3]
 800d754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	663b      	str	r3, [r7, #96]	; 0x60
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3308      	adds	r3, #8
 800d764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d766:	64ba      	str	r2, [r7, #72]	; 0x48
 800d768:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d76c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e5      	bne.n	800d746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2220      	movs	r2, #32
 800d77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2220      	movs	r2, #32
 800d786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e069      	b.n	800d86a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 0304 	and.w	r3, r3, #4
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d051      	beq.n	800d848 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7b2:	d149      	bne.n	800d848 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	e853 3f00 	ldrex	r3, [r3]
 800d7ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d7d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7dc:	637b      	str	r3, [r7, #52]	; 0x34
 800d7de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7e4:	e841 2300 	strex	r3, r2, [r1]
 800d7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1e6      	bne.n	800d7be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	e853 3f00 	ldrex	r3, [r3]
 800d7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	f023 0301 	bic.w	r3, r3, #1
 800d806:	66bb      	str	r3, [r7, #104]	; 0x68
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d810:	623a      	str	r2, [r7, #32]
 800d812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d814:	69f9      	ldr	r1, [r7, #28]
 800d816:	6a3a      	ldr	r2, [r7, #32]
 800d818:	e841 2300 	strex	r3, r2, [r1]
 800d81c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1e5      	bne.n	800d7f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2220      	movs	r2, #32
 800d828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2220      	movs	r2, #32
 800d830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2220      	movs	r2, #32
 800d838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d844:	2303      	movs	r3, #3
 800d846:	e010      	b.n	800d86a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	69da      	ldr	r2, [r3, #28]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	4013      	ands	r3, r2
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	429a      	cmp	r2, r3
 800d856:	bf0c      	ite	eq
 800d858:	2301      	moveq	r3, #1
 800d85a:	2300      	movne	r3, #0
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	461a      	mov	r2, r3
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	429a      	cmp	r2, r3
 800d864:	f43f af46 	beq.w	800d6f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3770      	adds	r7, #112	; 0x70
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d874:	b480      	push	{r7}
 800d876:	b095      	sub	sp, #84	; 0x54
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d884:	e853 3f00 	ldrex	r3, [r3]
 800d888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d890:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d89a:	643b      	str	r3, [r7, #64]	; 0x40
 800d89c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8a2:	e841 2300 	strex	r3, r2, [r1]
 800d8a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e6      	bne.n	800d87c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b6:	6a3b      	ldr	r3, [r7, #32]
 800d8b8:	e853 3f00 	ldrex	r3, [r3]
 800d8bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8be:	69fa      	ldr	r2, [r7, #28]
 800d8c0:	4b1e      	ldr	r3, [pc, #120]	; (800d93c <UART_EndRxTransfer+0xc8>)
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3308      	adds	r3, #8
 800d8cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8d6:	e841 2300 	strex	r3, r2, [r1]
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1e5      	bne.n	800d8ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d118      	bne.n	800d91c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	e853 3f00 	ldrex	r3, [r3]
 800d8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	f023 0310 	bic.w	r3, r3, #16
 800d8fe:	647b      	str	r3, [r7, #68]	; 0x44
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	461a      	mov	r2, r3
 800d906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d908:	61bb      	str	r3, [r7, #24]
 800d90a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90c:	6979      	ldr	r1, [r7, #20]
 800d90e:	69ba      	ldr	r2, [r7, #24]
 800d910:	e841 2300 	strex	r3, r2, [r1]
 800d914:	613b      	str	r3, [r7, #16]
   return(result);
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1e6      	bne.n	800d8ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2220      	movs	r2, #32
 800d920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d930:	bf00      	nop
 800d932:	3754      	adds	r7, #84	; 0x54
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	effffffe 	.word	0xeffffffe

0800d940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2200      	movs	r2, #0
 800d952:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2200      	movs	r2, #0
 800d95a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7ff f85c 	bl	800ca1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d964:	bf00      	nop
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b088      	sub	sp, #32
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	60bb      	str	r3, [r7, #8]
   return(result);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d988:	61fb      	str	r3, [r7, #28]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	61bb      	str	r3, [r7, #24]
 800d994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d996:	6979      	ldr	r1, [r7, #20]
 800d998:	69ba      	ldr	r2, [r7, #24]
 800d99a:	e841 2300 	strex	r3, r2, [r1]
 800d99e:	613b      	str	r3, [r7, #16]
   return(result);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1e6      	bne.n	800d974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2220      	movs	r2, #32
 800d9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff f827 	bl	800ca08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9ba:	bf00      	nop
 800d9bc:	3720      	adds	r7, #32
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d9ca:	bf00      	nop
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b083      	sub	sp, #12
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d9de:	bf00      	nop
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b083      	sub	sp, #12
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d9f2:	bf00      	nop
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b085      	sub	sp, #20
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d101      	bne.n	800da14 <HAL_UARTEx_DisableFifoMode+0x16>
 800da10:	2302      	movs	r3, #2
 800da12:	e027      	b.n	800da64 <HAL_UARTEx_DisableFifoMode+0x66>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2224      	movs	r2, #36	; 0x24
 800da20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f022 0201 	bic.w	r2, r2, #1
 800da3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800da42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2220      	movs	r2, #32
 800da56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da80:	2b01      	cmp	r3, #1
 800da82:	d101      	bne.n	800da88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da84:	2302      	movs	r3, #2
 800da86:	e02d      	b.n	800dae4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2224      	movs	r2, #36	; 0x24
 800da94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f022 0201 	bic.w	r2, r2, #1
 800daae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	430a      	orrs	r2, r1
 800dac2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f84f 	bl	800db68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d101      	bne.n	800db04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db00:	2302      	movs	r3, #2
 800db02:	e02d      	b.n	800db60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2224      	movs	r2, #36	; 0x24
 800db10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f022 0201 	bic.w	r2, r2, #1
 800db2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	430a      	orrs	r2, r1
 800db3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f811 	bl	800db68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2220      	movs	r2, #32
 800db52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db88:	e031      	b.n	800dbee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db8a:	2310      	movs	r3, #16
 800db8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db8e:	2310      	movs	r3, #16
 800db90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	0e5b      	lsrs	r3, r3, #25
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f003 0307 	and.w	r3, r3, #7
 800dba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	0f5b      	lsrs	r3, r3, #29
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	f003 0307 	and.w	r3, r3, #7
 800dbb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	7b3a      	ldrb	r2, [r7, #12]
 800dbb6:	4911      	ldr	r1, [pc, #68]	; (800dbfc <UARTEx_SetNbDataToProcess+0x94>)
 800dbb8:	5c8a      	ldrb	r2, [r1, r2]
 800dbba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dbbe:	7b3a      	ldrb	r2, [r7, #12]
 800dbc0:	490f      	ldr	r1, [pc, #60]	; (800dc00 <UARTEx_SetNbDataToProcess+0x98>)
 800dbc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	7b7a      	ldrb	r2, [r7, #13]
 800dbd4:	4909      	ldr	r1, [pc, #36]	; (800dbfc <UARTEx_SetNbDataToProcess+0x94>)
 800dbd6:	5c8a      	ldrb	r2, [r1, r2]
 800dbd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dbdc:	7b7a      	ldrb	r2, [r7, #13]
 800dbde:	4908      	ldr	r1, [pc, #32]	; (800dc00 <UARTEx_SetNbDataToProcess+0x98>)
 800dbe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dbee:	bf00      	nop
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	08012238 	.word	0x08012238
 800dc00:	08012240 	.word	0x08012240

0800dc04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc04:	b084      	sub	sp, #16
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	f107 001c 	add.w	r0, r7, #28
 800dc12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d120      	bne.n	800dc5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68da      	ldr	r2, [r3, #12]
 800dc2c:	4b2a      	ldr	r3, [pc, #168]	; (800dcd8 <USB_CoreInit+0xd4>)
 800dc2e:	4013      	ands	r3, r2
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d105      	bne.n	800dc52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 faa8 	bl	800e1a8 <USB_CoreReset>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	73fb      	strb	r3, [r7, #15]
 800dc5c:	e01a      	b.n	800dc94 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fa9c 	bl	800e1a8 <USB_CoreReset>
 800dc70:	4603      	mov	r3, r0
 800dc72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d106      	bne.n	800dc88 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	639a      	str	r2, [r3, #56]	; 0x38
 800dc86:	e005      	b.n	800dc94 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d116      	bne.n	800dcc8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dca8:	4b0c      	ldr	r3, [pc, #48]	; (800dcdc <USB_CoreInit+0xd8>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f043 0206 	orr.w	r2, r3, #6
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	f043 0220 	orr.w	r2, r3, #32
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcd4:	b004      	add	sp, #16
 800dcd6:	4770      	bx	lr
 800dcd8:	ffbdffbf 	.word	0xffbdffbf
 800dcdc:	03ee0000 	.word	0x03ee0000

0800dce0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	f023 0201 	bic.w	r2, r3, #1
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b084      	sub	sp, #16
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dd1e:	78fb      	ldrb	r3, [r7, #3]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d115      	bne.n	800dd50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dd30:	2001      	movs	r0, #1
 800dd32:	f7f5 f8d9 	bl	8002ee8 <HAL_Delay>
      ms++;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fa25 	bl	800e18c <USB_GetMode>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d01e      	beq.n	800dd86 <USB_SetCurrentMode+0x84>
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2b31      	cmp	r3, #49	; 0x31
 800dd4c:	d9f0      	bls.n	800dd30 <USB_SetCurrentMode+0x2e>
 800dd4e:	e01a      	b.n	800dd86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dd50:	78fb      	ldrb	r3, [r7, #3]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d115      	bne.n	800dd82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dd62:	2001      	movs	r0, #1
 800dd64:	f7f5 f8c0 	bl	8002ee8 <HAL_Delay>
      ms++;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fa0c 	bl	800e18c <USB_GetMode>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d005      	beq.n	800dd86 <USB_SetCurrentMode+0x84>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b31      	cmp	r3, #49	; 0x31
 800dd7e:	d9f0      	bls.n	800dd62 <USB_SetCurrentMode+0x60>
 800dd80:	e001      	b.n	800dd86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e005      	b.n	800dd92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b32      	cmp	r3, #50	; 0x32
 800dd8a:	d101      	bne.n	800dd90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e000      	b.n	800dd92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
	...

0800dd9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd9c:	b084      	sub	sp, #16
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b086      	sub	sp, #24
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ddaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]
 800ddba:	e009      	b.n	800ddd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	3340      	adds	r3, #64	; 0x40
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	613b      	str	r3, [r7, #16]
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	2b0e      	cmp	r3, #14
 800ddd4:	d9f2      	bls.n	800ddbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ddd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d11c      	bne.n	800de16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddea:	f043 0302 	orr.w	r3, r3, #2
 800ddee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	e005      	b.n	800de22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de28:	461a      	mov	r2, r3
 800de2a:	2300      	movs	r3, #0
 800de2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de34:	4619      	mov	r1, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de3c:	461a      	mov	r2, r3
 800de3e:	680b      	ldr	r3, [r1, #0]
 800de40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de44:	2b01      	cmp	r3, #1
 800de46:	d10c      	bne.n	800de62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d104      	bne.n	800de58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800de4e:	2100      	movs	r1, #0
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f961 	bl	800e118 <USB_SetDevSpeed>
 800de56:	e008      	b.n	800de6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800de58:	2101      	movs	r1, #1
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f95c 	bl	800e118 <USB_SetDevSpeed>
 800de60:	e003      	b.n	800de6a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800de62:	2103      	movs	r1, #3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f957 	bl	800e118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800de6a:	2110      	movs	r1, #16
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 f8f3 	bl	800e058 <USB_FlushTxFifo>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800de78:	2301      	movs	r3, #1
 800de7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f91d 	bl	800e0bc <USB_FlushRxFifo>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d001      	beq.n	800de8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de92:	461a      	mov	r2, r3
 800de94:	2300      	movs	r3, #0
 800de96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de9e:	461a      	mov	r2, r3
 800dea0:	2300      	movs	r3, #0
 800dea2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deaa:	461a      	mov	r2, r3
 800deac:	2300      	movs	r3, #0
 800deae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800deb0:	2300      	movs	r3, #0
 800deb2:	613b      	str	r3, [r7, #16]
 800deb4:	e043      	b.n	800df3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	015a      	lsls	r2, r3, #5
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	4413      	add	r3, r2
 800debe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800decc:	d118      	bne.n	800df00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10a      	bne.n	800deea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	015a      	lsls	r2, r3, #5
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dee0:	461a      	mov	r2, r3
 800dee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	e013      	b.n	800df12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	015a      	lsls	r2, r3, #5
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4413      	add	r3, r2
 800def2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def6:	461a      	mov	r2, r3
 800def8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	e008      	b.n	800df12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	015a      	lsls	r2, r3, #5
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	4413      	add	r3, r2
 800df08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df0c:	461a      	mov	r2, r3
 800df0e:	2300      	movs	r3, #0
 800df10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	015a      	lsls	r2, r3, #5
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	4413      	add	r3, r2
 800df1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1e:	461a      	mov	r2, r3
 800df20:	2300      	movs	r3, #0
 800df22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	015a      	lsls	r2, r3, #5
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	4413      	add	r3, r2
 800df2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df30:	461a      	mov	r2, r3
 800df32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800df36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	3301      	adds	r3, #1
 800df3c:	613b      	str	r3, [r7, #16]
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	429a      	cmp	r2, r3
 800df44:	d3b7      	bcc.n	800deb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df46:	2300      	movs	r3, #0
 800df48:	613b      	str	r3, [r7, #16]
 800df4a:	e043      	b.n	800dfd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df62:	d118      	bne.n	800df96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10a      	bne.n	800df80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	015a      	lsls	r2, r3, #5
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	4413      	add	r3, r2
 800df72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df76:	461a      	mov	r2, r3
 800df78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	e013      	b.n	800dfa8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df8c:	461a      	mov	r2, r3
 800df8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	e008      	b.n	800dfa8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	015a      	lsls	r2, r3, #5
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	4413      	add	r3, r2
 800dfb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	015a      	lsls	r2, r3, #5
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dfcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	613b      	str	r3, [r7, #16]
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	693a      	ldr	r2, [r7, #16]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d3b7      	bcc.n	800df4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dffc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	2b00      	cmp	r3, #0
 800e002:	d105      	bne.n	800e010 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	699b      	ldr	r3, [r3, #24]
 800e008:	f043 0210 	orr.w	r2, r3, #16
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	699a      	ldr	r2, [r3, #24]
 800e014:	4b0e      	ldr	r3, [pc, #56]	; (800e050 <USB_DevInit+0x2b4>)
 800e016:	4313      	orrs	r3, r2
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	699b      	ldr	r3, [r3, #24]
 800e026:	f043 0208 	orr.w	r2, r3, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e030:	2b01      	cmp	r3, #1
 800e032:	d105      	bne.n	800e040 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	699a      	ldr	r2, [r3, #24]
 800e038:	4b06      	ldr	r3, [pc, #24]	; (800e054 <USB_DevInit+0x2b8>)
 800e03a:	4313      	orrs	r3, r2
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e040:	7dfb      	ldrb	r3, [r7, #23]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3718      	adds	r7, #24
 800e046:	46bd      	mov	sp, r7
 800e048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e04c:	b004      	add	sp, #16
 800e04e:	4770      	bx	lr
 800e050:	803c3800 	.word	0x803c3800
 800e054:	40000004 	.word	0x40000004

0800e058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e062:	2300      	movs	r3, #0
 800e064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3301      	adds	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	4a12      	ldr	r2, [pc, #72]	; (800e0b8 <USB_FlushTxFifo+0x60>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d901      	bls.n	800e076 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e072:	2303      	movs	r3, #3
 800e074:	e01a      	b.n	800e0ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	691b      	ldr	r3, [r3, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	daf3      	bge.n	800e066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e07e:	2300      	movs	r3, #0
 800e080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	019b      	lsls	r3, r3, #6
 800e086:	f043 0220 	orr.w	r2, r3, #32
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3301      	adds	r3, #1
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <USB_FlushTxFifo+0x60>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d901      	bls.n	800e09e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800e09a:	2303      	movs	r3, #3
 800e09c:	e006      	b.n	800e0ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	f003 0320 	and.w	r3, r3, #32
 800e0a6:	2b20      	cmp	r3, #32
 800e0a8:	d0f1      	beq.n	800e08e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	00030d40 	.word	0x00030d40

0800e0bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
 800e0ce:	4a11      	ldr	r2, [pc, #68]	; (800e114 <USB_FlushRxFifo+0x58>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d901      	bls.n	800e0d8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e017      	b.n	800e108 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	691b      	ldr	r3, [r3, #16]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	daf3      	bge.n	800e0c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2210      	movs	r2, #16
 800e0e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	4a08      	ldr	r2, [pc, #32]	; (800e114 <USB_FlushRxFifo+0x58>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d901      	bls.n	800e0fa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	e006      	b.n	800e108 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	f003 0310 	and.w	r3, r3, #16
 800e102:	2b10      	cmp	r3, #16
 800e104:	d0f1      	beq.n	800e0ea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	00030d40 	.word	0x00030d40

0800e118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	68f9      	ldr	r1, [r7, #12]
 800e134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e138:	4313      	orrs	r3, r2
 800e13a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e14a:	b480      	push	{r7}
 800e14c:	b085      	sub	sp, #20
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e164:	f023 0303 	bic.w	r3, r3, #3
 800e168:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e178:	f043 0302 	orr.w	r3, r3, #2
 800e17c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	695b      	ldr	r3, [r3, #20]
 800e198:	f003 0301 	and.w	r3, r3, #1
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	60fb      	str	r3, [r7, #12]
 800e1ba:	4a13      	ldr	r2, [pc, #76]	; (800e208 <USB_CoreReset+0x60>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d901      	bls.n	800e1c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	e01a      	b.n	800e1fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	daf3      	bge.n	800e1b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	f043 0201 	orr.w	r2, r3, #1
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	4a09      	ldr	r2, [pc, #36]	; (800e208 <USB_CoreReset+0x60>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d901      	bls.n	800e1ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	e006      	b.n	800e1fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	f003 0301 	and.w	r3, r3, #1
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d0f1      	beq.n	800e1dc <USB_CoreReset+0x34>

  return HAL_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3714      	adds	r7, #20
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	00030d40 	.word	0x00030d40

0800e20c <round>:
 800e20c:	ee10 1a90 	vmov	r1, s1
 800e210:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800e214:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800e218:	2a13      	cmp	r2, #19
 800e21a:	b510      	push	{r4, lr}
 800e21c:	ee10 3a10 	vmov	r3, s0
 800e220:	dc19      	bgt.n	800e256 <round+0x4a>
 800e222:	2a00      	cmp	r2, #0
 800e224:	da09      	bge.n	800e23a <round+0x2e>
 800e226:	3201      	adds	r2, #1
 800e228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e22c:	d103      	bne.n	800e236 <round+0x2a>
 800e22e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e232:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e236:	2000      	movs	r0, #0
 800e238:	e027      	b.n	800e28a <round+0x7e>
 800e23a:	4816      	ldr	r0, [pc, #88]	; (800e294 <round+0x88>)
 800e23c:	4110      	asrs	r0, r2
 800e23e:	ea01 0400 	and.w	r4, r1, r0
 800e242:	4323      	orrs	r3, r4
 800e244:	d00e      	beq.n	800e264 <round+0x58>
 800e246:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e24a:	fa43 f202 	asr.w	r2, r3, r2
 800e24e:	4411      	add	r1, r2
 800e250:	ea21 0100 	bic.w	r1, r1, r0
 800e254:	e7ef      	b.n	800e236 <round+0x2a>
 800e256:	2a33      	cmp	r2, #51	; 0x33
 800e258:	dd05      	ble.n	800e266 <round+0x5a>
 800e25a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e25e:	d101      	bne.n	800e264 <round+0x58>
 800e260:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e264:	bd10      	pop	{r4, pc}
 800e266:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800e26a:	f04f 30ff 	mov.w	r0, #4294967295
 800e26e:	fa20 f404 	lsr.w	r4, r0, r4
 800e272:	4223      	tst	r3, r4
 800e274:	d0f6      	beq.n	800e264 <round+0x58>
 800e276:	2001      	movs	r0, #1
 800e278:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800e27c:	fa00 f202 	lsl.w	r2, r0, r2
 800e280:	189b      	adds	r3, r3, r2
 800e282:	bf28      	it	cs
 800e284:	1809      	addcs	r1, r1, r0
 800e286:	ea23 0004 	bic.w	r0, r3, r4
 800e28a:	460b      	mov	r3, r1
 800e28c:	4602      	mov	r2, r0
 800e28e:	ec43 2b10 	vmov	d0, r2, r3
 800e292:	e7e7      	b.n	800e264 <round+0x58>
 800e294:	000fffff 	.word	0x000fffff

0800e298 <tan>:
 800e298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e29a:	eeb0 7b40 	vmov.f64	d7, d0
 800e29e:	ee17 3a90 	vmov	r3, s15
 800e2a2:	4a13      	ldr	r2, [pc, #76]	; (800e2f0 <tan+0x58>)
 800e2a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	dc05      	bgt.n	800e2b8 <tan+0x20>
 800e2ac:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 800e2e8 <tan+0x50>
 800e2b0:	2001      	movs	r0, #1
 800e2b2:	f000 fe01 	bl	800eeb8 <__kernel_tan>
 800e2b6:	e004      	b.n	800e2c2 <tan+0x2a>
 800e2b8:	4a0e      	ldr	r2, [pc, #56]	; (800e2f4 <tan+0x5c>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	dd04      	ble.n	800e2c8 <tan+0x30>
 800e2be:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e2c2:	b005      	add	sp, #20
 800e2c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2c8:	4668      	mov	r0, sp
 800e2ca:	f000 fa31 	bl	800e730 <__ieee754_rem_pio2>
 800e2ce:	0040      	lsls	r0, r0, #1
 800e2d0:	f000 0002 	and.w	r0, r0, #2
 800e2d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2d8:	ed9d 0b00 	vldr	d0, [sp]
 800e2dc:	f1c0 0001 	rsb	r0, r0, #1
 800e2e0:	e7e7      	b.n	800e2b2 <tan+0x1a>
 800e2e2:	bf00      	nop
 800e2e4:	f3af 8000 	nop.w
	...
 800e2f0:	3fe921fb 	.word	0x3fe921fb
 800e2f4:	7fefffff 	.word	0x7fefffff

0800e2f8 <asin>:
 800e2f8:	b508      	push	{r3, lr}
 800e2fa:	ed2d 8b04 	vpush	{d8-d9}
 800e2fe:	eeb0 8b40 	vmov.f64	d8, d0
 800e302:	f000 f82d 	bl	800e360 <__ieee754_asin>
 800e306:	4b13      	ldr	r3, [pc, #76]	; (800e354 <asin+0x5c>)
 800e308:	eeb0 9b40 	vmov.f64	d9, d0
 800e30c:	f993 3000 	ldrsb.w	r3, [r3]
 800e310:	3301      	adds	r3, #1
 800e312:	d01a      	beq.n	800e34a <asin+0x52>
 800e314:	eeb4 8b48 	vcmp.f64	d8, d8
 800e318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31c:	d615      	bvs.n	800e34a <asin+0x52>
 800e31e:	eeb0 0b48 	vmov.f64	d0, d8
 800e322:	f000 ffd3 	bl	800f2cc <fabs>
 800e326:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e32a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e332:	dd0a      	ble.n	800e34a <asin+0x52>
 800e334:	f001 f8e2 	bl	800f4fc <__errno>
 800e338:	ecbd 8b04 	vpop	{d8-d9}
 800e33c:	2321      	movs	r3, #33	; 0x21
 800e33e:	6003      	str	r3, [r0, #0]
 800e340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e344:	4804      	ldr	r0, [pc, #16]	; (800e358 <asin+0x60>)
 800e346:	f001 b83f 	b.w	800f3c8 <nan>
 800e34a:	eeb0 0b49 	vmov.f64	d0, d9
 800e34e:	ecbd 8b04 	vpop	{d8-d9}
 800e352:	bd08      	pop	{r3, pc}
 800e354:	24000021 	.word	0x24000021
 800e358:	08012708 	.word	0x08012708

0800e35c <atan2>:
 800e35c:	f000 b918 	b.w	800e590 <__ieee754_atan2>

0800e360 <__ieee754_asin>:
 800e360:	b530      	push	{r4, r5, lr}
 800e362:	ee10 5a90 	vmov	r5, s1
 800e366:	ed2d 8b06 	vpush	{d8-d10}
 800e36a:	4b85      	ldr	r3, [pc, #532]	; (800e580 <__ieee754_asin+0x220>)
 800e36c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e370:	429c      	cmp	r4, r3
 800e372:	b083      	sub	sp, #12
 800e374:	dd1a      	ble.n	800e3ac <__ieee754_asin+0x4c>
 800e376:	ee10 3a10 	vmov	r3, s0
 800e37a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e37e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e382:	4323      	orrs	r3, r4
 800e384:	d10d      	bne.n	800e3a2 <__ieee754_asin+0x42>
 800e386:	ed9f 7b60 	vldr	d7, [pc, #384]	; 800e508 <__ieee754_asin+0x1a8>
 800e38a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 800e510 <__ieee754_asin+0x1b0>
 800e38e:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e392:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e396:	eeb0 0b47 	vmov.f64	d0, d7
 800e39a:	b003      	add	sp, #12
 800e39c:	ecbd 8b06 	vpop	{d8-d10}
 800e3a0:	bd30      	pop	{r4, r5, pc}
 800e3a2:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e3a6:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e3aa:	e7f6      	b.n	800e39a <__ieee754_asin+0x3a>
 800e3ac:	4b75      	ldr	r3, [pc, #468]	; (800e584 <__ieee754_asin+0x224>)
 800e3ae:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800e3b2:	429c      	cmp	r4, r3
 800e3b4:	dc0b      	bgt.n	800e3ce <__ieee754_asin+0x6e>
 800e3b6:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800e3ba:	da56      	bge.n	800e46a <__ieee754_asin+0x10a>
 800e3bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e518 <__ieee754_asin+0x1b8>
 800e3c0:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e3c4:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3cc:	dce5      	bgt.n	800e39a <__ieee754_asin+0x3a>
 800e3ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e3d2:	f000 ff7b 	bl	800f2cc <fabs>
 800e3d6:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800e520 <__ieee754_asin+0x1c0>
 800e3da:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e3de:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e3e2:	ed9f 6b51 	vldr	d6, [pc, #324]	; 800e528 <__ieee754_asin+0x1c8>
 800e3e6:	eeb0 0b48 	vmov.f64	d0, d8
 800e3ea:	eea8 6b07 	vfma.f64	d6, d8, d7
 800e3ee:	ed9f 7b50 	vldr	d7, [pc, #320]	; 800e530 <__ieee754_asin+0x1d0>
 800e3f2:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e3f6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800e538 <__ieee754_asin+0x1d8>
 800e3fa:	ed9f ab51 	vldr	d10, [pc, #324]	; 800e540 <__ieee754_asin+0x1e0>
 800e3fe:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e402:	ed9f 7b51 	vldr	d7, [pc, #324]	; 800e548 <__ieee754_asin+0x1e8>
 800e406:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e40a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 800e550 <__ieee754_asin+0x1f0>
 800e40e:	eea7 ab08 	vfma.f64	d10, d7, d8
 800e412:	ee2a ab08 	vmul.f64	d10, d10, d8
 800e416:	ed9f 7b50 	vldr	d7, [pc, #320]	; 800e558 <__ieee754_asin+0x1f8>
 800e41a:	eea8 7b06 	vfma.f64	d7, d8, d6
 800e41e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800e560 <__ieee754_asin+0x200>
 800e422:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e426:	ed9f 7b50 	vldr	d7, [pc, #320]	; 800e568 <__ieee754_asin+0x208>
 800e42a:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e42e:	eea7 9b08 	vfma.f64	d9, d7, d8
 800e432:	f000 fabd 	bl	800e9b0 <__ieee754_sqrt>
 800e436:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 800e43a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e43e:	4b52      	ldr	r3, [pc, #328]	; (800e588 <__ieee754_asin+0x228>)
 800e440:	429c      	cmp	r4, r3
 800e442:	ed8d 0b00 	vstr	d0, [sp]
 800e446:	dd3f      	ble.n	800e4c8 <__ieee754_asin+0x168>
 800e448:	eeb0 7b40 	vmov.f64	d7, d0
 800e44c:	eea0 7b04 	vfma.f64	d7, d0, d4
 800e450:	ed9f 0b47 	vldr	d0, [pc, #284]	; 800e570 <__ieee754_asin+0x210>
 800e454:	eea7 0b05 	vfma.f64	d0, d7, d5
 800e458:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e510 <__ieee754_asin+0x1b0>
 800e45c:	ee37 0b40 	vsub.f64	d0, d7, d0
 800e460:	2d00      	cmp	r5, #0
 800e462:	bfd8      	it	le
 800e464:	eeb1 0b40 	vnegle.f64	d0, d0
 800e468:	e797      	b.n	800e39a <__ieee754_asin+0x3a>
 800e46a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800e520 <__ieee754_asin+0x1c0>
 800e46e:	ee20 7b00 	vmul.f64	d7, d0, d0
 800e472:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 800e528 <__ieee754_asin+0x1c8>
 800e476:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e47a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800e530 <__ieee754_asin+0x1d0>
 800e47e:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e482:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 800e538 <__ieee754_asin+0x1d8>
 800e486:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e48a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800e548 <__ieee754_asin+0x1e8>
 800e48e:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e492:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 800e540 <__ieee754_asin+0x1e0>
 800e496:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 800e550 <__ieee754_asin+0x1f0>
 800e49a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e49e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e4a2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800e558 <__ieee754_asin+0x1f8>
 800e4a6:	eea7 5b04 	vfma.f64	d5, d7, d4
 800e4aa:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800e560 <__ieee754_asin+0x200>
 800e4ae:	eea5 4b07 	vfma.f64	d4, d5, d7
 800e4b2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 800e568 <__ieee754_asin+0x208>
 800e4b6:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e4ba:	eea5 9b07 	vfma.f64	d9, d5, d7
 800e4be:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800e4c2:	eea0 0b07 	vfma.f64	d0, d0, d7
 800e4c6:	e768      	b.n	800e39a <__ieee754_asin+0x3a>
 800e4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4cc:	ed9d 7b00 	vldr	d7, [sp]
 800e4d0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800e508 <__ieee754_asin+0x1a8>
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	ec43 2b16 	vmov	d6, r2, r3
 800e4da:	eea6 8b46 	vfms.f64	d8, d6, d6
 800e4de:	ee37 3b06 	vadd.f64	d3, d7, d6
 800e4e2:	ee88 7b03 	vdiv.f64	d7, d8, d3
 800e4e6:	eea7 0b45 	vfms.f64	d0, d7, d5
 800e4ea:	ed9d 7b00 	vldr	d7, [sp]
 800e4ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e4f2:	ee97 0b04 	vfnms.f64	d0, d7, d4
 800e4f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e578 <__ieee754_asin+0x218>
 800e4fa:	eeb0 4b47 	vmov.f64	d4, d7
 800e4fe:	eea6 4b45 	vfms.f64	d4, d6, d5
 800e502:	ee30 0b44 	vsub.f64	d0, d0, d4
 800e506:	e7a9      	b.n	800e45c <__ieee754_asin+0xfc>
 800e508:	33145c07 	.word	0x33145c07
 800e50c:	3c91a626 	.word	0x3c91a626
 800e510:	54442d18 	.word	0x54442d18
 800e514:	3ff921fb 	.word	0x3ff921fb
 800e518:	8800759c 	.word	0x8800759c
 800e51c:	7e37e43c 	.word	0x7e37e43c
 800e520:	0dfdf709 	.word	0x0dfdf709
 800e524:	3f023de1 	.word	0x3f023de1
 800e528:	7501b288 	.word	0x7501b288
 800e52c:	3f49efe0 	.word	0x3f49efe0
 800e530:	b5688f3b 	.word	0xb5688f3b
 800e534:	bfa48228 	.word	0xbfa48228
 800e538:	0e884455 	.word	0x0e884455
 800e53c:	3fc9c155 	.word	0x3fc9c155
 800e540:	55555555 	.word	0x55555555
 800e544:	3fc55555 	.word	0x3fc55555
 800e548:	03eb6f7d 	.word	0x03eb6f7d
 800e54c:	bfd4d612 	.word	0xbfd4d612
 800e550:	b12e9282 	.word	0xb12e9282
 800e554:	3fb3b8c5 	.word	0x3fb3b8c5
 800e558:	1b8d0159 	.word	0x1b8d0159
 800e55c:	bfe6066c 	.word	0xbfe6066c
 800e560:	9c598ac8 	.word	0x9c598ac8
 800e564:	40002ae5 	.word	0x40002ae5
 800e568:	1c8a2d4b 	.word	0x1c8a2d4b
 800e56c:	c0033a27 	.word	0xc0033a27
 800e570:	33145c07 	.word	0x33145c07
 800e574:	bc91a626 	.word	0xbc91a626
 800e578:	54442d18 	.word	0x54442d18
 800e57c:	3fe921fb 	.word	0x3fe921fb
 800e580:	3fefffff 	.word	0x3fefffff
 800e584:	3fdfffff 	.word	0x3fdfffff
 800e588:	3fef3332 	.word	0x3fef3332
 800e58c:	00000000 	.word	0x00000000

0800e590 <__ieee754_atan2>:
 800e590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e592:	ee11 6a10 	vmov	r6, s2
 800e596:	ee11 0a90 	vmov	r0, s3
 800e59a:	4273      	negs	r3, r6
 800e59c:	4f60      	ldr	r7, [pc, #384]	; (800e720 <__ieee754_atan2+0x190>)
 800e59e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e5a2:	4333      	orrs	r3, r6
 800e5a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e5a8:	42bb      	cmp	r3, r7
 800e5aa:	ed8d 0b00 	vstr	d0, [sp]
 800e5ae:	d80b      	bhi.n	800e5c8 <__ieee754_atan2+0x38>
 800e5b0:	e9dd c500 	ldrd	ip, r5, [sp]
 800e5b4:	f1cc 0100 	rsb	r1, ip, #0
 800e5b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e5bc:	ea41 010c 	orr.w	r1, r1, ip
 800e5c0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800e5c4:	42b9      	cmp	r1, r7
 800e5c6:	d906      	bls.n	800e5d6 <__ieee754_atan2+0x46>
 800e5c8:	ed9d 7b00 	vldr	d7, [sp]
 800e5cc:	ee37 7b01 	vadd.f64	d7, d7, d1
 800e5d0:	ed8d 7b00 	vstr	d7, [sp]
 800e5d4:	e054      	b.n	800e680 <__ieee754_atan2+0xf0>
 800e5d6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800e5da:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800e5de:	4331      	orrs	r1, r6
 800e5e0:	d104      	bne.n	800e5ec <__ieee754_atan2+0x5c>
 800e5e2:	b003      	add	sp, #12
 800e5e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e5e8:	f000 bd76 	b.w	800f0d8 <atan>
 800e5ec:	1784      	asrs	r4, r0, #30
 800e5ee:	f004 0402 	and.w	r4, r4, #2
 800e5f2:	ea53 010c 	orrs.w	r1, r3, ip
 800e5f6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800e5fa:	d109      	bne.n	800e610 <__ieee754_atan2+0x80>
 800e5fc:	2c02      	cmp	r4, #2
 800e5fe:	d069      	beq.n	800e6d4 <__ieee754_atan2+0x144>
 800e600:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800e6e8 <__ieee754_atan2+0x158>
 800e604:	ed9d 6b00 	vldr	d6, [sp]
 800e608:	2c03      	cmp	r4, #3
 800e60a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800e60e:	e7df      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e610:	ea52 0106 	orrs.w	r1, r2, r6
 800e614:	d107      	bne.n	800e626 <__ieee754_atan2+0x96>
 800e616:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800e6f0 <__ieee754_atan2+0x160>
 800e61a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800e6f8 <__ieee754_atan2+0x168>
 800e61e:	2d00      	cmp	r5, #0
 800e620:	fe26 7b07 	vselge.f64	d7, d6, d7
 800e624:	e7d4      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e626:	42ba      	cmp	r2, r7
 800e628:	d10f      	bne.n	800e64a <__ieee754_atan2+0xba>
 800e62a:	4293      	cmp	r3, r2
 800e62c:	f104 34ff 	add.w	r4, r4, #4294967295
 800e630:	d107      	bne.n	800e642 <__ieee754_atan2+0xb2>
 800e632:	2c02      	cmp	r4, #2
 800e634:	d851      	bhi.n	800e6da <__ieee754_atan2+0x14a>
 800e636:	4b3b      	ldr	r3, [pc, #236]	; (800e724 <__ieee754_atan2+0x194>)
 800e638:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e63c:	ed94 7b00 	vldr	d7, [r4]
 800e640:	e7c6      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e642:	2c02      	cmp	r4, #2
 800e644:	d84c      	bhi.n	800e6e0 <__ieee754_atan2+0x150>
 800e646:	4b38      	ldr	r3, [pc, #224]	; (800e728 <__ieee754_atan2+0x198>)
 800e648:	e7f6      	b.n	800e638 <__ieee754_atan2+0xa8>
 800e64a:	42bb      	cmp	r3, r7
 800e64c:	d0e3      	beq.n	800e616 <__ieee754_atan2+0x86>
 800e64e:	1a9b      	subs	r3, r3, r2
 800e650:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e654:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e658:	da16      	bge.n	800e688 <__ieee754_atan2+0xf8>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	da01      	bge.n	800e662 <__ieee754_atan2+0xd2>
 800e65e:	323c      	adds	r2, #60	; 0x3c
 800e660:	db17      	blt.n	800e692 <__ieee754_atan2+0x102>
 800e662:	ed9d 7b00 	vldr	d7, [sp]
 800e666:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800e66a:	f000 fe2f 	bl	800f2cc <fabs>
 800e66e:	f000 fd33 	bl	800f0d8 <atan>
 800e672:	ed8d 0b00 	vstr	d0, [sp]
 800e676:	2c01      	cmp	r4, #1
 800e678:	d00e      	beq.n	800e698 <__ieee754_atan2+0x108>
 800e67a:	2c02      	cmp	r4, #2
 800e67c:	d014      	beq.n	800e6a8 <__ieee754_atan2+0x118>
 800e67e:	b9f4      	cbnz	r4, 800e6be <__ieee754_atan2+0x12e>
 800e680:	ed9d 0b00 	vldr	d0, [sp]
 800e684:	b003      	add	sp, #12
 800e686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e688:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800e6f0 <__ieee754_atan2+0x160>
 800e68c:	ed8d 7b00 	vstr	d7, [sp]
 800e690:	e7f1      	b.n	800e676 <__ieee754_atan2+0xe6>
 800e692:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800e700 <__ieee754_atan2+0x170>
 800e696:	e7f9      	b.n	800e68c <__ieee754_atan2+0xfc>
 800e698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e69c:	9901      	ldr	r1, [sp, #4]
 800e69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6a2:	e9cd 2300 	strd	r2, r3, [sp]
 800e6a6:	e7eb      	b.n	800e680 <__ieee754_atan2+0xf0>
 800e6a8:	ed9d 6b00 	vldr	d6, [sp]
 800e6ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e708 <__ieee754_atan2+0x178>
 800e6b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e6b4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 800e710 <__ieee754_atan2+0x180>
 800e6b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e6bc:	e788      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e6be:	ed9d 6b00 	vldr	d6, [sp]
 800e6c2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e708 <__ieee754_atan2+0x178>
 800e6c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e6ca:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800e710 <__ieee754_atan2+0x180>
 800e6ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6d2:	e77d      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e6d4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e710 <__ieee754_atan2+0x180>
 800e6d8:	e77a      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e6da:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e718 <__ieee754_atan2+0x188>
 800e6de:	e777      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e6e0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800e700 <__ieee754_atan2+0x170>
 800e6e4:	e774      	b.n	800e5d0 <__ieee754_atan2+0x40>
 800e6e6:	bf00      	nop
 800e6e8:	54442d18 	.word	0x54442d18
 800e6ec:	c00921fb 	.word	0xc00921fb
 800e6f0:	54442d18 	.word	0x54442d18
 800e6f4:	3ff921fb 	.word	0x3ff921fb
 800e6f8:	54442d18 	.word	0x54442d18
 800e6fc:	bff921fb 	.word	0xbff921fb
	...
 800e708:	33145c07 	.word	0x33145c07
 800e70c:	3ca1a626 	.word	0x3ca1a626
 800e710:	54442d18 	.word	0x54442d18
 800e714:	400921fb 	.word	0x400921fb
 800e718:	54442d18 	.word	0x54442d18
 800e71c:	3fe921fb 	.word	0x3fe921fb
 800e720:	7ff00000 	.word	0x7ff00000
 800e724:	08012248 	.word	0x08012248
 800e728:	08012260 	.word	0x08012260
 800e72c:	00000000 	.word	0x00000000

0800e730 <__ieee754_rem_pio2>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	eeb0 7b40 	vmov.f64	d7, d0
 800e736:	ee17 5a90 	vmov	r5, s15
 800e73a:	4b97      	ldr	r3, [pc, #604]	; (800e998 <__ieee754_rem_pio2+0x268>)
 800e73c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e740:	429e      	cmp	r6, r3
 800e742:	b088      	sub	sp, #32
 800e744:	4604      	mov	r4, r0
 800e746:	dc07      	bgt.n	800e758 <__ieee754_rem_pio2+0x28>
 800e748:	2200      	movs	r2, #0
 800e74a:	2300      	movs	r3, #0
 800e74c:	ed84 0b00 	vstr	d0, [r4]
 800e750:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e754:	2000      	movs	r0, #0
 800e756:	e01b      	b.n	800e790 <__ieee754_rem_pio2+0x60>
 800e758:	4b90      	ldr	r3, [pc, #576]	; (800e99c <__ieee754_rem_pio2+0x26c>)
 800e75a:	429e      	cmp	r6, r3
 800e75c:	dc3b      	bgt.n	800e7d6 <__ieee754_rem_pio2+0xa6>
 800e75e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e762:	2d00      	cmp	r5, #0
 800e764:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e958 <__ieee754_rem_pio2+0x228>
 800e768:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e76c:	dd19      	ble.n	800e7a2 <__ieee754_rem_pio2+0x72>
 800e76e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e772:	429e      	cmp	r6, r3
 800e774:	d00e      	beq.n	800e794 <__ieee754_rem_pio2+0x64>
 800e776:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800e960 <__ieee754_rem_pio2+0x230>
 800e77a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e77e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e782:	ed84 5b00 	vstr	d5, [r4]
 800e786:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e78a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e78e:	2001      	movs	r0, #1
 800e790:	b008      	add	sp, #32
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e968 <__ieee754_rem_pio2+0x238>
 800e798:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e79c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e970 <__ieee754_rem_pio2+0x240>
 800e7a0:	e7eb      	b.n	800e77a <__ieee754_rem_pio2+0x4a>
 800e7a2:	429e      	cmp	r6, r3
 800e7a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e7a8:	d00e      	beq.n	800e7c8 <__ieee754_rem_pio2+0x98>
 800e7aa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e960 <__ieee754_rem_pio2+0x230>
 800e7ae:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e7b2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e7b6:	ed84 5b00 	vstr	d5, [r4]
 800e7ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7be:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c2:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7c6:	e7e3      	b.n	800e790 <__ieee754_rem_pio2+0x60>
 800e7c8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e968 <__ieee754_rem_pio2+0x238>
 800e7cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7d0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e970 <__ieee754_rem_pio2+0x240>
 800e7d4:	e7eb      	b.n	800e7ae <__ieee754_rem_pio2+0x7e>
 800e7d6:	4b72      	ldr	r3, [pc, #456]	; (800e9a0 <__ieee754_rem_pio2+0x270>)
 800e7d8:	429e      	cmp	r6, r3
 800e7da:	dc6e      	bgt.n	800e8ba <__ieee754_rem_pio2+0x18a>
 800e7dc:	f000 fd76 	bl	800f2cc <fabs>
 800e7e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e7e4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800e978 <__ieee754_rem_pio2+0x248>
 800e7e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e7ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e7f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e7f4:	ee17 0a90 	vmov	r0, s15
 800e7f8:	eeb1 4b45 	vneg.f64	d4, d5
 800e7fc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e958 <__ieee754_rem_pio2+0x228>
 800e800:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e804:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e960 <__ieee754_rem_pio2+0x230>
 800e808:	281f      	cmp	r0, #31
 800e80a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e80e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e812:	dc08      	bgt.n	800e826 <__ieee754_rem_pio2+0xf6>
 800e814:	4b63      	ldr	r3, [pc, #396]	; (800e9a4 <__ieee754_rem_pio2+0x274>)
 800e816:	1e42      	subs	r2, r0, #1
 800e818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e81c:	42b3      	cmp	r3, r6
 800e81e:	d002      	beq.n	800e826 <__ieee754_rem_pio2+0xf6>
 800e820:	ed84 6b00 	vstr	d6, [r4]
 800e824:	e024      	b.n	800e870 <__ieee754_rem_pio2+0x140>
 800e826:	ee16 3a90 	vmov	r3, s13
 800e82a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e82e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e832:	2b10      	cmp	r3, #16
 800e834:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e838:	ddf2      	ble.n	800e820 <__ieee754_rem_pio2+0xf0>
 800e83a:	eeb0 6b40 	vmov.f64	d6, d0
 800e83e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800e968 <__ieee754_rem_pio2+0x238>
 800e842:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e846:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e84a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e84e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800e970 <__ieee754_rem_pio2+0x240>
 800e852:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e856:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e85a:	ee13 3a90 	vmov	r3, s7
 800e85e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2b31      	cmp	r3, #49	; 0x31
 800e866:	dc17      	bgt.n	800e898 <__ieee754_rem_pio2+0x168>
 800e868:	eeb0 0b46 	vmov.f64	d0, d6
 800e86c:	ed84 3b00 	vstr	d3, [r4]
 800e870:	ed94 6b00 	vldr	d6, [r4]
 800e874:	2d00      	cmp	r5, #0
 800e876:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e87a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e87e:	ed84 7b02 	vstr	d7, [r4, #8]
 800e882:	da85      	bge.n	800e790 <__ieee754_rem_pio2+0x60>
 800e884:	eeb1 6b46 	vneg.f64	d6, d6
 800e888:	ed84 6b00 	vstr	d6, [r4]
 800e88c:	eeb1 7b47 	vneg.f64	d7, d7
 800e890:	4240      	negs	r0, r0
 800e892:	ed84 7b02 	vstr	d7, [r4, #8]
 800e896:	e77b      	b.n	800e790 <__ieee754_rem_pio2+0x60>
 800e898:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800e980 <__ieee754_rem_pio2+0x250>
 800e89c:	eeb0 0b46 	vmov.f64	d0, d6
 800e8a0:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e8a4:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e8a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800e988 <__ieee754_rem_pio2+0x258>
 800e8ac:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e8b0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e8b4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e8b8:	e7b2      	b.n	800e820 <__ieee754_rem_pio2+0xf0>
 800e8ba:	4b3b      	ldr	r3, [pc, #236]	; (800e9a8 <__ieee754_rem_pio2+0x278>)
 800e8bc:	429e      	cmp	r6, r3
 800e8be:	dd06      	ble.n	800e8ce <__ieee754_rem_pio2+0x19e>
 800e8c0:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e8c4:	ed80 7b02 	vstr	d7, [r0, #8]
 800e8c8:	ed80 7b00 	vstr	d7, [r0]
 800e8cc:	e742      	b.n	800e754 <__ieee754_rem_pio2+0x24>
 800e8ce:	1532      	asrs	r2, r6, #20
 800e8d0:	ee10 0a10 	vmov	r0, s0
 800e8d4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e8d8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e8dc:	ec41 0b17 	vmov	d7, r0, r1
 800e8e0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e8e4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800e990 <__ieee754_rem_pio2+0x260>
 800e8e8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e8ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e8f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e8f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e8f8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e8fc:	a902      	add	r1, sp, #8
 800e8fe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e902:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e906:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e90a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e90e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e912:	2603      	movs	r6, #3
 800e914:	4608      	mov	r0, r1
 800e916:	ed91 7b04 	vldr	d7, [r1, #16]
 800e91a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e922:	4633      	mov	r3, r6
 800e924:	f1a1 0108 	sub.w	r1, r1, #8
 800e928:	f106 36ff 	add.w	r6, r6, #4294967295
 800e92c:	d0f3      	beq.n	800e916 <__ieee754_rem_pio2+0x1e6>
 800e92e:	491f      	ldr	r1, [pc, #124]	; (800e9ac <__ieee754_rem_pio2+0x27c>)
 800e930:	9101      	str	r1, [sp, #4]
 800e932:	2102      	movs	r1, #2
 800e934:	9100      	str	r1, [sp, #0]
 800e936:	4621      	mov	r1, r4
 800e938:	f000 f83e 	bl	800e9b8 <__kernel_rem_pio2>
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	f6bf af27 	bge.w	800e790 <__ieee754_rem_pio2+0x60>
 800e942:	ed94 7b00 	vldr	d7, [r4]
 800e946:	eeb1 7b47 	vneg.f64	d7, d7
 800e94a:	ed84 7b00 	vstr	d7, [r4]
 800e94e:	ed94 7b02 	vldr	d7, [r4, #8]
 800e952:	e79b      	b.n	800e88c <__ieee754_rem_pio2+0x15c>
 800e954:	f3af 8000 	nop.w
 800e958:	54400000 	.word	0x54400000
 800e95c:	3ff921fb 	.word	0x3ff921fb
 800e960:	1a626331 	.word	0x1a626331
 800e964:	3dd0b461 	.word	0x3dd0b461
 800e968:	1a600000 	.word	0x1a600000
 800e96c:	3dd0b461 	.word	0x3dd0b461
 800e970:	2e037073 	.word	0x2e037073
 800e974:	3ba3198a 	.word	0x3ba3198a
 800e978:	6dc9c883 	.word	0x6dc9c883
 800e97c:	3fe45f30 	.word	0x3fe45f30
 800e980:	2e000000 	.word	0x2e000000
 800e984:	3ba3198a 	.word	0x3ba3198a
 800e988:	252049c1 	.word	0x252049c1
 800e98c:	397b839a 	.word	0x397b839a
 800e990:	00000000 	.word	0x00000000
 800e994:	41700000 	.word	0x41700000
 800e998:	3fe921fb 	.word	0x3fe921fb
 800e99c:	4002d97b 	.word	0x4002d97b
 800e9a0:	413921fb 	.word	0x413921fb
 800e9a4:	08012278 	.word	0x08012278
 800e9a8:	7fefffff 	.word	0x7fefffff
 800e9ac:	080122f8 	.word	0x080122f8

0800e9b0 <__ieee754_sqrt>:
 800e9b0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e9b4:	4770      	bx	lr
	...

0800e9b8 <__kernel_rem_pio2>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	ed2d 8b06 	vpush	{d8-d10}
 800e9c0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800e9c4:	469b      	mov	fp, r3
 800e9c6:	460f      	mov	r7, r1
 800e9c8:	4bcf      	ldr	r3, [pc, #828]	; (800ed08 <__kernel_rem_pio2+0x350>)
 800e9ca:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800e9cc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800e9d0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800e9d4:	9000      	str	r0, [sp, #0]
 800e9d6:	f112 0f14 	cmn.w	r2, #20
 800e9da:	bfa8      	it	ge
 800e9dc:	2318      	movge	r3, #24
 800e9de:	f10b 31ff 	add.w	r1, fp, #4294967295
 800e9e2:	bfb8      	it	lt
 800e9e4:	2300      	movlt	r3, #0
 800e9e6:	f06f 0417 	mvn.w	r4, #23
 800e9ea:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800ecf0 <__kernel_rem_pio2+0x338>
 800e9ee:	bfa4      	itt	ge
 800e9f0:	f1a2 0a03 	subge.w	sl, r2, #3
 800e9f4:	fb9a f3f3 	sdivge	r3, sl, r3
 800e9f8:	fb03 4404 	mla	r4, r3, r4, r4
 800e9fc:	1a5d      	subs	r5, r3, r1
 800e9fe:	4414      	add	r4, r2
 800ea00:	eb09 0601 	add.w	r6, r9, r1
 800ea04:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800ea08:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	42b2      	cmp	r2, r6
 800ea10:	dd12      	ble.n	800ea38 <__kernel_rem_pio2+0x80>
 800ea12:	aa18      	add	r2, sp, #96	; 0x60
 800ea14:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ea18:	460e      	mov	r6, r1
 800ea1a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800ea1e:	f1cb 0a01 	rsb	sl, fp, #1
 800ea22:	eb0a 0006 	add.w	r0, sl, r6
 800ea26:	4581      	cmp	r9, r0
 800ea28:	db25      	blt.n	800ea76 <__kernel_rem_pio2+0xbe>
 800ea2a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800ecf0 <__kernel_rem_pio2+0x338>
 800ea2e:	f8dd e000 	ldr.w	lr, [sp]
 800ea32:	4615      	mov	r5, r2
 800ea34:	2000      	movs	r0, #0
 800ea36:	e015      	b.n	800ea64 <__kernel_rem_pio2+0xac>
 800ea38:	42d5      	cmn	r5, r2
 800ea3a:	d409      	bmi.n	800ea50 <__kernel_rem_pio2+0x98>
 800ea3c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ea40:	ee07 0a90 	vmov	s15, r0
 800ea44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea48:	eca8 7b02 	vstmia	r8!, {d7}
 800ea4c:	3201      	adds	r2, #1
 800ea4e:	e7de      	b.n	800ea0e <__kernel_rem_pio2+0x56>
 800ea50:	eeb0 7b46 	vmov.f64	d7, d6
 800ea54:	e7f8      	b.n	800ea48 <__kernel_rem_pio2+0x90>
 800ea56:	ecbe 5b02 	vldmia	lr!, {d5}
 800ea5a:	ed95 6b00 	vldr	d6, [r5]
 800ea5e:	3001      	adds	r0, #1
 800ea60:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea64:	4288      	cmp	r0, r1
 800ea66:	f1a5 0508 	sub.w	r5, r5, #8
 800ea6a:	ddf4      	ble.n	800ea56 <__kernel_rem_pio2+0x9e>
 800ea6c:	eca8 7b02 	vstmia	r8!, {d7}
 800ea70:	3208      	adds	r2, #8
 800ea72:	3601      	adds	r6, #1
 800ea74:	e7d5      	b.n	800ea22 <__kernel_rem_pio2+0x6a>
 800ea76:	aa04      	add	r2, sp, #16
 800ea78:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800ecf8 <__kernel_rem_pio2+0x340>
 800ea7c:	ed9f aba0 	vldr	d10, [pc, #640]	; 800ed00 <__kernel_rem_pio2+0x348>
 800ea80:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ea84:	9201      	str	r2, [sp, #4]
 800ea86:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ea8a:	464e      	mov	r6, r9
 800ea8c:	ab90      	add	r3, sp, #576	; 0x240
 800ea8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea92:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ea96:	ab04      	add	r3, sp, #16
 800ea98:	4618      	mov	r0, r3
 800ea9a:	4632      	mov	r2, r6
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	dc4e      	bgt.n	800eb3e <__kernel_rem_pio2+0x186>
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800eaa6:	f000 fc97 	bl	800f3d8 <scalbn>
 800eaaa:	eeb0 8b40 	vmov.f64	d8, d0
 800eaae:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800eab2:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eab6:	f000 fc13 	bl	800f2e0 <floor>
 800eaba:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800eabe:	eea0 8b47 	vfms.f64	d8, d0, d7
 800eac2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800eac6:	2c00      	cmp	r4, #0
 800eac8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800eacc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800ead0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ead4:	ee17 8a90 	vmov	r8, s15
 800ead8:	dd46      	ble.n	800eb68 <__kernel_rem_pio2+0x1b0>
 800eada:	1e70      	subs	r0, r6, #1
 800eadc:	aa04      	add	r2, sp, #16
 800eade:	f1c4 0c18 	rsb	ip, r4, #24
 800eae2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800eae6:	fa45 f20c 	asr.w	r2, r5, ip
 800eaea:	4490      	add	r8, r2
 800eaec:	fa02 f20c 	lsl.w	r2, r2, ip
 800eaf0:	1aad      	subs	r5, r5, r2
 800eaf2:	aa04      	add	r2, sp, #16
 800eaf4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800eaf8:	f1c4 0217 	rsb	r2, r4, #23
 800eafc:	4115      	asrs	r5, r2
 800eafe:	2d00      	cmp	r5, #0
 800eb00:	dd41      	ble.n	800eb86 <__kernel_rem_pio2+0x1ce>
 800eb02:	f04f 0c00 	mov.w	ip, #0
 800eb06:	f108 0801 	add.w	r8, r8, #1
 800eb0a:	4660      	mov	r0, ip
 800eb0c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800eb10:	4566      	cmp	r6, ip
 800eb12:	dc69      	bgt.n	800ebe8 <__kernel_rem_pio2+0x230>
 800eb14:	2c00      	cmp	r4, #0
 800eb16:	dd03      	ble.n	800eb20 <__kernel_rem_pio2+0x168>
 800eb18:	2c01      	cmp	r4, #1
 800eb1a:	d076      	beq.n	800ec0a <__kernel_rem_pio2+0x252>
 800eb1c:	2c02      	cmp	r4, #2
 800eb1e:	d07f      	beq.n	800ec20 <__kernel_rem_pio2+0x268>
 800eb20:	2d02      	cmp	r5, #2
 800eb22:	d130      	bne.n	800eb86 <__kernel_rem_pio2+0x1ce>
 800eb24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eb28:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eb2c:	b358      	cbz	r0, 800eb86 <__kernel_rem_pio2+0x1ce>
 800eb2e:	4620      	mov	r0, r4
 800eb30:	9102      	str	r1, [sp, #8]
 800eb32:	f000 fc51 	bl	800f3d8 <scalbn>
 800eb36:	9902      	ldr	r1, [sp, #8]
 800eb38:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb3c:	e023      	b.n	800eb86 <__kernel_rem_pio2+0x1ce>
 800eb3e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eb42:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eb46:	3a01      	subs	r2, #1
 800eb48:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb4c:	ad68      	add	r5, sp, #416	; 0x1a0
 800eb4e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eb52:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eb56:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800eb5a:	eca0 0a01 	vstmia	r0!, {s0}
 800eb5e:	ed95 0b00 	vldr	d0, [r5]
 800eb62:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eb66:	e799      	b.n	800ea9c <__kernel_rem_pio2+0xe4>
 800eb68:	d105      	bne.n	800eb76 <__kernel_rem_pio2+0x1be>
 800eb6a:	1e72      	subs	r2, r6, #1
 800eb6c:	a804      	add	r0, sp, #16
 800eb6e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800eb72:	15ed      	asrs	r5, r5, #23
 800eb74:	e7c3      	b.n	800eafe <__kernel_rem_pio2+0x146>
 800eb76:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eb7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb82:	da2f      	bge.n	800ebe4 <__kernel_rem_pio2+0x22c>
 800eb84:	2500      	movs	r5, #0
 800eb86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8e:	f040 8087 	bne.w	800eca0 <__kernel_rem_pio2+0x2e8>
 800eb92:	1e73      	subs	r3, r6, #1
 800eb94:	4618      	mov	r0, r3
 800eb96:	f04f 0c00 	mov.w	ip, #0
 800eb9a:	4548      	cmp	r0, r9
 800eb9c:	da47      	bge.n	800ec2e <__kernel_rem_pio2+0x276>
 800eb9e:	f1bc 0f00 	cmp.w	ip, #0
 800eba2:	d070      	beq.n	800ec86 <__kernel_rem_pio2+0x2ce>
 800eba4:	aa04      	add	r2, sp, #16
 800eba6:	3c18      	subs	r4, #24
 800eba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ebac:	2a00      	cmp	r2, #0
 800ebae:	d075      	beq.n	800ec9c <__kernel_rem_pio2+0x2e4>
 800ebb0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	f000 fc0e 	bl	800f3d8 <scalbn>
 800ebbc:	9b00      	ldr	r3, [sp, #0]
 800ebbe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ecf8 <__kernel_rem_pio2+0x340>
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	2a00      	cmp	r2, #0
 800ebc6:	f280 80ac 	bge.w	800ed22 <__kernel_rem_pio2+0x36a>
 800ebca:	4619      	mov	r1, r3
 800ebcc:	2000      	movs	r0, #0
 800ebce:	2900      	cmp	r1, #0
 800ebd0:	f2c0 80cd 	blt.w	800ed6e <__kernel_rem_pio2+0x3b6>
 800ebd4:	aa68      	add	r2, sp, #416	; 0x1a0
 800ebd6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ebda:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800ecf0 <__kernel_rem_pio2+0x338>
 800ebde:	4e4b      	ldr	r6, [pc, #300]	; (800ed0c <__kernel_rem_pio2+0x354>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	e0b8      	b.n	800ed56 <__kernel_rem_pio2+0x39e>
 800ebe4:	2502      	movs	r5, #2
 800ebe6:	e78c      	b.n	800eb02 <__kernel_rem_pio2+0x14a>
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	b948      	cbnz	r0, 800ec00 <__kernel_rem_pio2+0x248>
 800ebec:	b11a      	cbz	r2, 800ebf6 <__kernel_rem_pio2+0x23e>
 800ebee:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f10c 0c01 	add.w	ip, ip, #1
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	e787      	b.n	800eb10 <__kernel_rem_pio2+0x158>
 800ec00:	ebae 0202 	sub.w	r2, lr, r2
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	4602      	mov	r2, r0
 800ec08:	e7f5      	b.n	800ebf6 <__kernel_rem_pio2+0x23e>
 800ec0a:	1e72      	subs	r2, r6, #1
 800ec0c:	ab04      	add	r3, sp, #16
 800ec0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec16:	f10d 0c10 	add.w	ip, sp, #16
 800ec1a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ec1e:	e77f      	b.n	800eb20 <__kernel_rem_pio2+0x168>
 800ec20:	1e72      	subs	r2, r6, #1
 800ec22:	ab04      	add	r3, sp, #16
 800ec24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec2c:	e7f3      	b.n	800ec16 <__kernel_rem_pio2+0x25e>
 800ec2e:	aa04      	add	r2, sp, #16
 800ec30:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ec34:	3801      	subs	r0, #1
 800ec36:	ea4c 0c02 	orr.w	ip, ip, r2
 800ec3a:	e7ae      	b.n	800eb9a <__kernel_rem_pio2+0x1e2>
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec42:	2a00      	cmp	r2, #0
 800ec44:	d0fa      	beq.n	800ec3c <__kernel_rem_pio2+0x284>
 800ec46:	eb06 020b 	add.w	r2, r6, fp
 800ec4a:	ad18      	add	r5, sp, #96	; 0x60
 800ec4c:	1c73      	adds	r3, r6, #1
 800ec4e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ec52:	4406      	add	r6, r0
 800ec54:	429e      	cmp	r6, r3
 800ec56:	f6ff af19 	blt.w	800ea8c <__kernel_rem_pio2+0xd4>
 800ec5a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ec5e:	9d00      	ldr	r5, [sp, #0]
 800ec60:	ee07 0a90 	vmov	s15, r0
 800ec64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec68:	2000      	movs	r0, #0
 800ec6a:	eca2 7b02 	vstmia	r2!, {d7}
 800ec6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ecf0 <__kernel_rem_pio2+0x338>
 800ec72:	4694      	mov	ip, r2
 800ec74:	4288      	cmp	r0, r1
 800ec76:	dd09      	ble.n	800ec8c <__kernel_rem_pio2+0x2d4>
 800ec78:	a868      	add	r0, sp, #416	; 0x1a0
 800ec7a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ec7e:	ed80 7b00 	vstr	d7, [r0]
 800ec82:	3301      	adds	r3, #1
 800ec84:	e7e6      	b.n	800ec54 <__kernel_rem_pio2+0x29c>
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	2001      	movs	r0, #1
 800ec8a:	e7d8      	b.n	800ec3e <__kernel_rem_pio2+0x286>
 800ec8c:	ecb5 5b02 	vldmia	r5!, {d5}
 800ec90:	ed3c 6b02 	vldmdb	ip!, {d6}
 800ec94:	3001      	adds	r0, #1
 800ec96:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ec9a:	e7eb      	b.n	800ec74 <__kernel_rem_pio2+0x2bc>
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	e781      	b.n	800eba4 <__kernel_rem_pio2+0x1ec>
 800eca0:	4260      	negs	r0, r4
 800eca2:	eeb0 0b48 	vmov.f64	d0, d8
 800eca6:	f000 fb97 	bl	800f3d8 <scalbn>
 800ecaa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ed00 <__kernel_rem_pio2+0x348>
 800ecae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ecb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb6:	db2b      	blt.n	800ed10 <__kernel_rem_pio2+0x358>
 800ecb8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ecf8 <__kernel_rem_pio2+0x340>
 800ecbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ecc0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ecc4:	aa04      	add	r2, sp, #16
 800ecc6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ecca:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ecce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ecd2:	a904      	add	r1, sp, #16
 800ecd4:	ee10 3a10 	vmov	r3, s0
 800ecd8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ecdc:	ee17 2a10 	vmov	r2, s14
 800ece0:	1c73      	adds	r3, r6, #1
 800ece2:	3418      	adds	r4, #24
 800ece4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ece8:	e762      	b.n	800ebb0 <__kernel_rem_pio2+0x1f8>
 800ecea:	bf00      	nop
 800ecec:	f3af 8000 	nop.w
	...
 800ecfc:	3e700000 	.word	0x3e700000
 800ed00:	00000000 	.word	0x00000000
 800ed04:	41700000 	.word	0x41700000
 800ed08:	08012440 	.word	0x08012440
 800ed0c:	08012400 	.word	0x08012400
 800ed10:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed14:	aa04      	add	r2, sp, #16
 800ed16:	ee10 3a10 	vmov	r3, s0
 800ed1a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ed1e:	4633      	mov	r3, r6
 800ed20:	e746      	b.n	800ebb0 <__kernel_rem_pio2+0x1f8>
 800ed22:	a804      	add	r0, sp, #16
 800ed24:	a968      	add	r1, sp, #416	; 0x1a0
 800ed26:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ed2a:	9000      	str	r0, [sp, #0]
 800ed2c:	ee07 0a90 	vmov	s15, r0
 800ed30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ed34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed38:	3a01      	subs	r2, #1
 800ed3a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ed3e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ed42:	ed81 7b00 	vstr	d7, [r1]
 800ed46:	e73d      	b.n	800ebc4 <__kernel_rem_pio2+0x20c>
 800ed48:	ecb6 5b02 	vldmia	r6!, {d5}
 800ed4c:	ecb4 6b02 	vldmia	r4!, {d6}
 800ed50:	3201      	adds	r2, #1
 800ed52:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed56:	454a      	cmp	r2, r9
 800ed58:	dc01      	bgt.n	800ed5e <__kernel_rem_pio2+0x3a6>
 800ed5a:	4290      	cmp	r0, r2
 800ed5c:	daf4      	bge.n	800ed48 <__kernel_rem_pio2+0x390>
 800ed5e:	aa40      	add	r2, sp, #256	; 0x100
 800ed60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ed64:	ed82 7b00 	vstr	d7, [r2]
 800ed68:	3901      	subs	r1, #1
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	e72f      	b.n	800ebce <__kernel_rem_pio2+0x216>
 800ed6e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ed70:	2a02      	cmp	r2, #2
 800ed72:	dc0a      	bgt.n	800ed8a <__kernel_rem_pio2+0x3d2>
 800ed74:	2a00      	cmp	r2, #0
 800ed76:	dc5a      	bgt.n	800ee2e <__kernel_rem_pio2+0x476>
 800ed78:	d039      	beq.n	800edee <__kernel_rem_pio2+0x436>
 800ed7a:	f008 0007 	and.w	r0, r8, #7
 800ed7e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800ed82:	ecbd 8b06 	vpop	{d8-d10}
 800ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ed8c:	2a03      	cmp	r2, #3
 800ed8e:	d1f4      	bne.n	800ed7a <__kernel_rem_pio2+0x3c2>
 800ed90:	aa40      	add	r2, sp, #256	; 0x100
 800ed92:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ed96:	4611      	mov	r1, r2
 800ed98:	4618      	mov	r0, r3
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	f1a1 0108 	sub.w	r1, r1, #8
 800eda0:	dc52      	bgt.n	800ee48 <__kernel_rem_pio2+0x490>
 800eda2:	4619      	mov	r1, r3
 800eda4:	2901      	cmp	r1, #1
 800eda6:	f1a2 0208 	sub.w	r2, r2, #8
 800edaa:	dc5d      	bgt.n	800ee68 <__kernel_rem_pio2+0x4b0>
 800edac:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800eeb0 <__kernel_rem_pio2+0x4f8>
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	dc69      	bgt.n	800ee88 <__kernel_rem_pio2+0x4d0>
 800edb4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800edb8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800edbc:	2d00      	cmp	r5, #0
 800edbe:	d16c      	bne.n	800ee9a <__kernel_rem_pio2+0x4e2>
 800edc0:	ed87 5b00 	vstr	d5, [r7]
 800edc4:	ed87 6b02 	vstr	d6, [r7, #8]
 800edc8:	ed87 7b04 	vstr	d7, [r7, #16]
 800edcc:	e7d5      	b.n	800ed7a <__kernel_rem_pio2+0x3c2>
 800edce:	aa40      	add	r2, sp, #256	; 0x100
 800edd0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800edd4:	ed92 6b00 	vldr	d6, [r2]
 800edd8:	3b01      	subs	r3, #1
 800edda:	ee37 7b06 	vadd.f64	d7, d7, d6
 800edde:	2b00      	cmp	r3, #0
 800ede0:	daf5      	bge.n	800edce <__kernel_rem_pio2+0x416>
 800ede2:	b10d      	cbz	r5, 800ede8 <__kernel_rem_pio2+0x430>
 800ede4:	eeb1 7b47 	vneg.f64	d7, d7
 800ede8:	ed87 7b00 	vstr	d7, [r7]
 800edec:	e7c5      	b.n	800ed7a <__kernel_rem_pio2+0x3c2>
 800edee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800eeb0 <__kernel_rem_pio2+0x4f8>
 800edf2:	e7f4      	b.n	800edde <__kernel_rem_pio2+0x426>
 800edf4:	a940      	add	r1, sp, #256	; 0x100
 800edf6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800edfa:	ed91 7b00 	vldr	d7, [r1]
 800edfe:	3a01      	subs	r2, #1
 800ee00:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee04:	2a00      	cmp	r2, #0
 800ee06:	daf5      	bge.n	800edf4 <__kernel_rem_pio2+0x43c>
 800ee08:	b1ad      	cbz	r5, 800ee36 <__kernel_rem_pio2+0x47e>
 800ee0a:	eeb1 7b46 	vneg.f64	d7, d6
 800ee0e:	ed87 7b00 	vstr	d7, [r7]
 800ee12:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800ee16:	a942      	add	r1, sp, #264	; 0x108
 800ee18:	2201      	movs	r2, #1
 800ee1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	da0c      	bge.n	800ee3c <__kernel_rem_pio2+0x484>
 800ee22:	b10d      	cbz	r5, 800ee28 <__kernel_rem_pio2+0x470>
 800ee24:	eeb1 7b47 	vneg.f64	d7, d7
 800ee28:	ed87 7b02 	vstr	d7, [r7, #8]
 800ee2c:	e7a5      	b.n	800ed7a <__kernel_rem_pio2+0x3c2>
 800ee2e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800eeb0 <__kernel_rem_pio2+0x4f8>
 800ee32:	461a      	mov	r2, r3
 800ee34:	e7e6      	b.n	800ee04 <__kernel_rem_pio2+0x44c>
 800ee36:	eeb0 7b46 	vmov.f64	d7, d6
 800ee3a:	e7e8      	b.n	800ee0e <__kernel_rem_pio2+0x456>
 800ee3c:	ecb1 6b02 	vldmia	r1!, {d6}
 800ee40:	3201      	adds	r2, #1
 800ee42:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee46:	e7ea      	b.n	800ee1e <__kernel_rem_pio2+0x466>
 800ee48:	ed91 7b00 	vldr	d7, [r1]
 800ee4c:	ed91 5b02 	vldr	d5, [r1, #8]
 800ee50:	3801      	subs	r0, #1
 800ee52:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee56:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee5a:	ed81 6b00 	vstr	d6, [r1]
 800ee5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee62:	ed81 7b02 	vstr	d7, [r1, #8]
 800ee66:	e798      	b.n	800ed9a <__kernel_rem_pio2+0x3e2>
 800ee68:	ed92 7b00 	vldr	d7, [r2]
 800ee6c:	ed92 5b02 	vldr	d5, [r2, #8]
 800ee70:	3901      	subs	r1, #1
 800ee72:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee76:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee7a:	ed82 6b00 	vstr	d6, [r2]
 800ee7e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee82:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee86:	e78d      	b.n	800eda4 <__kernel_rem_pio2+0x3ec>
 800ee88:	aa40      	add	r2, sp, #256	; 0x100
 800ee8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ee8e:	ed92 6b00 	vldr	d6, [r2]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee98:	e78a      	b.n	800edb0 <__kernel_rem_pio2+0x3f8>
 800ee9a:	eeb1 5b45 	vneg.f64	d5, d5
 800ee9e:	eeb1 6b46 	vneg.f64	d6, d6
 800eea2:	ed87 5b00 	vstr	d5, [r7]
 800eea6:	eeb1 7b47 	vneg.f64	d7, d7
 800eeaa:	ed87 6b02 	vstr	d6, [r7, #8]
 800eeae:	e78b      	b.n	800edc8 <__kernel_rem_pio2+0x410>
	...

0800eeb8 <__kernel_tan>:
 800eeb8:	eeb0 7b40 	vmov.f64	d7, d0
 800eebc:	ee17 3a90 	vmov	r3, s15
 800eec0:	b507      	push	{r0, r1, r2, lr}
 800eec2:	4983      	ldr	r1, [pc, #524]	; (800f0d0 <__kernel_tan+0x218>)
 800eec4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eec8:	428a      	cmp	r2, r1
 800eeca:	dc1c      	bgt.n	800ef06 <__kernel_tan+0x4e>
 800eecc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800eed0:	ee16 1a90 	vmov	r1, s13
 800eed4:	bb69      	cbnz	r1, 800ef32 <__kernel_tan+0x7a>
 800eed6:	ee10 1a10 	vmov	r1, s0
 800eeda:	1c43      	adds	r3, r0, #1
 800eedc:	430b      	orrs	r3, r1
 800eede:	4313      	orrs	r3, r2
 800eee0:	d10a      	bne.n	800eef8 <__kernel_tan+0x40>
 800eee2:	f000 f9f3 	bl	800f2cc <fabs>
 800eee6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eeea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800eeee:	eeb0 0b47 	vmov.f64	d0, d7
 800eef2:	b003      	add	sp, #12
 800eef4:	f85d fb04 	ldr.w	pc, [sp], #4
 800eef8:	2801      	cmp	r0, #1
 800eefa:	d0f8      	beq.n	800eeee <__kernel_tan+0x36>
 800eefc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ef00:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ef04:	e7f3      	b.n	800eeee <__kernel_tan+0x36>
 800ef06:	4973      	ldr	r1, [pc, #460]	; (800f0d4 <__kernel_tan+0x21c>)
 800ef08:	428a      	cmp	r2, r1
 800ef0a:	dd12      	ble.n	800ef32 <__kernel_tan+0x7a>
 800ef0c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800f050 <__kernel_tan+0x198>
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	bfb8      	it	lt
 800ef14:	eeb1 7b40 	vneglt.f64	d7, d0
 800ef18:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ef1c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f058 <__kernel_tan+0x1a0>
 800ef20:	bfb8      	it	lt
 800ef22:	eeb1 1b41 	vneglt.f64	d1, d1
 800ef26:	ee36 1b41 	vsub.f64	d1, d6, d1
 800ef2a:	ee31 7b07 	vadd.f64	d7, d1, d7
 800ef2e:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 800f060 <__kernel_tan+0x1a8>
 800ef32:	ee27 5b07 	vmul.f64	d5, d7, d7
 800ef36:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ef3a:	ed9f 3b4b 	vldr	d3, [pc, #300]	; 800f068 <__kernel_tan+0x1b0>
 800ef3e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 800f070 <__kernel_tan+0x1b8>
 800ef42:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ef46:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800f078 <__kernel_tan+0x1c0>
 800ef4a:	eea4 3b06 	vfma.f64	d3, d4, d6
 800ef4e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 800f080 <__kernel_tan+0x1c8>
 800ef52:	eea3 4b06 	vfma.f64	d4, d3, d6
 800ef56:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800f088 <__kernel_tan+0x1d0>
 800ef5a:	eea4 3b06 	vfma.f64	d3, d4, d6
 800ef5e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 800f090 <__kernel_tan+0x1d8>
 800ef62:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 800f098 <__kernel_tan+0x1e0>
 800ef66:	eea3 4b06 	vfma.f64	d4, d3, d6
 800ef6a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800f0a0 <__kernel_tan+0x1e8>
 800ef6e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800ef72:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 800f0a8 <__kernel_tan+0x1f0>
 800ef76:	eea3 2b06 	vfma.f64	d2, d3, d6
 800ef7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800f0b0 <__kernel_tan+0x1f8>
 800ef7e:	eea2 3b06 	vfma.f64	d3, d2, d6
 800ef82:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 800f0b8 <__kernel_tan+0x200>
 800ef86:	eea3 2b06 	vfma.f64	d2, d3, d6
 800ef8a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800f0c0 <__kernel_tan+0x208>
 800ef8e:	4951      	ldr	r1, [pc, #324]	; (800f0d4 <__kernel_tan+0x21c>)
 800ef90:	eea2 3b06 	vfma.f64	d3, d2, d6
 800ef94:	eeb0 6b43 	vmov.f64	d6, d3
 800ef98:	ee27 3b05 	vmul.f64	d3, d7, d5
 800ef9c:	eea6 4b05 	vfma.f64	d4, d6, d5
 800efa0:	eeb0 6b41 	vmov.f64	d6, d1
 800efa4:	eea4 6b03 	vfma.f64	d6, d4, d3
 800efa8:	eea6 1b05 	vfma.f64	d1, d6, d5
 800efac:	ed9f 6b46 	vldr	d6, [pc, #280]	; 800f0c8 <__kernel_tan+0x210>
 800efb0:	428a      	cmp	r2, r1
 800efb2:	eea3 1b06 	vfma.f64	d1, d3, d6
 800efb6:	ee37 6b01 	vadd.f64	d6, d7, d1
 800efba:	ed8d 6b00 	vstr	d6, [sp]
 800efbe:	dd1f      	ble.n	800f000 <__kernel_tan+0x148>
 800efc0:	ed9d 5b00 	vldr	d5, [sp]
 800efc4:	179b      	asrs	r3, r3, #30
 800efc6:	ee06 0a90 	vmov	s13, r0
 800efca:	ee25 3b05 	vmul.f64	d3, d5, d5
 800efce:	f003 0302 	and.w	r3, r3, #2
 800efd2:	f1c3 0301 	rsb	r3, r3, #1
 800efd6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800efda:	ee35 4b06 	vadd.f64	d4, d5, d6
 800efde:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800efe2:	ee35 1b41 	vsub.f64	d1, d5, d1
 800efe6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800efea:	ee37 7b41 	vsub.f64	d7, d7, d1
 800efee:	eea7 6b45 	vfms.f64	d6, d7, d5
 800eff2:	ee07 3a10 	vmov	s14, r3
 800eff6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800effa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800effe:	e776      	b.n	800eeee <__kernel_tan+0x36>
 800f000:	2801      	cmp	r0, #1
 800f002:	d020      	beq.n	800f046 <__kernel_tan+0x18e>
 800f004:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f008:	ed9d 6b00 	vldr	d6, [sp]
 800f00c:	2000      	movs	r0, #0
 800f00e:	ec41 0b15 	vmov	d5, r0, r1
 800f012:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f016:	ee31 1b47 	vsub.f64	d1, d1, d7
 800f01a:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800f01e:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800f022:	ed8d 7b00 	vstr	d7, [sp]
 800f026:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f02a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f02e:	4602      	mov	r2, r0
 800f030:	ec43 2b17 	vmov	d7, r2, r3
 800f034:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f038:	ed9d 5b00 	vldr	d5, [sp]
 800f03c:	eea1 6b07 	vfma.f64	d6, d1, d7
 800f040:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f044:	e753      	b.n	800eeee <__kernel_tan+0x36>
 800f046:	ed9d 7b00 	vldr	d7, [sp]
 800f04a:	e750      	b.n	800eeee <__kernel_tan+0x36>
 800f04c:	f3af 8000 	nop.w
 800f050:	54442d18 	.word	0x54442d18
 800f054:	3fe921fb 	.word	0x3fe921fb
 800f058:	33145c07 	.word	0x33145c07
 800f05c:	3c81a626 	.word	0x3c81a626
	...
 800f068:	db605373 	.word	0xdb605373
 800f06c:	bef375cb 	.word	0xbef375cb
 800f070:	a03792a6 	.word	0xa03792a6
 800f074:	3f147e88 	.word	0x3f147e88
 800f078:	f2f26501 	.word	0xf2f26501
 800f07c:	3f4344d8 	.word	0x3f4344d8
 800f080:	c9560328 	.word	0xc9560328
 800f084:	3f6d6d22 	.word	0x3f6d6d22
 800f088:	8406d637 	.word	0x8406d637
 800f08c:	3f9664f4 	.word	0x3f9664f4
 800f090:	1110fe7a 	.word	0x1110fe7a
 800f094:	3fc11111 	.word	0x3fc11111
 800f098:	74bf7ad4 	.word	0x74bf7ad4
 800f09c:	3efb2a70 	.word	0x3efb2a70
 800f0a0:	32f0a7e9 	.word	0x32f0a7e9
 800f0a4:	3f12b80f 	.word	0x3f12b80f
 800f0a8:	1a8d1068 	.word	0x1a8d1068
 800f0ac:	3f3026f7 	.word	0x3f3026f7
 800f0b0:	fee08315 	.word	0xfee08315
 800f0b4:	3f57dbc8 	.word	0x3f57dbc8
 800f0b8:	e96e8493 	.word	0xe96e8493
 800f0bc:	3f8226e3 	.word	0x3f8226e3
 800f0c0:	1bb341fe 	.word	0x1bb341fe
 800f0c4:	3faba1ba 	.word	0x3faba1ba
 800f0c8:	55555563 	.word	0x55555563
 800f0cc:	3fd55555 	.word	0x3fd55555
 800f0d0:	3e2fffff 	.word	0x3e2fffff
 800f0d4:	3fe59427 	.word	0x3fe59427

0800f0d8 <atan>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	eeb0 7b40 	vmov.f64	d7, d0
 800f0de:	ee17 5a90 	vmov	r5, s15
 800f0e2:	4b73      	ldr	r3, [pc, #460]	; (800f2b0 <atan+0x1d8>)
 800f0e4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f0e8:	429c      	cmp	r4, r3
 800f0ea:	dd13      	ble.n	800f114 <atan+0x3c>
 800f0ec:	4b71      	ldr	r3, [pc, #452]	; (800f2b4 <atan+0x1dc>)
 800f0ee:	429c      	cmp	r4, r3
 800f0f0:	dc03      	bgt.n	800f0fa <atan+0x22>
 800f0f2:	d107      	bne.n	800f104 <atan+0x2c>
 800f0f4:	ee10 3a10 	vmov	r3, s0
 800f0f8:	b123      	cbz	r3, 800f104 <atan+0x2c>
 800f0fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f0fe:	eeb0 0b47 	vmov.f64	d0, d7
 800f102:	bd38      	pop	{r3, r4, r5, pc}
 800f104:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f240 <atan+0x168>
 800f108:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800f248 <atan+0x170>
 800f10c:	2d00      	cmp	r5, #0
 800f10e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800f112:	e7f4      	b.n	800f0fe <atan+0x26>
 800f114:	4b68      	ldr	r3, [pc, #416]	; (800f2b8 <atan+0x1e0>)
 800f116:	429c      	cmp	r4, r3
 800f118:	dc11      	bgt.n	800f13e <atan+0x66>
 800f11a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f11e:	429c      	cmp	r4, r3
 800f120:	dc0a      	bgt.n	800f138 <atan+0x60>
 800f122:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800f126:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800f250 <atan+0x178>
 800f12a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800f12e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	dce2      	bgt.n	800f0fe <atan+0x26>
 800f138:	f04f 33ff 	mov.w	r3, #4294967295
 800f13c:	e013      	b.n	800f166 <atan+0x8e>
 800f13e:	f000 f8c5 	bl	800f2cc <fabs>
 800f142:	4b5e      	ldr	r3, [pc, #376]	; (800f2bc <atan+0x1e4>)
 800f144:	429c      	cmp	r4, r3
 800f146:	dc4f      	bgt.n	800f1e8 <atan+0x110>
 800f148:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f14c:	429c      	cmp	r4, r3
 800f14e:	dc41      	bgt.n	800f1d4 <atan+0xfc>
 800f150:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f154:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f158:	2300      	movs	r3, #0
 800f15a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f15e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f162:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f166:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f258 <atan+0x180>
 800f16a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f16e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800f172:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f260 <atan+0x188>
 800f176:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f17a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f268 <atan+0x190>
 800f17e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f182:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f270 <atan+0x198>
 800f186:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f18a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f278 <atan+0x1a0>
 800f18e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f192:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f280 <atan+0x1a8>
 800f196:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f288 <atan+0x1b0>
 800f19a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f19e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f290 <atan+0x1b8>
 800f1a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 800f1a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f298 <atan+0x1c0>
 800f1aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f1ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f2a0 <atan+0x1c8>
 800f1b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800f1b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f2a8 <atan+0x1d0>
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f1c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800f1c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800f1c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f1cc:	d121      	bne.n	800f212 <atan+0x13a>
 800f1ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f1d2:	e794      	b.n	800f0fe <atan+0x26>
 800f1d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f1d8:	2301      	movs	r3, #1
 800f1da:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f1de:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f1e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f1e6:	e7be      	b.n	800f166 <atan+0x8e>
 800f1e8:	4b35      	ldr	r3, [pc, #212]	; (800f2c0 <atan+0x1e8>)
 800f1ea:	429c      	cmp	r4, r3
 800f1ec:	da0b      	bge.n	800f206 <atan+0x12e>
 800f1ee:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f1f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f1f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f1fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f1fe:	2302      	movs	r3, #2
 800f200:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800f204:	e7af      	b.n	800f166 <atan+0x8e>
 800f206:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f20a:	2303      	movs	r3, #3
 800f20c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f210:	e7a9      	b.n	800f166 <atan+0x8e>
 800f212:	4a2c      	ldr	r2, [pc, #176]	; (800f2c4 <atan+0x1ec>)
 800f214:	492c      	ldr	r1, [pc, #176]	; (800f2c8 <atan+0x1f0>)
 800f216:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f21a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f21e:	ed93 5b00 	vldr	d5, [r3]
 800f222:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f226:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f22a:	ed92 6b00 	vldr	d6, [r2]
 800f22e:	2d00      	cmp	r5, #0
 800f230:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f234:	bfb8      	it	lt
 800f236:	eeb1 7b47 	vneglt.f64	d7, d7
 800f23a:	e760      	b.n	800f0fe <atan+0x26>
 800f23c:	f3af 8000 	nop.w
 800f240:	54442d18 	.word	0x54442d18
 800f244:	3ff921fb 	.word	0x3ff921fb
 800f248:	54442d18 	.word	0x54442d18
 800f24c:	bff921fb 	.word	0xbff921fb
 800f250:	8800759c 	.word	0x8800759c
 800f254:	7e37e43c 	.word	0x7e37e43c
 800f258:	e322da11 	.word	0xe322da11
 800f25c:	3f90ad3a 	.word	0x3f90ad3a
 800f260:	24760deb 	.word	0x24760deb
 800f264:	3fa97b4b 	.word	0x3fa97b4b
 800f268:	a0d03d51 	.word	0xa0d03d51
 800f26c:	3fb10d66 	.word	0x3fb10d66
 800f270:	c54c206e 	.word	0xc54c206e
 800f274:	3fb745cd 	.word	0x3fb745cd
 800f278:	920083ff 	.word	0x920083ff
 800f27c:	3fc24924 	.word	0x3fc24924
 800f280:	5555550d 	.word	0x5555550d
 800f284:	3fd55555 	.word	0x3fd55555
 800f288:	52defd9a 	.word	0x52defd9a
 800f28c:	bfadde2d 	.word	0xbfadde2d
 800f290:	2c6a6c2f 	.word	0x2c6a6c2f
 800f294:	bfa2b444 	.word	0xbfa2b444
 800f298:	af749a6d 	.word	0xaf749a6d
 800f29c:	bfb3b0f2 	.word	0xbfb3b0f2
 800f2a0:	fe231671 	.word	0xfe231671
 800f2a4:	bfbc71c6 	.word	0xbfbc71c6
 800f2a8:	9998ebc4 	.word	0x9998ebc4
 800f2ac:	bfc99999 	.word	0xbfc99999
 800f2b0:	440fffff 	.word	0x440fffff
 800f2b4:	7ff00000 	.word	0x7ff00000
 800f2b8:	3fdbffff 	.word	0x3fdbffff
 800f2bc:	3ff2ffff 	.word	0x3ff2ffff
 800f2c0:	40038000 	.word	0x40038000
 800f2c4:	08012450 	.word	0x08012450
 800f2c8:	08012470 	.word	0x08012470

0800f2cc <fabs>:
 800f2cc:	ec51 0b10 	vmov	r0, r1, d0
 800f2d0:	ee10 2a10 	vmov	r2, s0
 800f2d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f2d8:	ec43 2b10 	vmov	d0, r2, r3
 800f2dc:	4770      	bx	lr
	...

0800f2e0 <floor>:
 800f2e0:	ee10 1a90 	vmov	r1, s1
 800f2e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f2e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f2ec:	2b13      	cmp	r3, #19
 800f2ee:	b530      	push	{r4, r5, lr}
 800f2f0:	ee10 0a10 	vmov	r0, s0
 800f2f4:	ee10 5a10 	vmov	r5, s0
 800f2f8:	dc31      	bgt.n	800f35e <floor+0x7e>
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	da15      	bge.n	800f32a <floor+0x4a>
 800f2fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f3b8 <floor+0xd8>
 800f302:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f306:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30e:	dd07      	ble.n	800f320 <floor+0x40>
 800f310:	2900      	cmp	r1, #0
 800f312:	da4e      	bge.n	800f3b2 <floor+0xd2>
 800f314:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f318:	4318      	orrs	r0, r3
 800f31a:	d001      	beq.n	800f320 <floor+0x40>
 800f31c:	4928      	ldr	r1, [pc, #160]	; (800f3c0 <floor+0xe0>)
 800f31e:	2000      	movs	r0, #0
 800f320:	460b      	mov	r3, r1
 800f322:	4602      	mov	r2, r0
 800f324:	ec43 2b10 	vmov	d0, r2, r3
 800f328:	e020      	b.n	800f36c <floor+0x8c>
 800f32a:	4a26      	ldr	r2, [pc, #152]	; (800f3c4 <floor+0xe4>)
 800f32c:	411a      	asrs	r2, r3
 800f32e:	ea01 0402 	and.w	r4, r1, r2
 800f332:	4304      	orrs	r4, r0
 800f334:	d01a      	beq.n	800f36c <floor+0x8c>
 800f336:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f3b8 <floor+0xd8>
 800f33a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f33e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f346:	ddeb      	ble.n	800f320 <floor+0x40>
 800f348:	2900      	cmp	r1, #0
 800f34a:	bfbe      	ittt	lt
 800f34c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f350:	fa40 f303 	asrlt.w	r3, r0, r3
 800f354:	18c9      	addlt	r1, r1, r3
 800f356:	ea21 0102 	bic.w	r1, r1, r2
 800f35a:	2000      	movs	r0, #0
 800f35c:	e7e0      	b.n	800f320 <floor+0x40>
 800f35e:	2b33      	cmp	r3, #51	; 0x33
 800f360:	dd05      	ble.n	800f36e <floor+0x8e>
 800f362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f366:	d101      	bne.n	800f36c <floor+0x8c>
 800f368:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f36c:	bd30      	pop	{r4, r5, pc}
 800f36e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f372:	f04f 32ff 	mov.w	r2, #4294967295
 800f376:	40e2      	lsrs	r2, r4
 800f378:	4202      	tst	r2, r0
 800f37a:	d0f7      	beq.n	800f36c <floor+0x8c>
 800f37c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f3b8 <floor+0xd8>
 800f380:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f384:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38c:	ddc8      	ble.n	800f320 <floor+0x40>
 800f38e:	2900      	cmp	r1, #0
 800f390:	da02      	bge.n	800f398 <floor+0xb8>
 800f392:	2b14      	cmp	r3, #20
 800f394:	d103      	bne.n	800f39e <floor+0xbe>
 800f396:	3101      	adds	r1, #1
 800f398:	ea20 0002 	bic.w	r0, r0, r2
 800f39c:	e7c0      	b.n	800f320 <floor+0x40>
 800f39e:	2401      	movs	r4, #1
 800f3a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f3a4:	fa04 f303 	lsl.w	r3, r4, r3
 800f3a8:	4418      	add	r0, r3
 800f3aa:	42a8      	cmp	r0, r5
 800f3ac:	bf38      	it	cc
 800f3ae:	1909      	addcc	r1, r1, r4
 800f3b0:	e7f2      	b.n	800f398 <floor+0xb8>
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	4601      	mov	r1, r0
 800f3b6:	e7b3      	b.n	800f320 <floor+0x40>
 800f3b8:	8800759c 	.word	0x8800759c
 800f3bc:	7e37e43c 	.word	0x7e37e43c
 800f3c0:	bff00000 	.word	0xbff00000
 800f3c4:	000fffff 	.word	0x000fffff

0800f3c8 <nan>:
 800f3c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3d0 <nan+0x8>
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	00000000 	.word	0x00000000
 800f3d4:	7ff80000 	.word	0x7ff80000

0800f3d8 <scalbn>:
 800f3d8:	b082      	sub	sp, #8
 800f3da:	ed8d 0b00 	vstr	d0, [sp]
 800f3de:	9b01      	ldr	r3, [sp, #4]
 800f3e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f3e4:	b9a2      	cbnz	r2, 800f410 <scalbn+0x38>
 800f3e6:	9a00      	ldr	r2, [sp, #0]
 800f3e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	d03a      	beq.n	800f466 <scalbn+0x8e>
 800f3f0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f4c8 <scalbn+0xf0>
 800f3f4:	4b40      	ldr	r3, [pc, #256]	; (800f4f8 <scalbn+0x120>)
 800f3f6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f3fa:	4298      	cmp	r0, r3
 800f3fc:	ed8d 7b00 	vstr	d7, [sp]
 800f400:	da11      	bge.n	800f426 <scalbn+0x4e>
 800f402:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f4d0 <scalbn+0xf8>
 800f406:	ed9d 6b00 	vldr	d6, [sp]
 800f40a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f40e:	e007      	b.n	800f420 <scalbn+0x48>
 800f410:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f414:	428a      	cmp	r2, r1
 800f416:	d10a      	bne.n	800f42e <scalbn+0x56>
 800f418:	ed9d 7b00 	vldr	d7, [sp]
 800f41c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f420:	ed8d 7b00 	vstr	d7, [sp]
 800f424:	e01f      	b.n	800f466 <scalbn+0x8e>
 800f426:	9b01      	ldr	r3, [sp, #4]
 800f428:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f42c:	3a36      	subs	r2, #54	; 0x36
 800f42e:	4402      	add	r2, r0
 800f430:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f434:	428a      	cmp	r2, r1
 800f436:	dd0a      	ble.n	800f44e <scalbn+0x76>
 800f438:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f4d8 <scalbn+0x100>
 800f43c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f4e0 <scalbn+0x108>
 800f440:	eeb0 6b47 	vmov.f64	d6, d7
 800f444:	9b01      	ldr	r3, [sp, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f44c:	e7dd      	b.n	800f40a <scalbn+0x32>
 800f44e:	2a00      	cmp	r2, #0
 800f450:	dd0d      	ble.n	800f46e <scalbn+0x96>
 800f452:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f456:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f45a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f45e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f462:	e9cd 0100 	strd	r0, r1, [sp]
 800f466:	ed9d 0b00 	vldr	d0, [sp]
 800f46a:	b002      	add	sp, #8
 800f46c:	4770      	bx	lr
 800f46e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f472:	da18      	bge.n	800f4a6 <scalbn+0xce>
 800f474:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f478:	4298      	cmp	r0, r3
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f480:	dd09      	ble.n	800f496 <scalbn+0xbe>
 800f482:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f4d8 <scalbn+0x100>
 800f486:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f4e0 <scalbn+0x108>
 800f48a:	eeb0 6b47 	vmov.f64	d6, d7
 800f48e:	2b00      	cmp	r3, #0
 800f490:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f494:	e7b9      	b.n	800f40a <scalbn+0x32>
 800f496:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f4d0 <scalbn+0xf8>
 800f49a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f4e8 <scalbn+0x110>
 800f49e:	eeb0 6b47 	vmov.f64	d6, d7
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	e7f4      	b.n	800f490 <scalbn+0xb8>
 800f4a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4ae:	3236      	adds	r2, #54	; 0x36
 800f4b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4b4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f4b8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f4f0 <scalbn+0x118>
 800f4bc:	ec41 0b17 	vmov	d7, r0, r1
 800f4c0:	e7a3      	b.n	800f40a <scalbn+0x32>
 800f4c2:	bf00      	nop
 800f4c4:	f3af 8000 	nop.w
 800f4c8:	00000000 	.word	0x00000000
 800f4cc:	43500000 	.word	0x43500000
 800f4d0:	c2f8f359 	.word	0xc2f8f359
 800f4d4:	01a56e1f 	.word	0x01a56e1f
 800f4d8:	8800759c 	.word	0x8800759c
 800f4dc:	7e37e43c 	.word	0x7e37e43c
 800f4e0:	8800759c 	.word	0x8800759c
 800f4e4:	fe37e43c 	.word	0xfe37e43c
 800f4e8:	c2f8f359 	.word	0xc2f8f359
 800f4ec:	81a56e1f 	.word	0x81a56e1f
 800f4f0:	00000000 	.word	0x00000000
 800f4f4:	3c900000 	.word	0x3c900000
 800f4f8:	ffff3cb0 	.word	0xffff3cb0

0800f4fc <__errno>:
 800f4fc:	4b01      	ldr	r3, [pc, #4]	; (800f504 <__errno+0x8>)
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	24000024 	.word	0x24000024

0800f508 <__libc_init_array>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	4d0d      	ldr	r5, [pc, #52]	; (800f540 <__libc_init_array+0x38>)
 800f50c:	4c0d      	ldr	r4, [pc, #52]	; (800f544 <__libc_init_array+0x3c>)
 800f50e:	1b64      	subs	r4, r4, r5
 800f510:	10a4      	asrs	r4, r4, #2
 800f512:	2600      	movs	r6, #0
 800f514:	42a6      	cmp	r6, r4
 800f516:	d109      	bne.n	800f52c <__libc_init_array+0x24>
 800f518:	4d0b      	ldr	r5, [pc, #44]	; (800f548 <__libc_init_array+0x40>)
 800f51a:	4c0c      	ldr	r4, [pc, #48]	; (800f54c <__libc_init_array+0x44>)
 800f51c:	f002 fe24 	bl	8012168 <_init>
 800f520:	1b64      	subs	r4, r4, r5
 800f522:	10a4      	asrs	r4, r4, #2
 800f524:	2600      	movs	r6, #0
 800f526:	42a6      	cmp	r6, r4
 800f528:	d105      	bne.n	800f536 <__libc_init_array+0x2e>
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f530:	4798      	blx	r3
 800f532:	3601      	adds	r6, #1
 800f534:	e7ee      	b.n	800f514 <__libc_init_array+0xc>
 800f536:	f855 3b04 	ldr.w	r3, [r5], #4
 800f53a:	4798      	blx	r3
 800f53c:	3601      	adds	r6, #1
 800f53e:	e7f2      	b.n	800f526 <__libc_init_array+0x1e>
 800f540:	0801287c 	.word	0x0801287c
 800f544:	0801287c 	.word	0x0801287c
 800f548:	0801287c 	.word	0x0801287c
 800f54c:	08012880 	.word	0x08012880

0800f550 <memset>:
 800f550:	4402      	add	r2, r0
 800f552:	4603      	mov	r3, r0
 800f554:	4293      	cmp	r3, r2
 800f556:	d100      	bne.n	800f55a <memset+0xa>
 800f558:	4770      	bx	lr
 800f55a:	f803 1b01 	strb.w	r1, [r3], #1
 800f55e:	e7f9      	b.n	800f554 <memset+0x4>

0800f560 <__cvt>:
 800f560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f562:	ed2d 8b02 	vpush	{d8}
 800f566:	eeb0 8b40 	vmov.f64	d8, d0
 800f56a:	b085      	sub	sp, #20
 800f56c:	4617      	mov	r7, r2
 800f56e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f570:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f572:	ee18 2a90 	vmov	r2, s17
 800f576:	f025 0520 	bic.w	r5, r5, #32
 800f57a:	2a00      	cmp	r2, #0
 800f57c:	bfb6      	itet	lt
 800f57e:	222d      	movlt	r2, #45	; 0x2d
 800f580:	2200      	movge	r2, #0
 800f582:	eeb1 8b40 	vneglt.f64	d8, d0
 800f586:	2d46      	cmp	r5, #70	; 0x46
 800f588:	460c      	mov	r4, r1
 800f58a:	701a      	strb	r2, [r3, #0]
 800f58c:	d004      	beq.n	800f598 <__cvt+0x38>
 800f58e:	2d45      	cmp	r5, #69	; 0x45
 800f590:	d100      	bne.n	800f594 <__cvt+0x34>
 800f592:	3401      	adds	r4, #1
 800f594:	2102      	movs	r1, #2
 800f596:	e000      	b.n	800f59a <__cvt+0x3a>
 800f598:	2103      	movs	r1, #3
 800f59a:	ab03      	add	r3, sp, #12
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	ab02      	add	r3, sp, #8
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	4633      	mov	r3, r6
 800f5a6:	eeb0 0b48 	vmov.f64	d0, d8
 800f5aa:	f000 fcc9 	bl	800ff40 <_dtoa_r>
 800f5ae:	2d47      	cmp	r5, #71	; 0x47
 800f5b0:	d109      	bne.n	800f5c6 <__cvt+0x66>
 800f5b2:	07fb      	lsls	r3, r7, #31
 800f5b4:	d407      	bmi.n	800f5c6 <__cvt+0x66>
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5ba:	1a1b      	subs	r3, r3, r0
 800f5bc:	6013      	str	r3, [r2, #0]
 800f5be:	b005      	add	sp, #20
 800f5c0:	ecbd 8b02 	vpop	{d8}
 800f5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5c6:	2d46      	cmp	r5, #70	; 0x46
 800f5c8:	eb00 0204 	add.w	r2, r0, r4
 800f5cc:	d10c      	bne.n	800f5e8 <__cvt+0x88>
 800f5ce:	7803      	ldrb	r3, [r0, #0]
 800f5d0:	2b30      	cmp	r3, #48	; 0x30
 800f5d2:	d107      	bne.n	800f5e4 <__cvt+0x84>
 800f5d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5dc:	bf1c      	itt	ne
 800f5de:	f1c4 0401 	rsbne	r4, r4, #1
 800f5e2:	6034      	strne	r4, [r6, #0]
 800f5e4:	6833      	ldr	r3, [r6, #0]
 800f5e6:	441a      	add	r2, r3
 800f5e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f0:	bf08      	it	eq
 800f5f2:	9203      	streq	r2, [sp, #12]
 800f5f4:	2130      	movs	r1, #48	; 0x30
 800f5f6:	9b03      	ldr	r3, [sp, #12]
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d2dc      	bcs.n	800f5b6 <__cvt+0x56>
 800f5fc:	1c5c      	adds	r4, r3, #1
 800f5fe:	9403      	str	r4, [sp, #12]
 800f600:	7019      	strb	r1, [r3, #0]
 800f602:	e7f8      	b.n	800f5f6 <__cvt+0x96>

0800f604 <__exponent>:
 800f604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f606:	4603      	mov	r3, r0
 800f608:	2900      	cmp	r1, #0
 800f60a:	bfb8      	it	lt
 800f60c:	4249      	neglt	r1, r1
 800f60e:	f803 2b02 	strb.w	r2, [r3], #2
 800f612:	bfb4      	ite	lt
 800f614:	222d      	movlt	r2, #45	; 0x2d
 800f616:	222b      	movge	r2, #43	; 0x2b
 800f618:	2909      	cmp	r1, #9
 800f61a:	7042      	strb	r2, [r0, #1]
 800f61c:	dd2a      	ble.n	800f674 <__exponent+0x70>
 800f61e:	f10d 0407 	add.w	r4, sp, #7
 800f622:	46a4      	mov	ip, r4
 800f624:	270a      	movs	r7, #10
 800f626:	46a6      	mov	lr, r4
 800f628:	460a      	mov	r2, r1
 800f62a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f62e:	fb07 1516 	mls	r5, r7, r6, r1
 800f632:	3530      	adds	r5, #48	; 0x30
 800f634:	2a63      	cmp	r2, #99	; 0x63
 800f636:	f104 34ff 	add.w	r4, r4, #4294967295
 800f63a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f63e:	4631      	mov	r1, r6
 800f640:	dcf1      	bgt.n	800f626 <__exponent+0x22>
 800f642:	3130      	adds	r1, #48	; 0x30
 800f644:	f1ae 0502 	sub.w	r5, lr, #2
 800f648:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f64c:	1c44      	adds	r4, r0, #1
 800f64e:	4629      	mov	r1, r5
 800f650:	4561      	cmp	r1, ip
 800f652:	d30a      	bcc.n	800f66a <__exponent+0x66>
 800f654:	f10d 0209 	add.w	r2, sp, #9
 800f658:	eba2 020e 	sub.w	r2, r2, lr
 800f65c:	4565      	cmp	r5, ip
 800f65e:	bf88      	it	hi
 800f660:	2200      	movhi	r2, #0
 800f662:	4413      	add	r3, r2
 800f664:	1a18      	subs	r0, r3, r0
 800f666:	b003      	add	sp, #12
 800f668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f66e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f672:	e7ed      	b.n	800f650 <__exponent+0x4c>
 800f674:	2330      	movs	r3, #48	; 0x30
 800f676:	3130      	adds	r1, #48	; 0x30
 800f678:	7083      	strb	r3, [r0, #2]
 800f67a:	70c1      	strb	r1, [r0, #3]
 800f67c:	1d03      	adds	r3, r0, #4
 800f67e:	e7f1      	b.n	800f664 <__exponent+0x60>

0800f680 <_printf_float>:
 800f680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f684:	b08b      	sub	sp, #44	; 0x2c
 800f686:	460c      	mov	r4, r1
 800f688:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f68c:	4616      	mov	r6, r2
 800f68e:	461f      	mov	r7, r3
 800f690:	4605      	mov	r5, r0
 800f692:	f001 f9d7 	bl	8010a44 <_localeconv_r>
 800f696:	f8d0 b000 	ldr.w	fp, [r0]
 800f69a:	4658      	mov	r0, fp
 800f69c:	f7f0 fe20 	bl	80002e0 <strlen>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	9308      	str	r3, [sp, #32]
 800f6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800f6a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f6ac:	6822      	ldr	r2, [r4, #0]
 800f6ae:	3307      	adds	r3, #7
 800f6b0:	f023 0307 	bic.w	r3, r3, #7
 800f6b4:	f103 0108 	add.w	r1, r3, #8
 800f6b8:	f8c8 1000 	str.w	r1, [r8]
 800f6bc:	4682      	mov	sl, r0
 800f6be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f6c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f928 <_printf_float+0x2a8>
 800f6ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f6ce:	eeb0 6bc0 	vabs.f64	d6, d0
 800f6d2:	eeb4 6b47 	vcmp.f64	d6, d7
 800f6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6da:	dd24      	ble.n	800f726 <_printf_float+0xa6>
 800f6dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e4:	d502      	bpl.n	800f6ec <_printf_float+0x6c>
 800f6e6:	232d      	movs	r3, #45	; 0x2d
 800f6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6ec:	4b90      	ldr	r3, [pc, #576]	; (800f930 <_printf_float+0x2b0>)
 800f6ee:	4891      	ldr	r0, [pc, #580]	; (800f934 <_printf_float+0x2b4>)
 800f6f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f6f4:	bf94      	ite	ls
 800f6f6:	4698      	movls	r8, r3
 800f6f8:	4680      	movhi	r8, r0
 800f6fa:	2303      	movs	r3, #3
 800f6fc:	6123      	str	r3, [r4, #16]
 800f6fe:	f022 0204 	bic.w	r2, r2, #4
 800f702:	2300      	movs	r3, #0
 800f704:	6022      	str	r2, [r4, #0]
 800f706:	9304      	str	r3, [sp, #16]
 800f708:	9700      	str	r7, [sp, #0]
 800f70a:	4633      	mov	r3, r6
 800f70c:	aa09      	add	r2, sp, #36	; 0x24
 800f70e:	4621      	mov	r1, r4
 800f710:	4628      	mov	r0, r5
 800f712:	f000 f9d3 	bl	800fabc <_printf_common>
 800f716:	3001      	adds	r0, #1
 800f718:	f040 808a 	bne.w	800f830 <_printf_float+0x1b0>
 800f71c:	f04f 30ff 	mov.w	r0, #4294967295
 800f720:	b00b      	add	sp, #44	; 0x2c
 800f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f726:	eeb4 0b40 	vcmp.f64	d0, d0
 800f72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72e:	d709      	bvc.n	800f744 <_printf_float+0xc4>
 800f730:	ee10 3a90 	vmov	r3, s1
 800f734:	2b00      	cmp	r3, #0
 800f736:	bfbc      	itt	lt
 800f738:	232d      	movlt	r3, #45	; 0x2d
 800f73a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f73e:	487e      	ldr	r0, [pc, #504]	; (800f938 <_printf_float+0x2b8>)
 800f740:	4b7e      	ldr	r3, [pc, #504]	; (800f93c <_printf_float+0x2bc>)
 800f742:	e7d5      	b.n	800f6f0 <_printf_float+0x70>
 800f744:	6863      	ldr	r3, [r4, #4]
 800f746:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f74a:	9104      	str	r1, [sp, #16]
 800f74c:	1c59      	adds	r1, r3, #1
 800f74e:	d13c      	bne.n	800f7ca <_printf_float+0x14a>
 800f750:	2306      	movs	r3, #6
 800f752:	6063      	str	r3, [r4, #4]
 800f754:	2300      	movs	r3, #0
 800f756:	9303      	str	r3, [sp, #12]
 800f758:	ab08      	add	r3, sp, #32
 800f75a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f75e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f762:	ab07      	add	r3, sp, #28
 800f764:	6861      	ldr	r1, [r4, #4]
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	6022      	str	r2, [r4, #0]
 800f76a:	f10d 031b 	add.w	r3, sp, #27
 800f76e:	4628      	mov	r0, r5
 800f770:	f7ff fef6 	bl	800f560 <__cvt>
 800f774:	9b04      	ldr	r3, [sp, #16]
 800f776:	9907      	ldr	r1, [sp, #28]
 800f778:	2b47      	cmp	r3, #71	; 0x47
 800f77a:	4680      	mov	r8, r0
 800f77c:	d108      	bne.n	800f790 <_printf_float+0x110>
 800f77e:	1cc8      	adds	r0, r1, #3
 800f780:	db02      	blt.n	800f788 <_printf_float+0x108>
 800f782:	6863      	ldr	r3, [r4, #4]
 800f784:	4299      	cmp	r1, r3
 800f786:	dd41      	ble.n	800f80c <_printf_float+0x18c>
 800f788:	f1a9 0902 	sub.w	r9, r9, #2
 800f78c:	fa5f f989 	uxtb.w	r9, r9
 800f790:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f794:	d820      	bhi.n	800f7d8 <_printf_float+0x158>
 800f796:	3901      	subs	r1, #1
 800f798:	464a      	mov	r2, r9
 800f79a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f79e:	9107      	str	r1, [sp, #28]
 800f7a0:	f7ff ff30 	bl	800f604 <__exponent>
 800f7a4:	9a08      	ldr	r2, [sp, #32]
 800f7a6:	9004      	str	r0, [sp, #16]
 800f7a8:	1813      	adds	r3, r2, r0
 800f7aa:	2a01      	cmp	r2, #1
 800f7ac:	6123      	str	r3, [r4, #16]
 800f7ae:	dc02      	bgt.n	800f7b6 <_printf_float+0x136>
 800f7b0:	6822      	ldr	r2, [r4, #0]
 800f7b2:	07d2      	lsls	r2, r2, #31
 800f7b4:	d501      	bpl.n	800f7ba <_printf_float+0x13a>
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	6123      	str	r3, [r4, #16]
 800f7ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d0a2      	beq.n	800f708 <_printf_float+0x88>
 800f7c2:	232d      	movs	r3, #45	; 0x2d
 800f7c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7c8:	e79e      	b.n	800f708 <_printf_float+0x88>
 800f7ca:	9904      	ldr	r1, [sp, #16]
 800f7cc:	2947      	cmp	r1, #71	; 0x47
 800f7ce:	d1c1      	bne.n	800f754 <_printf_float+0xd4>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1bf      	bne.n	800f754 <_printf_float+0xd4>
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e7bc      	b.n	800f752 <_printf_float+0xd2>
 800f7d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f7dc:	d118      	bne.n	800f810 <_printf_float+0x190>
 800f7de:	2900      	cmp	r1, #0
 800f7e0:	6863      	ldr	r3, [r4, #4]
 800f7e2:	dd0b      	ble.n	800f7fc <_printf_float+0x17c>
 800f7e4:	6121      	str	r1, [r4, #16]
 800f7e6:	b913      	cbnz	r3, 800f7ee <_printf_float+0x16e>
 800f7e8:	6822      	ldr	r2, [r4, #0]
 800f7ea:	07d0      	lsls	r0, r2, #31
 800f7ec:	d502      	bpl.n	800f7f4 <_printf_float+0x174>
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	440b      	add	r3, r1
 800f7f2:	6123      	str	r3, [r4, #16]
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f7f8:	9304      	str	r3, [sp, #16]
 800f7fa:	e7de      	b.n	800f7ba <_printf_float+0x13a>
 800f7fc:	b913      	cbnz	r3, 800f804 <_printf_float+0x184>
 800f7fe:	6822      	ldr	r2, [r4, #0]
 800f800:	07d2      	lsls	r2, r2, #31
 800f802:	d501      	bpl.n	800f808 <_printf_float+0x188>
 800f804:	3302      	adds	r3, #2
 800f806:	e7f4      	b.n	800f7f2 <_printf_float+0x172>
 800f808:	2301      	movs	r3, #1
 800f80a:	e7f2      	b.n	800f7f2 <_printf_float+0x172>
 800f80c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f810:	9b08      	ldr	r3, [sp, #32]
 800f812:	4299      	cmp	r1, r3
 800f814:	db05      	blt.n	800f822 <_printf_float+0x1a2>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	6121      	str	r1, [r4, #16]
 800f81a:	07d8      	lsls	r0, r3, #31
 800f81c:	d5ea      	bpl.n	800f7f4 <_printf_float+0x174>
 800f81e:	1c4b      	adds	r3, r1, #1
 800f820:	e7e7      	b.n	800f7f2 <_printf_float+0x172>
 800f822:	2900      	cmp	r1, #0
 800f824:	bfd4      	ite	le
 800f826:	f1c1 0202 	rsble	r2, r1, #2
 800f82a:	2201      	movgt	r2, #1
 800f82c:	4413      	add	r3, r2
 800f82e:	e7e0      	b.n	800f7f2 <_printf_float+0x172>
 800f830:	6823      	ldr	r3, [r4, #0]
 800f832:	055a      	lsls	r2, r3, #21
 800f834:	d407      	bmi.n	800f846 <_printf_float+0x1c6>
 800f836:	6923      	ldr	r3, [r4, #16]
 800f838:	4642      	mov	r2, r8
 800f83a:	4631      	mov	r1, r6
 800f83c:	4628      	mov	r0, r5
 800f83e:	47b8      	blx	r7
 800f840:	3001      	adds	r0, #1
 800f842:	d12a      	bne.n	800f89a <_printf_float+0x21a>
 800f844:	e76a      	b.n	800f71c <_printf_float+0x9c>
 800f846:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f84a:	f240 80e2 	bls.w	800fa12 <_printf_float+0x392>
 800f84e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f852:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85a:	d133      	bne.n	800f8c4 <_printf_float+0x244>
 800f85c:	4a38      	ldr	r2, [pc, #224]	; (800f940 <_printf_float+0x2c0>)
 800f85e:	2301      	movs	r3, #1
 800f860:	4631      	mov	r1, r6
 800f862:	4628      	mov	r0, r5
 800f864:	47b8      	blx	r7
 800f866:	3001      	adds	r0, #1
 800f868:	f43f af58 	beq.w	800f71c <_printf_float+0x9c>
 800f86c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f870:	429a      	cmp	r2, r3
 800f872:	db02      	blt.n	800f87a <_printf_float+0x1fa>
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	07d8      	lsls	r0, r3, #31
 800f878:	d50f      	bpl.n	800f89a <_printf_float+0x21a>
 800f87a:	4653      	mov	r3, sl
 800f87c:	465a      	mov	r2, fp
 800f87e:	4631      	mov	r1, r6
 800f880:	4628      	mov	r0, r5
 800f882:	47b8      	blx	r7
 800f884:	3001      	adds	r0, #1
 800f886:	f43f af49 	beq.w	800f71c <_printf_float+0x9c>
 800f88a:	f04f 0800 	mov.w	r8, #0
 800f88e:	f104 091a 	add.w	r9, r4, #26
 800f892:	9b08      	ldr	r3, [sp, #32]
 800f894:	3b01      	subs	r3, #1
 800f896:	4543      	cmp	r3, r8
 800f898:	dc09      	bgt.n	800f8ae <_printf_float+0x22e>
 800f89a:	6823      	ldr	r3, [r4, #0]
 800f89c:	079b      	lsls	r3, r3, #30
 800f89e:	f100 8108 	bmi.w	800fab2 <_printf_float+0x432>
 800f8a2:	68e0      	ldr	r0, [r4, #12]
 800f8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a6:	4298      	cmp	r0, r3
 800f8a8:	bfb8      	it	lt
 800f8aa:	4618      	movlt	r0, r3
 800f8ac:	e738      	b.n	800f720 <_printf_float+0xa0>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	464a      	mov	r2, r9
 800f8b2:	4631      	mov	r1, r6
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	47b8      	blx	r7
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	f43f af2f 	beq.w	800f71c <_printf_float+0x9c>
 800f8be:	f108 0801 	add.w	r8, r8, #1
 800f8c2:	e7e6      	b.n	800f892 <_printf_float+0x212>
 800f8c4:	9b07      	ldr	r3, [sp, #28]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	dc3c      	bgt.n	800f944 <_printf_float+0x2c4>
 800f8ca:	4a1d      	ldr	r2, [pc, #116]	; (800f940 <_printf_float+0x2c0>)
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	4631      	mov	r1, r6
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	47b8      	blx	r7
 800f8d4:	3001      	adds	r0, #1
 800f8d6:	f43f af21 	beq.w	800f71c <_printf_float+0x9c>
 800f8da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	d102      	bne.n	800f8e8 <_printf_float+0x268>
 800f8e2:	6823      	ldr	r3, [r4, #0]
 800f8e4:	07d9      	lsls	r1, r3, #31
 800f8e6:	d5d8      	bpl.n	800f89a <_printf_float+0x21a>
 800f8e8:	4653      	mov	r3, sl
 800f8ea:	465a      	mov	r2, fp
 800f8ec:	4631      	mov	r1, r6
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	47b8      	blx	r7
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	f43f af12 	beq.w	800f71c <_printf_float+0x9c>
 800f8f8:	f04f 0900 	mov.w	r9, #0
 800f8fc:	f104 0a1a 	add.w	sl, r4, #26
 800f900:	9b07      	ldr	r3, [sp, #28]
 800f902:	425b      	negs	r3, r3
 800f904:	454b      	cmp	r3, r9
 800f906:	dc01      	bgt.n	800f90c <_printf_float+0x28c>
 800f908:	9b08      	ldr	r3, [sp, #32]
 800f90a:	e795      	b.n	800f838 <_printf_float+0x1b8>
 800f90c:	2301      	movs	r3, #1
 800f90e:	4652      	mov	r2, sl
 800f910:	4631      	mov	r1, r6
 800f912:	4628      	mov	r0, r5
 800f914:	47b8      	blx	r7
 800f916:	3001      	adds	r0, #1
 800f918:	f43f af00 	beq.w	800f71c <_printf_float+0x9c>
 800f91c:	f109 0901 	add.w	r9, r9, #1
 800f920:	e7ee      	b.n	800f900 <_printf_float+0x280>
 800f922:	bf00      	nop
 800f924:	f3af 8000 	nop.w
 800f928:	ffffffff 	.word	0xffffffff
 800f92c:	7fefffff 	.word	0x7fefffff
 800f930:	08012494 	.word	0x08012494
 800f934:	08012498 	.word	0x08012498
 800f938:	080124a0 	.word	0x080124a0
 800f93c:	0801249c 	.word	0x0801249c
 800f940:	080124a4 	.word	0x080124a4
 800f944:	9a08      	ldr	r2, [sp, #32]
 800f946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f948:	429a      	cmp	r2, r3
 800f94a:	bfa8      	it	ge
 800f94c:	461a      	movge	r2, r3
 800f94e:	2a00      	cmp	r2, #0
 800f950:	4691      	mov	r9, r2
 800f952:	dc38      	bgt.n	800f9c6 <_printf_float+0x346>
 800f954:	2300      	movs	r3, #0
 800f956:	9305      	str	r3, [sp, #20]
 800f958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f95c:	f104 021a 	add.w	r2, r4, #26
 800f960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f962:	9905      	ldr	r1, [sp, #20]
 800f964:	9304      	str	r3, [sp, #16]
 800f966:	eba3 0309 	sub.w	r3, r3, r9
 800f96a:	428b      	cmp	r3, r1
 800f96c:	dc33      	bgt.n	800f9d6 <_printf_float+0x356>
 800f96e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f972:	429a      	cmp	r2, r3
 800f974:	db3c      	blt.n	800f9f0 <_printf_float+0x370>
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	07da      	lsls	r2, r3, #31
 800f97a:	d439      	bmi.n	800f9f0 <_printf_float+0x370>
 800f97c:	9a08      	ldr	r2, [sp, #32]
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	9907      	ldr	r1, [sp, #28]
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	eba2 0901 	sub.w	r9, r2, r1
 800f988:	4599      	cmp	r9, r3
 800f98a:	bfa8      	it	ge
 800f98c:	4699      	movge	r9, r3
 800f98e:	f1b9 0f00 	cmp.w	r9, #0
 800f992:	dc35      	bgt.n	800fa00 <_printf_float+0x380>
 800f994:	f04f 0800 	mov.w	r8, #0
 800f998:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f99c:	f104 0a1a 	add.w	sl, r4, #26
 800f9a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f9a4:	1a9b      	subs	r3, r3, r2
 800f9a6:	eba3 0309 	sub.w	r3, r3, r9
 800f9aa:	4543      	cmp	r3, r8
 800f9ac:	f77f af75 	ble.w	800f89a <_printf_float+0x21a>
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	4652      	mov	r2, sl
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	47b8      	blx	r7
 800f9ba:	3001      	adds	r0, #1
 800f9bc:	f43f aeae 	beq.w	800f71c <_printf_float+0x9c>
 800f9c0:	f108 0801 	add.w	r8, r8, #1
 800f9c4:	e7ec      	b.n	800f9a0 <_printf_float+0x320>
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	4631      	mov	r1, r6
 800f9ca:	4642      	mov	r2, r8
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	47b8      	blx	r7
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	d1bf      	bne.n	800f954 <_printf_float+0x2d4>
 800f9d4:	e6a2      	b.n	800f71c <_printf_float+0x9c>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	4631      	mov	r1, r6
 800f9da:	4628      	mov	r0, r5
 800f9dc:	9204      	str	r2, [sp, #16]
 800f9de:	47b8      	blx	r7
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	f43f ae9b 	beq.w	800f71c <_printf_float+0x9c>
 800f9e6:	9b05      	ldr	r3, [sp, #20]
 800f9e8:	9a04      	ldr	r2, [sp, #16]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	9305      	str	r3, [sp, #20]
 800f9ee:	e7b7      	b.n	800f960 <_printf_float+0x2e0>
 800f9f0:	4653      	mov	r3, sl
 800f9f2:	465a      	mov	r2, fp
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	47b8      	blx	r7
 800f9fa:	3001      	adds	r0, #1
 800f9fc:	d1be      	bne.n	800f97c <_printf_float+0x2fc>
 800f9fe:	e68d      	b.n	800f71c <_printf_float+0x9c>
 800fa00:	9a04      	ldr	r2, [sp, #16]
 800fa02:	464b      	mov	r3, r9
 800fa04:	4442      	add	r2, r8
 800fa06:	4631      	mov	r1, r6
 800fa08:	4628      	mov	r0, r5
 800fa0a:	47b8      	blx	r7
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d1c1      	bne.n	800f994 <_printf_float+0x314>
 800fa10:	e684      	b.n	800f71c <_printf_float+0x9c>
 800fa12:	9a08      	ldr	r2, [sp, #32]
 800fa14:	2a01      	cmp	r2, #1
 800fa16:	dc01      	bgt.n	800fa1c <_printf_float+0x39c>
 800fa18:	07db      	lsls	r3, r3, #31
 800fa1a:	d537      	bpl.n	800fa8c <_printf_float+0x40c>
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	4642      	mov	r2, r8
 800fa20:	4631      	mov	r1, r6
 800fa22:	4628      	mov	r0, r5
 800fa24:	47b8      	blx	r7
 800fa26:	3001      	adds	r0, #1
 800fa28:	f43f ae78 	beq.w	800f71c <_printf_float+0x9c>
 800fa2c:	4653      	mov	r3, sl
 800fa2e:	465a      	mov	r2, fp
 800fa30:	4631      	mov	r1, r6
 800fa32:	4628      	mov	r0, r5
 800fa34:	47b8      	blx	r7
 800fa36:	3001      	adds	r0, #1
 800fa38:	f43f ae70 	beq.w	800f71c <_printf_float+0x9c>
 800fa3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fa40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa48:	d01b      	beq.n	800fa82 <_printf_float+0x402>
 800fa4a:	9b08      	ldr	r3, [sp, #32]
 800fa4c:	f108 0201 	add.w	r2, r8, #1
 800fa50:	3b01      	subs	r3, #1
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b8      	blx	r7
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d10e      	bne.n	800fa7a <_printf_float+0x3fa>
 800fa5c:	e65e      	b.n	800f71c <_printf_float+0x9c>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	464a      	mov	r2, r9
 800fa62:	4631      	mov	r1, r6
 800fa64:	4628      	mov	r0, r5
 800fa66:	47b8      	blx	r7
 800fa68:	3001      	adds	r0, #1
 800fa6a:	f43f ae57 	beq.w	800f71c <_printf_float+0x9c>
 800fa6e:	f108 0801 	add.w	r8, r8, #1
 800fa72:	9b08      	ldr	r3, [sp, #32]
 800fa74:	3b01      	subs	r3, #1
 800fa76:	4543      	cmp	r3, r8
 800fa78:	dcf1      	bgt.n	800fa5e <_printf_float+0x3de>
 800fa7a:	9b04      	ldr	r3, [sp, #16]
 800fa7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fa80:	e6db      	b.n	800f83a <_printf_float+0x1ba>
 800fa82:	f04f 0800 	mov.w	r8, #0
 800fa86:	f104 091a 	add.w	r9, r4, #26
 800fa8a:	e7f2      	b.n	800fa72 <_printf_float+0x3f2>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	4642      	mov	r2, r8
 800fa90:	e7df      	b.n	800fa52 <_printf_float+0x3d2>
 800fa92:	2301      	movs	r3, #1
 800fa94:	464a      	mov	r2, r9
 800fa96:	4631      	mov	r1, r6
 800fa98:	4628      	mov	r0, r5
 800fa9a:	47b8      	blx	r7
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	f43f ae3d 	beq.w	800f71c <_printf_float+0x9c>
 800faa2:	f108 0801 	add.w	r8, r8, #1
 800faa6:	68e3      	ldr	r3, [r4, #12]
 800faa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800faaa:	1a5b      	subs	r3, r3, r1
 800faac:	4543      	cmp	r3, r8
 800faae:	dcf0      	bgt.n	800fa92 <_printf_float+0x412>
 800fab0:	e6f7      	b.n	800f8a2 <_printf_float+0x222>
 800fab2:	f04f 0800 	mov.w	r8, #0
 800fab6:	f104 0919 	add.w	r9, r4, #25
 800faba:	e7f4      	b.n	800faa6 <_printf_float+0x426>

0800fabc <_printf_common>:
 800fabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac0:	4616      	mov	r6, r2
 800fac2:	4699      	mov	r9, r3
 800fac4:	688a      	ldr	r2, [r1, #8]
 800fac6:	690b      	ldr	r3, [r1, #16]
 800fac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800facc:	4293      	cmp	r3, r2
 800face:	bfb8      	it	lt
 800fad0:	4613      	movlt	r3, r2
 800fad2:	6033      	str	r3, [r6, #0]
 800fad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fad8:	4607      	mov	r7, r0
 800fada:	460c      	mov	r4, r1
 800fadc:	b10a      	cbz	r2, 800fae2 <_printf_common+0x26>
 800fade:	3301      	adds	r3, #1
 800fae0:	6033      	str	r3, [r6, #0]
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	0699      	lsls	r1, r3, #26
 800fae6:	bf42      	ittt	mi
 800fae8:	6833      	ldrmi	r3, [r6, #0]
 800faea:	3302      	addmi	r3, #2
 800faec:	6033      	strmi	r3, [r6, #0]
 800faee:	6825      	ldr	r5, [r4, #0]
 800faf0:	f015 0506 	ands.w	r5, r5, #6
 800faf4:	d106      	bne.n	800fb04 <_printf_common+0x48>
 800faf6:	f104 0a19 	add.w	sl, r4, #25
 800fafa:	68e3      	ldr	r3, [r4, #12]
 800fafc:	6832      	ldr	r2, [r6, #0]
 800fafe:	1a9b      	subs	r3, r3, r2
 800fb00:	42ab      	cmp	r3, r5
 800fb02:	dc26      	bgt.n	800fb52 <_printf_common+0x96>
 800fb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb08:	1e13      	subs	r3, r2, #0
 800fb0a:	6822      	ldr	r2, [r4, #0]
 800fb0c:	bf18      	it	ne
 800fb0e:	2301      	movne	r3, #1
 800fb10:	0692      	lsls	r2, r2, #26
 800fb12:	d42b      	bmi.n	800fb6c <_printf_common+0xb0>
 800fb14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb18:	4649      	mov	r1, r9
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	47c0      	blx	r8
 800fb1e:	3001      	adds	r0, #1
 800fb20:	d01e      	beq.n	800fb60 <_printf_common+0xa4>
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	68e5      	ldr	r5, [r4, #12]
 800fb26:	6832      	ldr	r2, [r6, #0]
 800fb28:	f003 0306 	and.w	r3, r3, #6
 800fb2c:	2b04      	cmp	r3, #4
 800fb2e:	bf08      	it	eq
 800fb30:	1aad      	subeq	r5, r5, r2
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	6922      	ldr	r2, [r4, #16]
 800fb36:	bf0c      	ite	eq
 800fb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb3c:	2500      	movne	r5, #0
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	bfc4      	itt	gt
 800fb42:	1a9b      	subgt	r3, r3, r2
 800fb44:	18ed      	addgt	r5, r5, r3
 800fb46:	2600      	movs	r6, #0
 800fb48:	341a      	adds	r4, #26
 800fb4a:	42b5      	cmp	r5, r6
 800fb4c:	d11a      	bne.n	800fb84 <_printf_common+0xc8>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	e008      	b.n	800fb64 <_printf_common+0xa8>
 800fb52:	2301      	movs	r3, #1
 800fb54:	4652      	mov	r2, sl
 800fb56:	4649      	mov	r1, r9
 800fb58:	4638      	mov	r0, r7
 800fb5a:	47c0      	blx	r8
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d103      	bne.n	800fb68 <_printf_common+0xac>
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb68:	3501      	adds	r5, #1
 800fb6a:	e7c6      	b.n	800fafa <_printf_common+0x3e>
 800fb6c:	18e1      	adds	r1, r4, r3
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	2030      	movs	r0, #48	; 0x30
 800fb72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb76:	4422      	add	r2, r4
 800fb78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb80:	3302      	adds	r3, #2
 800fb82:	e7c7      	b.n	800fb14 <_printf_common+0x58>
 800fb84:	2301      	movs	r3, #1
 800fb86:	4622      	mov	r2, r4
 800fb88:	4649      	mov	r1, r9
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	47c0      	blx	r8
 800fb8e:	3001      	adds	r0, #1
 800fb90:	d0e6      	beq.n	800fb60 <_printf_common+0xa4>
 800fb92:	3601      	adds	r6, #1
 800fb94:	e7d9      	b.n	800fb4a <_printf_common+0x8e>
	...

0800fb98 <_printf_i>:
 800fb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	4691      	mov	r9, r2
 800fba0:	7e27      	ldrb	r7, [r4, #24]
 800fba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fba4:	2f78      	cmp	r7, #120	; 0x78
 800fba6:	4680      	mov	r8, r0
 800fba8:	469a      	mov	sl, r3
 800fbaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbae:	d807      	bhi.n	800fbc0 <_printf_i+0x28>
 800fbb0:	2f62      	cmp	r7, #98	; 0x62
 800fbb2:	d80a      	bhi.n	800fbca <_printf_i+0x32>
 800fbb4:	2f00      	cmp	r7, #0
 800fbb6:	f000 80d8 	beq.w	800fd6a <_printf_i+0x1d2>
 800fbba:	2f58      	cmp	r7, #88	; 0x58
 800fbbc:	f000 80a3 	beq.w	800fd06 <_printf_i+0x16e>
 800fbc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fbc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fbc8:	e03a      	b.n	800fc40 <_printf_i+0xa8>
 800fbca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fbce:	2b15      	cmp	r3, #21
 800fbd0:	d8f6      	bhi.n	800fbc0 <_printf_i+0x28>
 800fbd2:	a001      	add	r0, pc, #4	; (adr r0, 800fbd8 <_printf_i+0x40>)
 800fbd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fbd8:	0800fc31 	.word	0x0800fc31
 800fbdc:	0800fc45 	.word	0x0800fc45
 800fbe0:	0800fbc1 	.word	0x0800fbc1
 800fbe4:	0800fbc1 	.word	0x0800fbc1
 800fbe8:	0800fbc1 	.word	0x0800fbc1
 800fbec:	0800fbc1 	.word	0x0800fbc1
 800fbf0:	0800fc45 	.word	0x0800fc45
 800fbf4:	0800fbc1 	.word	0x0800fbc1
 800fbf8:	0800fbc1 	.word	0x0800fbc1
 800fbfc:	0800fbc1 	.word	0x0800fbc1
 800fc00:	0800fbc1 	.word	0x0800fbc1
 800fc04:	0800fd51 	.word	0x0800fd51
 800fc08:	0800fc75 	.word	0x0800fc75
 800fc0c:	0800fd33 	.word	0x0800fd33
 800fc10:	0800fbc1 	.word	0x0800fbc1
 800fc14:	0800fbc1 	.word	0x0800fbc1
 800fc18:	0800fd73 	.word	0x0800fd73
 800fc1c:	0800fbc1 	.word	0x0800fbc1
 800fc20:	0800fc75 	.word	0x0800fc75
 800fc24:	0800fbc1 	.word	0x0800fbc1
 800fc28:	0800fbc1 	.word	0x0800fbc1
 800fc2c:	0800fd3b 	.word	0x0800fd3b
 800fc30:	680b      	ldr	r3, [r1, #0]
 800fc32:	1d1a      	adds	r2, r3, #4
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	600a      	str	r2, [r1, #0]
 800fc38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fc3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc40:	2301      	movs	r3, #1
 800fc42:	e0a3      	b.n	800fd8c <_printf_i+0x1f4>
 800fc44:	6825      	ldr	r5, [r4, #0]
 800fc46:	6808      	ldr	r0, [r1, #0]
 800fc48:	062e      	lsls	r6, r5, #24
 800fc4a:	f100 0304 	add.w	r3, r0, #4
 800fc4e:	d50a      	bpl.n	800fc66 <_printf_i+0xce>
 800fc50:	6805      	ldr	r5, [r0, #0]
 800fc52:	600b      	str	r3, [r1, #0]
 800fc54:	2d00      	cmp	r5, #0
 800fc56:	da03      	bge.n	800fc60 <_printf_i+0xc8>
 800fc58:	232d      	movs	r3, #45	; 0x2d
 800fc5a:	426d      	negs	r5, r5
 800fc5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc60:	485e      	ldr	r0, [pc, #376]	; (800fddc <_printf_i+0x244>)
 800fc62:	230a      	movs	r3, #10
 800fc64:	e019      	b.n	800fc9a <_printf_i+0x102>
 800fc66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fc6a:	6805      	ldr	r5, [r0, #0]
 800fc6c:	600b      	str	r3, [r1, #0]
 800fc6e:	bf18      	it	ne
 800fc70:	b22d      	sxthne	r5, r5
 800fc72:	e7ef      	b.n	800fc54 <_printf_i+0xbc>
 800fc74:	680b      	ldr	r3, [r1, #0]
 800fc76:	6825      	ldr	r5, [r4, #0]
 800fc78:	1d18      	adds	r0, r3, #4
 800fc7a:	6008      	str	r0, [r1, #0]
 800fc7c:	0628      	lsls	r0, r5, #24
 800fc7e:	d501      	bpl.n	800fc84 <_printf_i+0xec>
 800fc80:	681d      	ldr	r5, [r3, #0]
 800fc82:	e002      	b.n	800fc8a <_printf_i+0xf2>
 800fc84:	0669      	lsls	r1, r5, #25
 800fc86:	d5fb      	bpl.n	800fc80 <_printf_i+0xe8>
 800fc88:	881d      	ldrh	r5, [r3, #0]
 800fc8a:	4854      	ldr	r0, [pc, #336]	; (800fddc <_printf_i+0x244>)
 800fc8c:	2f6f      	cmp	r7, #111	; 0x6f
 800fc8e:	bf0c      	ite	eq
 800fc90:	2308      	moveq	r3, #8
 800fc92:	230a      	movne	r3, #10
 800fc94:	2100      	movs	r1, #0
 800fc96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc9a:	6866      	ldr	r6, [r4, #4]
 800fc9c:	60a6      	str	r6, [r4, #8]
 800fc9e:	2e00      	cmp	r6, #0
 800fca0:	bfa2      	ittt	ge
 800fca2:	6821      	ldrge	r1, [r4, #0]
 800fca4:	f021 0104 	bicge.w	r1, r1, #4
 800fca8:	6021      	strge	r1, [r4, #0]
 800fcaa:	b90d      	cbnz	r5, 800fcb0 <_printf_i+0x118>
 800fcac:	2e00      	cmp	r6, #0
 800fcae:	d04d      	beq.n	800fd4c <_printf_i+0x1b4>
 800fcb0:	4616      	mov	r6, r2
 800fcb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fcb6:	fb03 5711 	mls	r7, r3, r1, r5
 800fcba:	5dc7      	ldrb	r7, [r0, r7]
 800fcbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fcc0:	462f      	mov	r7, r5
 800fcc2:	42bb      	cmp	r3, r7
 800fcc4:	460d      	mov	r5, r1
 800fcc6:	d9f4      	bls.n	800fcb2 <_printf_i+0x11a>
 800fcc8:	2b08      	cmp	r3, #8
 800fcca:	d10b      	bne.n	800fce4 <_printf_i+0x14c>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	07df      	lsls	r7, r3, #31
 800fcd0:	d508      	bpl.n	800fce4 <_printf_i+0x14c>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	6861      	ldr	r1, [r4, #4]
 800fcd6:	4299      	cmp	r1, r3
 800fcd8:	bfde      	ittt	le
 800fcda:	2330      	movle	r3, #48	; 0x30
 800fcdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fce4:	1b92      	subs	r2, r2, r6
 800fce6:	6122      	str	r2, [r4, #16]
 800fce8:	f8cd a000 	str.w	sl, [sp]
 800fcec:	464b      	mov	r3, r9
 800fcee:	aa03      	add	r2, sp, #12
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f7ff fee2 	bl	800fabc <_printf_common>
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d14c      	bne.n	800fd96 <_printf_i+0x1fe>
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fd00:	b004      	add	sp, #16
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	4835      	ldr	r0, [pc, #212]	; (800fddc <_printf_i+0x244>)
 800fd08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	680e      	ldr	r6, [r1, #0]
 800fd10:	061f      	lsls	r7, r3, #24
 800fd12:	f856 5b04 	ldr.w	r5, [r6], #4
 800fd16:	600e      	str	r6, [r1, #0]
 800fd18:	d514      	bpl.n	800fd44 <_printf_i+0x1ac>
 800fd1a:	07d9      	lsls	r1, r3, #31
 800fd1c:	bf44      	itt	mi
 800fd1e:	f043 0320 	orrmi.w	r3, r3, #32
 800fd22:	6023      	strmi	r3, [r4, #0]
 800fd24:	b91d      	cbnz	r5, 800fd2e <_printf_i+0x196>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	f023 0320 	bic.w	r3, r3, #32
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	2310      	movs	r3, #16
 800fd30:	e7b0      	b.n	800fc94 <_printf_i+0xfc>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	f043 0320 	orr.w	r3, r3, #32
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	2378      	movs	r3, #120	; 0x78
 800fd3c:	4828      	ldr	r0, [pc, #160]	; (800fde0 <_printf_i+0x248>)
 800fd3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd42:	e7e3      	b.n	800fd0c <_printf_i+0x174>
 800fd44:	065e      	lsls	r6, r3, #25
 800fd46:	bf48      	it	mi
 800fd48:	b2ad      	uxthmi	r5, r5
 800fd4a:	e7e6      	b.n	800fd1a <_printf_i+0x182>
 800fd4c:	4616      	mov	r6, r2
 800fd4e:	e7bb      	b.n	800fcc8 <_printf_i+0x130>
 800fd50:	680b      	ldr	r3, [r1, #0]
 800fd52:	6826      	ldr	r6, [r4, #0]
 800fd54:	6960      	ldr	r0, [r4, #20]
 800fd56:	1d1d      	adds	r5, r3, #4
 800fd58:	600d      	str	r5, [r1, #0]
 800fd5a:	0635      	lsls	r5, r6, #24
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	d501      	bpl.n	800fd64 <_printf_i+0x1cc>
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	e002      	b.n	800fd6a <_printf_i+0x1d2>
 800fd64:	0671      	lsls	r1, r6, #25
 800fd66:	d5fb      	bpl.n	800fd60 <_printf_i+0x1c8>
 800fd68:	8018      	strh	r0, [r3, #0]
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	4616      	mov	r6, r2
 800fd70:	e7ba      	b.n	800fce8 <_printf_i+0x150>
 800fd72:	680b      	ldr	r3, [r1, #0]
 800fd74:	1d1a      	adds	r2, r3, #4
 800fd76:	600a      	str	r2, [r1, #0]
 800fd78:	681e      	ldr	r6, [r3, #0]
 800fd7a:	6862      	ldr	r2, [r4, #4]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	4630      	mov	r0, r6
 800fd80:	f7f0 fab6 	bl	80002f0 <memchr>
 800fd84:	b108      	cbz	r0, 800fd8a <_printf_i+0x1f2>
 800fd86:	1b80      	subs	r0, r0, r6
 800fd88:	6060      	str	r0, [r4, #4]
 800fd8a:	6863      	ldr	r3, [r4, #4]
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd94:	e7a8      	b.n	800fce8 <_printf_i+0x150>
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	4632      	mov	r2, r6
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	47d0      	blx	sl
 800fda0:	3001      	adds	r0, #1
 800fda2:	d0ab      	beq.n	800fcfc <_printf_i+0x164>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	079b      	lsls	r3, r3, #30
 800fda8:	d413      	bmi.n	800fdd2 <_printf_i+0x23a>
 800fdaa:	68e0      	ldr	r0, [r4, #12]
 800fdac:	9b03      	ldr	r3, [sp, #12]
 800fdae:	4298      	cmp	r0, r3
 800fdb0:	bfb8      	it	lt
 800fdb2:	4618      	movlt	r0, r3
 800fdb4:	e7a4      	b.n	800fd00 <_printf_i+0x168>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4632      	mov	r2, r6
 800fdba:	4649      	mov	r1, r9
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	47d0      	blx	sl
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d09b      	beq.n	800fcfc <_printf_i+0x164>
 800fdc4:	3501      	adds	r5, #1
 800fdc6:	68e3      	ldr	r3, [r4, #12]
 800fdc8:	9903      	ldr	r1, [sp, #12]
 800fdca:	1a5b      	subs	r3, r3, r1
 800fdcc:	42ab      	cmp	r3, r5
 800fdce:	dcf2      	bgt.n	800fdb6 <_printf_i+0x21e>
 800fdd0:	e7eb      	b.n	800fdaa <_printf_i+0x212>
 800fdd2:	2500      	movs	r5, #0
 800fdd4:	f104 0619 	add.w	r6, r4, #25
 800fdd8:	e7f5      	b.n	800fdc6 <_printf_i+0x22e>
 800fdda:	bf00      	nop
 800fddc:	080124a6 	.word	0x080124a6
 800fde0:	080124b7 	.word	0x080124b7

0800fde4 <siprintf>:
 800fde4:	b40e      	push	{r1, r2, r3}
 800fde6:	b500      	push	{lr}
 800fde8:	b09c      	sub	sp, #112	; 0x70
 800fdea:	ab1d      	add	r3, sp, #116	; 0x74
 800fdec:	9002      	str	r0, [sp, #8]
 800fdee:	9006      	str	r0, [sp, #24]
 800fdf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fdf4:	4809      	ldr	r0, [pc, #36]	; (800fe1c <siprintf+0x38>)
 800fdf6:	9107      	str	r1, [sp, #28]
 800fdf8:	9104      	str	r1, [sp, #16]
 800fdfa:	4909      	ldr	r1, [pc, #36]	; (800fe20 <siprintf+0x3c>)
 800fdfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe00:	9105      	str	r1, [sp, #20]
 800fe02:	6800      	ldr	r0, [r0, #0]
 800fe04:	9301      	str	r3, [sp, #4]
 800fe06:	a902      	add	r1, sp, #8
 800fe08:	f001 faca 	bl	80113a0 <_svfiprintf_r>
 800fe0c:	9b02      	ldr	r3, [sp, #8]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	701a      	strb	r2, [r3, #0]
 800fe12:	b01c      	add	sp, #112	; 0x70
 800fe14:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe18:	b003      	add	sp, #12
 800fe1a:	4770      	bx	lr
 800fe1c:	24000024 	.word	0x24000024
 800fe20:	ffff0208 	.word	0xffff0208

0800fe24 <quorem>:
 800fe24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	6903      	ldr	r3, [r0, #16]
 800fe2a:	690c      	ldr	r4, [r1, #16]
 800fe2c:	42a3      	cmp	r3, r4
 800fe2e:	4607      	mov	r7, r0
 800fe30:	f2c0 8081 	blt.w	800ff36 <quorem+0x112>
 800fe34:	3c01      	subs	r4, #1
 800fe36:	f101 0814 	add.w	r8, r1, #20
 800fe3a:	f100 0514 	add.w	r5, r0, #20
 800fe3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe42:	9301      	str	r3, [sp, #4]
 800fe44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe58:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe5c:	d331      	bcc.n	800fec2 <quorem+0x9e>
 800fe5e:	f04f 0e00 	mov.w	lr, #0
 800fe62:	4640      	mov	r0, r8
 800fe64:	46ac      	mov	ip, r5
 800fe66:	46f2      	mov	sl, lr
 800fe68:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe6c:	b293      	uxth	r3, r2
 800fe6e:	fb06 e303 	mla	r3, r6, r3, lr
 800fe72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	ebaa 0303 	sub.w	r3, sl, r3
 800fe7c:	0c12      	lsrs	r2, r2, #16
 800fe7e:	f8dc a000 	ldr.w	sl, [ip]
 800fe82:	fb06 e202 	mla	r2, r6, r2, lr
 800fe86:	fa13 f38a 	uxtah	r3, r3, sl
 800fe8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe8e:	fa1f fa82 	uxth.w	sl, r2
 800fe92:	f8dc 2000 	ldr.w	r2, [ip]
 800fe96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fe9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fea4:	4581      	cmp	r9, r0
 800fea6:	f84c 3b04 	str.w	r3, [ip], #4
 800feaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800feae:	d2db      	bcs.n	800fe68 <quorem+0x44>
 800feb0:	f855 300b 	ldr.w	r3, [r5, fp]
 800feb4:	b92b      	cbnz	r3, 800fec2 <quorem+0x9e>
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	3b04      	subs	r3, #4
 800feba:	429d      	cmp	r5, r3
 800febc:	461a      	mov	r2, r3
 800febe:	d32e      	bcc.n	800ff1e <quorem+0xfa>
 800fec0:	613c      	str	r4, [r7, #16]
 800fec2:	4638      	mov	r0, r7
 800fec4:	f001 f856 	bl	8010f74 <__mcmp>
 800fec8:	2800      	cmp	r0, #0
 800feca:	db24      	blt.n	800ff16 <quorem+0xf2>
 800fecc:	3601      	adds	r6, #1
 800fece:	4628      	mov	r0, r5
 800fed0:	f04f 0c00 	mov.w	ip, #0
 800fed4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fed8:	f8d0 e000 	ldr.w	lr, [r0]
 800fedc:	b293      	uxth	r3, r2
 800fede:	ebac 0303 	sub.w	r3, ip, r3
 800fee2:	0c12      	lsrs	r2, r2, #16
 800fee4:	fa13 f38e 	uxtah	r3, r3, lr
 800fee8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800feec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fef6:	45c1      	cmp	r9, r8
 800fef8:	f840 3b04 	str.w	r3, [r0], #4
 800fefc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ff00:	d2e8      	bcs.n	800fed4 <quorem+0xb0>
 800ff02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff0a:	b922      	cbnz	r2, 800ff16 <quorem+0xf2>
 800ff0c:	3b04      	subs	r3, #4
 800ff0e:	429d      	cmp	r5, r3
 800ff10:	461a      	mov	r2, r3
 800ff12:	d30a      	bcc.n	800ff2a <quorem+0x106>
 800ff14:	613c      	str	r4, [r7, #16]
 800ff16:	4630      	mov	r0, r6
 800ff18:	b003      	add	sp, #12
 800ff1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff1e:	6812      	ldr	r2, [r2, #0]
 800ff20:	3b04      	subs	r3, #4
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	d1cc      	bne.n	800fec0 <quorem+0x9c>
 800ff26:	3c01      	subs	r4, #1
 800ff28:	e7c7      	b.n	800feba <quorem+0x96>
 800ff2a:	6812      	ldr	r2, [r2, #0]
 800ff2c:	3b04      	subs	r3, #4
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	d1f0      	bne.n	800ff14 <quorem+0xf0>
 800ff32:	3c01      	subs	r4, #1
 800ff34:	e7eb      	b.n	800ff0e <quorem+0xea>
 800ff36:	2000      	movs	r0, #0
 800ff38:	e7ee      	b.n	800ff18 <quorem+0xf4>
 800ff3a:	0000      	movs	r0, r0
 800ff3c:	0000      	movs	r0, r0
	...

0800ff40 <_dtoa_r>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	ec59 8b10 	vmov	r8, r9, d0
 800ff48:	b095      	sub	sp, #84	; 0x54
 800ff4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff4c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ff4e:	9107      	str	r1, [sp, #28]
 800ff50:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ff54:	4606      	mov	r6, r0
 800ff56:	9209      	str	r2, [sp, #36]	; 0x24
 800ff58:	9310      	str	r3, [sp, #64]	; 0x40
 800ff5a:	b975      	cbnz	r5, 800ff7a <_dtoa_r+0x3a>
 800ff5c:	2010      	movs	r0, #16
 800ff5e:	f000 fd75 	bl	8010a4c <malloc>
 800ff62:	4602      	mov	r2, r0
 800ff64:	6270      	str	r0, [r6, #36]	; 0x24
 800ff66:	b920      	cbnz	r0, 800ff72 <_dtoa_r+0x32>
 800ff68:	4bab      	ldr	r3, [pc, #684]	; (8010218 <_dtoa_r+0x2d8>)
 800ff6a:	21ea      	movs	r1, #234	; 0xea
 800ff6c:	48ab      	ldr	r0, [pc, #684]	; (801021c <_dtoa_r+0x2dc>)
 800ff6e:	f001 fb27 	bl	80115c0 <__assert_func>
 800ff72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff76:	6005      	str	r5, [r0, #0]
 800ff78:	60c5      	str	r5, [r0, #12]
 800ff7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff7c:	6819      	ldr	r1, [r3, #0]
 800ff7e:	b151      	cbz	r1, 800ff96 <_dtoa_r+0x56>
 800ff80:	685a      	ldr	r2, [r3, #4]
 800ff82:	604a      	str	r2, [r1, #4]
 800ff84:	2301      	movs	r3, #1
 800ff86:	4093      	lsls	r3, r2
 800ff88:	608b      	str	r3, [r1, #8]
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f000 fdb4 	bl	8010af8 <_Bfree>
 800ff90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff92:	2200      	movs	r2, #0
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	f1b9 0300 	subs.w	r3, r9, #0
 800ff9a:	bfbb      	ittet	lt
 800ff9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ffa0:	9303      	strlt	r3, [sp, #12]
 800ffa2:	2300      	movge	r3, #0
 800ffa4:	2201      	movlt	r2, #1
 800ffa6:	bfac      	ite	ge
 800ffa8:	6023      	strge	r3, [r4, #0]
 800ffaa:	6022      	strlt	r2, [r4, #0]
 800ffac:	4b9c      	ldr	r3, [pc, #624]	; (8010220 <_dtoa_r+0x2e0>)
 800ffae:	9c03      	ldr	r4, [sp, #12]
 800ffb0:	43a3      	bics	r3, r4
 800ffb2:	d11a      	bne.n	800ffea <_dtoa_r+0xaa>
 800ffb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ffba:	6013      	str	r3, [r2, #0]
 800ffbc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ffc0:	ea53 0308 	orrs.w	r3, r3, r8
 800ffc4:	f000 8512 	beq.w	80109ec <_dtoa_r+0xaac>
 800ffc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ffca:	b953      	cbnz	r3, 800ffe2 <_dtoa_r+0xa2>
 800ffcc:	4b95      	ldr	r3, [pc, #596]	; (8010224 <_dtoa_r+0x2e4>)
 800ffce:	e01f      	b.n	8010010 <_dtoa_r+0xd0>
 800ffd0:	4b95      	ldr	r3, [pc, #596]	; (8010228 <_dtoa_r+0x2e8>)
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ffd8:	6013      	str	r3, [r2, #0]
 800ffda:	9800      	ldr	r0, [sp, #0]
 800ffdc:	b015      	add	sp, #84	; 0x54
 800ffde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe2:	4b90      	ldr	r3, [pc, #576]	; (8010224 <_dtoa_r+0x2e4>)
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	3303      	adds	r3, #3
 800ffe8:	e7f5      	b.n	800ffd6 <_dtoa_r+0x96>
 800ffea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fffa:	d10b      	bne.n	8010014 <_dtoa_r+0xd4>
 800fffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fffe:	2301      	movs	r3, #1
 8010000:	6013      	str	r3, [r2, #0]
 8010002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010004:	2b00      	cmp	r3, #0
 8010006:	f000 84ee 	beq.w	80109e6 <_dtoa_r+0xaa6>
 801000a:	4888      	ldr	r0, [pc, #544]	; (801022c <_dtoa_r+0x2ec>)
 801000c:	6018      	str	r0, [r3, #0]
 801000e:	1e43      	subs	r3, r0, #1
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	e7e2      	b.n	800ffda <_dtoa_r+0x9a>
 8010014:	a913      	add	r1, sp, #76	; 0x4c
 8010016:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801001a:	aa12      	add	r2, sp, #72	; 0x48
 801001c:	4630      	mov	r0, r6
 801001e:	f001 f84d 	bl	80110bc <__d2b>
 8010022:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010026:	4605      	mov	r5, r0
 8010028:	9812      	ldr	r0, [sp, #72]	; 0x48
 801002a:	2900      	cmp	r1, #0
 801002c:	d047      	beq.n	80100be <_dtoa_r+0x17e>
 801002e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010030:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010038:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801003c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010040:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010044:	2400      	movs	r4, #0
 8010046:	ec43 2b16 	vmov	d6, r2, r3
 801004a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801004e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010200 <_dtoa_r+0x2c0>
 8010052:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010056:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010208 <_dtoa_r+0x2c8>
 801005a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801005e:	eeb0 7b46 	vmov.f64	d7, d6
 8010062:	ee06 1a90 	vmov	s13, r1
 8010066:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801006a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010210 <_dtoa_r+0x2d0>
 801006e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010072:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010076:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801007a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007e:	ee16 ba90 	vmov	fp, s13
 8010082:	9411      	str	r4, [sp, #68]	; 0x44
 8010084:	d508      	bpl.n	8010098 <_dtoa_r+0x158>
 8010086:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801008a:	eeb4 6b47 	vcmp.f64	d6, d7
 801008e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010092:	bf18      	it	ne
 8010094:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010098:	f1bb 0f16 	cmp.w	fp, #22
 801009c:	d832      	bhi.n	8010104 <_dtoa_r+0x1c4>
 801009e:	4b64      	ldr	r3, [pc, #400]	; (8010230 <_dtoa_r+0x2f0>)
 80100a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80100a4:	ed93 7b00 	vldr	d7, [r3]
 80100a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80100ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b4:	d501      	bpl.n	80100ba <_dtoa_r+0x17a>
 80100b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80100ba:	2300      	movs	r3, #0
 80100bc:	e023      	b.n	8010106 <_dtoa_r+0x1c6>
 80100be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80100c0:	4401      	add	r1, r0
 80100c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80100c6:	2b20      	cmp	r3, #32
 80100c8:	bfc3      	ittte	gt
 80100ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80100ce:	fa04 f303 	lslgt.w	r3, r4, r3
 80100d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80100d6:	f1c3 0320 	rsble	r3, r3, #32
 80100da:	bfc6      	itte	gt
 80100dc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80100e0:	ea43 0308 	orrgt.w	r3, r3, r8
 80100e4:	fa08 f303 	lslle.w	r3, r8, r3
 80100e8:	ee07 3a90 	vmov	s15, r3
 80100ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80100f0:	3901      	subs	r1, #1
 80100f2:	ed8d 7b00 	vstr	d7, [sp]
 80100f6:	9c01      	ldr	r4, [sp, #4]
 80100f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010100:	2401      	movs	r4, #1
 8010102:	e7a0      	b.n	8010046 <_dtoa_r+0x106>
 8010104:	2301      	movs	r3, #1
 8010106:	930f      	str	r3, [sp, #60]	; 0x3c
 8010108:	1a43      	subs	r3, r0, r1
 801010a:	1e5a      	subs	r2, r3, #1
 801010c:	bf45      	ittet	mi
 801010e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010112:	9305      	strmi	r3, [sp, #20]
 8010114:	2300      	movpl	r3, #0
 8010116:	2300      	movmi	r3, #0
 8010118:	9206      	str	r2, [sp, #24]
 801011a:	bf54      	ite	pl
 801011c:	9305      	strpl	r3, [sp, #20]
 801011e:	9306      	strmi	r3, [sp, #24]
 8010120:	f1bb 0f00 	cmp.w	fp, #0
 8010124:	db18      	blt.n	8010158 <_dtoa_r+0x218>
 8010126:	9b06      	ldr	r3, [sp, #24]
 8010128:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801012c:	445b      	add	r3, fp
 801012e:	9306      	str	r3, [sp, #24]
 8010130:	2300      	movs	r3, #0
 8010132:	9a07      	ldr	r2, [sp, #28]
 8010134:	2a09      	cmp	r2, #9
 8010136:	d849      	bhi.n	80101cc <_dtoa_r+0x28c>
 8010138:	2a05      	cmp	r2, #5
 801013a:	bfc4      	itt	gt
 801013c:	3a04      	subgt	r2, #4
 801013e:	9207      	strgt	r2, [sp, #28]
 8010140:	9a07      	ldr	r2, [sp, #28]
 8010142:	f1a2 0202 	sub.w	r2, r2, #2
 8010146:	bfcc      	ite	gt
 8010148:	2400      	movgt	r4, #0
 801014a:	2401      	movle	r4, #1
 801014c:	2a03      	cmp	r2, #3
 801014e:	d848      	bhi.n	80101e2 <_dtoa_r+0x2a2>
 8010150:	e8df f002 	tbb	[pc, r2]
 8010154:	3a2c2e0b 	.word	0x3a2c2e0b
 8010158:	9b05      	ldr	r3, [sp, #20]
 801015a:	2200      	movs	r2, #0
 801015c:	eba3 030b 	sub.w	r3, r3, fp
 8010160:	9305      	str	r3, [sp, #20]
 8010162:	920e      	str	r2, [sp, #56]	; 0x38
 8010164:	f1cb 0300 	rsb	r3, fp, #0
 8010168:	e7e3      	b.n	8010132 <_dtoa_r+0x1f2>
 801016a:	2200      	movs	r2, #0
 801016c:	9208      	str	r2, [sp, #32]
 801016e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010170:	2a00      	cmp	r2, #0
 8010172:	dc39      	bgt.n	80101e8 <_dtoa_r+0x2a8>
 8010174:	f04f 0a01 	mov.w	sl, #1
 8010178:	46d1      	mov	r9, sl
 801017a:	4652      	mov	r2, sl
 801017c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010180:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010182:	2100      	movs	r1, #0
 8010184:	6079      	str	r1, [r7, #4]
 8010186:	2004      	movs	r0, #4
 8010188:	f100 0c14 	add.w	ip, r0, #20
 801018c:	4594      	cmp	ip, r2
 801018e:	6879      	ldr	r1, [r7, #4]
 8010190:	d92f      	bls.n	80101f2 <_dtoa_r+0x2b2>
 8010192:	4630      	mov	r0, r6
 8010194:	930c      	str	r3, [sp, #48]	; 0x30
 8010196:	f000 fc6f 	bl	8010a78 <_Balloc>
 801019a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801019c:	9000      	str	r0, [sp, #0]
 801019e:	4602      	mov	r2, r0
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d149      	bne.n	8010238 <_dtoa_r+0x2f8>
 80101a4:	4b23      	ldr	r3, [pc, #140]	; (8010234 <_dtoa_r+0x2f4>)
 80101a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80101aa:	e6df      	b.n	800ff6c <_dtoa_r+0x2c>
 80101ac:	2201      	movs	r2, #1
 80101ae:	e7dd      	b.n	801016c <_dtoa_r+0x22c>
 80101b0:	2200      	movs	r2, #0
 80101b2:	9208      	str	r2, [sp, #32]
 80101b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101b6:	eb0b 0a02 	add.w	sl, fp, r2
 80101ba:	f10a 0901 	add.w	r9, sl, #1
 80101be:	464a      	mov	r2, r9
 80101c0:	2a01      	cmp	r2, #1
 80101c2:	bfb8      	it	lt
 80101c4:	2201      	movlt	r2, #1
 80101c6:	e7db      	b.n	8010180 <_dtoa_r+0x240>
 80101c8:	2201      	movs	r2, #1
 80101ca:	e7f2      	b.n	80101b2 <_dtoa_r+0x272>
 80101cc:	2401      	movs	r4, #1
 80101ce:	2200      	movs	r2, #0
 80101d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80101d4:	f04f 3aff 	mov.w	sl, #4294967295
 80101d8:	2100      	movs	r1, #0
 80101da:	46d1      	mov	r9, sl
 80101dc:	2212      	movs	r2, #18
 80101de:	9109      	str	r1, [sp, #36]	; 0x24
 80101e0:	e7ce      	b.n	8010180 <_dtoa_r+0x240>
 80101e2:	2201      	movs	r2, #1
 80101e4:	9208      	str	r2, [sp, #32]
 80101e6:	e7f5      	b.n	80101d4 <_dtoa_r+0x294>
 80101e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80101ec:	46d1      	mov	r9, sl
 80101ee:	4652      	mov	r2, sl
 80101f0:	e7c6      	b.n	8010180 <_dtoa_r+0x240>
 80101f2:	3101      	adds	r1, #1
 80101f4:	6079      	str	r1, [r7, #4]
 80101f6:	0040      	lsls	r0, r0, #1
 80101f8:	e7c6      	b.n	8010188 <_dtoa_r+0x248>
 80101fa:	bf00      	nop
 80101fc:	f3af 8000 	nop.w
 8010200:	636f4361 	.word	0x636f4361
 8010204:	3fd287a7 	.word	0x3fd287a7
 8010208:	8b60c8b3 	.word	0x8b60c8b3
 801020c:	3fc68a28 	.word	0x3fc68a28
 8010210:	509f79fb 	.word	0x509f79fb
 8010214:	3fd34413 	.word	0x3fd34413
 8010218:	080124d5 	.word	0x080124d5
 801021c:	080124ec 	.word	0x080124ec
 8010220:	7ff00000 	.word	0x7ff00000
 8010224:	080124d1 	.word	0x080124d1
 8010228:	080124c8 	.word	0x080124c8
 801022c:	080124a5 	.word	0x080124a5
 8010230:	080125e8 	.word	0x080125e8
 8010234:	0801254b 	.word	0x0801254b
 8010238:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801023a:	9900      	ldr	r1, [sp, #0]
 801023c:	6011      	str	r1, [r2, #0]
 801023e:	f1b9 0f0e 	cmp.w	r9, #14
 8010242:	d872      	bhi.n	801032a <_dtoa_r+0x3ea>
 8010244:	2c00      	cmp	r4, #0
 8010246:	d070      	beq.n	801032a <_dtoa_r+0x3ea>
 8010248:	f1bb 0f00 	cmp.w	fp, #0
 801024c:	f340 80a6 	ble.w	801039c <_dtoa_r+0x45c>
 8010250:	49ca      	ldr	r1, [pc, #808]	; (801057c <_dtoa_r+0x63c>)
 8010252:	f00b 020f 	and.w	r2, fp, #15
 8010256:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801025a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801025e:	ed92 7b00 	vldr	d7, [r2]
 8010262:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010266:	f000 808d 	beq.w	8010384 <_dtoa_r+0x444>
 801026a:	4ac5      	ldr	r2, [pc, #788]	; (8010580 <_dtoa_r+0x640>)
 801026c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010270:	ed92 6b08 	vldr	d6, [r2, #32]
 8010274:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010278:	ed8d 6b02 	vstr	d6, [sp, #8]
 801027c:	f001 010f 	and.w	r1, r1, #15
 8010280:	2203      	movs	r2, #3
 8010282:	48bf      	ldr	r0, [pc, #764]	; (8010580 <_dtoa_r+0x640>)
 8010284:	2900      	cmp	r1, #0
 8010286:	d17f      	bne.n	8010388 <_dtoa_r+0x448>
 8010288:	ed9d 6b02 	vldr	d6, [sp, #8]
 801028c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010290:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010294:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010296:	2900      	cmp	r1, #0
 8010298:	f000 80b2 	beq.w	8010400 <_dtoa_r+0x4c0>
 801029c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80102a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80102a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ac:	f140 80a8 	bpl.w	8010400 <_dtoa_r+0x4c0>
 80102b0:	f1b9 0f00 	cmp.w	r9, #0
 80102b4:	f000 80a4 	beq.w	8010400 <_dtoa_r+0x4c0>
 80102b8:	f1ba 0f00 	cmp.w	sl, #0
 80102bc:	dd31      	ble.n	8010322 <_dtoa_r+0x3e2>
 80102be:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80102c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 80102ce:	3201      	adds	r2, #1
 80102d0:	4650      	mov	r0, sl
 80102d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80102d6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80102da:	ee07 2a90 	vmov	s15, r2
 80102de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80102e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80102e6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80102ea:	9c03      	ldr	r4, [sp, #12]
 80102ec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80102f0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80102f4:	2800      	cmp	r0, #0
 80102f6:	f040 8086 	bne.w	8010406 <_dtoa_r+0x4c6>
 80102fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80102fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010302:	ec42 1b17 	vmov	d7, r1, r2
 8010306:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030e:	f300 8272 	bgt.w	80107f6 <_dtoa_r+0x8b6>
 8010312:	eeb1 7b47 	vneg.f64	d7, d7
 8010316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031e:	f100 8267 	bmi.w	80107f0 <_dtoa_r+0x8b0>
 8010322:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010326:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801032a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801032c:	2a00      	cmp	r2, #0
 801032e:	f2c0 8129 	blt.w	8010584 <_dtoa_r+0x644>
 8010332:	f1bb 0f0e 	cmp.w	fp, #14
 8010336:	f300 8125 	bgt.w	8010584 <_dtoa_r+0x644>
 801033a:	4b90      	ldr	r3, [pc, #576]	; (801057c <_dtoa_r+0x63c>)
 801033c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010340:	ed93 6b00 	vldr	d6, [r3]
 8010344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010346:	2b00      	cmp	r3, #0
 8010348:	f280 80c3 	bge.w	80104d2 <_dtoa_r+0x592>
 801034c:	f1b9 0f00 	cmp.w	r9, #0
 8010350:	f300 80bf 	bgt.w	80104d2 <_dtoa_r+0x592>
 8010354:	f040 824c 	bne.w	80107f0 <_dtoa_r+0x8b0>
 8010358:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801035c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036c:	464c      	mov	r4, r9
 801036e:	464f      	mov	r7, r9
 8010370:	f280 8222 	bge.w	80107b8 <_dtoa_r+0x878>
 8010374:	f8dd 8000 	ldr.w	r8, [sp]
 8010378:	2331      	movs	r3, #49	; 0x31
 801037a:	f808 3b01 	strb.w	r3, [r8], #1
 801037e:	f10b 0b01 	add.w	fp, fp, #1
 8010382:	e21e      	b.n	80107c2 <_dtoa_r+0x882>
 8010384:	2202      	movs	r2, #2
 8010386:	e77c      	b.n	8010282 <_dtoa_r+0x342>
 8010388:	07cc      	lsls	r4, r1, #31
 801038a:	d504      	bpl.n	8010396 <_dtoa_r+0x456>
 801038c:	ed90 6b00 	vldr	d6, [r0]
 8010390:	3201      	adds	r2, #1
 8010392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010396:	1049      	asrs	r1, r1, #1
 8010398:	3008      	adds	r0, #8
 801039a:	e773      	b.n	8010284 <_dtoa_r+0x344>
 801039c:	d02e      	beq.n	80103fc <_dtoa_r+0x4bc>
 801039e:	f1cb 0100 	rsb	r1, fp, #0
 80103a2:	4a76      	ldr	r2, [pc, #472]	; (801057c <_dtoa_r+0x63c>)
 80103a4:	f001 000f 	and.w	r0, r1, #15
 80103a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80103ac:	ed92 7b00 	vldr	d7, [r2]
 80103b0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80103b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80103b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80103bc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80103c0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80103c4:	486e      	ldr	r0, [pc, #440]	; (8010580 <_dtoa_r+0x640>)
 80103c6:	1109      	asrs	r1, r1, #4
 80103c8:	2400      	movs	r4, #0
 80103ca:	2202      	movs	r2, #2
 80103cc:	b939      	cbnz	r1, 80103de <_dtoa_r+0x49e>
 80103ce:	2c00      	cmp	r4, #0
 80103d0:	f43f af60 	beq.w	8010294 <_dtoa_r+0x354>
 80103d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80103d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103dc:	e75a      	b.n	8010294 <_dtoa_r+0x354>
 80103de:	07cf      	lsls	r7, r1, #31
 80103e0:	d509      	bpl.n	80103f6 <_dtoa_r+0x4b6>
 80103e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80103e6:	ed90 7b00 	vldr	d7, [r0]
 80103ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80103ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80103f2:	3201      	adds	r2, #1
 80103f4:	2401      	movs	r4, #1
 80103f6:	1049      	asrs	r1, r1, #1
 80103f8:	3008      	adds	r0, #8
 80103fa:	e7e7      	b.n	80103cc <_dtoa_r+0x48c>
 80103fc:	2202      	movs	r2, #2
 80103fe:	e749      	b.n	8010294 <_dtoa_r+0x354>
 8010400:	465f      	mov	r7, fp
 8010402:	4648      	mov	r0, r9
 8010404:	e765      	b.n	80102d2 <_dtoa_r+0x392>
 8010406:	ec42 1b17 	vmov	d7, r1, r2
 801040a:	4a5c      	ldr	r2, [pc, #368]	; (801057c <_dtoa_r+0x63c>)
 801040c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010410:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010414:	9a00      	ldr	r2, [sp, #0]
 8010416:	1814      	adds	r4, r2, r0
 8010418:	9a08      	ldr	r2, [sp, #32]
 801041a:	b352      	cbz	r2, 8010472 <_dtoa_r+0x532>
 801041c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010420:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010424:	f8dd 8000 	ldr.w	r8, [sp]
 8010428:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801042c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010430:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010434:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010438:	ee14 2a90 	vmov	r2, s9
 801043c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010440:	3230      	adds	r2, #48	; 0x30
 8010442:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010446:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801044a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044e:	f808 2b01 	strb.w	r2, [r8], #1
 8010452:	d439      	bmi.n	80104c8 <_dtoa_r+0x588>
 8010454:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010458:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010460:	d472      	bmi.n	8010548 <_dtoa_r+0x608>
 8010462:	45a0      	cmp	r8, r4
 8010464:	f43f af5d 	beq.w	8010322 <_dtoa_r+0x3e2>
 8010468:	ee27 7b03 	vmul.f64	d7, d7, d3
 801046c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010470:	e7e0      	b.n	8010434 <_dtoa_r+0x4f4>
 8010472:	f8dd 8000 	ldr.w	r8, [sp]
 8010476:	ee27 7b04 	vmul.f64	d7, d7, d4
 801047a:	4621      	mov	r1, r4
 801047c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010480:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010484:	ee14 2a90 	vmov	r2, s9
 8010488:	3230      	adds	r2, #48	; 0x30
 801048a:	f808 2b01 	strb.w	r2, [r8], #1
 801048e:	45a0      	cmp	r8, r4
 8010490:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010494:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010498:	d118      	bne.n	80104cc <_dtoa_r+0x58c>
 801049a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801049e:	ee37 4b05 	vadd.f64	d4, d7, d5
 80104a2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	dc4d      	bgt.n	8010548 <_dtoa_r+0x608>
 80104ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80104b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b8:	f57f af33 	bpl.w	8010322 <_dtoa_r+0x3e2>
 80104bc:	4688      	mov	r8, r1
 80104be:	3901      	subs	r1, #1
 80104c0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80104c4:	2b30      	cmp	r3, #48	; 0x30
 80104c6:	d0f9      	beq.n	80104bc <_dtoa_r+0x57c>
 80104c8:	46bb      	mov	fp, r7
 80104ca:	e02a      	b.n	8010522 <_dtoa_r+0x5e2>
 80104cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80104d0:	e7d6      	b.n	8010480 <_dtoa_r+0x540>
 80104d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104d6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80104da:	f8dd 8000 	ldr.w	r8, [sp]
 80104de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80104e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80104e6:	ee15 3a10 	vmov	r3, s10
 80104ea:	3330      	adds	r3, #48	; 0x30
 80104ec:	f808 3b01 	strb.w	r3, [r8], #1
 80104f0:	9b00      	ldr	r3, [sp, #0]
 80104f2:	eba8 0303 	sub.w	r3, r8, r3
 80104f6:	4599      	cmp	r9, r3
 80104f8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80104fc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010500:	d133      	bne.n	801056a <_dtoa_r+0x62a>
 8010502:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010506:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801050a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801050e:	dc1a      	bgt.n	8010546 <_dtoa_r+0x606>
 8010510:	eeb4 7b46 	vcmp.f64	d7, d6
 8010514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010518:	d103      	bne.n	8010522 <_dtoa_r+0x5e2>
 801051a:	ee15 3a10 	vmov	r3, s10
 801051e:	07d9      	lsls	r1, r3, #31
 8010520:	d411      	bmi.n	8010546 <_dtoa_r+0x606>
 8010522:	4629      	mov	r1, r5
 8010524:	4630      	mov	r0, r6
 8010526:	f000 fae7 	bl	8010af8 <_Bfree>
 801052a:	2300      	movs	r3, #0
 801052c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801052e:	f888 3000 	strb.w	r3, [r8]
 8010532:	f10b 0301 	add.w	r3, fp, #1
 8010536:	6013      	str	r3, [r2, #0]
 8010538:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801053a:	2b00      	cmp	r3, #0
 801053c:	f43f ad4d 	beq.w	800ffda <_dtoa_r+0x9a>
 8010540:	f8c3 8000 	str.w	r8, [r3]
 8010544:	e549      	b.n	800ffda <_dtoa_r+0x9a>
 8010546:	465f      	mov	r7, fp
 8010548:	4643      	mov	r3, r8
 801054a:	4698      	mov	r8, r3
 801054c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010550:	2a39      	cmp	r2, #57	; 0x39
 8010552:	d106      	bne.n	8010562 <_dtoa_r+0x622>
 8010554:	9a00      	ldr	r2, [sp, #0]
 8010556:	429a      	cmp	r2, r3
 8010558:	d1f7      	bne.n	801054a <_dtoa_r+0x60a>
 801055a:	9900      	ldr	r1, [sp, #0]
 801055c:	2230      	movs	r2, #48	; 0x30
 801055e:	3701      	adds	r7, #1
 8010560:	700a      	strb	r2, [r1, #0]
 8010562:	781a      	ldrb	r2, [r3, #0]
 8010564:	3201      	adds	r2, #1
 8010566:	701a      	strb	r2, [r3, #0]
 8010568:	e7ae      	b.n	80104c8 <_dtoa_r+0x588>
 801056a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801056e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010576:	d1b2      	bne.n	80104de <_dtoa_r+0x59e>
 8010578:	e7d3      	b.n	8010522 <_dtoa_r+0x5e2>
 801057a:	bf00      	nop
 801057c:	080125e8 	.word	0x080125e8
 8010580:	080125c0 	.word	0x080125c0
 8010584:	9908      	ldr	r1, [sp, #32]
 8010586:	2900      	cmp	r1, #0
 8010588:	f000 80d1 	beq.w	801072e <_dtoa_r+0x7ee>
 801058c:	9907      	ldr	r1, [sp, #28]
 801058e:	2901      	cmp	r1, #1
 8010590:	f300 80b4 	bgt.w	80106fc <_dtoa_r+0x7bc>
 8010594:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010596:	2900      	cmp	r1, #0
 8010598:	f000 80ac 	beq.w	80106f4 <_dtoa_r+0x7b4>
 801059c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80105a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80105a4:	461c      	mov	r4, r3
 80105a6:	930a      	str	r3, [sp, #40]	; 0x28
 80105a8:	9b05      	ldr	r3, [sp, #20]
 80105aa:	4413      	add	r3, r2
 80105ac:	9305      	str	r3, [sp, #20]
 80105ae:	9b06      	ldr	r3, [sp, #24]
 80105b0:	2101      	movs	r1, #1
 80105b2:	4413      	add	r3, r2
 80105b4:	4630      	mov	r0, r6
 80105b6:	9306      	str	r3, [sp, #24]
 80105b8:	f000 fb5a 	bl	8010c70 <__i2b>
 80105bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105be:	4607      	mov	r7, r0
 80105c0:	f1b8 0f00 	cmp.w	r8, #0
 80105c4:	dd0d      	ble.n	80105e2 <_dtoa_r+0x6a2>
 80105c6:	9a06      	ldr	r2, [sp, #24]
 80105c8:	2a00      	cmp	r2, #0
 80105ca:	dd0a      	ble.n	80105e2 <_dtoa_r+0x6a2>
 80105cc:	4542      	cmp	r2, r8
 80105ce:	9905      	ldr	r1, [sp, #20]
 80105d0:	bfa8      	it	ge
 80105d2:	4642      	movge	r2, r8
 80105d4:	1a89      	subs	r1, r1, r2
 80105d6:	9105      	str	r1, [sp, #20]
 80105d8:	9906      	ldr	r1, [sp, #24]
 80105da:	eba8 0802 	sub.w	r8, r8, r2
 80105de:	1a8a      	subs	r2, r1, r2
 80105e0:	9206      	str	r2, [sp, #24]
 80105e2:	b303      	cbz	r3, 8010626 <_dtoa_r+0x6e6>
 80105e4:	9a08      	ldr	r2, [sp, #32]
 80105e6:	2a00      	cmp	r2, #0
 80105e8:	f000 80a6 	beq.w	8010738 <_dtoa_r+0x7f8>
 80105ec:	2c00      	cmp	r4, #0
 80105ee:	dd13      	ble.n	8010618 <_dtoa_r+0x6d8>
 80105f0:	4639      	mov	r1, r7
 80105f2:	4622      	mov	r2, r4
 80105f4:	4630      	mov	r0, r6
 80105f6:	930c      	str	r3, [sp, #48]	; 0x30
 80105f8:	f000 fbf6 	bl	8010de8 <__pow5mult>
 80105fc:	462a      	mov	r2, r5
 80105fe:	4601      	mov	r1, r0
 8010600:	4607      	mov	r7, r0
 8010602:	4630      	mov	r0, r6
 8010604:	f000 fb4a 	bl	8010c9c <__multiply>
 8010608:	4629      	mov	r1, r5
 801060a:	900a      	str	r0, [sp, #40]	; 0x28
 801060c:	4630      	mov	r0, r6
 801060e:	f000 fa73 	bl	8010af8 <_Bfree>
 8010612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010616:	4615      	mov	r5, r2
 8010618:	1b1a      	subs	r2, r3, r4
 801061a:	d004      	beq.n	8010626 <_dtoa_r+0x6e6>
 801061c:	4629      	mov	r1, r5
 801061e:	4630      	mov	r0, r6
 8010620:	f000 fbe2 	bl	8010de8 <__pow5mult>
 8010624:	4605      	mov	r5, r0
 8010626:	2101      	movs	r1, #1
 8010628:	4630      	mov	r0, r6
 801062a:	f000 fb21 	bl	8010c70 <__i2b>
 801062e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010630:	2b00      	cmp	r3, #0
 8010632:	4604      	mov	r4, r0
 8010634:	f340 8082 	ble.w	801073c <_dtoa_r+0x7fc>
 8010638:	461a      	mov	r2, r3
 801063a:	4601      	mov	r1, r0
 801063c:	4630      	mov	r0, r6
 801063e:	f000 fbd3 	bl	8010de8 <__pow5mult>
 8010642:	9b07      	ldr	r3, [sp, #28]
 8010644:	2b01      	cmp	r3, #1
 8010646:	4604      	mov	r4, r0
 8010648:	dd7b      	ble.n	8010742 <_dtoa_r+0x802>
 801064a:	2300      	movs	r3, #0
 801064c:	930a      	str	r3, [sp, #40]	; 0x28
 801064e:	6922      	ldr	r2, [r4, #16]
 8010650:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010654:	6910      	ldr	r0, [r2, #16]
 8010656:	f000 fabb 	bl	8010bd0 <__hi0bits>
 801065a:	f1c0 0020 	rsb	r0, r0, #32
 801065e:	9b06      	ldr	r3, [sp, #24]
 8010660:	4418      	add	r0, r3
 8010662:	f010 001f 	ands.w	r0, r0, #31
 8010666:	f000 808d 	beq.w	8010784 <_dtoa_r+0x844>
 801066a:	f1c0 0220 	rsb	r2, r0, #32
 801066e:	2a04      	cmp	r2, #4
 8010670:	f340 8086 	ble.w	8010780 <_dtoa_r+0x840>
 8010674:	f1c0 001c 	rsb	r0, r0, #28
 8010678:	9b05      	ldr	r3, [sp, #20]
 801067a:	4403      	add	r3, r0
 801067c:	9305      	str	r3, [sp, #20]
 801067e:	9b06      	ldr	r3, [sp, #24]
 8010680:	4403      	add	r3, r0
 8010682:	4480      	add	r8, r0
 8010684:	9306      	str	r3, [sp, #24]
 8010686:	9b05      	ldr	r3, [sp, #20]
 8010688:	2b00      	cmp	r3, #0
 801068a:	dd05      	ble.n	8010698 <_dtoa_r+0x758>
 801068c:	4629      	mov	r1, r5
 801068e:	461a      	mov	r2, r3
 8010690:	4630      	mov	r0, r6
 8010692:	f000 fc03 	bl	8010e9c <__lshift>
 8010696:	4605      	mov	r5, r0
 8010698:	9b06      	ldr	r3, [sp, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	dd05      	ble.n	80106aa <_dtoa_r+0x76a>
 801069e:	4621      	mov	r1, r4
 80106a0:	461a      	mov	r2, r3
 80106a2:	4630      	mov	r0, r6
 80106a4:	f000 fbfa 	bl	8010e9c <__lshift>
 80106a8:	4604      	mov	r4, r0
 80106aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d06b      	beq.n	8010788 <_dtoa_r+0x848>
 80106b0:	4621      	mov	r1, r4
 80106b2:	4628      	mov	r0, r5
 80106b4:	f000 fc5e 	bl	8010f74 <__mcmp>
 80106b8:	2800      	cmp	r0, #0
 80106ba:	da65      	bge.n	8010788 <_dtoa_r+0x848>
 80106bc:	2300      	movs	r3, #0
 80106be:	4629      	mov	r1, r5
 80106c0:	220a      	movs	r2, #10
 80106c2:	4630      	mov	r0, r6
 80106c4:	f000 fa3a 	bl	8010b3c <__multadd>
 80106c8:	9b08      	ldr	r3, [sp, #32]
 80106ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106ce:	4605      	mov	r5, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 8192 	beq.w	80109fa <_dtoa_r+0xaba>
 80106d6:	4639      	mov	r1, r7
 80106d8:	2300      	movs	r3, #0
 80106da:	220a      	movs	r2, #10
 80106dc:	4630      	mov	r0, r6
 80106de:	f000 fa2d 	bl	8010b3c <__multadd>
 80106e2:	f1ba 0f00 	cmp.w	sl, #0
 80106e6:	4607      	mov	r7, r0
 80106e8:	f300 808e 	bgt.w	8010808 <_dtoa_r+0x8c8>
 80106ec:	9b07      	ldr	r3, [sp, #28]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	dc51      	bgt.n	8010796 <_dtoa_r+0x856>
 80106f2:	e089      	b.n	8010808 <_dtoa_r+0x8c8>
 80106f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80106f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80106fa:	e751      	b.n	80105a0 <_dtoa_r+0x660>
 80106fc:	f109 34ff 	add.w	r4, r9, #4294967295
 8010700:	42a3      	cmp	r3, r4
 8010702:	bfbf      	itttt	lt
 8010704:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8010706:	1ae3      	sublt	r3, r4, r3
 8010708:	18d2      	addlt	r2, r2, r3
 801070a:	4613      	movlt	r3, r2
 801070c:	bfb7      	itett	lt
 801070e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010710:	1b1c      	subge	r4, r3, r4
 8010712:	4623      	movlt	r3, r4
 8010714:	2400      	movlt	r4, #0
 8010716:	f1b9 0f00 	cmp.w	r9, #0
 801071a:	bfb5      	itete	lt
 801071c:	9a05      	ldrlt	r2, [sp, #20]
 801071e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8010722:	eba2 0809 	sublt.w	r8, r2, r9
 8010726:	464a      	movge	r2, r9
 8010728:	bfb8      	it	lt
 801072a:	2200      	movlt	r2, #0
 801072c:	e73b      	b.n	80105a6 <_dtoa_r+0x666>
 801072e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010732:	9f08      	ldr	r7, [sp, #32]
 8010734:	461c      	mov	r4, r3
 8010736:	e743      	b.n	80105c0 <_dtoa_r+0x680>
 8010738:	461a      	mov	r2, r3
 801073a:	e76f      	b.n	801061c <_dtoa_r+0x6dc>
 801073c:	9b07      	ldr	r3, [sp, #28]
 801073e:	2b01      	cmp	r3, #1
 8010740:	dc18      	bgt.n	8010774 <_dtoa_r+0x834>
 8010742:	9b02      	ldr	r3, [sp, #8]
 8010744:	b9b3      	cbnz	r3, 8010774 <_dtoa_r+0x834>
 8010746:	9b03      	ldr	r3, [sp, #12]
 8010748:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801074c:	b9a2      	cbnz	r2, 8010778 <_dtoa_r+0x838>
 801074e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010752:	0d12      	lsrs	r2, r2, #20
 8010754:	0512      	lsls	r2, r2, #20
 8010756:	b18a      	cbz	r2, 801077c <_dtoa_r+0x83c>
 8010758:	9b05      	ldr	r3, [sp, #20]
 801075a:	3301      	adds	r3, #1
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	9b06      	ldr	r3, [sp, #24]
 8010760:	3301      	adds	r3, #1
 8010762:	9306      	str	r3, [sp, #24]
 8010764:	2301      	movs	r3, #1
 8010766:	930a      	str	r3, [sp, #40]	; 0x28
 8010768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801076a:	2b00      	cmp	r3, #0
 801076c:	f47f af6f 	bne.w	801064e <_dtoa_r+0x70e>
 8010770:	2001      	movs	r0, #1
 8010772:	e774      	b.n	801065e <_dtoa_r+0x71e>
 8010774:	2300      	movs	r3, #0
 8010776:	e7f6      	b.n	8010766 <_dtoa_r+0x826>
 8010778:	9b02      	ldr	r3, [sp, #8]
 801077a:	e7f4      	b.n	8010766 <_dtoa_r+0x826>
 801077c:	920a      	str	r2, [sp, #40]	; 0x28
 801077e:	e7f3      	b.n	8010768 <_dtoa_r+0x828>
 8010780:	d081      	beq.n	8010686 <_dtoa_r+0x746>
 8010782:	4610      	mov	r0, r2
 8010784:	301c      	adds	r0, #28
 8010786:	e777      	b.n	8010678 <_dtoa_r+0x738>
 8010788:	f1b9 0f00 	cmp.w	r9, #0
 801078c:	dc37      	bgt.n	80107fe <_dtoa_r+0x8be>
 801078e:	9b07      	ldr	r3, [sp, #28]
 8010790:	2b02      	cmp	r3, #2
 8010792:	dd34      	ble.n	80107fe <_dtoa_r+0x8be>
 8010794:	46ca      	mov	sl, r9
 8010796:	f1ba 0f00 	cmp.w	sl, #0
 801079a:	d10d      	bne.n	80107b8 <_dtoa_r+0x878>
 801079c:	4621      	mov	r1, r4
 801079e:	4653      	mov	r3, sl
 80107a0:	2205      	movs	r2, #5
 80107a2:	4630      	mov	r0, r6
 80107a4:	f000 f9ca 	bl	8010b3c <__multadd>
 80107a8:	4601      	mov	r1, r0
 80107aa:	4604      	mov	r4, r0
 80107ac:	4628      	mov	r0, r5
 80107ae:	f000 fbe1 	bl	8010f74 <__mcmp>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	f73f adde 	bgt.w	8010374 <_dtoa_r+0x434>
 80107b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ba:	f8dd 8000 	ldr.w	r8, [sp]
 80107be:	ea6f 0b03 	mvn.w	fp, r3
 80107c2:	f04f 0900 	mov.w	r9, #0
 80107c6:	4621      	mov	r1, r4
 80107c8:	4630      	mov	r0, r6
 80107ca:	f000 f995 	bl	8010af8 <_Bfree>
 80107ce:	2f00      	cmp	r7, #0
 80107d0:	f43f aea7 	beq.w	8010522 <_dtoa_r+0x5e2>
 80107d4:	f1b9 0f00 	cmp.w	r9, #0
 80107d8:	d005      	beq.n	80107e6 <_dtoa_r+0x8a6>
 80107da:	45b9      	cmp	r9, r7
 80107dc:	d003      	beq.n	80107e6 <_dtoa_r+0x8a6>
 80107de:	4649      	mov	r1, r9
 80107e0:	4630      	mov	r0, r6
 80107e2:	f000 f989 	bl	8010af8 <_Bfree>
 80107e6:	4639      	mov	r1, r7
 80107e8:	4630      	mov	r0, r6
 80107ea:	f000 f985 	bl	8010af8 <_Bfree>
 80107ee:	e698      	b.n	8010522 <_dtoa_r+0x5e2>
 80107f0:	2400      	movs	r4, #0
 80107f2:	4627      	mov	r7, r4
 80107f4:	e7e0      	b.n	80107b8 <_dtoa_r+0x878>
 80107f6:	46bb      	mov	fp, r7
 80107f8:	4604      	mov	r4, r0
 80107fa:	4607      	mov	r7, r0
 80107fc:	e5ba      	b.n	8010374 <_dtoa_r+0x434>
 80107fe:	9b08      	ldr	r3, [sp, #32]
 8010800:	46ca      	mov	sl, r9
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 8100 	beq.w	8010a08 <_dtoa_r+0xac8>
 8010808:	f1b8 0f00 	cmp.w	r8, #0
 801080c:	dd05      	ble.n	801081a <_dtoa_r+0x8da>
 801080e:	4639      	mov	r1, r7
 8010810:	4642      	mov	r2, r8
 8010812:	4630      	mov	r0, r6
 8010814:	f000 fb42 	bl	8010e9c <__lshift>
 8010818:	4607      	mov	r7, r0
 801081a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801081c:	2b00      	cmp	r3, #0
 801081e:	d05d      	beq.n	80108dc <_dtoa_r+0x99c>
 8010820:	6879      	ldr	r1, [r7, #4]
 8010822:	4630      	mov	r0, r6
 8010824:	f000 f928 	bl	8010a78 <_Balloc>
 8010828:	4680      	mov	r8, r0
 801082a:	b928      	cbnz	r0, 8010838 <_dtoa_r+0x8f8>
 801082c:	4b82      	ldr	r3, [pc, #520]	; (8010a38 <_dtoa_r+0xaf8>)
 801082e:	4602      	mov	r2, r0
 8010830:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010834:	f7ff bb9a 	b.w	800ff6c <_dtoa_r+0x2c>
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	3202      	adds	r2, #2
 801083c:	0092      	lsls	r2, r2, #2
 801083e:	f107 010c 	add.w	r1, r7, #12
 8010842:	300c      	adds	r0, #12
 8010844:	f000 f90a 	bl	8010a5c <memcpy>
 8010848:	2201      	movs	r2, #1
 801084a:	4641      	mov	r1, r8
 801084c:	4630      	mov	r0, r6
 801084e:	f000 fb25 	bl	8010e9c <__lshift>
 8010852:	9b00      	ldr	r3, [sp, #0]
 8010854:	3301      	adds	r3, #1
 8010856:	9305      	str	r3, [sp, #20]
 8010858:	9b00      	ldr	r3, [sp, #0]
 801085a:	4453      	add	r3, sl
 801085c:	9309      	str	r3, [sp, #36]	; 0x24
 801085e:	9b02      	ldr	r3, [sp, #8]
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	46b9      	mov	r9, r7
 8010866:	9308      	str	r3, [sp, #32]
 8010868:	4607      	mov	r7, r0
 801086a:	9b05      	ldr	r3, [sp, #20]
 801086c:	4621      	mov	r1, r4
 801086e:	3b01      	subs	r3, #1
 8010870:	4628      	mov	r0, r5
 8010872:	9302      	str	r3, [sp, #8]
 8010874:	f7ff fad6 	bl	800fe24 <quorem>
 8010878:	4603      	mov	r3, r0
 801087a:	3330      	adds	r3, #48	; 0x30
 801087c:	9006      	str	r0, [sp, #24]
 801087e:	4649      	mov	r1, r9
 8010880:	4628      	mov	r0, r5
 8010882:	930a      	str	r3, [sp, #40]	; 0x28
 8010884:	f000 fb76 	bl	8010f74 <__mcmp>
 8010888:	463a      	mov	r2, r7
 801088a:	4682      	mov	sl, r0
 801088c:	4621      	mov	r1, r4
 801088e:	4630      	mov	r0, r6
 8010890:	f000 fb8c 	bl	8010fac <__mdiff>
 8010894:	68c2      	ldr	r2, [r0, #12]
 8010896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010898:	4680      	mov	r8, r0
 801089a:	bb0a      	cbnz	r2, 80108e0 <_dtoa_r+0x9a0>
 801089c:	4601      	mov	r1, r0
 801089e:	4628      	mov	r0, r5
 80108a0:	f000 fb68 	bl	8010f74 <__mcmp>
 80108a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108a6:	4602      	mov	r2, r0
 80108a8:	4641      	mov	r1, r8
 80108aa:	4630      	mov	r0, r6
 80108ac:	920e      	str	r2, [sp, #56]	; 0x38
 80108ae:	930a      	str	r3, [sp, #40]	; 0x28
 80108b0:	f000 f922 	bl	8010af8 <_Bfree>
 80108b4:	9b07      	ldr	r3, [sp, #28]
 80108b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80108bc:	ea43 0102 	orr.w	r1, r3, r2
 80108c0:	9b08      	ldr	r3, [sp, #32]
 80108c2:	430b      	orrs	r3, r1
 80108c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108c6:	d10d      	bne.n	80108e4 <_dtoa_r+0x9a4>
 80108c8:	2b39      	cmp	r3, #57	; 0x39
 80108ca:	d029      	beq.n	8010920 <_dtoa_r+0x9e0>
 80108cc:	f1ba 0f00 	cmp.w	sl, #0
 80108d0:	dd01      	ble.n	80108d6 <_dtoa_r+0x996>
 80108d2:	9b06      	ldr	r3, [sp, #24]
 80108d4:	3331      	adds	r3, #49	; 0x31
 80108d6:	9a02      	ldr	r2, [sp, #8]
 80108d8:	7013      	strb	r3, [r2, #0]
 80108da:	e774      	b.n	80107c6 <_dtoa_r+0x886>
 80108dc:	4638      	mov	r0, r7
 80108de:	e7b8      	b.n	8010852 <_dtoa_r+0x912>
 80108e0:	2201      	movs	r2, #1
 80108e2:	e7e1      	b.n	80108a8 <_dtoa_r+0x968>
 80108e4:	f1ba 0f00 	cmp.w	sl, #0
 80108e8:	db06      	blt.n	80108f8 <_dtoa_r+0x9b8>
 80108ea:	9907      	ldr	r1, [sp, #28]
 80108ec:	ea41 0a0a 	orr.w	sl, r1, sl
 80108f0:	9908      	ldr	r1, [sp, #32]
 80108f2:	ea5a 0101 	orrs.w	r1, sl, r1
 80108f6:	d120      	bne.n	801093a <_dtoa_r+0x9fa>
 80108f8:	2a00      	cmp	r2, #0
 80108fa:	ddec      	ble.n	80108d6 <_dtoa_r+0x996>
 80108fc:	4629      	mov	r1, r5
 80108fe:	2201      	movs	r2, #1
 8010900:	4630      	mov	r0, r6
 8010902:	9305      	str	r3, [sp, #20]
 8010904:	f000 faca 	bl	8010e9c <__lshift>
 8010908:	4621      	mov	r1, r4
 801090a:	4605      	mov	r5, r0
 801090c:	f000 fb32 	bl	8010f74 <__mcmp>
 8010910:	2800      	cmp	r0, #0
 8010912:	9b05      	ldr	r3, [sp, #20]
 8010914:	dc02      	bgt.n	801091c <_dtoa_r+0x9dc>
 8010916:	d1de      	bne.n	80108d6 <_dtoa_r+0x996>
 8010918:	07da      	lsls	r2, r3, #31
 801091a:	d5dc      	bpl.n	80108d6 <_dtoa_r+0x996>
 801091c:	2b39      	cmp	r3, #57	; 0x39
 801091e:	d1d8      	bne.n	80108d2 <_dtoa_r+0x992>
 8010920:	9a02      	ldr	r2, [sp, #8]
 8010922:	2339      	movs	r3, #57	; 0x39
 8010924:	7013      	strb	r3, [r2, #0]
 8010926:	4643      	mov	r3, r8
 8010928:	4698      	mov	r8, r3
 801092a:	3b01      	subs	r3, #1
 801092c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010930:	2a39      	cmp	r2, #57	; 0x39
 8010932:	d051      	beq.n	80109d8 <_dtoa_r+0xa98>
 8010934:	3201      	adds	r2, #1
 8010936:	701a      	strb	r2, [r3, #0]
 8010938:	e745      	b.n	80107c6 <_dtoa_r+0x886>
 801093a:	2a00      	cmp	r2, #0
 801093c:	dd03      	ble.n	8010946 <_dtoa_r+0xa06>
 801093e:	2b39      	cmp	r3, #57	; 0x39
 8010940:	d0ee      	beq.n	8010920 <_dtoa_r+0x9e0>
 8010942:	3301      	adds	r3, #1
 8010944:	e7c7      	b.n	80108d6 <_dtoa_r+0x996>
 8010946:	9a05      	ldr	r2, [sp, #20]
 8010948:	9909      	ldr	r1, [sp, #36]	; 0x24
 801094a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801094e:	428a      	cmp	r2, r1
 8010950:	d02b      	beq.n	80109aa <_dtoa_r+0xa6a>
 8010952:	4629      	mov	r1, r5
 8010954:	2300      	movs	r3, #0
 8010956:	220a      	movs	r2, #10
 8010958:	4630      	mov	r0, r6
 801095a:	f000 f8ef 	bl	8010b3c <__multadd>
 801095e:	45b9      	cmp	r9, r7
 8010960:	4605      	mov	r5, r0
 8010962:	f04f 0300 	mov.w	r3, #0
 8010966:	f04f 020a 	mov.w	r2, #10
 801096a:	4649      	mov	r1, r9
 801096c:	4630      	mov	r0, r6
 801096e:	d107      	bne.n	8010980 <_dtoa_r+0xa40>
 8010970:	f000 f8e4 	bl	8010b3c <__multadd>
 8010974:	4681      	mov	r9, r0
 8010976:	4607      	mov	r7, r0
 8010978:	9b05      	ldr	r3, [sp, #20]
 801097a:	3301      	adds	r3, #1
 801097c:	9305      	str	r3, [sp, #20]
 801097e:	e774      	b.n	801086a <_dtoa_r+0x92a>
 8010980:	f000 f8dc 	bl	8010b3c <__multadd>
 8010984:	4639      	mov	r1, r7
 8010986:	4681      	mov	r9, r0
 8010988:	2300      	movs	r3, #0
 801098a:	220a      	movs	r2, #10
 801098c:	4630      	mov	r0, r6
 801098e:	f000 f8d5 	bl	8010b3c <__multadd>
 8010992:	4607      	mov	r7, r0
 8010994:	e7f0      	b.n	8010978 <_dtoa_r+0xa38>
 8010996:	f1ba 0f00 	cmp.w	sl, #0
 801099a:	9a00      	ldr	r2, [sp, #0]
 801099c:	bfcc      	ite	gt
 801099e:	46d0      	movgt	r8, sl
 80109a0:	f04f 0801 	movle.w	r8, #1
 80109a4:	4490      	add	r8, r2
 80109a6:	f04f 0900 	mov.w	r9, #0
 80109aa:	4629      	mov	r1, r5
 80109ac:	2201      	movs	r2, #1
 80109ae:	4630      	mov	r0, r6
 80109b0:	9302      	str	r3, [sp, #8]
 80109b2:	f000 fa73 	bl	8010e9c <__lshift>
 80109b6:	4621      	mov	r1, r4
 80109b8:	4605      	mov	r5, r0
 80109ba:	f000 fadb 	bl	8010f74 <__mcmp>
 80109be:	2800      	cmp	r0, #0
 80109c0:	dcb1      	bgt.n	8010926 <_dtoa_r+0x9e6>
 80109c2:	d102      	bne.n	80109ca <_dtoa_r+0xa8a>
 80109c4:	9b02      	ldr	r3, [sp, #8]
 80109c6:	07db      	lsls	r3, r3, #31
 80109c8:	d4ad      	bmi.n	8010926 <_dtoa_r+0x9e6>
 80109ca:	4643      	mov	r3, r8
 80109cc:	4698      	mov	r8, r3
 80109ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109d2:	2a30      	cmp	r2, #48	; 0x30
 80109d4:	d0fa      	beq.n	80109cc <_dtoa_r+0xa8c>
 80109d6:	e6f6      	b.n	80107c6 <_dtoa_r+0x886>
 80109d8:	9a00      	ldr	r2, [sp, #0]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d1a4      	bne.n	8010928 <_dtoa_r+0x9e8>
 80109de:	f10b 0b01 	add.w	fp, fp, #1
 80109e2:	2331      	movs	r3, #49	; 0x31
 80109e4:	e778      	b.n	80108d8 <_dtoa_r+0x998>
 80109e6:	4b15      	ldr	r3, [pc, #84]	; (8010a3c <_dtoa_r+0xafc>)
 80109e8:	f7ff bb12 	b.w	8010010 <_dtoa_r+0xd0>
 80109ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f47f aaee 	bne.w	800ffd0 <_dtoa_r+0x90>
 80109f4:	4b12      	ldr	r3, [pc, #72]	; (8010a40 <_dtoa_r+0xb00>)
 80109f6:	f7ff bb0b 	b.w	8010010 <_dtoa_r+0xd0>
 80109fa:	f1ba 0f00 	cmp.w	sl, #0
 80109fe:	dc03      	bgt.n	8010a08 <_dtoa_r+0xac8>
 8010a00:	9b07      	ldr	r3, [sp, #28]
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	f73f aec7 	bgt.w	8010796 <_dtoa_r+0x856>
 8010a08:	f8dd 8000 	ldr.w	r8, [sp]
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f7ff fa08 	bl	800fe24 <quorem>
 8010a14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010a18:	f808 3b01 	strb.w	r3, [r8], #1
 8010a1c:	9a00      	ldr	r2, [sp, #0]
 8010a1e:	eba8 0202 	sub.w	r2, r8, r2
 8010a22:	4592      	cmp	sl, r2
 8010a24:	ddb7      	ble.n	8010996 <_dtoa_r+0xa56>
 8010a26:	4629      	mov	r1, r5
 8010a28:	2300      	movs	r3, #0
 8010a2a:	220a      	movs	r2, #10
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f000 f885 	bl	8010b3c <__multadd>
 8010a32:	4605      	mov	r5, r0
 8010a34:	e7ea      	b.n	8010a0c <_dtoa_r+0xacc>
 8010a36:	bf00      	nop
 8010a38:	0801254b 	.word	0x0801254b
 8010a3c:	080124a4 	.word	0x080124a4
 8010a40:	080124c8 	.word	0x080124c8

08010a44 <_localeconv_r>:
 8010a44:	4800      	ldr	r0, [pc, #0]	; (8010a48 <_localeconv_r+0x4>)
 8010a46:	4770      	bx	lr
 8010a48:	24000178 	.word	0x24000178

08010a4c <malloc>:
 8010a4c:	4b02      	ldr	r3, [pc, #8]	; (8010a58 <malloc+0xc>)
 8010a4e:	4601      	mov	r1, r0
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	f000 bbef 	b.w	8011234 <_malloc_r>
 8010a56:	bf00      	nop
 8010a58:	24000024 	.word	0x24000024

08010a5c <memcpy>:
 8010a5c:	440a      	add	r2, r1
 8010a5e:	4291      	cmp	r1, r2
 8010a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a64:	d100      	bne.n	8010a68 <memcpy+0xc>
 8010a66:	4770      	bx	lr
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a72:	4291      	cmp	r1, r2
 8010a74:	d1f9      	bne.n	8010a6a <memcpy+0xe>
 8010a76:	bd10      	pop	{r4, pc}

08010a78 <_Balloc>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	460d      	mov	r5, r1
 8010a80:	b976      	cbnz	r6, 8010aa0 <_Balloc+0x28>
 8010a82:	2010      	movs	r0, #16
 8010a84:	f7ff ffe2 	bl	8010a4c <malloc>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8010a8c:	b920      	cbnz	r0, 8010a98 <_Balloc+0x20>
 8010a8e:	4b18      	ldr	r3, [pc, #96]	; (8010af0 <_Balloc+0x78>)
 8010a90:	4818      	ldr	r0, [pc, #96]	; (8010af4 <_Balloc+0x7c>)
 8010a92:	2166      	movs	r1, #102	; 0x66
 8010a94:	f000 fd94 	bl	80115c0 <__assert_func>
 8010a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a9c:	6006      	str	r6, [r0, #0]
 8010a9e:	60c6      	str	r6, [r0, #12]
 8010aa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010aa2:	68f3      	ldr	r3, [r6, #12]
 8010aa4:	b183      	cbz	r3, 8010ac8 <_Balloc+0x50>
 8010aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010aae:	b9b8      	cbnz	r0, 8010ae0 <_Balloc+0x68>
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8010ab6:	1d72      	adds	r2, r6, #5
 8010ab8:	0092      	lsls	r2, r2, #2
 8010aba:	4620      	mov	r0, r4
 8010abc:	f000 fb5a 	bl	8011174 <_calloc_r>
 8010ac0:	b160      	cbz	r0, 8010adc <_Balloc+0x64>
 8010ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ac6:	e00e      	b.n	8010ae6 <_Balloc+0x6e>
 8010ac8:	2221      	movs	r2, #33	; 0x21
 8010aca:	2104      	movs	r1, #4
 8010acc:	4620      	mov	r0, r4
 8010ace:	f000 fb51 	bl	8011174 <_calloc_r>
 8010ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ad4:	60f0      	str	r0, [r6, #12]
 8010ad6:	68db      	ldr	r3, [r3, #12]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1e4      	bne.n	8010aa6 <_Balloc+0x2e>
 8010adc:	2000      	movs	r0, #0
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
 8010ae0:	6802      	ldr	r2, [r0, #0]
 8010ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010aec:	e7f7      	b.n	8010ade <_Balloc+0x66>
 8010aee:	bf00      	nop
 8010af0:	080124d5 	.word	0x080124d5
 8010af4:	0801255c 	.word	0x0801255c

08010af8 <_Bfree>:
 8010af8:	b570      	push	{r4, r5, r6, lr}
 8010afa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010afc:	4605      	mov	r5, r0
 8010afe:	460c      	mov	r4, r1
 8010b00:	b976      	cbnz	r6, 8010b20 <_Bfree+0x28>
 8010b02:	2010      	movs	r0, #16
 8010b04:	f7ff ffa2 	bl	8010a4c <malloc>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	6268      	str	r0, [r5, #36]	; 0x24
 8010b0c:	b920      	cbnz	r0, 8010b18 <_Bfree+0x20>
 8010b0e:	4b09      	ldr	r3, [pc, #36]	; (8010b34 <_Bfree+0x3c>)
 8010b10:	4809      	ldr	r0, [pc, #36]	; (8010b38 <_Bfree+0x40>)
 8010b12:	218a      	movs	r1, #138	; 0x8a
 8010b14:	f000 fd54 	bl	80115c0 <__assert_func>
 8010b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b1c:	6006      	str	r6, [r0, #0]
 8010b1e:	60c6      	str	r6, [r0, #12]
 8010b20:	b13c      	cbz	r4, 8010b32 <_Bfree+0x3a>
 8010b22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b24:	6862      	ldr	r2, [r4, #4]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b2c:	6021      	str	r1, [r4, #0]
 8010b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b32:	bd70      	pop	{r4, r5, r6, pc}
 8010b34:	080124d5 	.word	0x080124d5
 8010b38:	0801255c 	.word	0x0801255c

08010b3c <__multadd>:
 8010b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b40:	690e      	ldr	r6, [r1, #16]
 8010b42:	4607      	mov	r7, r0
 8010b44:	4698      	mov	r8, r3
 8010b46:	460c      	mov	r4, r1
 8010b48:	f101 0014 	add.w	r0, r1, #20
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	6805      	ldr	r5, [r0, #0]
 8010b50:	b2a9      	uxth	r1, r5
 8010b52:	fb02 8101 	mla	r1, r2, r1, r8
 8010b56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010b5a:	0c2d      	lsrs	r5, r5, #16
 8010b5c:	fb02 c505 	mla	r5, r2, r5, ip
 8010b60:	b289      	uxth	r1, r1
 8010b62:	3301      	adds	r3, #1
 8010b64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010b68:	429e      	cmp	r6, r3
 8010b6a:	f840 1b04 	str.w	r1, [r0], #4
 8010b6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010b72:	dcec      	bgt.n	8010b4e <__multadd+0x12>
 8010b74:	f1b8 0f00 	cmp.w	r8, #0
 8010b78:	d022      	beq.n	8010bc0 <__multadd+0x84>
 8010b7a:	68a3      	ldr	r3, [r4, #8]
 8010b7c:	42b3      	cmp	r3, r6
 8010b7e:	dc19      	bgt.n	8010bb4 <__multadd+0x78>
 8010b80:	6861      	ldr	r1, [r4, #4]
 8010b82:	4638      	mov	r0, r7
 8010b84:	3101      	adds	r1, #1
 8010b86:	f7ff ff77 	bl	8010a78 <_Balloc>
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	b928      	cbnz	r0, 8010b9a <__multadd+0x5e>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <__multadd+0x8c>)
 8010b92:	480e      	ldr	r0, [pc, #56]	; (8010bcc <__multadd+0x90>)
 8010b94:	21b5      	movs	r1, #181	; 0xb5
 8010b96:	f000 fd13 	bl	80115c0 <__assert_func>
 8010b9a:	6922      	ldr	r2, [r4, #16]
 8010b9c:	3202      	adds	r2, #2
 8010b9e:	f104 010c 	add.w	r1, r4, #12
 8010ba2:	0092      	lsls	r2, r2, #2
 8010ba4:	300c      	adds	r0, #12
 8010ba6:	f7ff ff59 	bl	8010a5c <memcpy>
 8010baa:	4621      	mov	r1, r4
 8010bac:	4638      	mov	r0, r7
 8010bae:	f7ff ffa3 	bl	8010af8 <_Bfree>
 8010bb2:	462c      	mov	r4, r5
 8010bb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010bb8:	3601      	adds	r6, #1
 8010bba:	f8c3 8014 	str.w	r8, [r3, #20]
 8010bbe:	6126      	str	r6, [r4, #16]
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc6:	bf00      	nop
 8010bc8:	0801254b 	.word	0x0801254b
 8010bcc:	0801255c 	.word	0x0801255c

08010bd0 <__hi0bits>:
 8010bd0:	0c03      	lsrs	r3, r0, #16
 8010bd2:	041b      	lsls	r3, r3, #16
 8010bd4:	b9d3      	cbnz	r3, 8010c0c <__hi0bits+0x3c>
 8010bd6:	0400      	lsls	r0, r0, #16
 8010bd8:	2310      	movs	r3, #16
 8010bda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010bde:	bf04      	itt	eq
 8010be0:	0200      	lsleq	r0, r0, #8
 8010be2:	3308      	addeq	r3, #8
 8010be4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010be8:	bf04      	itt	eq
 8010bea:	0100      	lsleq	r0, r0, #4
 8010bec:	3304      	addeq	r3, #4
 8010bee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bf2:	bf04      	itt	eq
 8010bf4:	0080      	lsleq	r0, r0, #2
 8010bf6:	3302      	addeq	r3, #2
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	db05      	blt.n	8010c08 <__hi0bits+0x38>
 8010bfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010c00:	f103 0301 	add.w	r3, r3, #1
 8010c04:	bf08      	it	eq
 8010c06:	2320      	moveq	r3, #32
 8010c08:	4618      	mov	r0, r3
 8010c0a:	4770      	bx	lr
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	e7e4      	b.n	8010bda <__hi0bits+0xa>

08010c10 <__lo0bits>:
 8010c10:	6803      	ldr	r3, [r0, #0]
 8010c12:	f013 0207 	ands.w	r2, r3, #7
 8010c16:	4601      	mov	r1, r0
 8010c18:	d00b      	beq.n	8010c32 <__lo0bits+0x22>
 8010c1a:	07da      	lsls	r2, r3, #31
 8010c1c:	d424      	bmi.n	8010c68 <__lo0bits+0x58>
 8010c1e:	0798      	lsls	r0, r3, #30
 8010c20:	bf49      	itett	mi
 8010c22:	085b      	lsrmi	r3, r3, #1
 8010c24:	089b      	lsrpl	r3, r3, #2
 8010c26:	2001      	movmi	r0, #1
 8010c28:	600b      	strmi	r3, [r1, #0]
 8010c2a:	bf5c      	itt	pl
 8010c2c:	600b      	strpl	r3, [r1, #0]
 8010c2e:	2002      	movpl	r0, #2
 8010c30:	4770      	bx	lr
 8010c32:	b298      	uxth	r0, r3
 8010c34:	b9b0      	cbnz	r0, 8010c64 <__lo0bits+0x54>
 8010c36:	0c1b      	lsrs	r3, r3, #16
 8010c38:	2010      	movs	r0, #16
 8010c3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010c3e:	bf04      	itt	eq
 8010c40:	0a1b      	lsreq	r3, r3, #8
 8010c42:	3008      	addeq	r0, #8
 8010c44:	071a      	lsls	r2, r3, #28
 8010c46:	bf04      	itt	eq
 8010c48:	091b      	lsreq	r3, r3, #4
 8010c4a:	3004      	addeq	r0, #4
 8010c4c:	079a      	lsls	r2, r3, #30
 8010c4e:	bf04      	itt	eq
 8010c50:	089b      	lsreq	r3, r3, #2
 8010c52:	3002      	addeq	r0, #2
 8010c54:	07da      	lsls	r2, r3, #31
 8010c56:	d403      	bmi.n	8010c60 <__lo0bits+0x50>
 8010c58:	085b      	lsrs	r3, r3, #1
 8010c5a:	f100 0001 	add.w	r0, r0, #1
 8010c5e:	d005      	beq.n	8010c6c <__lo0bits+0x5c>
 8010c60:	600b      	str	r3, [r1, #0]
 8010c62:	4770      	bx	lr
 8010c64:	4610      	mov	r0, r2
 8010c66:	e7e8      	b.n	8010c3a <__lo0bits+0x2a>
 8010c68:	2000      	movs	r0, #0
 8010c6a:	4770      	bx	lr
 8010c6c:	2020      	movs	r0, #32
 8010c6e:	4770      	bx	lr

08010c70 <__i2b>:
 8010c70:	b510      	push	{r4, lr}
 8010c72:	460c      	mov	r4, r1
 8010c74:	2101      	movs	r1, #1
 8010c76:	f7ff feff 	bl	8010a78 <_Balloc>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	b928      	cbnz	r0, 8010c8a <__i2b+0x1a>
 8010c7e:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <__i2b+0x24>)
 8010c80:	4805      	ldr	r0, [pc, #20]	; (8010c98 <__i2b+0x28>)
 8010c82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c86:	f000 fc9b 	bl	80115c0 <__assert_func>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	6144      	str	r4, [r0, #20]
 8010c8e:	6103      	str	r3, [r0, #16]
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	0801254b 	.word	0x0801254b
 8010c98:	0801255c 	.word	0x0801255c

08010c9c <__multiply>:
 8010c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca0:	4614      	mov	r4, r2
 8010ca2:	690a      	ldr	r2, [r1, #16]
 8010ca4:	6923      	ldr	r3, [r4, #16]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	bfb8      	it	lt
 8010caa:	460b      	movlt	r3, r1
 8010cac:	460d      	mov	r5, r1
 8010cae:	bfbc      	itt	lt
 8010cb0:	4625      	movlt	r5, r4
 8010cb2:	461c      	movlt	r4, r3
 8010cb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010cb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010cbc:	68ab      	ldr	r3, [r5, #8]
 8010cbe:	6869      	ldr	r1, [r5, #4]
 8010cc0:	eb0a 0709 	add.w	r7, sl, r9
 8010cc4:	42bb      	cmp	r3, r7
 8010cc6:	b085      	sub	sp, #20
 8010cc8:	bfb8      	it	lt
 8010cca:	3101      	addlt	r1, #1
 8010ccc:	f7ff fed4 	bl	8010a78 <_Balloc>
 8010cd0:	b930      	cbnz	r0, 8010ce0 <__multiply+0x44>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	4b42      	ldr	r3, [pc, #264]	; (8010de0 <__multiply+0x144>)
 8010cd6:	4843      	ldr	r0, [pc, #268]	; (8010de4 <__multiply+0x148>)
 8010cd8:	f240 115d 	movw	r1, #349	; 0x15d
 8010cdc:	f000 fc70 	bl	80115c0 <__assert_func>
 8010ce0:	f100 0614 	add.w	r6, r0, #20
 8010ce4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010ce8:	4633      	mov	r3, r6
 8010cea:	2200      	movs	r2, #0
 8010cec:	4543      	cmp	r3, r8
 8010cee:	d31e      	bcc.n	8010d2e <__multiply+0x92>
 8010cf0:	f105 0c14 	add.w	ip, r5, #20
 8010cf4:	f104 0314 	add.w	r3, r4, #20
 8010cf8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010cfc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010d00:	9202      	str	r2, [sp, #8]
 8010d02:	ebac 0205 	sub.w	r2, ip, r5
 8010d06:	3a15      	subs	r2, #21
 8010d08:	f022 0203 	bic.w	r2, r2, #3
 8010d0c:	3204      	adds	r2, #4
 8010d0e:	f105 0115 	add.w	r1, r5, #21
 8010d12:	458c      	cmp	ip, r1
 8010d14:	bf38      	it	cc
 8010d16:	2204      	movcc	r2, #4
 8010d18:	9201      	str	r2, [sp, #4]
 8010d1a:	9a02      	ldr	r2, [sp, #8]
 8010d1c:	9303      	str	r3, [sp, #12]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d808      	bhi.n	8010d34 <__multiply+0x98>
 8010d22:	2f00      	cmp	r7, #0
 8010d24:	dc55      	bgt.n	8010dd2 <__multiply+0x136>
 8010d26:	6107      	str	r7, [r0, #16]
 8010d28:	b005      	add	sp, #20
 8010d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2e:	f843 2b04 	str.w	r2, [r3], #4
 8010d32:	e7db      	b.n	8010cec <__multiply+0x50>
 8010d34:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d38:	f1ba 0f00 	cmp.w	sl, #0
 8010d3c:	d020      	beq.n	8010d80 <__multiply+0xe4>
 8010d3e:	f105 0e14 	add.w	lr, r5, #20
 8010d42:	46b1      	mov	r9, r6
 8010d44:	2200      	movs	r2, #0
 8010d46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010d4a:	f8d9 b000 	ldr.w	fp, [r9]
 8010d4e:	b2a1      	uxth	r1, r4
 8010d50:	fa1f fb8b 	uxth.w	fp, fp
 8010d54:	fb0a b101 	mla	r1, sl, r1, fp
 8010d58:	4411      	add	r1, r2
 8010d5a:	f8d9 2000 	ldr.w	r2, [r9]
 8010d5e:	0c24      	lsrs	r4, r4, #16
 8010d60:	0c12      	lsrs	r2, r2, #16
 8010d62:	fb0a 2404 	mla	r4, sl, r4, r2
 8010d66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010d6a:	b289      	uxth	r1, r1
 8010d6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010d70:	45f4      	cmp	ip, lr
 8010d72:	f849 1b04 	str.w	r1, [r9], #4
 8010d76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010d7a:	d8e4      	bhi.n	8010d46 <__multiply+0xaa>
 8010d7c:	9901      	ldr	r1, [sp, #4]
 8010d7e:	5072      	str	r2, [r6, r1]
 8010d80:	9a03      	ldr	r2, [sp, #12]
 8010d82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d86:	3304      	adds	r3, #4
 8010d88:	f1b9 0f00 	cmp.w	r9, #0
 8010d8c:	d01f      	beq.n	8010dce <__multiply+0x132>
 8010d8e:	6834      	ldr	r4, [r6, #0]
 8010d90:	f105 0114 	add.w	r1, r5, #20
 8010d94:	46b6      	mov	lr, r6
 8010d96:	f04f 0a00 	mov.w	sl, #0
 8010d9a:	880a      	ldrh	r2, [r1, #0]
 8010d9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010da0:	fb09 b202 	mla	r2, r9, r2, fp
 8010da4:	4492      	add	sl, r2
 8010da6:	b2a4      	uxth	r4, r4
 8010da8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010dac:	f84e 4b04 	str.w	r4, [lr], #4
 8010db0:	f851 4b04 	ldr.w	r4, [r1], #4
 8010db4:	f8be 2000 	ldrh.w	r2, [lr]
 8010db8:	0c24      	lsrs	r4, r4, #16
 8010dba:	fb09 2404 	mla	r4, r9, r4, r2
 8010dbe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010dc2:	458c      	cmp	ip, r1
 8010dc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010dc8:	d8e7      	bhi.n	8010d9a <__multiply+0xfe>
 8010dca:	9a01      	ldr	r2, [sp, #4]
 8010dcc:	50b4      	str	r4, [r6, r2]
 8010dce:	3604      	adds	r6, #4
 8010dd0:	e7a3      	b.n	8010d1a <__multiply+0x7e>
 8010dd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1a5      	bne.n	8010d26 <__multiply+0x8a>
 8010dda:	3f01      	subs	r7, #1
 8010ddc:	e7a1      	b.n	8010d22 <__multiply+0x86>
 8010dde:	bf00      	nop
 8010de0:	0801254b 	.word	0x0801254b
 8010de4:	0801255c 	.word	0x0801255c

08010de8 <__pow5mult>:
 8010de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dec:	4615      	mov	r5, r2
 8010dee:	f012 0203 	ands.w	r2, r2, #3
 8010df2:	4606      	mov	r6, r0
 8010df4:	460f      	mov	r7, r1
 8010df6:	d007      	beq.n	8010e08 <__pow5mult+0x20>
 8010df8:	4c25      	ldr	r4, [pc, #148]	; (8010e90 <__pow5mult+0xa8>)
 8010dfa:	3a01      	subs	r2, #1
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e02:	f7ff fe9b 	bl	8010b3c <__multadd>
 8010e06:	4607      	mov	r7, r0
 8010e08:	10ad      	asrs	r5, r5, #2
 8010e0a:	d03d      	beq.n	8010e88 <__pow5mult+0xa0>
 8010e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010e0e:	b97c      	cbnz	r4, 8010e30 <__pow5mult+0x48>
 8010e10:	2010      	movs	r0, #16
 8010e12:	f7ff fe1b 	bl	8010a4c <malloc>
 8010e16:	4602      	mov	r2, r0
 8010e18:	6270      	str	r0, [r6, #36]	; 0x24
 8010e1a:	b928      	cbnz	r0, 8010e28 <__pow5mult+0x40>
 8010e1c:	4b1d      	ldr	r3, [pc, #116]	; (8010e94 <__pow5mult+0xac>)
 8010e1e:	481e      	ldr	r0, [pc, #120]	; (8010e98 <__pow5mult+0xb0>)
 8010e20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e24:	f000 fbcc 	bl	80115c0 <__assert_func>
 8010e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e2c:	6004      	str	r4, [r0, #0]
 8010e2e:	60c4      	str	r4, [r0, #12]
 8010e30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e38:	b94c      	cbnz	r4, 8010e4e <__pow5mult+0x66>
 8010e3a:	f240 2171 	movw	r1, #625	; 0x271
 8010e3e:	4630      	mov	r0, r6
 8010e40:	f7ff ff16 	bl	8010c70 <__i2b>
 8010e44:	2300      	movs	r3, #0
 8010e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	6003      	str	r3, [r0, #0]
 8010e4e:	f04f 0900 	mov.w	r9, #0
 8010e52:	07eb      	lsls	r3, r5, #31
 8010e54:	d50a      	bpl.n	8010e6c <__pow5mult+0x84>
 8010e56:	4639      	mov	r1, r7
 8010e58:	4622      	mov	r2, r4
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	f7ff ff1e 	bl	8010c9c <__multiply>
 8010e60:	4639      	mov	r1, r7
 8010e62:	4680      	mov	r8, r0
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7ff fe47 	bl	8010af8 <_Bfree>
 8010e6a:	4647      	mov	r7, r8
 8010e6c:	106d      	asrs	r5, r5, #1
 8010e6e:	d00b      	beq.n	8010e88 <__pow5mult+0xa0>
 8010e70:	6820      	ldr	r0, [r4, #0]
 8010e72:	b938      	cbnz	r0, 8010e84 <__pow5mult+0x9c>
 8010e74:	4622      	mov	r2, r4
 8010e76:	4621      	mov	r1, r4
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f7ff ff0f 	bl	8010c9c <__multiply>
 8010e7e:	6020      	str	r0, [r4, #0]
 8010e80:	f8c0 9000 	str.w	r9, [r0]
 8010e84:	4604      	mov	r4, r0
 8010e86:	e7e4      	b.n	8010e52 <__pow5mult+0x6a>
 8010e88:	4638      	mov	r0, r7
 8010e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e8e:	bf00      	nop
 8010e90:	080126b0 	.word	0x080126b0
 8010e94:	080124d5 	.word	0x080124d5
 8010e98:	0801255c 	.word	0x0801255c

08010e9c <__lshift>:
 8010e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	6849      	ldr	r1, [r1, #4]
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010eaa:	68a3      	ldr	r3, [r4, #8]
 8010eac:	4607      	mov	r7, r0
 8010eae:	4691      	mov	r9, r2
 8010eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010eb4:	f108 0601 	add.w	r6, r8, #1
 8010eb8:	42b3      	cmp	r3, r6
 8010eba:	db0b      	blt.n	8010ed4 <__lshift+0x38>
 8010ebc:	4638      	mov	r0, r7
 8010ebe:	f7ff fddb 	bl	8010a78 <_Balloc>
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	b948      	cbnz	r0, 8010eda <__lshift+0x3e>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	4b28      	ldr	r3, [pc, #160]	; (8010f6c <__lshift+0xd0>)
 8010eca:	4829      	ldr	r0, [pc, #164]	; (8010f70 <__lshift+0xd4>)
 8010ecc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ed0:	f000 fb76 	bl	80115c0 <__assert_func>
 8010ed4:	3101      	adds	r1, #1
 8010ed6:	005b      	lsls	r3, r3, #1
 8010ed8:	e7ee      	b.n	8010eb8 <__lshift+0x1c>
 8010eda:	2300      	movs	r3, #0
 8010edc:	f100 0114 	add.w	r1, r0, #20
 8010ee0:	f100 0210 	add.w	r2, r0, #16
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	4553      	cmp	r3, sl
 8010ee8:	db33      	blt.n	8010f52 <__lshift+0xb6>
 8010eea:	6920      	ldr	r0, [r4, #16]
 8010eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ef0:	f104 0314 	add.w	r3, r4, #20
 8010ef4:	f019 091f 	ands.w	r9, r9, #31
 8010ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010efc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f00:	d02b      	beq.n	8010f5a <__lshift+0xbe>
 8010f02:	f1c9 0e20 	rsb	lr, r9, #32
 8010f06:	468a      	mov	sl, r1
 8010f08:	2200      	movs	r2, #0
 8010f0a:	6818      	ldr	r0, [r3, #0]
 8010f0c:	fa00 f009 	lsl.w	r0, r0, r9
 8010f10:	4302      	orrs	r2, r0
 8010f12:	f84a 2b04 	str.w	r2, [sl], #4
 8010f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f1a:	459c      	cmp	ip, r3
 8010f1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f20:	d8f3      	bhi.n	8010f0a <__lshift+0x6e>
 8010f22:	ebac 0304 	sub.w	r3, ip, r4
 8010f26:	3b15      	subs	r3, #21
 8010f28:	f023 0303 	bic.w	r3, r3, #3
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	f104 0015 	add.w	r0, r4, #21
 8010f32:	4584      	cmp	ip, r0
 8010f34:	bf38      	it	cc
 8010f36:	2304      	movcc	r3, #4
 8010f38:	50ca      	str	r2, [r1, r3]
 8010f3a:	b10a      	cbz	r2, 8010f40 <__lshift+0xa4>
 8010f3c:	f108 0602 	add.w	r6, r8, #2
 8010f40:	3e01      	subs	r6, #1
 8010f42:	4638      	mov	r0, r7
 8010f44:	612e      	str	r6, [r5, #16]
 8010f46:	4621      	mov	r1, r4
 8010f48:	f7ff fdd6 	bl	8010af8 <_Bfree>
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f52:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f56:	3301      	adds	r3, #1
 8010f58:	e7c5      	b.n	8010ee6 <__lshift+0x4a>
 8010f5a:	3904      	subs	r1, #4
 8010f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f64:	459c      	cmp	ip, r3
 8010f66:	d8f9      	bhi.n	8010f5c <__lshift+0xc0>
 8010f68:	e7ea      	b.n	8010f40 <__lshift+0xa4>
 8010f6a:	bf00      	nop
 8010f6c:	0801254b 	.word	0x0801254b
 8010f70:	0801255c 	.word	0x0801255c

08010f74 <__mcmp>:
 8010f74:	b530      	push	{r4, r5, lr}
 8010f76:	6902      	ldr	r2, [r0, #16]
 8010f78:	690c      	ldr	r4, [r1, #16]
 8010f7a:	1b12      	subs	r2, r2, r4
 8010f7c:	d10e      	bne.n	8010f9c <__mcmp+0x28>
 8010f7e:	f100 0314 	add.w	r3, r0, #20
 8010f82:	3114      	adds	r1, #20
 8010f84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f94:	42a5      	cmp	r5, r4
 8010f96:	d003      	beq.n	8010fa0 <__mcmp+0x2c>
 8010f98:	d305      	bcc.n	8010fa6 <__mcmp+0x32>
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	4610      	mov	r0, r2
 8010f9e:	bd30      	pop	{r4, r5, pc}
 8010fa0:	4283      	cmp	r3, r0
 8010fa2:	d3f3      	bcc.n	8010f8c <__mcmp+0x18>
 8010fa4:	e7fa      	b.n	8010f9c <__mcmp+0x28>
 8010fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010faa:	e7f7      	b.n	8010f9c <__mcmp+0x28>

08010fac <__mdiff>:
 8010fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb0:	460c      	mov	r4, r1
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	4617      	mov	r7, r2
 8010fba:	f7ff ffdb 	bl	8010f74 <__mcmp>
 8010fbe:	1e05      	subs	r5, r0, #0
 8010fc0:	d110      	bne.n	8010fe4 <__mdiff+0x38>
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f7ff fd57 	bl	8010a78 <_Balloc>
 8010fca:	b930      	cbnz	r0, 8010fda <__mdiff+0x2e>
 8010fcc:	4b39      	ldr	r3, [pc, #228]	; (80110b4 <__mdiff+0x108>)
 8010fce:	4602      	mov	r2, r0
 8010fd0:	f240 2132 	movw	r1, #562	; 0x232
 8010fd4:	4838      	ldr	r0, [pc, #224]	; (80110b8 <__mdiff+0x10c>)
 8010fd6:	f000 faf3 	bl	80115c0 <__assert_func>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe4:	bfa4      	itt	ge
 8010fe6:	463b      	movge	r3, r7
 8010fe8:	4627      	movge	r7, r4
 8010fea:	4630      	mov	r0, r6
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	bfa6      	itte	ge
 8010ff0:	461c      	movge	r4, r3
 8010ff2:	2500      	movge	r5, #0
 8010ff4:	2501      	movlt	r5, #1
 8010ff6:	f7ff fd3f 	bl	8010a78 <_Balloc>
 8010ffa:	b920      	cbnz	r0, 8011006 <__mdiff+0x5a>
 8010ffc:	4b2d      	ldr	r3, [pc, #180]	; (80110b4 <__mdiff+0x108>)
 8010ffe:	4602      	mov	r2, r0
 8011000:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011004:	e7e6      	b.n	8010fd4 <__mdiff+0x28>
 8011006:	693e      	ldr	r6, [r7, #16]
 8011008:	60c5      	str	r5, [r0, #12]
 801100a:	6925      	ldr	r5, [r4, #16]
 801100c:	f107 0114 	add.w	r1, r7, #20
 8011010:	f104 0914 	add.w	r9, r4, #20
 8011014:	f100 0e14 	add.w	lr, r0, #20
 8011018:	f107 0210 	add.w	r2, r7, #16
 801101c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011020:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011024:	46f2      	mov	sl, lr
 8011026:	2700      	movs	r7, #0
 8011028:	f859 3b04 	ldr.w	r3, [r9], #4
 801102c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011030:	fa1f f883 	uxth.w	r8, r3
 8011034:	fa17 f78b 	uxtah	r7, r7, fp
 8011038:	0c1b      	lsrs	r3, r3, #16
 801103a:	eba7 0808 	sub.w	r8, r7, r8
 801103e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011042:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011046:	fa1f f888 	uxth.w	r8, r8
 801104a:	141f      	asrs	r7, r3, #16
 801104c:	454d      	cmp	r5, r9
 801104e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011052:	f84a 3b04 	str.w	r3, [sl], #4
 8011056:	d8e7      	bhi.n	8011028 <__mdiff+0x7c>
 8011058:	1b2b      	subs	r3, r5, r4
 801105a:	3b15      	subs	r3, #21
 801105c:	f023 0303 	bic.w	r3, r3, #3
 8011060:	3304      	adds	r3, #4
 8011062:	3415      	adds	r4, #21
 8011064:	42a5      	cmp	r5, r4
 8011066:	bf38      	it	cc
 8011068:	2304      	movcc	r3, #4
 801106a:	4419      	add	r1, r3
 801106c:	4473      	add	r3, lr
 801106e:	469e      	mov	lr, r3
 8011070:	460d      	mov	r5, r1
 8011072:	4565      	cmp	r5, ip
 8011074:	d30e      	bcc.n	8011094 <__mdiff+0xe8>
 8011076:	f10c 0203 	add.w	r2, ip, #3
 801107a:	1a52      	subs	r2, r2, r1
 801107c:	f022 0203 	bic.w	r2, r2, #3
 8011080:	3903      	subs	r1, #3
 8011082:	458c      	cmp	ip, r1
 8011084:	bf38      	it	cc
 8011086:	2200      	movcc	r2, #0
 8011088:	441a      	add	r2, r3
 801108a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801108e:	b17b      	cbz	r3, 80110b0 <__mdiff+0x104>
 8011090:	6106      	str	r6, [r0, #16]
 8011092:	e7a5      	b.n	8010fe0 <__mdiff+0x34>
 8011094:	f855 8b04 	ldr.w	r8, [r5], #4
 8011098:	fa17 f488 	uxtah	r4, r7, r8
 801109c:	1422      	asrs	r2, r4, #16
 801109e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80110a2:	b2a4      	uxth	r4, r4
 80110a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80110a8:	f84e 4b04 	str.w	r4, [lr], #4
 80110ac:	1417      	asrs	r7, r2, #16
 80110ae:	e7e0      	b.n	8011072 <__mdiff+0xc6>
 80110b0:	3e01      	subs	r6, #1
 80110b2:	e7ea      	b.n	801108a <__mdiff+0xde>
 80110b4:	0801254b 	.word	0x0801254b
 80110b8:	0801255c 	.word	0x0801255c

080110bc <__d2b>:
 80110bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110c0:	4689      	mov	r9, r1
 80110c2:	2101      	movs	r1, #1
 80110c4:	ec57 6b10 	vmov	r6, r7, d0
 80110c8:	4690      	mov	r8, r2
 80110ca:	f7ff fcd5 	bl	8010a78 <_Balloc>
 80110ce:	4604      	mov	r4, r0
 80110d0:	b930      	cbnz	r0, 80110e0 <__d2b+0x24>
 80110d2:	4602      	mov	r2, r0
 80110d4:	4b25      	ldr	r3, [pc, #148]	; (801116c <__d2b+0xb0>)
 80110d6:	4826      	ldr	r0, [pc, #152]	; (8011170 <__d2b+0xb4>)
 80110d8:	f240 310a 	movw	r1, #778	; 0x30a
 80110dc:	f000 fa70 	bl	80115c0 <__assert_func>
 80110e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110e8:	bb35      	cbnz	r5, 8011138 <__d2b+0x7c>
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	9301      	str	r3, [sp, #4]
 80110ee:	d028      	beq.n	8011142 <__d2b+0x86>
 80110f0:	4668      	mov	r0, sp
 80110f2:	9600      	str	r6, [sp, #0]
 80110f4:	f7ff fd8c 	bl	8010c10 <__lo0bits>
 80110f8:	9900      	ldr	r1, [sp, #0]
 80110fa:	b300      	cbz	r0, 801113e <__d2b+0x82>
 80110fc:	9a01      	ldr	r2, [sp, #4]
 80110fe:	f1c0 0320 	rsb	r3, r0, #32
 8011102:	fa02 f303 	lsl.w	r3, r2, r3
 8011106:	430b      	orrs	r3, r1
 8011108:	40c2      	lsrs	r2, r0
 801110a:	6163      	str	r3, [r4, #20]
 801110c:	9201      	str	r2, [sp, #4]
 801110e:	9b01      	ldr	r3, [sp, #4]
 8011110:	61a3      	str	r3, [r4, #24]
 8011112:	2b00      	cmp	r3, #0
 8011114:	bf14      	ite	ne
 8011116:	2202      	movne	r2, #2
 8011118:	2201      	moveq	r2, #1
 801111a:	6122      	str	r2, [r4, #16]
 801111c:	b1d5      	cbz	r5, 8011154 <__d2b+0x98>
 801111e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011122:	4405      	add	r5, r0
 8011124:	f8c9 5000 	str.w	r5, [r9]
 8011128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801112c:	f8c8 0000 	str.w	r0, [r8]
 8011130:	4620      	mov	r0, r4
 8011132:	b003      	add	sp, #12
 8011134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801113c:	e7d5      	b.n	80110ea <__d2b+0x2e>
 801113e:	6161      	str	r1, [r4, #20]
 8011140:	e7e5      	b.n	801110e <__d2b+0x52>
 8011142:	a801      	add	r0, sp, #4
 8011144:	f7ff fd64 	bl	8010c10 <__lo0bits>
 8011148:	9b01      	ldr	r3, [sp, #4]
 801114a:	6163      	str	r3, [r4, #20]
 801114c:	2201      	movs	r2, #1
 801114e:	6122      	str	r2, [r4, #16]
 8011150:	3020      	adds	r0, #32
 8011152:	e7e3      	b.n	801111c <__d2b+0x60>
 8011154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801115c:	f8c9 0000 	str.w	r0, [r9]
 8011160:	6918      	ldr	r0, [r3, #16]
 8011162:	f7ff fd35 	bl	8010bd0 <__hi0bits>
 8011166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801116a:	e7df      	b.n	801112c <__d2b+0x70>
 801116c:	0801254b 	.word	0x0801254b
 8011170:	0801255c 	.word	0x0801255c

08011174 <_calloc_r>:
 8011174:	b513      	push	{r0, r1, r4, lr}
 8011176:	434a      	muls	r2, r1
 8011178:	4611      	mov	r1, r2
 801117a:	9201      	str	r2, [sp, #4]
 801117c:	f000 f85a 	bl	8011234 <_malloc_r>
 8011180:	4604      	mov	r4, r0
 8011182:	b118      	cbz	r0, 801118c <_calloc_r+0x18>
 8011184:	9a01      	ldr	r2, [sp, #4]
 8011186:	2100      	movs	r1, #0
 8011188:	f7fe f9e2 	bl	800f550 <memset>
 801118c:	4620      	mov	r0, r4
 801118e:	b002      	add	sp, #8
 8011190:	bd10      	pop	{r4, pc}
	...

08011194 <_free_r>:
 8011194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011196:	2900      	cmp	r1, #0
 8011198:	d048      	beq.n	801122c <_free_r+0x98>
 801119a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801119e:	9001      	str	r0, [sp, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f1a1 0404 	sub.w	r4, r1, #4
 80111a6:	bfb8      	it	lt
 80111a8:	18e4      	addlt	r4, r4, r3
 80111aa:	f000 fa65 	bl	8011678 <__malloc_lock>
 80111ae:	4a20      	ldr	r2, [pc, #128]	; (8011230 <_free_r+0x9c>)
 80111b0:	9801      	ldr	r0, [sp, #4]
 80111b2:	6813      	ldr	r3, [r2, #0]
 80111b4:	4615      	mov	r5, r2
 80111b6:	b933      	cbnz	r3, 80111c6 <_free_r+0x32>
 80111b8:	6063      	str	r3, [r4, #4]
 80111ba:	6014      	str	r4, [r2, #0]
 80111bc:	b003      	add	sp, #12
 80111be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111c2:	f000 ba5f 	b.w	8011684 <__malloc_unlock>
 80111c6:	42a3      	cmp	r3, r4
 80111c8:	d90b      	bls.n	80111e2 <_free_r+0x4e>
 80111ca:	6821      	ldr	r1, [r4, #0]
 80111cc:	1862      	adds	r2, r4, r1
 80111ce:	4293      	cmp	r3, r2
 80111d0:	bf04      	itt	eq
 80111d2:	681a      	ldreq	r2, [r3, #0]
 80111d4:	685b      	ldreq	r3, [r3, #4]
 80111d6:	6063      	str	r3, [r4, #4]
 80111d8:	bf04      	itt	eq
 80111da:	1852      	addeq	r2, r2, r1
 80111dc:	6022      	streq	r2, [r4, #0]
 80111de:	602c      	str	r4, [r5, #0]
 80111e0:	e7ec      	b.n	80111bc <_free_r+0x28>
 80111e2:	461a      	mov	r2, r3
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	b10b      	cbz	r3, 80111ec <_free_r+0x58>
 80111e8:	42a3      	cmp	r3, r4
 80111ea:	d9fa      	bls.n	80111e2 <_free_r+0x4e>
 80111ec:	6811      	ldr	r1, [r2, #0]
 80111ee:	1855      	adds	r5, r2, r1
 80111f0:	42a5      	cmp	r5, r4
 80111f2:	d10b      	bne.n	801120c <_free_r+0x78>
 80111f4:	6824      	ldr	r4, [r4, #0]
 80111f6:	4421      	add	r1, r4
 80111f8:	1854      	adds	r4, r2, r1
 80111fa:	42a3      	cmp	r3, r4
 80111fc:	6011      	str	r1, [r2, #0]
 80111fe:	d1dd      	bne.n	80111bc <_free_r+0x28>
 8011200:	681c      	ldr	r4, [r3, #0]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	6053      	str	r3, [r2, #4]
 8011206:	4421      	add	r1, r4
 8011208:	6011      	str	r1, [r2, #0]
 801120a:	e7d7      	b.n	80111bc <_free_r+0x28>
 801120c:	d902      	bls.n	8011214 <_free_r+0x80>
 801120e:	230c      	movs	r3, #12
 8011210:	6003      	str	r3, [r0, #0]
 8011212:	e7d3      	b.n	80111bc <_free_r+0x28>
 8011214:	6825      	ldr	r5, [r4, #0]
 8011216:	1961      	adds	r1, r4, r5
 8011218:	428b      	cmp	r3, r1
 801121a:	bf04      	itt	eq
 801121c:	6819      	ldreq	r1, [r3, #0]
 801121e:	685b      	ldreq	r3, [r3, #4]
 8011220:	6063      	str	r3, [r4, #4]
 8011222:	bf04      	itt	eq
 8011224:	1949      	addeq	r1, r1, r5
 8011226:	6021      	streq	r1, [r4, #0]
 8011228:	6054      	str	r4, [r2, #4]
 801122a:	e7c7      	b.n	80111bc <_free_r+0x28>
 801122c:	b003      	add	sp, #12
 801122e:	bd30      	pop	{r4, r5, pc}
 8011230:	2400c324 	.word	0x2400c324

08011234 <_malloc_r>:
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011236:	1ccd      	adds	r5, r1, #3
 8011238:	f025 0503 	bic.w	r5, r5, #3
 801123c:	3508      	adds	r5, #8
 801123e:	2d0c      	cmp	r5, #12
 8011240:	bf38      	it	cc
 8011242:	250c      	movcc	r5, #12
 8011244:	2d00      	cmp	r5, #0
 8011246:	4606      	mov	r6, r0
 8011248:	db01      	blt.n	801124e <_malloc_r+0x1a>
 801124a:	42a9      	cmp	r1, r5
 801124c:	d903      	bls.n	8011256 <_malloc_r+0x22>
 801124e:	230c      	movs	r3, #12
 8011250:	6033      	str	r3, [r6, #0]
 8011252:	2000      	movs	r0, #0
 8011254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011256:	f000 fa0f 	bl	8011678 <__malloc_lock>
 801125a:	4921      	ldr	r1, [pc, #132]	; (80112e0 <_malloc_r+0xac>)
 801125c:	680a      	ldr	r2, [r1, #0]
 801125e:	4614      	mov	r4, r2
 8011260:	b99c      	cbnz	r4, 801128a <_malloc_r+0x56>
 8011262:	4f20      	ldr	r7, [pc, #128]	; (80112e4 <_malloc_r+0xb0>)
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	b923      	cbnz	r3, 8011272 <_malloc_r+0x3e>
 8011268:	4621      	mov	r1, r4
 801126a:	4630      	mov	r0, r6
 801126c:	f000 f998 	bl	80115a0 <_sbrk_r>
 8011270:	6038      	str	r0, [r7, #0]
 8011272:	4629      	mov	r1, r5
 8011274:	4630      	mov	r0, r6
 8011276:	f000 f993 	bl	80115a0 <_sbrk_r>
 801127a:	1c43      	adds	r3, r0, #1
 801127c:	d123      	bne.n	80112c6 <_malloc_r+0x92>
 801127e:	230c      	movs	r3, #12
 8011280:	6033      	str	r3, [r6, #0]
 8011282:	4630      	mov	r0, r6
 8011284:	f000 f9fe 	bl	8011684 <__malloc_unlock>
 8011288:	e7e3      	b.n	8011252 <_malloc_r+0x1e>
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	1b5b      	subs	r3, r3, r5
 801128e:	d417      	bmi.n	80112c0 <_malloc_r+0x8c>
 8011290:	2b0b      	cmp	r3, #11
 8011292:	d903      	bls.n	801129c <_malloc_r+0x68>
 8011294:	6023      	str	r3, [r4, #0]
 8011296:	441c      	add	r4, r3
 8011298:	6025      	str	r5, [r4, #0]
 801129a:	e004      	b.n	80112a6 <_malloc_r+0x72>
 801129c:	6863      	ldr	r3, [r4, #4]
 801129e:	42a2      	cmp	r2, r4
 80112a0:	bf0c      	ite	eq
 80112a2:	600b      	streq	r3, [r1, #0]
 80112a4:	6053      	strne	r3, [r2, #4]
 80112a6:	4630      	mov	r0, r6
 80112a8:	f000 f9ec 	bl	8011684 <__malloc_unlock>
 80112ac:	f104 000b 	add.w	r0, r4, #11
 80112b0:	1d23      	adds	r3, r4, #4
 80112b2:	f020 0007 	bic.w	r0, r0, #7
 80112b6:	1ac2      	subs	r2, r0, r3
 80112b8:	d0cc      	beq.n	8011254 <_malloc_r+0x20>
 80112ba:	1a1b      	subs	r3, r3, r0
 80112bc:	50a3      	str	r3, [r4, r2]
 80112be:	e7c9      	b.n	8011254 <_malloc_r+0x20>
 80112c0:	4622      	mov	r2, r4
 80112c2:	6864      	ldr	r4, [r4, #4]
 80112c4:	e7cc      	b.n	8011260 <_malloc_r+0x2c>
 80112c6:	1cc4      	adds	r4, r0, #3
 80112c8:	f024 0403 	bic.w	r4, r4, #3
 80112cc:	42a0      	cmp	r0, r4
 80112ce:	d0e3      	beq.n	8011298 <_malloc_r+0x64>
 80112d0:	1a21      	subs	r1, r4, r0
 80112d2:	4630      	mov	r0, r6
 80112d4:	f000 f964 	bl	80115a0 <_sbrk_r>
 80112d8:	3001      	adds	r0, #1
 80112da:	d1dd      	bne.n	8011298 <_malloc_r+0x64>
 80112dc:	e7cf      	b.n	801127e <_malloc_r+0x4a>
 80112de:	bf00      	nop
 80112e0:	2400c324 	.word	0x2400c324
 80112e4:	2400c328 	.word	0x2400c328

080112e8 <__ssputs_r>:
 80112e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112ec:	688e      	ldr	r6, [r1, #8]
 80112ee:	429e      	cmp	r6, r3
 80112f0:	4682      	mov	sl, r0
 80112f2:	460c      	mov	r4, r1
 80112f4:	4690      	mov	r8, r2
 80112f6:	461f      	mov	r7, r3
 80112f8:	d838      	bhi.n	801136c <__ssputs_r+0x84>
 80112fa:	898a      	ldrh	r2, [r1, #12]
 80112fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011300:	d032      	beq.n	8011368 <__ssputs_r+0x80>
 8011302:	6825      	ldr	r5, [r4, #0]
 8011304:	6909      	ldr	r1, [r1, #16]
 8011306:	eba5 0901 	sub.w	r9, r5, r1
 801130a:	6965      	ldr	r5, [r4, #20]
 801130c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011314:	3301      	adds	r3, #1
 8011316:	444b      	add	r3, r9
 8011318:	106d      	asrs	r5, r5, #1
 801131a:	429d      	cmp	r5, r3
 801131c:	bf38      	it	cc
 801131e:	461d      	movcc	r5, r3
 8011320:	0553      	lsls	r3, r2, #21
 8011322:	d531      	bpl.n	8011388 <__ssputs_r+0xa0>
 8011324:	4629      	mov	r1, r5
 8011326:	f7ff ff85 	bl	8011234 <_malloc_r>
 801132a:	4606      	mov	r6, r0
 801132c:	b950      	cbnz	r0, 8011344 <__ssputs_r+0x5c>
 801132e:	230c      	movs	r3, #12
 8011330:	f8ca 3000 	str.w	r3, [sl]
 8011334:	89a3      	ldrh	r3, [r4, #12]
 8011336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801133a:	81a3      	strh	r3, [r4, #12]
 801133c:	f04f 30ff 	mov.w	r0, #4294967295
 8011340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011344:	6921      	ldr	r1, [r4, #16]
 8011346:	464a      	mov	r2, r9
 8011348:	f7ff fb88 	bl	8010a5c <memcpy>
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011356:	81a3      	strh	r3, [r4, #12]
 8011358:	6126      	str	r6, [r4, #16]
 801135a:	6165      	str	r5, [r4, #20]
 801135c:	444e      	add	r6, r9
 801135e:	eba5 0509 	sub.w	r5, r5, r9
 8011362:	6026      	str	r6, [r4, #0]
 8011364:	60a5      	str	r5, [r4, #8]
 8011366:	463e      	mov	r6, r7
 8011368:	42be      	cmp	r6, r7
 801136a:	d900      	bls.n	801136e <__ssputs_r+0x86>
 801136c:	463e      	mov	r6, r7
 801136e:	4632      	mov	r2, r6
 8011370:	6820      	ldr	r0, [r4, #0]
 8011372:	4641      	mov	r1, r8
 8011374:	f000 f966 	bl	8011644 <memmove>
 8011378:	68a3      	ldr	r3, [r4, #8]
 801137a:	6822      	ldr	r2, [r4, #0]
 801137c:	1b9b      	subs	r3, r3, r6
 801137e:	4432      	add	r2, r6
 8011380:	60a3      	str	r3, [r4, #8]
 8011382:	6022      	str	r2, [r4, #0]
 8011384:	2000      	movs	r0, #0
 8011386:	e7db      	b.n	8011340 <__ssputs_r+0x58>
 8011388:	462a      	mov	r2, r5
 801138a:	f000 f981 	bl	8011690 <_realloc_r>
 801138e:	4606      	mov	r6, r0
 8011390:	2800      	cmp	r0, #0
 8011392:	d1e1      	bne.n	8011358 <__ssputs_r+0x70>
 8011394:	6921      	ldr	r1, [r4, #16]
 8011396:	4650      	mov	r0, sl
 8011398:	f7ff fefc 	bl	8011194 <_free_r>
 801139c:	e7c7      	b.n	801132e <__ssputs_r+0x46>
	...

080113a0 <_svfiprintf_r>:
 80113a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	4698      	mov	r8, r3
 80113a6:	898b      	ldrh	r3, [r1, #12]
 80113a8:	061b      	lsls	r3, r3, #24
 80113aa:	b09d      	sub	sp, #116	; 0x74
 80113ac:	4607      	mov	r7, r0
 80113ae:	460d      	mov	r5, r1
 80113b0:	4614      	mov	r4, r2
 80113b2:	d50e      	bpl.n	80113d2 <_svfiprintf_r+0x32>
 80113b4:	690b      	ldr	r3, [r1, #16]
 80113b6:	b963      	cbnz	r3, 80113d2 <_svfiprintf_r+0x32>
 80113b8:	2140      	movs	r1, #64	; 0x40
 80113ba:	f7ff ff3b 	bl	8011234 <_malloc_r>
 80113be:	6028      	str	r0, [r5, #0]
 80113c0:	6128      	str	r0, [r5, #16]
 80113c2:	b920      	cbnz	r0, 80113ce <_svfiprintf_r+0x2e>
 80113c4:	230c      	movs	r3, #12
 80113c6:	603b      	str	r3, [r7, #0]
 80113c8:	f04f 30ff 	mov.w	r0, #4294967295
 80113cc:	e0d1      	b.n	8011572 <_svfiprintf_r+0x1d2>
 80113ce:	2340      	movs	r3, #64	; 0x40
 80113d0:	616b      	str	r3, [r5, #20]
 80113d2:	2300      	movs	r3, #0
 80113d4:	9309      	str	r3, [sp, #36]	; 0x24
 80113d6:	2320      	movs	r3, #32
 80113d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80113e0:	2330      	movs	r3, #48	; 0x30
 80113e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801158c <_svfiprintf_r+0x1ec>
 80113e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113ea:	f04f 0901 	mov.w	r9, #1
 80113ee:	4623      	mov	r3, r4
 80113f0:	469a      	mov	sl, r3
 80113f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113f6:	b10a      	cbz	r2, 80113fc <_svfiprintf_r+0x5c>
 80113f8:	2a25      	cmp	r2, #37	; 0x25
 80113fa:	d1f9      	bne.n	80113f0 <_svfiprintf_r+0x50>
 80113fc:	ebba 0b04 	subs.w	fp, sl, r4
 8011400:	d00b      	beq.n	801141a <_svfiprintf_r+0x7a>
 8011402:	465b      	mov	r3, fp
 8011404:	4622      	mov	r2, r4
 8011406:	4629      	mov	r1, r5
 8011408:	4638      	mov	r0, r7
 801140a:	f7ff ff6d 	bl	80112e8 <__ssputs_r>
 801140e:	3001      	adds	r0, #1
 8011410:	f000 80aa 	beq.w	8011568 <_svfiprintf_r+0x1c8>
 8011414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011416:	445a      	add	r2, fp
 8011418:	9209      	str	r2, [sp, #36]	; 0x24
 801141a:	f89a 3000 	ldrb.w	r3, [sl]
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 80a2 	beq.w	8011568 <_svfiprintf_r+0x1c8>
 8011424:	2300      	movs	r3, #0
 8011426:	f04f 32ff 	mov.w	r2, #4294967295
 801142a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801142e:	f10a 0a01 	add.w	sl, sl, #1
 8011432:	9304      	str	r3, [sp, #16]
 8011434:	9307      	str	r3, [sp, #28]
 8011436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801143a:	931a      	str	r3, [sp, #104]	; 0x68
 801143c:	4654      	mov	r4, sl
 801143e:	2205      	movs	r2, #5
 8011440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011444:	4851      	ldr	r0, [pc, #324]	; (801158c <_svfiprintf_r+0x1ec>)
 8011446:	f7ee ff53 	bl	80002f0 <memchr>
 801144a:	9a04      	ldr	r2, [sp, #16]
 801144c:	b9d8      	cbnz	r0, 8011486 <_svfiprintf_r+0xe6>
 801144e:	06d0      	lsls	r0, r2, #27
 8011450:	bf44      	itt	mi
 8011452:	2320      	movmi	r3, #32
 8011454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011458:	0711      	lsls	r1, r2, #28
 801145a:	bf44      	itt	mi
 801145c:	232b      	movmi	r3, #43	; 0x2b
 801145e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011462:	f89a 3000 	ldrb.w	r3, [sl]
 8011466:	2b2a      	cmp	r3, #42	; 0x2a
 8011468:	d015      	beq.n	8011496 <_svfiprintf_r+0xf6>
 801146a:	9a07      	ldr	r2, [sp, #28]
 801146c:	4654      	mov	r4, sl
 801146e:	2000      	movs	r0, #0
 8011470:	f04f 0c0a 	mov.w	ip, #10
 8011474:	4621      	mov	r1, r4
 8011476:	f811 3b01 	ldrb.w	r3, [r1], #1
 801147a:	3b30      	subs	r3, #48	; 0x30
 801147c:	2b09      	cmp	r3, #9
 801147e:	d94e      	bls.n	801151e <_svfiprintf_r+0x17e>
 8011480:	b1b0      	cbz	r0, 80114b0 <_svfiprintf_r+0x110>
 8011482:	9207      	str	r2, [sp, #28]
 8011484:	e014      	b.n	80114b0 <_svfiprintf_r+0x110>
 8011486:	eba0 0308 	sub.w	r3, r0, r8
 801148a:	fa09 f303 	lsl.w	r3, r9, r3
 801148e:	4313      	orrs	r3, r2
 8011490:	9304      	str	r3, [sp, #16]
 8011492:	46a2      	mov	sl, r4
 8011494:	e7d2      	b.n	801143c <_svfiprintf_r+0x9c>
 8011496:	9b03      	ldr	r3, [sp, #12]
 8011498:	1d19      	adds	r1, r3, #4
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	9103      	str	r1, [sp, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	bfbb      	ittet	lt
 80114a2:	425b      	neglt	r3, r3
 80114a4:	f042 0202 	orrlt.w	r2, r2, #2
 80114a8:	9307      	strge	r3, [sp, #28]
 80114aa:	9307      	strlt	r3, [sp, #28]
 80114ac:	bfb8      	it	lt
 80114ae:	9204      	strlt	r2, [sp, #16]
 80114b0:	7823      	ldrb	r3, [r4, #0]
 80114b2:	2b2e      	cmp	r3, #46	; 0x2e
 80114b4:	d10c      	bne.n	80114d0 <_svfiprintf_r+0x130>
 80114b6:	7863      	ldrb	r3, [r4, #1]
 80114b8:	2b2a      	cmp	r3, #42	; 0x2a
 80114ba:	d135      	bne.n	8011528 <_svfiprintf_r+0x188>
 80114bc:	9b03      	ldr	r3, [sp, #12]
 80114be:	1d1a      	adds	r2, r3, #4
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	9203      	str	r2, [sp, #12]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	bfb8      	it	lt
 80114c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80114cc:	3402      	adds	r4, #2
 80114ce:	9305      	str	r3, [sp, #20]
 80114d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801159c <_svfiprintf_r+0x1fc>
 80114d4:	7821      	ldrb	r1, [r4, #0]
 80114d6:	2203      	movs	r2, #3
 80114d8:	4650      	mov	r0, sl
 80114da:	f7ee ff09 	bl	80002f0 <memchr>
 80114de:	b140      	cbz	r0, 80114f2 <_svfiprintf_r+0x152>
 80114e0:	2340      	movs	r3, #64	; 0x40
 80114e2:	eba0 000a 	sub.w	r0, r0, sl
 80114e6:	fa03 f000 	lsl.w	r0, r3, r0
 80114ea:	9b04      	ldr	r3, [sp, #16]
 80114ec:	4303      	orrs	r3, r0
 80114ee:	3401      	adds	r4, #1
 80114f0:	9304      	str	r3, [sp, #16]
 80114f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114f6:	4826      	ldr	r0, [pc, #152]	; (8011590 <_svfiprintf_r+0x1f0>)
 80114f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114fc:	2206      	movs	r2, #6
 80114fe:	f7ee fef7 	bl	80002f0 <memchr>
 8011502:	2800      	cmp	r0, #0
 8011504:	d038      	beq.n	8011578 <_svfiprintf_r+0x1d8>
 8011506:	4b23      	ldr	r3, [pc, #140]	; (8011594 <_svfiprintf_r+0x1f4>)
 8011508:	bb1b      	cbnz	r3, 8011552 <_svfiprintf_r+0x1b2>
 801150a:	9b03      	ldr	r3, [sp, #12]
 801150c:	3307      	adds	r3, #7
 801150e:	f023 0307 	bic.w	r3, r3, #7
 8011512:	3308      	adds	r3, #8
 8011514:	9303      	str	r3, [sp, #12]
 8011516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011518:	4433      	add	r3, r6
 801151a:	9309      	str	r3, [sp, #36]	; 0x24
 801151c:	e767      	b.n	80113ee <_svfiprintf_r+0x4e>
 801151e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011522:	460c      	mov	r4, r1
 8011524:	2001      	movs	r0, #1
 8011526:	e7a5      	b.n	8011474 <_svfiprintf_r+0xd4>
 8011528:	2300      	movs	r3, #0
 801152a:	3401      	adds	r4, #1
 801152c:	9305      	str	r3, [sp, #20]
 801152e:	4619      	mov	r1, r3
 8011530:	f04f 0c0a 	mov.w	ip, #10
 8011534:	4620      	mov	r0, r4
 8011536:	f810 2b01 	ldrb.w	r2, [r0], #1
 801153a:	3a30      	subs	r2, #48	; 0x30
 801153c:	2a09      	cmp	r2, #9
 801153e:	d903      	bls.n	8011548 <_svfiprintf_r+0x1a8>
 8011540:	2b00      	cmp	r3, #0
 8011542:	d0c5      	beq.n	80114d0 <_svfiprintf_r+0x130>
 8011544:	9105      	str	r1, [sp, #20]
 8011546:	e7c3      	b.n	80114d0 <_svfiprintf_r+0x130>
 8011548:	fb0c 2101 	mla	r1, ip, r1, r2
 801154c:	4604      	mov	r4, r0
 801154e:	2301      	movs	r3, #1
 8011550:	e7f0      	b.n	8011534 <_svfiprintf_r+0x194>
 8011552:	ab03      	add	r3, sp, #12
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	462a      	mov	r2, r5
 8011558:	4b0f      	ldr	r3, [pc, #60]	; (8011598 <_svfiprintf_r+0x1f8>)
 801155a:	a904      	add	r1, sp, #16
 801155c:	4638      	mov	r0, r7
 801155e:	f7fe f88f 	bl	800f680 <_printf_float>
 8011562:	1c42      	adds	r2, r0, #1
 8011564:	4606      	mov	r6, r0
 8011566:	d1d6      	bne.n	8011516 <_svfiprintf_r+0x176>
 8011568:	89ab      	ldrh	r3, [r5, #12]
 801156a:	065b      	lsls	r3, r3, #25
 801156c:	f53f af2c 	bmi.w	80113c8 <_svfiprintf_r+0x28>
 8011570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011572:	b01d      	add	sp, #116	; 0x74
 8011574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011578:	ab03      	add	r3, sp, #12
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	462a      	mov	r2, r5
 801157e:	4b06      	ldr	r3, [pc, #24]	; (8011598 <_svfiprintf_r+0x1f8>)
 8011580:	a904      	add	r1, sp, #16
 8011582:	4638      	mov	r0, r7
 8011584:	f7fe fb08 	bl	800fb98 <_printf_i>
 8011588:	e7eb      	b.n	8011562 <_svfiprintf_r+0x1c2>
 801158a:	bf00      	nop
 801158c:	080126bc 	.word	0x080126bc
 8011590:	080126c6 	.word	0x080126c6
 8011594:	0800f681 	.word	0x0800f681
 8011598:	080112e9 	.word	0x080112e9
 801159c:	080126c2 	.word	0x080126c2

080115a0 <_sbrk_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4d06      	ldr	r5, [pc, #24]	; (80115bc <_sbrk_r+0x1c>)
 80115a4:	2300      	movs	r3, #0
 80115a6:	4604      	mov	r4, r0
 80115a8:	4608      	mov	r0, r1
 80115aa:	602b      	str	r3, [r5, #0]
 80115ac:	f7f1 fbaa 	bl	8002d04 <_sbrk>
 80115b0:	1c43      	adds	r3, r0, #1
 80115b2:	d102      	bne.n	80115ba <_sbrk_r+0x1a>
 80115b4:	682b      	ldr	r3, [r5, #0]
 80115b6:	b103      	cbz	r3, 80115ba <_sbrk_r+0x1a>
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	bd38      	pop	{r3, r4, r5, pc}
 80115bc:	2401bdb8 	.word	0x2401bdb8

080115c0 <__assert_func>:
 80115c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115c2:	4614      	mov	r4, r2
 80115c4:	461a      	mov	r2, r3
 80115c6:	4b09      	ldr	r3, [pc, #36]	; (80115ec <__assert_func+0x2c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4605      	mov	r5, r0
 80115cc:	68d8      	ldr	r0, [r3, #12]
 80115ce:	b14c      	cbz	r4, 80115e4 <__assert_func+0x24>
 80115d0:	4b07      	ldr	r3, [pc, #28]	; (80115f0 <__assert_func+0x30>)
 80115d2:	9100      	str	r1, [sp, #0]
 80115d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115d8:	4906      	ldr	r1, [pc, #24]	; (80115f4 <__assert_func+0x34>)
 80115da:	462b      	mov	r3, r5
 80115dc:	f000 f80e 	bl	80115fc <fiprintf>
 80115e0:	f000 faa4 	bl	8011b2c <abort>
 80115e4:	4b04      	ldr	r3, [pc, #16]	; (80115f8 <__assert_func+0x38>)
 80115e6:	461c      	mov	r4, r3
 80115e8:	e7f3      	b.n	80115d2 <__assert_func+0x12>
 80115ea:	bf00      	nop
 80115ec:	24000024 	.word	0x24000024
 80115f0:	080126cd 	.word	0x080126cd
 80115f4:	080126da 	.word	0x080126da
 80115f8:	08012708 	.word	0x08012708

080115fc <fiprintf>:
 80115fc:	b40e      	push	{r1, r2, r3}
 80115fe:	b503      	push	{r0, r1, lr}
 8011600:	4601      	mov	r1, r0
 8011602:	ab03      	add	r3, sp, #12
 8011604:	4805      	ldr	r0, [pc, #20]	; (801161c <fiprintf+0x20>)
 8011606:	f853 2b04 	ldr.w	r2, [r3], #4
 801160a:	6800      	ldr	r0, [r0, #0]
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	f000 f88f 	bl	8011730 <_vfiprintf_r>
 8011612:	b002      	add	sp, #8
 8011614:	f85d eb04 	ldr.w	lr, [sp], #4
 8011618:	b003      	add	sp, #12
 801161a:	4770      	bx	lr
 801161c:	24000024 	.word	0x24000024

08011620 <__ascii_mbtowc>:
 8011620:	b082      	sub	sp, #8
 8011622:	b901      	cbnz	r1, 8011626 <__ascii_mbtowc+0x6>
 8011624:	a901      	add	r1, sp, #4
 8011626:	b142      	cbz	r2, 801163a <__ascii_mbtowc+0x1a>
 8011628:	b14b      	cbz	r3, 801163e <__ascii_mbtowc+0x1e>
 801162a:	7813      	ldrb	r3, [r2, #0]
 801162c:	600b      	str	r3, [r1, #0]
 801162e:	7812      	ldrb	r2, [r2, #0]
 8011630:	1e10      	subs	r0, r2, #0
 8011632:	bf18      	it	ne
 8011634:	2001      	movne	r0, #1
 8011636:	b002      	add	sp, #8
 8011638:	4770      	bx	lr
 801163a:	4610      	mov	r0, r2
 801163c:	e7fb      	b.n	8011636 <__ascii_mbtowc+0x16>
 801163e:	f06f 0001 	mvn.w	r0, #1
 8011642:	e7f8      	b.n	8011636 <__ascii_mbtowc+0x16>

08011644 <memmove>:
 8011644:	4288      	cmp	r0, r1
 8011646:	b510      	push	{r4, lr}
 8011648:	eb01 0402 	add.w	r4, r1, r2
 801164c:	d902      	bls.n	8011654 <memmove+0x10>
 801164e:	4284      	cmp	r4, r0
 8011650:	4623      	mov	r3, r4
 8011652:	d807      	bhi.n	8011664 <memmove+0x20>
 8011654:	1e43      	subs	r3, r0, #1
 8011656:	42a1      	cmp	r1, r4
 8011658:	d008      	beq.n	801166c <memmove+0x28>
 801165a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801165e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011662:	e7f8      	b.n	8011656 <memmove+0x12>
 8011664:	4402      	add	r2, r0
 8011666:	4601      	mov	r1, r0
 8011668:	428a      	cmp	r2, r1
 801166a:	d100      	bne.n	801166e <memmove+0x2a>
 801166c:	bd10      	pop	{r4, pc}
 801166e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011676:	e7f7      	b.n	8011668 <memmove+0x24>

08011678 <__malloc_lock>:
 8011678:	4801      	ldr	r0, [pc, #4]	; (8011680 <__malloc_lock+0x8>)
 801167a:	f000 bc17 	b.w	8011eac <__retarget_lock_acquire_recursive>
 801167e:	bf00      	nop
 8011680:	2401bdc0 	.word	0x2401bdc0

08011684 <__malloc_unlock>:
 8011684:	4801      	ldr	r0, [pc, #4]	; (801168c <__malloc_unlock+0x8>)
 8011686:	f000 bc12 	b.w	8011eae <__retarget_lock_release_recursive>
 801168a:	bf00      	nop
 801168c:	2401bdc0 	.word	0x2401bdc0

08011690 <_realloc_r>:
 8011690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011692:	4607      	mov	r7, r0
 8011694:	4614      	mov	r4, r2
 8011696:	460e      	mov	r6, r1
 8011698:	b921      	cbnz	r1, 80116a4 <_realloc_r+0x14>
 801169a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801169e:	4611      	mov	r1, r2
 80116a0:	f7ff bdc8 	b.w	8011234 <_malloc_r>
 80116a4:	b922      	cbnz	r2, 80116b0 <_realloc_r+0x20>
 80116a6:	f7ff fd75 	bl	8011194 <_free_r>
 80116aa:	4625      	mov	r5, r4
 80116ac:	4628      	mov	r0, r5
 80116ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116b0:	f000 fc62 	bl	8011f78 <_malloc_usable_size_r>
 80116b4:	42a0      	cmp	r0, r4
 80116b6:	d20f      	bcs.n	80116d8 <_realloc_r+0x48>
 80116b8:	4621      	mov	r1, r4
 80116ba:	4638      	mov	r0, r7
 80116bc:	f7ff fdba 	bl	8011234 <_malloc_r>
 80116c0:	4605      	mov	r5, r0
 80116c2:	2800      	cmp	r0, #0
 80116c4:	d0f2      	beq.n	80116ac <_realloc_r+0x1c>
 80116c6:	4631      	mov	r1, r6
 80116c8:	4622      	mov	r2, r4
 80116ca:	f7ff f9c7 	bl	8010a5c <memcpy>
 80116ce:	4631      	mov	r1, r6
 80116d0:	4638      	mov	r0, r7
 80116d2:	f7ff fd5f 	bl	8011194 <_free_r>
 80116d6:	e7e9      	b.n	80116ac <_realloc_r+0x1c>
 80116d8:	4635      	mov	r5, r6
 80116da:	e7e7      	b.n	80116ac <_realloc_r+0x1c>

080116dc <__sfputc_r>:
 80116dc:	6893      	ldr	r3, [r2, #8]
 80116de:	3b01      	subs	r3, #1
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	b410      	push	{r4}
 80116e4:	6093      	str	r3, [r2, #8]
 80116e6:	da08      	bge.n	80116fa <__sfputc_r+0x1e>
 80116e8:	6994      	ldr	r4, [r2, #24]
 80116ea:	42a3      	cmp	r3, r4
 80116ec:	db01      	blt.n	80116f2 <__sfputc_r+0x16>
 80116ee:	290a      	cmp	r1, #10
 80116f0:	d103      	bne.n	80116fa <__sfputc_r+0x1e>
 80116f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116f6:	f000 b94b 	b.w	8011990 <__swbuf_r>
 80116fa:	6813      	ldr	r3, [r2, #0]
 80116fc:	1c58      	adds	r0, r3, #1
 80116fe:	6010      	str	r0, [r2, #0]
 8011700:	7019      	strb	r1, [r3, #0]
 8011702:	4608      	mov	r0, r1
 8011704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011708:	4770      	bx	lr

0801170a <__sfputs_r>:
 801170a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	4614      	mov	r4, r2
 8011712:	18d5      	adds	r5, r2, r3
 8011714:	42ac      	cmp	r4, r5
 8011716:	d101      	bne.n	801171c <__sfputs_r+0x12>
 8011718:	2000      	movs	r0, #0
 801171a:	e007      	b.n	801172c <__sfputs_r+0x22>
 801171c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011720:	463a      	mov	r2, r7
 8011722:	4630      	mov	r0, r6
 8011724:	f7ff ffda 	bl	80116dc <__sfputc_r>
 8011728:	1c43      	adds	r3, r0, #1
 801172a:	d1f3      	bne.n	8011714 <__sfputs_r+0xa>
 801172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011730 <_vfiprintf_r>:
 8011730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011734:	460d      	mov	r5, r1
 8011736:	b09d      	sub	sp, #116	; 0x74
 8011738:	4614      	mov	r4, r2
 801173a:	4698      	mov	r8, r3
 801173c:	4606      	mov	r6, r0
 801173e:	b118      	cbz	r0, 8011748 <_vfiprintf_r+0x18>
 8011740:	6983      	ldr	r3, [r0, #24]
 8011742:	b90b      	cbnz	r3, 8011748 <_vfiprintf_r+0x18>
 8011744:	f000 fb14 	bl	8011d70 <__sinit>
 8011748:	4b89      	ldr	r3, [pc, #548]	; (8011970 <_vfiprintf_r+0x240>)
 801174a:	429d      	cmp	r5, r3
 801174c:	d11b      	bne.n	8011786 <_vfiprintf_r+0x56>
 801174e:	6875      	ldr	r5, [r6, #4]
 8011750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011752:	07d9      	lsls	r1, r3, #31
 8011754:	d405      	bmi.n	8011762 <_vfiprintf_r+0x32>
 8011756:	89ab      	ldrh	r3, [r5, #12]
 8011758:	059a      	lsls	r2, r3, #22
 801175a:	d402      	bmi.n	8011762 <_vfiprintf_r+0x32>
 801175c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801175e:	f000 fba5 	bl	8011eac <__retarget_lock_acquire_recursive>
 8011762:	89ab      	ldrh	r3, [r5, #12]
 8011764:	071b      	lsls	r3, r3, #28
 8011766:	d501      	bpl.n	801176c <_vfiprintf_r+0x3c>
 8011768:	692b      	ldr	r3, [r5, #16]
 801176a:	b9eb      	cbnz	r3, 80117a8 <_vfiprintf_r+0x78>
 801176c:	4629      	mov	r1, r5
 801176e:	4630      	mov	r0, r6
 8011770:	f000 f96e 	bl	8011a50 <__swsetup_r>
 8011774:	b1c0      	cbz	r0, 80117a8 <_vfiprintf_r+0x78>
 8011776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011778:	07dc      	lsls	r4, r3, #31
 801177a:	d50e      	bpl.n	801179a <_vfiprintf_r+0x6a>
 801177c:	f04f 30ff 	mov.w	r0, #4294967295
 8011780:	b01d      	add	sp, #116	; 0x74
 8011782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011786:	4b7b      	ldr	r3, [pc, #492]	; (8011974 <_vfiprintf_r+0x244>)
 8011788:	429d      	cmp	r5, r3
 801178a:	d101      	bne.n	8011790 <_vfiprintf_r+0x60>
 801178c:	68b5      	ldr	r5, [r6, #8]
 801178e:	e7df      	b.n	8011750 <_vfiprintf_r+0x20>
 8011790:	4b79      	ldr	r3, [pc, #484]	; (8011978 <_vfiprintf_r+0x248>)
 8011792:	429d      	cmp	r5, r3
 8011794:	bf08      	it	eq
 8011796:	68f5      	ldreq	r5, [r6, #12]
 8011798:	e7da      	b.n	8011750 <_vfiprintf_r+0x20>
 801179a:	89ab      	ldrh	r3, [r5, #12]
 801179c:	0598      	lsls	r0, r3, #22
 801179e:	d4ed      	bmi.n	801177c <_vfiprintf_r+0x4c>
 80117a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117a2:	f000 fb84 	bl	8011eae <__retarget_lock_release_recursive>
 80117a6:	e7e9      	b.n	801177c <_vfiprintf_r+0x4c>
 80117a8:	2300      	movs	r3, #0
 80117aa:	9309      	str	r3, [sp, #36]	; 0x24
 80117ac:	2320      	movs	r3, #32
 80117ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80117b6:	2330      	movs	r3, #48	; 0x30
 80117b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801197c <_vfiprintf_r+0x24c>
 80117bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117c0:	f04f 0901 	mov.w	r9, #1
 80117c4:	4623      	mov	r3, r4
 80117c6:	469a      	mov	sl, r3
 80117c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117cc:	b10a      	cbz	r2, 80117d2 <_vfiprintf_r+0xa2>
 80117ce:	2a25      	cmp	r2, #37	; 0x25
 80117d0:	d1f9      	bne.n	80117c6 <_vfiprintf_r+0x96>
 80117d2:	ebba 0b04 	subs.w	fp, sl, r4
 80117d6:	d00b      	beq.n	80117f0 <_vfiprintf_r+0xc0>
 80117d8:	465b      	mov	r3, fp
 80117da:	4622      	mov	r2, r4
 80117dc:	4629      	mov	r1, r5
 80117de:	4630      	mov	r0, r6
 80117e0:	f7ff ff93 	bl	801170a <__sfputs_r>
 80117e4:	3001      	adds	r0, #1
 80117e6:	f000 80aa 	beq.w	801193e <_vfiprintf_r+0x20e>
 80117ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117ec:	445a      	add	r2, fp
 80117ee:	9209      	str	r2, [sp, #36]	; 0x24
 80117f0:	f89a 3000 	ldrb.w	r3, [sl]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 80a2 	beq.w	801193e <_vfiprintf_r+0x20e>
 80117fa:	2300      	movs	r3, #0
 80117fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011804:	f10a 0a01 	add.w	sl, sl, #1
 8011808:	9304      	str	r3, [sp, #16]
 801180a:	9307      	str	r3, [sp, #28]
 801180c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011810:	931a      	str	r3, [sp, #104]	; 0x68
 8011812:	4654      	mov	r4, sl
 8011814:	2205      	movs	r2, #5
 8011816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801181a:	4858      	ldr	r0, [pc, #352]	; (801197c <_vfiprintf_r+0x24c>)
 801181c:	f7ee fd68 	bl	80002f0 <memchr>
 8011820:	9a04      	ldr	r2, [sp, #16]
 8011822:	b9d8      	cbnz	r0, 801185c <_vfiprintf_r+0x12c>
 8011824:	06d1      	lsls	r1, r2, #27
 8011826:	bf44      	itt	mi
 8011828:	2320      	movmi	r3, #32
 801182a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801182e:	0713      	lsls	r3, r2, #28
 8011830:	bf44      	itt	mi
 8011832:	232b      	movmi	r3, #43	; 0x2b
 8011834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011838:	f89a 3000 	ldrb.w	r3, [sl]
 801183c:	2b2a      	cmp	r3, #42	; 0x2a
 801183e:	d015      	beq.n	801186c <_vfiprintf_r+0x13c>
 8011840:	9a07      	ldr	r2, [sp, #28]
 8011842:	4654      	mov	r4, sl
 8011844:	2000      	movs	r0, #0
 8011846:	f04f 0c0a 	mov.w	ip, #10
 801184a:	4621      	mov	r1, r4
 801184c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011850:	3b30      	subs	r3, #48	; 0x30
 8011852:	2b09      	cmp	r3, #9
 8011854:	d94e      	bls.n	80118f4 <_vfiprintf_r+0x1c4>
 8011856:	b1b0      	cbz	r0, 8011886 <_vfiprintf_r+0x156>
 8011858:	9207      	str	r2, [sp, #28]
 801185a:	e014      	b.n	8011886 <_vfiprintf_r+0x156>
 801185c:	eba0 0308 	sub.w	r3, r0, r8
 8011860:	fa09 f303 	lsl.w	r3, r9, r3
 8011864:	4313      	orrs	r3, r2
 8011866:	9304      	str	r3, [sp, #16]
 8011868:	46a2      	mov	sl, r4
 801186a:	e7d2      	b.n	8011812 <_vfiprintf_r+0xe2>
 801186c:	9b03      	ldr	r3, [sp, #12]
 801186e:	1d19      	adds	r1, r3, #4
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	9103      	str	r1, [sp, #12]
 8011874:	2b00      	cmp	r3, #0
 8011876:	bfbb      	ittet	lt
 8011878:	425b      	neglt	r3, r3
 801187a:	f042 0202 	orrlt.w	r2, r2, #2
 801187e:	9307      	strge	r3, [sp, #28]
 8011880:	9307      	strlt	r3, [sp, #28]
 8011882:	bfb8      	it	lt
 8011884:	9204      	strlt	r2, [sp, #16]
 8011886:	7823      	ldrb	r3, [r4, #0]
 8011888:	2b2e      	cmp	r3, #46	; 0x2e
 801188a:	d10c      	bne.n	80118a6 <_vfiprintf_r+0x176>
 801188c:	7863      	ldrb	r3, [r4, #1]
 801188e:	2b2a      	cmp	r3, #42	; 0x2a
 8011890:	d135      	bne.n	80118fe <_vfiprintf_r+0x1ce>
 8011892:	9b03      	ldr	r3, [sp, #12]
 8011894:	1d1a      	adds	r2, r3, #4
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	9203      	str	r2, [sp, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	bfb8      	it	lt
 801189e:	f04f 33ff 	movlt.w	r3, #4294967295
 80118a2:	3402      	adds	r4, #2
 80118a4:	9305      	str	r3, [sp, #20]
 80118a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801198c <_vfiprintf_r+0x25c>
 80118aa:	7821      	ldrb	r1, [r4, #0]
 80118ac:	2203      	movs	r2, #3
 80118ae:	4650      	mov	r0, sl
 80118b0:	f7ee fd1e 	bl	80002f0 <memchr>
 80118b4:	b140      	cbz	r0, 80118c8 <_vfiprintf_r+0x198>
 80118b6:	2340      	movs	r3, #64	; 0x40
 80118b8:	eba0 000a 	sub.w	r0, r0, sl
 80118bc:	fa03 f000 	lsl.w	r0, r3, r0
 80118c0:	9b04      	ldr	r3, [sp, #16]
 80118c2:	4303      	orrs	r3, r0
 80118c4:	3401      	adds	r4, #1
 80118c6:	9304      	str	r3, [sp, #16]
 80118c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118cc:	482c      	ldr	r0, [pc, #176]	; (8011980 <_vfiprintf_r+0x250>)
 80118ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118d2:	2206      	movs	r2, #6
 80118d4:	f7ee fd0c 	bl	80002f0 <memchr>
 80118d8:	2800      	cmp	r0, #0
 80118da:	d03f      	beq.n	801195c <_vfiprintf_r+0x22c>
 80118dc:	4b29      	ldr	r3, [pc, #164]	; (8011984 <_vfiprintf_r+0x254>)
 80118de:	bb1b      	cbnz	r3, 8011928 <_vfiprintf_r+0x1f8>
 80118e0:	9b03      	ldr	r3, [sp, #12]
 80118e2:	3307      	adds	r3, #7
 80118e4:	f023 0307 	bic.w	r3, r3, #7
 80118e8:	3308      	adds	r3, #8
 80118ea:	9303      	str	r3, [sp, #12]
 80118ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ee:	443b      	add	r3, r7
 80118f0:	9309      	str	r3, [sp, #36]	; 0x24
 80118f2:	e767      	b.n	80117c4 <_vfiprintf_r+0x94>
 80118f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80118f8:	460c      	mov	r4, r1
 80118fa:	2001      	movs	r0, #1
 80118fc:	e7a5      	b.n	801184a <_vfiprintf_r+0x11a>
 80118fe:	2300      	movs	r3, #0
 8011900:	3401      	adds	r4, #1
 8011902:	9305      	str	r3, [sp, #20]
 8011904:	4619      	mov	r1, r3
 8011906:	f04f 0c0a 	mov.w	ip, #10
 801190a:	4620      	mov	r0, r4
 801190c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011910:	3a30      	subs	r2, #48	; 0x30
 8011912:	2a09      	cmp	r2, #9
 8011914:	d903      	bls.n	801191e <_vfiprintf_r+0x1ee>
 8011916:	2b00      	cmp	r3, #0
 8011918:	d0c5      	beq.n	80118a6 <_vfiprintf_r+0x176>
 801191a:	9105      	str	r1, [sp, #20]
 801191c:	e7c3      	b.n	80118a6 <_vfiprintf_r+0x176>
 801191e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011922:	4604      	mov	r4, r0
 8011924:	2301      	movs	r3, #1
 8011926:	e7f0      	b.n	801190a <_vfiprintf_r+0x1da>
 8011928:	ab03      	add	r3, sp, #12
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	462a      	mov	r2, r5
 801192e:	4b16      	ldr	r3, [pc, #88]	; (8011988 <_vfiprintf_r+0x258>)
 8011930:	a904      	add	r1, sp, #16
 8011932:	4630      	mov	r0, r6
 8011934:	f7fd fea4 	bl	800f680 <_printf_float>
 8011938:	4607      	mov	r7, r0
 801193a:	1c78      	adds	r0, r7, #1
 801193c:	d1d6      	bne.n	80118ec <_vfiprintf_r+0x1bc>
 801193e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011940:	07d9      	lsls	r1, r3, #31
 8011942:	d405      	bmi.n	8011950 <_vfiprintf_r+0x220>
 8011944:	89ab      	ldrh	r3, [r5, #12]
 8011946:	059a      	lsls	r2, r3, #22
 8011948:	d402      	bmi.n	8011950 <_vfiprintf_r+0x220>
 801194a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801194c:	f000 faaf 	bl	8011eae <__retarget_lock_release_recursive>
 8011950:	89ab      	ldrh	r3, [r5, #12]
 8011952:	065b      	lsls	r3, r3, #25
 8011954:	f53f af12 	bmi.w	801177c <_vfiprintf_r+0x4c>
 8011958:	9809      	ldr	r0, [sp, #36]	; 0x24
 801195a:	e711      	b.n	8011780 <_vfiprintf_r+0x50>
 801195c:	ab03      	add	r3, sp, #12
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	462a      	mov	r2, r5
 8011962:	4b09      	ldr	r3, [pc, #36]	; (8011988 <_vfiprintf_r+0x258>)
 8011964:	a904      	add	r1, sp, #16
 8011966:	4630      	mov	r0, r6
 8011968:	f7fe f916 	bl	800fb98 <_printf_i>
 801196c:	e7e4      	b.n	8011938 <_vfiprintf_r+0x208>
 801196e:	bf00      	nop
 8011970:	08012834 	.word	0x08012834
 8011974:	08012854 	.word	0x08012854
 8011978:	08012814 	.word	0x08012814
 801197c:	080126bc 	.word	0x080126bc
 8011980:	080126c6 	.word	0x080126c6
 8011984:	0800f681 	.word	0x0800f681
 8011988:	0801170b 	.word	0x0801170b
 801198c:	080126c2 	.word	0x080126c2

08011990 <__swbuf_r>:
 8011990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011992:	460e      	mov	r6, r1
 8011994:	4614      	mov	r4, r2
 8011996:	4605      	mov	r5, r0
 8011998:	b118      	cbz	r0, 80119a2 <__swbuf_r+0x12>
 801199a:	6983      	ldr	r3, [r0, #24]
 801199c:	b90b      	cbnz	r3, 80119a2 <__swbuf_r+0x12>
 801199e:	f000 f9e7 	bl	8011d70 <__sinit>
 80119a2:	4b21      	ldr	r3, [pc, #132]	; (8011a28 <__swbuf_r+0x98>)
 80119a4:	429c      	cmp	r4, r3
 80119a6:	d12b      	bne.n	8011a00 <__swbuf_r+0x70>
 80119a8:	686c      	ldr	r4, [r5, #4]
 80119aa:	69a3      	ldr	r3, [r4, #24]
 80119ac:	60a3      	str	r3, [r4, #8]
 80119ae:	89a3      	ldrh	r3, [r4, #12]
 80119b0:	071a      	lsls	r2, r3, #28
 80119b2:	d52f      	bpl.n	8011a14 <__swbuf_r+0x84>
 80119b4:	6923      	ldr	r3, [r4, #16]
 80119b6:	b36b      	cbz	r3, 8011a14 <__swbuf_r+0x84>
 80119b8:	6923      	ldr	r3, [r4, #16]
 80119ba:	6820      	ldr	r0, [r4, #0]
 80119bc:	1ac0      	subs	r0, r0, r3
 80119be:	6963      	ldr	r3, [r4, #20]
 80119c0:	b2f6      	uxtb	r6, r6
 80119c2:	4283      	cmp	r3, r0
 80119c4:	4637      	mov	r7, r6
 80119c6:	dc04      	bgt.n	80119d2 <__swbuf_r+0x42>
 80119c8:	4621      	mov	r1, r4
 80119ca:	4628      	mov	r0, r5
 80119cc:	f000 f93c 	bl	8011c48 <_fflush_r>
 80119d0:	bb30      	cbnz	r0, 8011a20 <__swbuf_r+0x90>
 80119d2:	68a3      	ldr	r3, [r4, #8]
 80119d4:	3b01      	subs	r3, #1
 80119d6:	60a3      	str	r3, [r4, #8]
 80119d8:	6823      	ldr	r3, [r4, #0]
 80119da:	1c5a      	adds	r2, r3, #1
 80119dc:	6022      	str	r2, [r4, #0]
 80119de:	701e      	strb	r6, [r3, #0]
 80119e0:	6963      	ldr	r3, [r4, #20]
 80119e2:	3001      	adds	r0, #1
 80119e4:	4283      	cmp	r3, r0
 80119e6:	d004      	beq.n	80119f2 <__swbuf_r+0x62>
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	07db      	lsls	r3, r3, #31
 80119ec:	d506      	bpl.n	80119fc <__swbuf_r+0x6c>
 80119ee:	2e0a      	cmp	r6, #10
 80119f0:	d104      	bne.n	80119fc <__swbuf_r+0x6c>
 80119f2:	4621      	mov	r1, r4
 80119f4:	4628      	mov	r0, r5
 80119f6:	f000 f927 	bl	8011c48 <_fflush_r>
 80119fa:	b988      	cbnz	r0, 8011a20 <__swbuf_r+0x90>
 80119fc:	4638      	mov	r0, r7
 80119fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a00:	4b0a      	ldr	r3, [pc, #40]	; (8011a2c <__swbuf_r+0x9c>)
 8011a02:	429c      	cmp	r4, r3
 8011a04:	d101      	bne.n	8011a0a <__swbuf_r+0x7a>
 8011a06:	68ac      	ldr	r4, [r5, #8]
 8011a08:	e7cf      	b.n	80119aa <__swbuf_r+0x1a>
 8011a0a:	4b09      	ldr	r3, [pc, #36]	; (8011a30 <__swbuf_r+0xa0>)
 8011a0c:	429c      	cmp	r4, r3
 8011a0e:	bf08      	it	eq
 8011a10:	68ec      	ldreq	r4, [r5, #12]
 8011a12:	e7ca      	b.n	80119aa <__swbuf_r+0x1a>
 8011a14:	4621      	mov	r1, r4
 8011a16:	4628      	mov	r0, r5
 8011a18:	f000 f81a 	bl	8011a50 <__swsetup_r>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	d0cb      	beq.n	80119b8 <__swbuf_r+0x28>
 8011a20:	f04f 37ff 	mov.w	r7, #4294967295
 8011a24:	e7ea      	b.n	80119fc <__swbuf_r+0x6c>
 8011a26:	bf00      	nop
 8011a28:	08012834 	.word	0x08012834
 8011a2c:	08012854 	.word	0x08012854
 8011a30:	08012814 	.word	0x08012814

08011a34 <__ascii_wctomb>:
 8011a34:	b149      	cbz	r1, 8011a4a <__ascii_wctomb+0x16>
 8011a36:	2aff      	cmp	r2, #255	; 0xff
 8011a38:	bf85      	ittet	hi
 8011a3a:	238a      	movhi	r3, #138	; 0x8a
 8011a3c:	6003      	strhi	r3, [r0, #0]
 8011a3e:	700a      	strbls	r2, [r1, #0]
 8011a40:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a44:	bf98      	it	ls
 8011a46:	2001      	movls	r0, #1
 8011a48:	4770      	bx	lr
 8011a4a:	4608      	mov	r0, r1
 8011a4c:	4770      	bx	lr
	...

08011a50 <__swsetup_r>:
 8011a50:	4b32      	ldr	r3, [pc, #200]	; (8011b1c <__swsetup_r+0xcc>)
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	681d      	ldr	r5, [r3, #0]
 8011a56:	4606      	mov	r6, r0
 8011a58:	460c      	mov	r4, r1
 8011a5a:	b125      	cbz	r5, 8011a66 <__swsetup_r+0x16>
 8011a5c:	69ab      	ldr	r3, [r5, #24]
 8011a5e:	b913      	cbnz	r3, 8011a66 <__swsetup_r+0x16>
 8011a60:	4628      	mov	r0, r5
 8011a62:	f000 f985 	bl	8011d70 <__sinit>
 8011a66:	4b2e      	ldr	r3, [pc, #184]	; (8011b20 <__swsetup_r+0xd0>)
 8011a68:	429c      	cmp	r4, r3
 8011a6a:	d10f      	bne.n	8011a8c <__swsetup_r+0x3c>
 8011a6c:	686c      	ldr	r4, [r5, #4]
 8011a6e:	89a3      	ldrh	r3, [r4, #12]
 8011a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a74:	0719      	lsls	r1, r3, #28
 8011a76:	d42c      	bmi.n	8011ad2 <__swsetup_r+0x82>
 8011a78:	06dd      	lsls	r5, r3, #27
 8011a7a:	d411      	bmi.n	8011aa0 <__swsetup_r+0x50>
 8011a7c:	2309      	movs	r3, #9
 8011a7e:	6033      	str	r3, [r6, #0]
 8011a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a84:	81a3      	strh	r3, [r4, #12]
 8011a86:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8a:	e03e      	b.n	8011b0a <__swsetup_r+0xba>
 8011a8c:	4b25      	ldr	r3, [pc, #148]	; (8011b24 <__swsetup_r+0xd4>)
 8011a8e:	429c      	cmp	r4, r3
 8011a90:	d101      	bne.n	8011a96 <__swsetup_r+0x46>
 8011a92:	68ac      	ldr	r4, [r5, #8]
 8011a94:	e7eb      	b.n	8011a6e <__swsetup_r+0x1e>
 8011a96:	4b24      	ldr	r3, [pc, #144]	; (8011b28 <__swsetup_r+0xd8>)
 8011a98:	429c      	cmp	r4, r3
 8011a9a:	bf08      	it	eq
 8011a9c:	68ec      	ldreq	r4, [r5, #12]
 8011a9e:	e7e6      	b.n	8011a6e <__swsetup_r+0x1e>
 8011aa0:	0758      	lsls	r0, r3, #29
 8011aa2:	d512      	bpl.n	8011aca <__swsetup_r+0x7a>
 8011aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aa6:	b141      	cbz	r1, 8011aba <__swsetup_r+0x6a>
 8011aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011aac:	4299      	cmp	r1, r3
 8011aae:	d002      	beq.n	8011ab6 <__swsetup_r+0x66>
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f7ff fb6f 	bl	8011194 <_free_r>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8011aba:	89a3      	ldrh	r3, [r4, #12]
 8011abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ac0:	81a3      	strh	r3, [r4, #12]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	6063      	str	r3, [r4, #4]
 8011ac6:	6923      	ldr	r3, [r4, #16]
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	89a3      	ldrh	r3, [r4, #12]
 8011acc:	f043 0308 	orr.w	r3, r3, #8
 8011ad0:	81a3      	strh	r3, [r4, #12]
 8011ad2:	6923      	ldr	r3, [r4, #16]
 8011ad4:	b94b      	cbnz	r3, 8011aea <__swsetup_r+0x9a>
 8011ad6:	89a3      	ldrh	r3, [r4, #12]
 8011ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ae0:	d003      	beq.n	8011aea <__swsetup_r+0x9a>
 8011ae2:	4621      	mov	r1, r4
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f000 fa07 	bl	8011ef8 <__smakebuf_r>
 8011aea:	89a0      	ldrh	r0, [r4, #12]
 8011aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011af0:	f010 0301 	ands.w	r3, r0, #1
 8011af4:	d00a      	beq.n	8011b0c <__swsetup_r+0xbc>
 8011af6:	2300      	movs	r3, #0
 8011af8:	60a3      	str	r3, [r4, #8]
 8011afa:	6963      	ldr	r3, [r4, #20]
 8011afc:	425b      	negs	r3, r3
 8011afe:	61a3      	str	r3, [r4, #24]
 8011b00:	6923      	ldr	r3, [r4, #16]
 8011b02:	b943      	cbnz	r3, 8011b16 <__swsetup_r+0xc6>
 8011b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b08:	d1ba      	bne.n	8011a80 <__swsetup_r+0x30>
 8011b0a:	bd70      	pop	{r4, r5, r6, pc}
 8011b0c:	0781      	lsls	r1, r0, #30
 8011b0e:	bf58      	it	pl
 8011b10:	6963      	ldrpl	r3, [r4, #20]
 8011b12:	60a3      	str	r3, [r4, #8]
 8011b14:	e7f4      	b.n	8011b00 <__swsetup_r+0xb0>
 8011b16:	2000      	movs	r0, #0
 8011b18:	e7f7      	b.n	8011b0a <__swsetup_r+0xba>
 8011b1a:	bf00      	nop
 8011b1c:	24000024 	.word	0x24000024
 8011b20:	08012834 	.word	0x08012834
 8011b24:	08012854 	.word	0x08012854
 8011b28:	08012814 	.word	0x08012814

08011b2c <abort>:
 8011b2c:	b508      	push	{r3, lr}
 8011b2e:	2006      	movs	r0, #6
 8011b30:	f000 fa52 	bl	8011fd8 <raise>
 8011b34:	2001      	movs	r0, #1
 8011b36:	f7f1 f86d 	bl	8002c14 <_exit>
	...

08011b3c <__sflush_r>:
 8011b3c:	898a      	ldrh	r2, [r1, #12]
 8011b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b42:	4605      	mov	r5, r0
 8011b44:	0710      	lsls	r0, r2, #28
 8011b46:	460c      	mov	r4, r1
 8011b48:	d458      	bmi.n	8011bfc <__sflush_r+0xc0>
 8011b4a:	684b      	ldr	r3, [r1, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	dc05      	bgt.n	8011b5c <__sflush_r+0x20>
 8011b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	dc02      	bgt.n	8011b5c <__sflush_r+0x20>
 8011b56:	2000      	movs	r0, #0
 8011b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b5e:	2e00      	cmp	r6, #0
 8011b60:	d0f9      	beq.n	8011b56 <__sflush_r+0x1a>
 8011b62:	2300      	movs	r3, #0
 8011b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b68:	682f      	ldr	r7, [r5, #0]
 8011b6a:	602b      	str	r3, [r5, #0]
 8011b6c:	d032      	beq.n	8011bd4 <__sflush_r+0x98>
 8011b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b70:	89a3      	ldrh	r3, [r4, #12]
 8011b72:	075a      	lsls	r2, r3, #29
 8011b74:	d505      	bpl.n	8011b82 <__sflush_r+0x46>
 8011b76:	6863      	ldr	r3, [r4, #4]
 8011b78:	1ac0      	subs	r0, r0, r3
 8011b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b7c:	b10b      	cbz	r3, 8011b82 <__sflush_r+0x46>
 8011b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b80:	1ac0      	subs	r0, r0, r3
 8011b82:	2300      	movs	r3, #0
 8011b84:	4602      	mov	r2, r0
 8011b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b88:	6a21      	ldr	r1, [r4, #32]
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b0      	blx	r6
 8011b8e:	1c43      	adds	r3, r0, #1
 8011b90:	89a3      	ldrh	r3, [r4, #12]
 8011b92:	d106      	bne.n	8011ba2 <__sflush_r+0x66>
 8011b94:	6829      	ldr	r1, [r5, #0]
 8011b96:	291d      	cmp	r1, #29
 8011b98:	d82c      	bhi.n	8011bf4 <__sflush_r+0xb8>
 8011b9a:	4a2a      	ldr	r2, [pc, #168]	; (8011c44 <__sflush_r+0x108>)
 8011b9c:	40ca      	lsrs	r2, r1
 8011b9e:	07d6      	lsls	r6, r2, #31
 8011ba0:	d528      	bpl.n	8011bf4 <__sflush_r+0xb8>
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	6062      	str	r2, [r4, #4]
 8011ba6:	04d9      	lsls	r1, r3, #19
 8011ba8:	6922      	ldr	r2, [r4, #16]
 8011baa:	6022      	str	r2, [r4, #0]
 8011bac:	d504      	bpl.n	8011bb8 <__sflush_r+0x7c>
 8011bae:	1c42      	adds	r2, r0, #1
 8011bb0:	d101      	bne.n	8011bb6 <__sflush_r+0x7a>
 8011bb2:	682b      	ldr	r3, [r5, #0]
 8011bb4:	b903      	cbnz	r3, 8011bb8 <__sflush_r+0x7c>
 8011bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8011bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bba:	602f      	str	r7, [r5, #0]
 8011bbc:	2900      	cmp	r1, #0
 8011bbe:	d0ca      	beq.n	8011b56 <__sflush_r+0x1a>
 8011bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bc4:	4299      	cmp	r1, r3
 8011bc6:	d002      	beq.n	8011bce <__sflush_r+0x92>
 8011bc8:	4628      	mov	r0, r5
 8011bca:	f7ff fae3 	bl	8011194 <_free_r>
 8011bce:	2000      	movs	r0, #0
 8011bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8011bd2:	e7c1      	b.n	8011b58 <__sflush_r+0x1c>
 8011bd4:	6a21      	ldr	r1, [r4, #32]
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	4628      	mov	r0, r5
 8011bda:	47b0      	blx	r6
 8011bdc:	1c41      	adds	r1, r0, #1
 8011bde:	d1c7      	bne.n	8011b70 <__sflush_r+0x34>
 8011be0:	682b      	ldr	r3, [r5, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d0c4      	beq.n	8011b70 <__sflush_r+0x34>
 8011be6:	2b1d      	cmp	r3, #29
 8011be8:	d001      	beq.n	8011bee <__sflush_r+0xb2>
 8011bea:	2b16      	cmp	r3, #22
 8011bec:	d101      	bne.n	8011bf2 <__sflush_r+0xb6>
 8011bee:	602f      	str	r7, [r5, #0]
 8011bf0:	e7b1      	b.n	8011b56 <__sflush_r+0x1a>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bf8:	81a3      	strh	r3, [r4, #12]
 8011bfa:	e7ad      	b.n	8011b58 <__sflush_r+0x1c>
 8011bfc:	690f      	ldr	r7, [r1, #16]
 8011bfe:	2f00      	cmp	r7, #0
 8011c00:	d0a9      	beq.n	8011b56 <__sflush_r+0x1a>
 8011c02:	0793      	lsls	r3, r2, #30
 8011c04:	680e      	ldr	r6, [r1, #0]
 8011c06:	bf08      	it	eq
 8011c08:	694b      	ldreq	r3, [r1, #20]
 8011c0a:	600f      	str	r7, [r1, #0]
 8011c0c:	bf18      	it	ne
 8011c0e:	2300      	movne	r3, #0
 8011c10:	eba6 0807 	sub.w	r8, r6, r7
 8011c14:	608b      	str	r3, [r1, #8]
 8011c16:	f1b8 0f00 	cmp.w	r8, #0
 8011c1a:	dd9c      	ble.n	8011b56 <__sflush_r+0x1a>
 8011c1c:	6a21      	ldr	r1, [r4, #32]
 8011c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c20:	4643      	mov	r3, r8
 8011c22:	463a      	mov	r2, r7
 8011c24:	4628      	mov	r0, r5
 8011c26:	47b0      	blx	r6
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	dc06      	bgt.n	8011c3a <__sflush_r+0xfe>
 8011c2c:	89a3      	ldrh	r3, [r4, #12]
 8011c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c32:	81a3      	strh	r3, [r4, #12]
 8011c34:	f04f 30ff 	mov.w	r0, #4294967295
 8011c38:	e78e      	b.n	8011b58 <__sflush_r+0x1c>
 8011c3a:	4407      	add	r7, r0
 8011c3c:	eba8 0800 	sub.w	r8, r8, r0
 8011c40:	e7e9      	b.n	8011c16 <__sflush_r+0xda>
 8011c42:	bf00      	nop
 8011c44:	20400001 	.word	0x20400001

08011c48 <_fflush_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	690b      	ldr	r3, [r1, #16]
 8011c4c:	4605      	mov	r5, r0
 8011c4e:	460c      	mov	r4, r1
 8011c50:	b913      	cbnz	r3, 8011c58 <_fflush_r+0x10>
 8011c52:	2500      	movs	r5, #0
 8011c54:	4628      	mov	r0, r5
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	b118      	cbz	r0, 8011c62 <_fflush_r+0x1a>
 8011c5a:	6983      	ldr	r3, [r0, #24]
 8011c5c:	b90b      	cbnz	r3, 8011c62 <_fflush_r+0x1a>
 8011c5e:	f000 f887 	bl	8011d70 <__sinit>
 8011c62:	4b14      	ldr	r3, [pc, #80]	; (8011cb4 <_fflush_r+0x6c>)
 8011c64:	429c      	cmp	r4, r3
 8011c66:	d11b      	bne.n	8011ca0 <_fflush_r+0x58>
 8011c68:	686c      	ldr	r4, [r5, #4]
 8011c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d0ef      	beq.n	8011c52 <_fflush_r+0xa>
 8011c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c74:	07d0      	lsls	r0, r2, #31
 8011c76:	d404      	bmi.n	8011c82 <_fflush_r+0x3a>
 8011c78:	0599      	lsls	r1, r3, #22
 8011c7a:	d402      	bmi.n	8011c82 <_fflush_r+0x3a>
 8011c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c7e:	f000 f915 	bl	8011eac <__retarget_lock_acquire_recursive>
 8011c82:	4628      	mov	r0, r5
 8011c84:	4621      	mov	r1, r4
 8011c86:	f7ff ff59 	bl	8011b3c <__sflush_r>
 8011c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c8c:	07da      	lsls	r2, r3, #31
 8011c8e:	4605      	mov	r5, r0
 8011c90:	d4e0      	bmi.n	8011c54 <_fflush_r+0xc>
 8011c92:	89a3      	ldrh	r3, [r4, #12]
 8011c94:	059b      	lsls	r3, r3, #22
 8011c96:	d4dd      	bmi.n	8011c54 <_fflush_r+0xc>
 8011c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c9a:	f000 f908 	bl	8011eae <__retarget_lock_release_recursive>
 8011c9e:	e7d9      	b.n	8011c54 <_fflush_r+0xc>
 8011ca0:	4b05      	ldr	r3, [pc, #20]	; (8011cb8 <_fflush_r+0x70>)
 8011ca2:	429c      	cmp	r4, r3
 8011ca4:	d101      	bne.n	8011caa <_fflush_r+0x62>
 8011ca6:	68ac      	ldr	r4, [r5, #8]
 8011ca8:	e7df      	b.n	8011c6a <_fflush_r+0x22>
 8011caa:	4b04      	ldr	r3, [pc, #16]	; (8011cbc <_fflush_r+0x74>)
 8011cac:	429c      	cmp	r4, r3
 8011cae:	bf08      	it	eq
 8011cb0:	68ec      	ldreq	r4, [r5, #12]
 8011cb2:	e7da      	b.n	8011c6a <_fflush_r+0x22>
 8011cb4:	08012834 	.word	0x08012834
 8011cb8:	08012854 	.word	0x08012854
 8011cbc:	08012814 	.word	0x08012814

08011cc0 <std>:
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	b510      	push	{r4, lr}
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8011cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cce:	6083      	str	r3, [r0, #8]
 8011cd0:	8181      	strh	r1, [r0, #12]
 8011cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8011cd4:	81c2      	strh	r2, [r0, #14]
 8011cd6:	6183      	str	r3, [r0, #24]
 8011cd8:	4619      	mov	r1, r3
 8011cda:	2208      	movs	r2, #8
 8011cdc:	305c      	adds	r0, #92	; 0x5c
 8011cde:	f7fd fc37 	bl	800f550 <memset>
 8011ce2:	4b05      	ldr	r3, [pc, #20]	; (8011cf8 <std+0x38>)
 8011ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8011ce6:	4b05      	ldr	r3, [pc, #20]	; (8011cfc <std+0x3c>)
 8011ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011cea:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <std+0x40>)
 8011cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cee:	4b05      	ldr	r3, [pc, #20]	; (8011d04 <std+0x44>)
 8011cf0:	6224      	str	r4, [r4, #32]
 8011cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8011cf4:	bd10      	pop	{r4, pc}
 8011cf6:	bf00      	nop
 8011cf8:	08012011 	.word	0x08012011
 8011cfc:	08012033 	.word	0x08012033
 8011d00:	0801206b 	.word	0x0801206b
 8011d04:	0801208f 	.word	0x0801208f

08011d08 <_cleanup_r>:
 8011d08:	4901      	ldr	r1, [pc, #4]	; (8011d10 <_cleanup_r+0x8>)
 8011d0a:	f000 b8af 	b.w	8011e6c <_fwalk_reent>
 8011d0e:	bf00      	nop
 8011d10:	08011c49 	.word	0x08011c49

08011d14 <__sfmoreglue>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	1e4a      	subs	r2, r1, #1
 8011d18:	2568      	movs	r5, #104	; 0x68
 8011d1a:	4355      	muls	r5, r2
 8011d1c:	460e      	mov	r6, r1
 8011d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d22:	f7ff fa87 	bl	8011234 <_malloc_r>
 8011d26:	4604      	mov	r4, r0
 8011d28:	b140      	cbz	r0, 8011d3c <__sfmoreglue+0x28>
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8011d30:	300c      	adds	r0, #12
 8011d32:	60a0      	str	r0, [r4, #8]
 8011d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d38:	f7fd fc0a 	bl	800f550 <memset>
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	bd70      	pop	{r4, r5, r6, pc}

08011d40 <__sfp_lock_acquire>:
 8011d40:	4801      	ldr	r0, [pc, #4]	; (8011d48 <__sfp_lock_acquire+0x8>)
 8011d42:	f000 b8b3 	b.w	8011eac <__retarget_lock_acquire_recursive>
 8011d46:	bf00      	nop
 8011d48:	2401bdc4 	.word	0x2401bdc4

08011d4c <__sfp_lock_release>:
 8011d4c:	4801      	ldr	r0, [pc, #4]	; (8011d54 <__sfp_lock_release+0x8>)
 8011d4e:	f000 b8ae 	b.w	8011eae <__retarget_lock_release_recursive>
 8011d52:	bf00      	nop
 8011d54:	2401bdc4 	.word	0x2401bdc4

08011d58 <__sinit_lock_acquire>:
 8011d58:	4801      	ldr	r0, [pc, #4]	; (8011d60 <__sinit_lock_acquire+0x8>)
 8011d5a:	f000 b8a7 	b.w	8011eac <__retarget_lock_acquire_recursive>
 8011d5e:	bf00      	nop
 8011d60:	2401bdbf 	.word	0x2401bdbf

08011d64 <__sinit_lock_release>:
 8011d64:	4801      	ldr	r0, [pc, #4]	; (8011d6c <__sinit_lock_release+0x8>)
 8011d66:	f000 b8a2 	b.w	8011eae <__retarget_lock_release_recursive>
 8011d6a:	bf00      	nop
 8011d6c:	2401bdbf 	.word	0x2401bdbf

08011d70 <__sinit>:
 8011d70:	b510      	push	{r4, lr}
 8011d72:	4604      	mov	r4, r0
 8011d74:	f7ff fff0 	bl	8011d58 <__sinit_lock_acquire>
 8011d78:	69a3      	ldr	r3, [r4, #24]
 8011d7a:	b11b      	cbz	r3, 8011d84 <__sinit+0x14>
 8011d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d80:	f7ff bff0 	b.w	8011d64 <__sinit_lock_release>
 8011d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d88:	6523      	str	r3, [r4, #80]	; 0x50
 8011d8a:	4b13      	ldr	r3, [pc, #76]	; (8011dd8 <__sinit+0x68>)
 8011d8c:	4a13      	ldr	r2, [pc, #76]	; (8011ddc <__sinit+0x6c>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d92:	42a3      	cmp	r3, r4
 8011d94:	bf04      	itt	eq
 8011d96:	2301      	moveq	r3, #1
 8011d98:	61a3      	streq	r3, [r4, #24]
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f000 f820 	bl	8011de0 <__sfp>
 8011da0:	6060      	str	r0, [r4, #4]
 8011da2:	4620      	mov	r0, r4
 8011da4:	f000 f81c 	bl	8011de0 <__sfp>
 8011da8:	60a0      	str	r0, [r4, #8]
 8011daa:	4620      	mov	r0, r4
 8011dac:	f000 f818 	bl	8011de0 <__sfp>
 8011db0:	2200      	movs	r2, #0
 8011db2:	60e0      	str	r0, [r4, #12]
 8011db4:	2104      	movs	r1, #4
 8011db6:	6860      	ldr	r0, [r4, #4]
 8011db8:	f7ff ff82 	bl	8011cc0 <std>
 8011dbc:	68a0      	ldr	r0, [r4, #8]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	2109      	movs	r1, #9
 8011dc2:	f7ff ff7d 	bl	8011cc0 <std>
 8011dc6:	68e0      	ldr	r0, [r4, #12]
 8011dc8:	2202      	movs	r2, #2
 8011dca:	2112      	movs	r1, #18
 8011dcc:	f7ff ff78 	bl	8011cc0 <std>
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	61a3      	str	r3, [r4, #24]
 8011dd4:	e7d2      	b.n	8011d7c <__sinit+0xc>
 8011dd6:	bf00      	nop
 8011dd8:	08012490 	.word	0x08012490
 8011ddc:	08011d09 	.word	0x08011d09

08011de0 <__sfp>:
 8011de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de2:	4607      	mov	r7, r0
 8011de4:	f7ff ffac 	bl	8011d40 <__sfp_lock_acquire>
 8011de8:	4b1e      	ldr	r3, [pc, #120]	; (8011e64 <__sfp+0x84>)
 8011dea:	681e      	ldr	r6, [r3, #0]
 8011dec:	69b3      	ldr	r3, [r6, #24]
 8011dee:	b913      	cbnz	r3, 8011df6 <__sfp+0x16>
 8011df0:	4630      	mov	r0, r6
 8011df2:	f7ff ffbd 	bl	8011d70 <__sinit>
 8011df6:	3648      	adds	r6, #72	; 0x48
 8011df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011dfc:	3b01      	subs	r3, #1
 8011dfe:	d503      	bpl.n	8011e08 <__sfp+0x28>
 8011e00:	6833      	ldr	r3, [r6, #0]
 8011e02:	b30b      	cbz	r3, 8011e48 <__sfp+0x68>
 8011e04:	6836      	ldr	r6, [r6, #0]
 8011e06:	e7f7      	b.n	8011df8 <__sfp+0x18>
 8011e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e0c:	b9d5      	cbnz	r5, 8011e44 <__sfp+0x64>
 8011e0e:	4b16      	ldr	r3, [pc, #88]	; (8011e68 <__sfp+0x88>)
 8011e10:	60e3      	str	r3, [r4, #12]
 8011e12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e16:	6665      	str	r5, [r4, #100]	; 0x64
 8011e18:	f000 f847 	bl	8011eaa <__retarget_lock_init_recursive>
 8011e1c:	f7ff ff96 	bl	8011d4c <__sfp_lock_release>
 8011e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e28:	6025      	str	r5, [r4, #0]
 8011e2a:	61a5      	str	r5, [r4, #24]
 8011e2c:	2208      	movs	r2, #8
 8011e2e:	4629      	mov	r1, r5
 8011e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e34:	f7fd fb8c 	bl	800f550 <memset>
 8011e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e40:	4620      	mov	r0, r4
 8011e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e44:	3468      	adds	r4, #104	; 0x68
 8011e46:	e7d9      	b.n	8011dfc <__sfp+0x1c>
 8011e48:	2104      	movs	r1, #4
 8011e4a:	4638      	mov	r0, r7
 8011e4c:	f7ff ff62 	bl	8011d14 <__sfmoreglue>
 8011e50:	4604      	mov	r4, r0
 8011e52:	6030      	str	r0, [r6, #0]
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d1d5      	bne.n	8011e04 <__sfp+0x24>
 8011e58:	f7ff ff78 	bl	8011d4c <__sfp_lock_release>
 8011e5c:	230c      	movs	r3, #12
 8011e5e:	603b      	str	r3, [r7, #0]
 8011e60:	e7ee      	b.n	8011e40 <__sfp+0x60>
 8011e62:	bf00      	nop
 8011e64:	08012490 	.word	0x08012490
 8011e68:	ffff0001 	.word	0xffff0001

08011e6c <_fwalk_reent>:
 8011e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e70:	4606      	mov	r6, r0
 8011e72:	4688      	mov	r8, r1
 8011e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011e78:	2700      	movs	r7, #0
 8011e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8011e82:	d505      	bpl.n	8011e90 <_fwalk_reent+0x24>
 8011e84:	6824      	ldr	r4, [r4, #0]
 8011e86:	2c00      	cmp	r4, #0
 8011e88:	d1f7      	bne.n	8011e7a <_fwalk_reent+0xe>
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e90:	89ab      	ldrh	r3, [r5, #12]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d907      	bls.n	8011ea6 <_fwalk_reent+0x3a>
 8011e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	d003      	beq.n	8011ea6 <_fwalk_reent+0x3a>
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	47c0      	blx	r8
 8011ea4:	4307      	orrs	r7, r0
 8011ea6:	3568      	adds	r5, #104	; 0x68
 8011ea8:	e7e9      	b.n	8011e7e <_fwalk_reent+0x12>

08011eaa <__retarget_lock_init_recursive>:
 8011eaa:	4770      	bx	lr

08011eac <__retarget_lock_acquire_recursive>:
 8011eac:	4770      	bx	lr

08011eae <__retarget_lock_release_recursive>:
 8011eae:	4770      	bx	lr

08011eb0 <__swhatbuf_r>:
 8011eb0:	b570      	push	{r4, r5, r6, lr}
 8011eb2:	460e      	mov	r6, r1
 8011eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb8:	2900      	cmp	r1, #0
 8011eba:	b096      	sub	sp, #88	; 0x58
 8011ebc:	4614      	mov	r4, r2
 8011ebe:	461d      	mov	r5, r3
 8011ec0:	da07      	bge.n	8011ed2 <__swhatbuf_r+0x22>
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	602b      	str	r3, [r5, #0]
 8011ec6:	89b3      	ldrh	r3, [r6, #12]
 8011ec8:	061a      	lsls	r2, r3, #24
 8011eca:	d410      	bmi.n	8011eee <__swhatbuf_r+0x3e>
 8011ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ed0:	e00e      	b.n	8011ef0 <__swhatbuf_r+0x40>
 8011ed2:	466a      	mov	r2, sp
 8011ed4:	f000 f902 	bl	80120dc <_fstat_r>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	dbf2      	blt.n	8011ec2 <__swhatbuf_r+0x12>
 8011edc:	9a01      	ldr	r2, [sp, #4]
 8011ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ee6:	425a      	negs	r2, r3
 8011ee8:	415a      	adcs	r2, r3
 8011eea:	602a      	str	r2, [r5, #0]
 8011eec:	e7ee      	b.n	8011ecc <__swhatbuf_r+0x1c>
 8011eee:	2340      	movs	r3, #64	; 0x40
 8011ef0:	2000      	movs	r0, #0
 8011ef2:	6023      	str	r3, [r4, #0]
 8011ef4:	b016      	add	sp, #88	; 0x58
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}

08011ef8 <__smakebuf_r>:
 8011ef8:	898b      	ldrh	r3, [r1, #12]
 8011efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011efc:	079d      	lsls	r5, r3, #30
 8011efe:	4606      	mov	r6, r0
 8011f00:	460c      	mov	r4, r1
 8011f02:	d507      	bpl.n	8011f14 <__smakebuf_r+0x1c>
 8011f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f08:	6023      	str	r3, [r4, #0]
 8011f0a:	6123      	str	r3, [r4, #16]
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	6163      	str	r3, [r4, #20]
 8011f10:	b002      	add	sp, #8
 8011f12:	bd70      	pop	{r4, r5, r6, pc}
 8011f14:	ab01      	add	r3, sp, #4
 8011f16:	466a      	mov	r2, sp
 8011f18:	f7ff ffca 	bl	8011eb0 <__swhatbuf_r>
 8011f1c:	9900      	ldr	r1, [sp, #0]
 8011f1e:	4605      	mov	r5, r0
 8011f20:	4630      	mov	r0, r6
 8011f22:	f7ff f987 	bl	8011234 <_malloc_r>
 8011f26:	b948      	cbnz	r0, 8011f3c <__smakebuf_r+0x44>
 8011f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f2c:	059a      	lsls	r2, r3, #22
 8011f2e:	d4ef      	bmi.n	8011f10 <__smakebuf_r+0x18>
 8011f30:	f023 0303 	bic.w	r3, r3, #3
 8011f34:	f043 0302 	orr.w	r3, r3, #2
 8011f38:	81a3      	strh	r3, [r4, #12]
 8011f3a:	e7e3      	b.n	8011f04 <__smakebuf_r+0xc>
 8011f3c:	4b0d      	ldr	r3, [pc, #52]	; (8011f74 <__smakebuf_r+0x7c>)
 8011f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f40:	89a3      	ldrh	r3, [r4, #12]
 8011f42:	6020      	str	r0, [r4, #0]
 8011f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f48:	81a3      	strh	r3, [r4, #12]
 8011f4a:	9b00      	ldr	r3, [sp, #0]
 8011f4c:	6163      	str	r3, [r4, #20]
 8011f4e:	9b01      	ldr	r3, [sp, #4]
 8011f50:	6120      	str	r0, [r4, #16]
 8011f52:	b15b      	cbz	r3, 8011f6c <__smakebuf_r+0x74>
 8011f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f000 f8d1 	bl	8012100 <_isatty_r>
 8011f5e:	b128      	cbz	r0, 8011f6c <__smakebuf_r+0x74>
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	f023 0303 	bic.w	r3, r3, #3
 8011f66:	f043 0301 	orr.w	r3, r3, #1
 8011f6a:	81a3      	strh	r3, [r4, #12]
 8011f6c:	89a0      	ldrh	r0, [r4, #12]
 8011f6e:	4305      	orrs	r5, r0
 8011f70:	81a5      	strh	r5, [r4, #12]
 8011f72:	e7cd      	b.n	8011f10 <__smakebuf_r+0x18>
 8011f74:	08011d09 	.word	0x08011d09

08011f78 <_malloc_usable_size_r>:
 8011f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f7c:	1f18      	subs	r0, r3, #4
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	bfbc      	itt	lt
 8011f82:	580b      	ldrlt	r3, [r1, r0]
 8011f84:	18c0      	addlt	r0, r0, r3
 8011f86:	4770      	bx	lr

08011f88 <_raise_r>:
 8011f88:	291f      	cmp	r1, #31
 8011f8a:	b538      	push	{r3, r4, r5, lr}
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	460d      	mov	r5, r1
 8011f90:	d904      	bls.n	8011f9c <_raise_r+0x14>
 8011f92:	2316      	movs	r3, #22
 8011f94:	6003      	str	r3, [r0, #0]
 8011f96:	f04f 30ff 	mov.w	r0, #4294967295
 8011f9a:	bd38      	pop	{r3, r4, r5, pc}
 8011f9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f9e:	b112      	cbz	r2, 8011fa6 <_raise_r+0x1e>
 8011fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011fa4:	b94b      	cbnz	r3, 8011fba <_raise_r+0x32>
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 f830 	bl	801200c <_getpid_r>
 8011fac:	462a      	mov	r2, r5
 8011fae:	4601      	mov	r1, r0
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fb6:	f000 b817 	b.w	8011fe8 <_kill_r>
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d00a      	beq.n	8011fd4 <_raise_r+0x4c>
 8011fbe:	1c59      	adds	r1, r3, #1
 8011fc0:	d103      	bne.n	8011fca <_raise_r+0x42>
 8011fc2:	2316      	movs	r3, #22
 8011fc4:	6003      	str	r3, [r0, #0]
 8011fc6:	2001      	movs	r0, #1
 8011fc8:	e7e7      	b.n	8011f9a <_raise_r+0x12>
 8011fca:	2400      	movs	r4, #0
 8011fcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	4798      	blx	r3
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	e7e0      	b.n	8011f9a <_raise_r+0x12>

08011fd8 <raise>:
 8011fd8:	4b02      	ldr	r3, [pc, #8]	; (8011fe4 <raise+0xc>)
 8011fda:	4601      	mov	r1, r0
 8011fdc:	6818      	ldr	r0, [r3, #0]
 8011fde:	f7ff bfd3 	b.w	8011f88 <_raise_r>
 8011fe2:	bf00      	nop
 8011fe4:	24000024 	.word	0x24000024

08011fe8 <_kill_r>:
 8011fe8:	b538      	push	{r3, r4, r5, lr}
 8011fea:	4d07      	ldr	r5, [pc, #28]	; (8012008 <_kill_r+0x20>)
 8011fec:	2300      	movs	r3, #0
 8011fee:	4604      	mov	r4, r0
 8011ff0:	4608      	mov	r0, r1
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	602b      	str	r3, [r5, #0]
 8011ff6:	f7f0 fdfd 	bl	8002bf4 <_kill>
 8011ffa:	1c43      	adds	r3, r0, #1
 8011ffc:	d102      	bne.n	8012004 <_kill_r+0x1c>
 8011ffe:	682b      	ldr	r3, [r5, #0]
 8012000:	b103      	cbz	r3, 8012004 <_kill_r+0x1c>
 8012002:	6023      	str	r3, [r4, #0]
 8012004:	bd38      	pop	{r3, r4, r5, pc}
 8012006:	bf00      	nop
 8012008:	2401bdb8 	.word	0x2401bdb8

0801200c <_getpid_r>:
 801200c:	f7f0 bdea 	b.w	8002be4 <_getpid>

08012010 <__sread>:
 8012010:	b510      	push	{r4, lr}
 8012012:	460c      	mov	r4, r1
 8012014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012018:	f000 f894 	bl	8012144 <_read_r>
 801201c:	2800      	cmp	r0, #0
 801201e:	bfab      	itete	ge
 8012020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012022:	89a3      	ldrhlt	r3, [r4, #12]
 8012024:	181b      	addge	r3, r3, r0
 8012026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801202a:	bfac      	ite	ge
 801202c:	6563      	strge	r3, [r4, #84]	; 0x54
 801202e:	81a3      	strhlt	r3, [r4, #12]
 8012030:	bd10      	pop	{r4, pc}

08012032 <__swrite>:
 8012032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012036:	461f      	mov	r7, r3
 8012038:	898b      	ldrh	r3, [r1, #12]
 801203a:	05db      	lsls	r3, r3, #23
 801203c:	4605      	mov	r5, r0
 801203e:	460c      	mov	r4, r1
 8012040:	4616      	mov	r6, r2
 8012042:	d505      	bpl.n	8012050 <__swrite+0x1e>
 8012044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012048:	2302      	movs	r3, #2
 801204a:	2200      	movs	r2, #0
 801204c:	f000 f868 	bl	8012120 <_lseek_r>
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801205a:	81a3      	strh	r3, [r4, #12]
 801205c:	4632      	mov	r2, r6
 801205e:	463b      	mov	r3, r7
 8012060:	4628      	mov	r0, r5
 8012062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012066:	f000 b817 	b.w	8012098 <_write_r>

0801206a <__sseek>:
 801206a:	b510      	push	{r4, lr}
 801206c:	460c      	mov	r4, r1
 801206e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012072:	f000 f855 	bl	8012120 <_lseek_r>
 8012076:	1c43      	adds	r3, r0, #1
 8012078:	89a3      	ldrh	r3, [r4, #12]
 801207a:	bf15      	itete	ne
 801207c:	6560      	strne	r0, [r4, #84]	; 0x54
 801207e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012086:	81a3      	strheq	r3, [r4, #12]
 8012088:	bf18      	it	ne
 801208a:	81a3      	strhne	r3, [r4, #12]
 801208c:	bd10      	pop	{r4, pc}

0801208e <__sclose>:
 801208e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012092:	f000 b813 	b.w	80120bc <_close_r>
	...

08012098 <_write_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4d07      	ldr	r5, [pc, #28]	; (80120b8 <_write_r+0x20>)
 801209c:	4604      	mov	r4, r0
 801209e:	4608      	mov	r0, r1
 80120a0:	4611      	mov	r1, r2
 80120a2:	2200      	movs	r2, #0
 80120a4:	602a      	str	r2, [r5, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	f7f0 fddb 	bl	8002c62 <_write>
 80120ac:	1c43      	adds	r3, r0, #1
 80120ae:	d102      	bne.n	80120b6 <_write_r+0x1e>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	b103      	cbz	r3, 80120b6 <_write_r+0x1e>
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	bd38      	pop	{r3, r4, r5, pc}
 80120b8:	2401bdb8 	.word	0x2401bdb8

080120bc <_close_r>:
 80120bc:	b538      	push	{r3, r4, r5, lr}
 80120be:	4d06      	ldr	r5, [pc, #24]	; (80120d8 <_close_r+0x1c>)
 80120c0:	2300      	movs	r3, #0
 80120c2:	4604      	mov	r4, r0
 80120c4:	4608      	mov	r0, r1
 80120c6:	602b      	str	r3, [r5, #0]
 80120c8:	f7f0 fde7 	bl	8002c9a <_close>
 80120cc:	1c43      	adds	r3, r0, #1
 80120ce:	d102      	bne.n	80120d6 <_close_r+0x1a>
 80120d0:	682b      	ldr	r3, [r5, #0]
 80120d2:	b103      	cbz	r3, 80120d6 <_close_r+0x1a>
 80120d4:	6023      	str	r3, [r4, #0]
 80120d6:	bd38      	pop	{r3, r4, r5, pc}
 80120d8:	2401bdb8 	.word	0x2401bdb8

080120dc <_fstat_r>:
 80120dc:	b538      	push	{r3, r4, r5, lr}
 80120de:	4d07      	ldr	r5, [pc, #28]	; (80120fc <_fstat_r+0x20>)
 80120e0:	2300      	movs	r3, #0
 80120e2:	4604      	mov	r4, r0
 80120e4:	4608      	mov	r0, r1
 80120e6:	4611      	mov	r1, r2
 80120e8:	602b      	str	r3, [r5, #0]
 80120ea:	f7f0 fde2 	bl	8002cb2 <_fstat>
 80120ee:	1c43      	adds	r3, r0, #1
 80120f0:	d102      	bne.n	80120f8 <_fstat_r+0x1c>
 80120f2:	682b      	ldr	r3, [r5, #0]
 80120f4:	b103      	cbz	r3, 80120f8 <_fstat_r+0x1c>
 80120f6:	6023      	str	r3, [r4, #0]
 80120f8:	bd38      	pop	{r3, r4, r5, pc}
 80120fa:	bf00      	nop
 80120fc:	2401bdb8 	.word	0x2401bdb8

08012100 <_isatty_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	4d06      	ldr	r5, [pc, #24]	; (801211c <_isatty_r+0x1c>)
 8012104:	2300      	movs	r3, #0
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	602b      	str	r3, [r5, #0]
 801210c:	f7f0 fde1 	bl	8002cd2 <_isatty>
 8012110:	1c43      	adds	r3, r0, #1
 8012112:	d102      	bne.n	801211a <_isatty_r+0x1a>
 8012114:	682b      	ldr	r3, [r5, #0]
 8012116:	b103      	cbz	r3, 801211a <_isatty_r+0x1a>
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	bd38      	pop	{r3, r4, r5, pc}
 801211c:	2401bdb8 	.word	0x2401bdb8

08012120 <_lseek_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	4d07      	ldr	r5, [pc, #28]	; (8012140 <_lseek_r+0x20>)
 8012124:	4604      	mov	r4, r0
 8012126:	4608      	mov	r0, r1
 8012128:	4611      	mov	r1, r2
 801212a:	2200      	movs	r2, #0
 801212c:	602a      	str	r2, [r5, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	f7f0 fdda 	bl	8002ce8 <_lseek>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d102      	bne.n	801213e <_lseek_r+0x1e>
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	b103      	cbz	r3, 801213e <_lseek_r+0x1e>
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	bd38      	pop	{r3, r4, r5, pc}
 8012140:	2401bdb8 	.word	0x2401bdb8

08012144 <_read_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	4d07      	ldr	r5, [pc, #28]	; (8012164 <_read_r+0x20>)
 8012148:	4604      	mov	r4, r0
 801214a:	4608      	mov	r0, r1
 801214c:	4611      	mov	r1, r2
 801214e:	2200      	movs	r2, #0
 8012150:	602a      	str	r2, [r5, #0]
 8012152:	461a      	mov	r2, r3
 8012154:	f7f0 fd68 	bl	8002c28 <_read>
 8012158:	1c43      	adds	r3, r0, #1
 801215a:	d102      	bne.n	8012162 <_read_r+0x1e>
 801215c:	682b      	ldr	r3, [r5, #0]
 801215e:	b103      	cbz	r3, 8012162 <_read_r+0x1e>
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	bd38      	pop	{r3, r4, r5, pc}
 8012164:	2401bdb8 	.word	0x2401bdb8

08012168 <_init>:
 8012168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801216a:	bf00      	nop
 801216c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801216e:	bc08      	pop	{r3}
 8012170:	469e      	mov	lr, r3
 8012172:	4770      	bx	lr

08012174 <_fini>:
 8012174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012176:	bf00      	nop
 8012178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801217a:	bc08      	pop	{r3}
 801217c:	469e      	mov	lr, r3
 801217e:	4770      	bx	lr
