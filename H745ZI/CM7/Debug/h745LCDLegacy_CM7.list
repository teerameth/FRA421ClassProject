
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5f8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b948  0800b948  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b948  0800b948  0001b948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b950  0800b950  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b954  0800b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  24000000  0800b958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000020  0800b978  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000080  0800b9d8  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c7c8  240000e0  0800ba38  000200e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400c8a8  0800ba38  0002c8a8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c4a3  00000000  00000000  0002010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fb5  00000000  00000000  0004c5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013b8  00000000  00000000  00050568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001290  00000000  00000000  00051920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c44c  00000000  00000000  00052bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001be30  00000000  00000000  0008effc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018c5f2  00000000  00000000  000aae2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0023741e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053d4  00000000  00000000  00237474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e0 	.word	0x240000e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b878 	.word	0x0800b878

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000e4 	.word	0x240000e4
 80002d4:	0800b878 	.word	0x0800b878

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	4619      	mov	r1, r3
 800071a:	f005 f8b7 	bl	800588c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f001 fb54 	bl	8001dcc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6858      	ldr	r0, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	b29b      	uxth	r3, r3
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	f005 f8ab 	bl	800588c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	b29b      	uxth	r3, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f005 f8a2 	bl	800588c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fb3f 	bl	8001dcc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f005 f896 	bl	800588c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68d8      	ldr	r0, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f005 f88d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2204      	movs	r2, #4
 800077a:	4938      	ldr	r1, [pc, #224]	; (800085c <LCD_init+0x158>)
 800077c:	f008 f9ba 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68d8      	ldr	r0, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	b29b      	uxth	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f005 f87d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2201      	movs	r2, #1
 800079a:	4931      	ldr	r1, [pc, #196]	; (8000860 <LCD_init+0x15c>)
 800079c:	f008 f9aa 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f005 f86d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	492a      	ldr	r1, [pc, #168]	; (8000864 <LCD_init+0x160>)
 80007bc:	f008 f99a 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68d8      	ldr	r0, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f005 f85d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4923      	ldr	r1, [pc, #140]	; (8000868 <LCD_init+0x164>)
 80007dc:	f008 f98a 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	68d8      	ldr	r0, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f005 f84d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	491c      	ldr	r1, [pc, #112]	; (800086c <LCD_init+0x168>)
 80007fc:	f008 f97a 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68d8      	ldr	r0, [r3, #12]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	b29b      	uxth	r3, r3
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f005 f83d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	2204      	movs	r2, #4
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <LCD_init+0x16c>)
 800081c:	f008 f96a 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68d8      	ldr	r0, [r3, #12]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f005 f82d 	bl	800588c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2201      	movs	r2, #1
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LCD_init+0x170>)
 800083c:	f008 f95a 	bl	8008af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68d8      	ldr	r0, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	b29b      	uxth	r3, r3
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f005 f81d 	bl	800588c <HAL_GPIO_WritePin>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000008 	.word	0x24000008
 8000860:	2400000c 	.word	0x2400000c
 8000864:	2400000d 	.word	0x2400000d
 8000868:	2400000e 	.word	0x2400000e
 800086c:	24000012 	.word	0x24000012
 8000870:	24000013 	.word	0x24000013
 8000874:	24000017 	.word	0x24000017

08000878 <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000888:	4903      	ldr	r1, [pc, #12]	; (8000898 <LCD_flush+0x20>)
 800088a:	4618      	mov	r0, r3
 800088c:	f008 fb24 	bl	8008ed8 <HAL_SPI_Transmit_DMA>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240000fc 	.word	0x240000fc

0800089c <showDigit>:
//}
//uint16_t toLowByte(uint16_t num)
//{
//    return num & 0xFF;
//}
void showDigit(uint8_t x0, uint8_t y0, uint8_t num){
 800089c:	b4b0      	push	{r4, r5, r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	460b      	mov	r3, r1
 80008a8:	71bb      	strb	r3, [r7, #6]
 80008aa:	4613      	mov	r3, r2
 80008ac:	717b      	strb	r3, [r7, #5]
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b7b      	cmp	r3, #123	; 0x7b
 80008b2:	f200 809a 	bhi.w	80009ea <showDigit+0x14e>
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b78      	cmp	r3, #120	; 0x78
 80008ba:	f200 8096 	bhi.w	80009ea <showDigit+0x14e>
	if(num >= 0 && num <= 9){
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	2b09      	cmp	r3, #9
 80008c2:	d855      	bhi.n	8000970 <showDigit+0xd4>
		for(uint8_t i = num * 5; i < num * 5 + 5; i++)
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	461a      	mov	r2, r3
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e046      	b.n	800095e <showDigit+0xc2>
		{
			for(uint8_t j = 0; j < 8; j++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
 80008d4:	e03d      	b.n	8000952 <showDigit+0xb6>
			{
				for(uint8_t k = 0; k < 3; k++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	737b      	strb	r3, [r7, #13]
 80008da:	e034      	b.n	8000946 <showDigit+0xaa>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = ((Tahoma5x8[i] & (0x01 << j)) >> j) * 255;
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	4a45      	ldr	r2, [pc, #276]	; (80009f4 <showDigit+0x158>)
 80008e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e4:	4619      	mov	r1, r3
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	2201      	movs	r2, #1
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	ea01 0203 	and.w	r2, r1, r3
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	fa42 f303 	asr.w	r3, r2, r3
 80008f8:	b2dc      	uxtb	r4, r3
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	1898      	adds	r0, r3, r2
 8000902:	7bba      	ldrb	r2, [r7, #14]
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	441a      	add	r2, r3
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	01db      	lsls	r3, r3, #7
 8000910:	461d      	mov	r5, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <showDigit+0x15c>)
 8000916:	fba3 1302 	umull	r1, r3, r3, r2
 800091a:	0899      	lsrs	r1, r3, #2
 800091c:	460b      	mov	r3, r1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	18ea      	adds	r2, r5, r3
 8000930:	7b7b      	ldrb	r3, [r7, #13]
 8000932:	4413      	add	r3, r2
 8000934:	4403      	add	r3, r0
 8000936:	4622      	mov	r2, r4
 8000938:	4252      	negs	r2, r2
 800093a:	b2d1      	uxtb	r1, r2
 800093c:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <showDigit+0x160>)
 800093e:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	3301      	adds	r3, #1
 8000944:	737b      	strb	r3, [r7, #13]
 8000946:	7b7b      	ldrb	r3, [r7, #13]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d9c7      	bls.n	80008dc <showDigit+0x40>
			for(uint8_t j = 0; j < 8; j++)
 800094c:	7bbb      	ldrb	r3, [r7, #14]
 800094e:	3301      	adds	r3, #1
 8000950:	73bb      	strb	r3, [r7, #14]
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d9be      	bls.n	80008d6 <showDigit+0x3a>
		for(uint8_t i = num * 5; i < num * 5 + 5; i++)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	3301      	adds	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	7bf9      	ldrb	r1, [r7, #15]
 8000960:	797b      	ldrb	r3, [r7, #5]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	4299      	cmp	r1, r3
 800096c:	dbb0      	blt.n	80008d0 <showDigit+0x34>
 800096e:	e03d      	b.n	80009ec <showDigit+0x150>
				}
			}
		}
	}
	else{
		for(uint8_t i = 0; i < 5; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	733b      	strb	r3, [r7, #12]
 8000974:	e035      	b.n	80009e2 <showDigit+0x146>
		{
			for(uint8_t j = 0; j < 8; j++)
 8000976:	2300      	movs	r3, #0
 8000978:	72fb      	strb	r3, [r7, #11]
 800097a:	e02c      	b.n	80009d6 <showDigit+0x13a>
			{
				for(uint8_t k = 0; k < 3; k++)
 800097c:	2300      	movs	r3, #0
 800097e:	72bb      	strb	r3, [r7, #10]
 8000980:	e023      	b.n	80009ca <showDigit+0x12e>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = 0;
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	1898      	adds	r0, r3, r2
 800098a:	7afa      	ldrb	r2, [r7, #11]
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	441a      	add	r2, r3
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	01db      	lsls	r3, r3, #7
 8000998:	461c      	mov	r4, r3
 800099a:	7b3a      	ldrb	r2, [r7, #12]
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <showDigit+0x15c>)
 800099e:	fba3 1302 	umull	r1, r3, r3, r2
 80009a2:	0899      	lsrs	r1, r3, #2
 80009a4:	460b      	mov	r3, r1
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	18e2      	adds	r2, r4, r3
 80009b8:	7abb      	ldrb	r3, [r7, #10]
 80009ba:	4413      	add	r3, r2
 80009bc:	4403      	add	r3, r0
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <showDigit+0x160>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 80009c4:	7abb      	ldrb	r3, [r7, #10]
 80009c6:	3301      	adds	r3, #1
 80009c8:	72bb      	strb	r3, [r7, #10]
 80009ca:	7abb      	ldrb	r3, [r7, #10]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d9d8      	bls.n	8000982 <showDigit+0xe6>
			for(uint8_t j = 0; j < 8; j++)
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	3301      	adds	r3, #1
 80009d4:	72fb      	strb	r3, [r7, #11]
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d9cf      	bls.n	800097c <showDigit+0xe0>
		for(uint8_t i = 0; i < 5; i++)
 80009dc:	7b3b      	ldrb	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	733b      	strb	r3, [r7, #12]
 80009e2:	7b3b      	ldrb	r3, [r7, #12]
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d9c6      	bls.n	8000976 <showDigit+0xda>
 80009e8:	e000      	b.n	80009ec <showDigit+0x150>
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 80009ea:	bf00      	nop
				}
			}
		}
	}
}
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bcb0      	pop	{r4, r5, r7}
 80009f2:	4770      	bx	lr
 80009f4:	0800b8a0 	.word	0x0800b8a0
 80009f8:	cccccccd 	.word	0xcccccccd
 80009fc:	240000fc 	.word	0x240000fc

08000a00 <showColon>:
void showColon(uint8_t x0, uint8_t y0, uint8_t show)
{
 8000a00:	b4b0      	push	{r4, r5, r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b7b      	cmp	r3, #123	; 0x7b
 8000a16:	f200 8092 	bhi.w	8000b3e <showColon+0x13e>
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	2b78      	cmp	r3, #120	; 0x78
 8000a1e:	f200 808e 	bhi.w	8000b3e <showColon+0x13e>
	if(show){
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d04d      	beq.n	8000ac4 <showColon+0xc4>
	for(uint8_t i = 50; i < 55; i++)
 8000a28:	2332      	movs	r3, #50	; 0x32
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e046      	b.n	8000abc <showColon+0xbc>
			{
				for(uint8_t j = 0; j < 8; j++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73bb      	strb	r3, [r7, #14]
 8000a32:	e03d      	b.n	8000ab0 <showColon+0xb0>
				{
					for(uint8_t k = 0; k < 3; k++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	737b      	strb	r3, [r7, #13]
 8000a38:	e034      	b.n	8000aa4 <showColon+0xa4>
					{
						Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = ((Tahoma5x8[i] & (0x01 << j)) >> j) * 255;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <showColon+0x148>)
 8000a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a42:	4619      	mov	r1, r3
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	2201      	movs	r2, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	ea01 0203 	and.w	r2, r1, r3
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	fa42 f303 	asr.w	r3, r2, r3
 8000a56:	b2dc      	uxtb	r4, r3
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	1898      	adds	r0, r3, r2
 8000a60:	7bba      	ldrb	r2, [r7, #14]
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	441a      	add	r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	01db      	lsls	r3, r3, #7
 8000a6e:	461d      	mov	r5, r3
 8000a70:	7bfa      	ldrb	r2, [r7, #15]
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <showColon+0x14c>)
 8000a74:	fba3 1302 	umull	r1, r3, r3, r2
 8000a78:	0899      	lsrs	r1, r3, #2
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	18ea      	adds	r2, r5, r3
 8000a8e:	7b7b      	ldrb	r3, [r7, #13]
 8000a90:	4413      	add	r3, r2
 8000a92:	4403      	add	r3, r0
 8000a94:	4622      	mov	r2, r4
 8000a96:	4252      	negs	r2, r2
 8000a98:	b2d1      	uxtb	r1, r2
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <showColon+0x150>)
 8000a9c:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k < 3; k++)
 8000a9e:	7b7b      	ldrb	r3, [r7, #13]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	737b      	strb	r3, [r7, #13]
 8000aa4:	7b7b      	ldrb	r3, [r7, #13]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d9c7      	bls.n	8000a3a <showColon+0x3a>
				for(uint8_t j = 0; j < 8; j++)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	3301      	adds	r3, #1
 8000aae:	73bb      	strb	r3, [r7, #14]
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d9be      	bls.n	8000a34 <showColon+0x34>
	for(uint8_t i = 50; i < 55; i++)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b36      	cmp	r3, #54	; 0x36
 8000ac0:	d9b5      	bls.n	8000a2e <showColon+0x2e>
 8000ac2:	e03d      	b.n	8000b40 <showColon+0x140>
					}
				}
			}
	}
	else{
		for(uint8_t i = 0; i < 5; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	733b      	strb	r3, [r7, #12]
 8000ac8:	e035      	b.n	8000b36 <showColon+0x136>
		{
			for(uint8_t j = 0; j < 8; j++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]
 8000ace:	e02c      	b.n	8000b2a <showColon+0x12a>
			{
				for(uint8_t k = 0; k < 3; k++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	72bb      	strb	r3, [r7, #10]
 8000ad4:	e023      	b.n	8000b1e <showColon+0x11e>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = 0;
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	1898      	adds	r0, r3, r2
 8000ade:	7afa      	ldrb	r2, [r7, #11]
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	441a      	add	r2, r3
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	01db      	lsls	r3, r3, #7
 8000aec:	461c      	mov	r4, r3
 8000aee:	7b3a      	ldrb	r2, [r7, #12]
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <showColon+0x14c>)
 8000af2:	fba3 1302 	umull	r1, r3, r3, r2
 8000af6:	0899      	lsrs	r1, r3, #2
 8000af8:	460b      	mov	r3, r1
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	18e2      	adds	r2, r4, r3
 8000b0c:	7abb      	ldrb	r3, [r7, #10]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4403      	add	r3, r0
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <showColon+0x150>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	72bb      	strb	r3, [r7, #10]
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d9d8      	bls.n	8000ad6 <showColon+0xd6>
			for(uint8_t j = 0; j < 8; j++)
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	3301      	adds	r3, #1
 8000b28:	72fb      	strb	r3, [r7, #11]
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	d9cf      	bls.n	8000ad0 <showColon+0xd0>
		for(uint8_t i = 0; i < 5; i++)
 8000b30:	7b3b      	ldrb	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	733b      	strb	r3, [r7, #12]
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d9c6      	bls.n	8000aca <showColon+0xca>
 8000b3c:	e000      	b.n	8000b40 <showColon+0x140>
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000b3e:	bf00      	nop
				}
			}
		}
	}
}
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bcb0      	pop	{r4, r5, r7}
 8000b46:	4770      	bx	lr
 8000b48:	0800b8a0 	.word	0x0800b8a0
 8000b4c:	cccccccd 	.word	0xcccccccd
 8000b50:	240000fc 	.word	0x240000fc

08000b54 <showSlash>:
void showSlash(uint8_t x0, uint8_t y0, uint8_t show)
{
 8000b54:	b4b0      	push	{r4, r5, r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	71bb      	strb	r3, [r7, #6]
 8000b62:	4613      	mov	r3, r2
 8000b64:	717b      	strb	r3, [r7, #5]
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b7b      	cmp	r3, #123	; 0x7b
 8000b6a:	f200 8092 	bhi.w	8000c92 <showSlash+0x13e>
 8000b6e:	79bb      	ldrb	r3, [r7, #6]
 8000b70:	2b78      	cmp	r3, #120	; 0x78
 8000b72:	f200 808e 	bhi.w	8000c92 <showSlash+0x13e>
	if(show){
 8000b76:	797b      	ldrb	r3, [r7, #5]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d04d      	beq.n	8000c18 <showSlash+0xc4>
	for(uint8_t i = 55; i < 60; i++)
 8000b7c:	2337      	movs	r3, #55	; 0x37
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e046      	b.n	8000c10 <showSlash+0xbc>
			{
				for(uint8_t j = 0; j < 8; j++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	73bb      	strb	r3, [r7, #14]
 8000b86:	e03d      	b.n	8000c04 <showSlash+0xb0>
				{
					for(uint8_t k = 0; k < 3; k++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	737b      	strb	r3, [r7, #13]
 8000b8c:	e034      	b.n	8000bf8 <showSlash+0xa4>
					{
						Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = ((Tahoma5x8[i] & (0x01 << j)) >> j) * 255;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <showSlash+0x148>)
 8000b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b96:	4619      	mov	r1, r3
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	ea01 0203 	and.w	r2, r1, r3
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	fa42 f303 	asr.w	r3, r2, r3
 8000baa:	b2dc      	uxtb	r4, r3
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	1898      	adds	r0, r3, r2
 8000bb4:	7bba      	ldrb	r2, [r7, #14]
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	441a      	add	r2, r3
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	01db      	lsls	r3, r3, #7
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <showSlash+0x14c>)
 8000bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bcc:	0899      	lsrs	r1, r3, #2
 8000bce:	460b      	mov	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	18ea      	adds	r2, r5, r3
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	4413      	add	r3, r2
 8000be6:	4403      	add	r3, r0
 8000be8:	4622      	mov	r2, r4
 8000bea:	4252      	negs	r2, r2
 8000bec:	b2d1      	uxtb	r1, r2
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <showSlash+0x150>)
 8000bf0:	54d1      	strb	r1, [r2, r3]
					for(uint8_t k = 0; k < 3; k++)
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	737b      	strb	r3, [r7, #13]
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d9c7      	bls.n	8000b8e <showSlash+0x3a>
				for(uint8_t j = 0; j < 8; j++)
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
 8000c00:	3301      	adds	r3, #1
 8000c02:	73bb      	strb	r3, [r7, #14]
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d9be      	bls.n	8000b88 <showSlash+0x34>
	for(uint8_t i = 55; i < 60; i++)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b3b      	cmp	r3, #59	; 0x3b
 8000c14:	d9b5      	bls.n	8000b82 <showSlash+0x2e>
 8000c16:	e03d      	b.n	8000c94 <showSlash+0x140>
					}
				}
			}
	}
	else{
		for(uint8_t i = 0; i < 5; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	733b      	strb	r3, [r7, #12]
 8000c1c:	e035      	b.n	8000c8a <showSlash+0x136>
		{
			for(uint8_t j = 0; j < 8; j++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	72fb      	strb	r3, [r7, #11]
 8000c22:	e02c      	b.n	8000c7e <showSlash+0x12a>
			{
				for(uint8_t k = 0; k < 3; k++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	72bb      	strb	r3, [r7, #10]
 8000c28:	e023      	b.n	8000c72 <showSlash+0x11e>
				{
					Framememory[(3*x0)+(((LCD_BUFFER_SIZE/128) * (j+y0)) + (3 * (i%5)) + k)] = 0;
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1898      	adds	r0, r3, r2
 8000c32:	7afa      	ldrb	r2, [r7, #11]
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	441a      	add	r2, r3
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	01db      	lsls	r3, r3, #7
 8000c40:	461c      	mov	r4, r3
 8000c42:	7b3a      	ldrb	r2, [r7, #12]
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <showSlash+0x14c>)
 8000c46:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4a:	0899      	lsrs	r1, r3, #2
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	18e2      	adds	r2, r4, r3
 8000c60:	7abb      	ldrb	r3, [r7, #10]
 8000c62:	4413      	add	r3, r2
 8000c64:	4403      	add	r3, r0
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <showSlash+0x150>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k = 0; k < 3; k++)
 8000c6c:	7abb      	ldrb	r3, [r7, #10]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	72bb      	strb	r3, [r7, #10]
 8000c72:	7abb      	ldrb	r3, [r7, #10]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d9d8      	bls.n	8000c2a <showSlash+0xd6>
			for(uint8_t j = 0; j < 8; j++)
 8000c78:	7afb      	ldrb	r3, [r7, #11]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	72fb      	strb	r3, [r7, #11]
 8000c7e:	7afb      	ldrb	r3, [r7, #11]
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	d9cf      	bls.n	8000c24 <showSlash+0xd0>
		for(uint8_t i = 0; i < 5; i++)
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	733b      	strb	r3, [r7, #12]
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d9c6      	bls.n	8000c1e <showSlash+0xca>
 8000c90:	e000      	b.n	8000c94 <showSlash+0x140>
	if(x0 < 0 || y0 < 0 || x0 > 123 || y0 > 120) return;
 8000c92:	bf00      	nop
				}
			}
		}
	}
}
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bcb0      	pop	{r4, r5, r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	0800b8a0 	.word	0x0800b8a0
 8000ca0:	cccccccd 	.word	0xcccccccd
 8000ca4:	240000fc 	.word	0x240000fc

08000ca8 <clearScreen>:
void clearScreen(){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	for(long i = 0; i < LCD_BUFFER_SIZE; i+=3){
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	e011      	b.n	8000cd8 <clearScreen+0x30>
		Framememory[i]=0;	// Red = 0
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <clearScreen+0x48>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		Framememory[i+1]=0;	// Green = 0
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <clearScreen+0x48>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	54d1      	strb	r1, [r2, r3]
		Framememory[i+2]=0;	// Blue = 0
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <clearScreen+0x48>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	54d1      	strb	r1, [r2, r3]
	for(long i = 0; i < LCD_BUFFER_SIZE; i+=3){
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000cde:	dbe9      	blt.n	8000cb4 <clearScreen+0xc>
//			HAL_Delay(1);
	}
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	240000fc 	.word	0x240000fc

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000d00:	bf00      	nop
 8000d02:	4b93      	ldr	r3, [pc, #588]	; (8000f50 <main+0x25c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <main+0x24>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dcf4      	bgt.n	8000d02 <main+0xe>
		;
	if (timeout < 0) {
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da01      	bge.n	8000d22 <main+0x2e>
		Error_Handler();
 8000d1e:	f000 fbfd 	bl	800151c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f000 ffc1 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 f925 	bl	8000f74 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d2a:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <main+0x25c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <main+0x25c>)
 8000d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b85      	ldr	r3, [pc, #532]	; (8000f50 <main+0x25c>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f004 fdb9 	bl	80058c0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2000      	movs	r0, #0
 8000d52:	f004 fdcf 	bl	80058f4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5a:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000d5c:	bf00      	nop
 8000d5e:	4b7c      	ldr	r3, [pc, #496]	; (8000f50 <main+0x25c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d104      	bne.n	8000d74 <main+0x80>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	60fa      	str	r2, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dcf4      	bgt.n	8000d5e <main+0x6a>
		;
	if (timeout < 0) {
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	da01      	bge.n	8000d7e <main+0x8a>
		Error_Handler();
 8000d7a:	f000 fbcf 	bl	800151c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 fb2d 	bl	80013dc <MX_GPIO_Init>
  MX_ETH_Init();
 8000d82:	f000 f97d 	bl	8001080 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d86:	f000 fa7b 	bl	8001280 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000d8a:	f000 faf7 	bl	800137c <MX_DMA_Init>
  MX_SPI1_Init();
 8000d8e:	f000 fa1f 	bl	80011d0 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d92:	f000 fac1 	bl	8001318 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8000d96:	f000 f9bf 	bl	8001118 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

//	uint8_t x = 0;
	ST7735.hspi = &hspi1;
 8000d9a:	4b6e      	ldr	r3, [pc, #440]	; (8000f54 <main+0x260>)
 8000d9c:	4a6e      	ldr	r2, [pc, #440]	; (8000f58 <main+0x264>)
 8000d9e:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000da0:	4b6c      	ldr	r3, [pc, #432]	; (8000f54 <main+0x260>)
 8000da2:	4a6e      	ldr	r2, [pc, #440]	; (8000f5c <main+0x268>)
 8000da4:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000da6:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <main+0x260>)
 8000da8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dac:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <main+0x260>)
 8000db0:	4a6a      	ldr	r2, [pc, #424]	; (8000f5c <main+0x268>)
 8000db2:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000db4:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <main+0x260>)
 8000db6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dba:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000dbc:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <main+0x260>)
 8000dbe:	4a68      	ldr	r2, [pc, #416]	; (8000f60 <main+0x26c>)
 8000dc0:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000dc2:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <main+0x260>)
 8000dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc8:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 8000dca:	4862      	ldr	r0, [pc, #392]	; (8000f54 <main+0x260>)
 8000dcc:	f7ff fc9a 	bl	8000704 <LCD_init>
	LCD_flush(&ST7735);
 8000dd0:	4860      	ldr	r0, [pc, #384]	; (8000f54 <main+0x260>)
 8000dd2:	f7ff fd51 	bl	8000878 <LCD_flush>

	uint8_t i = 0, j = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	72fb      	strb	r3, [r7, #11]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	72bb      	strb	r3, [r7, #10]
	clearScreen();
 8000dde:	f7ff ff63 	bl	8000ca8 <clearScreen>
//		int16_t read = UARTReadChar(&UART2) ;
//		if(read != -1)
//			{
//				BMPDecoder(read, LCDBufferAddr());
//			}
		if(HAL_GetTick() - lastUpdate > 100)
 8000de2:	f000 ffe7 	bl	8001db4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <main+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d9f7      	bls.n	8000de2 <main+0xee>
		  {
			  lastUpdate = HAL_GetTick();
 8000df2:	f000 ffdf 	bl	8001db4 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <main+0x270>)
 8000dfa:	6013      	str	r3, [r2, #0]
			  i++;
 8000dfc:	7afb      	ldrb	r3, [r7, #11]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	72fb      	strb	r3, [r7, #11]
			  if(i >= 5){i=0;j^=1;}
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d905      	bls.n	8000e14 <main+0x120>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	72fb      	strb	r3, [r7, #11]
 8000e0c:	7abb      	ldrb	r3, [r7, #10]
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	72bb      	strb	r3, [r7, #10]

			  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8000e14:	2201      	movs	r2, #1
 8000e16:	4954      	ldr	r1, [pc, #336]	; (8000f68 <main+0x274>)
 8000e18:	4854      	ldr	r0, [pc, #336]	; (8000f6c <main+0x278>)
 8000e1a:	f007 fb61 	bl	80084e0 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4953      	ldr	r1, [pc, #332]	; (8000f70 <main+0x27c>)
 8000e22:	4852      	ldr	r0, [pc, #328]	; (8000f6c <main+0x278>)
 8000e24:	f007 fc40 	bl	80086a8 <HAL_RTC_GetDate>

			  showDigit(7, 0, (NowTime.Hours & 0xF0) >> 4);
 8000e28:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <main+0x274>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	2007      	movs	r0, #7
 8000e36:	f7ff fd31 	bl	800089c <showDigit>
			  showDigit(13, 0, NowTime.Hours & 0x0F);
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0x274>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	200d      	movs	r0, #13
 8000e4a:	f7ff fd27 	bl	800089c <showDigit>
			  showColon(19,	0,	j);
 8000e4e:	7abb      	ldrb	r3, [r7, #10]
 8000e50:	461a      	mov	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	2013      	movs	r0, #19
 8000e56:	f7ff fdd3 	bl	8000a00 <showColon>
			  showDigit(25, 0, (NowTime.Minutes & 0xF0) >> 4);
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <main+0x274>)
 8000e5c:	785b      	ldrb	r3, [r3, #1]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	2019      	movs	r0, #25
 8000e68:	f7ff fd18 	bl	800089c <showDigit>
			  showDigit(31, 0, NowTime.Minutes & 0x0F);
 8000e6c:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <main+0x274>)
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	2100      	movs	r1, #0
 8000e7a:	201f      	movs	r0, #31
 8000e7c:	f7ff fd0e 	bl	800089c <showDigit>
			  showColon(37,	0,	j);
 8000e80:	7abb      	ldrb	r3, [r7, #10]
 8000e82:	461a      	mov	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	2025      	movs	r0, #37	; 0x25
 8000e88:	f7ff fdba 	bl	8000a00 <showColon>
			  showDigit(43, 0, (NowTime.Seconds & 0xF0) >> 4);
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <main+0x274>)
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	202b      	movs	r0, #43	; 0x2b
 8000e9a:	f7ff fcff 	bl	800089c <showDigit>
			  showDigit(49, 0, NowTime.Seconds & 0x0F);
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <main+0x274>)
 8000ea0:	789b      	ldrb	r3, [r3, #2]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2031      	movs	r0, #49	; 0x31
 8000eae:	f7ff fcf5 	bl	800089c <showDigit>

			  showDigit(61, 0, (NowDate.Date & 0xF0) >> 4);
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <main+0x27c>)
 8000eb4:	789b      	ldrb	r3, [r3, #2]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	203d      	movs	r0, #61	; 0x3d
 8000ec0:	f7ff fcec 	bl	800089c <showDigit>
			  showDigit(67, 0, NowDate.Date & 0x0F);
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <main+0x27c>)
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	f003 030f 	and.w	r3, r3, #15
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2043      	movs	r0, #67	; 0x43
 8000ed4:	f7ff fce2 	bl	800089c <showDigit>
			  showSlash(73, 0, 1);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2100      	movs	r1, #0
 8000edc:	2049      	movs	r0, #73	; 0x49
 8000ede:	f7ff fe39 	bl	8000b54 <showSlash>
			  showDigit(79, 0, (NowDate.Month & 0xF0) >> 4);
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <main+0x27c>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	204f      	movs	r0, #79	; 0x4f
 8000ef0:	f7ff fcd4 	bl	800089c <showDigit>
			  showDigit(85, 0, NowDate.Month & 0x0F);
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <main+0x27c>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	2055      	movs	r0, #85	; 0x55
 8000f04:	f7ff fcca 	bl	800089c <showDigit>
			  showSlash(91, 0, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	205b      	movs	r0, #91	; 0x5b
 8000f0e:	f7ff fe21 	bl	8000b54 <showSlash>
			  showDigit(97, 0, 2);
 8000f12:	2202      	movs	r2, #2
 8000f14:	2100      	movs	r1, #0
 8000f16:	2061      	movs	r0, #97	; 0x61
 8000f18:	f7ff fcc0 	bl	800089c <showDigit>
			  showDigit(103, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2067      	movs	r0, #103	; 0x67
 8000f22:	f7ff fcbb 	bl	800089c <showDigit>
			  showDigit(109, 0, (NowDate.Year & 0xF0) >> 4);
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <main+0x27c>)
 8000f28:	78db      	ldrb	r3, [r3, #3]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	206d      	movs	r0, #109	; 0x6d
 8000f34:	f7ff fcb2 	bl	800089c <showDigit>
			  showDigit(115, 0, NowDate.Year & 0x0F);
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <main+0x27c>)
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	2100      	movs	r1, #0
 8000f46:	2073      	movs	r0, #115	; 0x73
 8000f48:	f7ff fca8 	bl	800089c <showDigit>
		if(HAL_GetTick() - lastUpdate > 100)
 8000f4c:	e749      	b.n	8000de2 <main+0xee>
 8000f4e:	bf00      	nop
 8000f50:	58024400 	.word	0x58024400
 8000f54:	2400c100 	.word	0x2400c100
 8000f58:	2400c6d4 	.word	0x2400c6d4
 8000f5c:	58020c00 	.word	0x58020c00
 8000f60:	58021800 	.word	0x58021800
 8000f64:	2400c0fc 	.word	0x2400c0fc
 8000f68:	2400c75c 	.word	0x2400c75c
 8000f6c:	2400c6b0 	.word	0x2400c6b0
 8000f70:	2400c6ac 	.word	0x2400c6ac

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09c      	sub	sp, #112	; 0x70
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	224c      	movs	r2, #76	; 0x4c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00a fc70 	bl	800b868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a fc6a 	bl	800b868 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f004 fe09 	bl	8005bac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <SystemClock_Config+0x100>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a34      	ldr	r2, [pc, #208]	; (8001074 <SystemClock_Config+0x100>)
 8000fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <SystemClock_Config+0x100>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <SystemClock_Config+0x104>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	4a2f      	ldr	r2, [pc, #188]	; (8001078 <SystemClock_Config+0x104>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <SystemClock_Config+0x104>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fcc:	bf00      	nop
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <SystemClock_Config+0x100>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fda:	d1f8      	bne.n	8000fce <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <SystemClock_Config+0x108>)
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	f023 0303 	bic.w	r3, r3, #3
 8000fe4:	4a25      	ldr	r2, [pc, #148]	; (800107c <SystemClock_Config+0x108>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fec:	2309      	movs	r3, #9
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	2302      	movs	r3, #2
 8001000:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001006:	2378      	movs	r3, #120	; 0x78
 8001008:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800100e:	2306      	movs	r3, #6
 8001010:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001016:	230c      	movs	r3, #12
 8001018:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800101a:	2300      	movs	r3, #0
 800101c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fe2a 	bl	8005c80 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001032:	f000 fa73 	bl	800151c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	233f      	movs	r3, #63	; 0x3f
 8001038:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2303      	movs	r3, #3
 800103c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001042:	2308      	movs	r3, #8
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800104a:	2340      	movs	r3, #64	; 0x40
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800104e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001052:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001054:	2340      	movs	r3, #64	; 0x40
 8001056:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2104      	movs	r1, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f005 fa3b 	bl	80064d8 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001068:	f000 fa58 	bl	800151c <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3770      	adds	r7, #112	; 0x70
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	58024800 	.word	0x58024800
 8001078:	58000400 	.word	0x58000400
 800107c:	58024400 	.word	0x58024400

08001080 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_ETH_Init+0x80>)
 8001086:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <MX_ETH_Init+0x84>)
 8001088:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ETH_Init+0x88>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ETH_Init+0x88>)
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ETH_Init+0x88>)
 8001098:	22e1      	movs	r2, #225	; 0xe1
 800109a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_ETH_Init+0x88>)
 800109e:	2200      	movs	r2, #0
 80010a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ETH_Init+0x88>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ETH_Init+0x88>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_ETH_Init+0x80>)
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_ETH_Init+0x88>)
 80010b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_ETH_Init+0x80>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_ETH_Init+0x80>)
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <MX_ETH_Init+0x8c>)
 80010be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_ETH_Init+0x80>)
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <MX_ETH_Init+0x90>)
 80010c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_ETH_Init+0x80>)
 80010c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <MX_ETH_Init+0x80>)
 80010d0:	f003 fe16 	bl	8004d00 <HAL_ETH_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010da:	f000 fa1f 	bl	800151c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010de:	2234      	movs	r2, #52	; 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_ETH_Init+0x94>)
 80010e4:	f00a fbc0 	bl	800b868 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_ETH_Init+0x94>)
 80010ea:	2221      	movs	r2, #33	; 0x21
 80010ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_ETH_Init+0x94>)
 80010f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_ETH_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400c770 	.word	0x2400c770
 8001104:	40028000 	.word	0x40028000
 8001108:	2400c11c 	.word	0x2400c11c
 800110c:	24000080 	.word	0x24000080
 8001110:	24000020 	.word	0x24000020
 8001114:	2400c7f8 	.word	0x2400c7f8

08001118 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <MX_RTC_Init+0xb4>)
 8001134:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_RTC_Init+0xb0>)
 800113e:	227f      	movs	r2, #127	; 0x7f
 8001140:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_RTC_Init+0xb0>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_RTC_Init+0xb0>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001162:	f007 f8a7 	bl	80082b4 <HAL_RTC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800116c:	f000 f9d6 	bl	800151c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8001170:	2323      	movs	r3, #35	; 0x23
 8001172:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x58;
 8001174:	2358      	movs	r3, #88	; 0x58
 8001176:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001178:	2300      	movs	r3, #0
 800117a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <MX_RTC_Init+0xb0>)
 800118c:	f007 f90a 	bl	80083a4 <HAL_RTC_SetTime>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001196:	f000 f9c1 	bl	800151c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800119a:	2305      	movs	r3, #5
 800119c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800119e:	2312      	movs	r3, #18
 80011a0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80011a2:	2331      	movs	r3, #49	; 0x31
 80011a4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80011a6:	2321      	movs	r3, #33	; 0x21
 80011a8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_RTC_Init+0xb0>)
 80011b2:	f007 f9f1 	bl	8008598 <HAL_RTC_SetDate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80011bc:	f000 f9ae 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2400c6b0 	.word	0x2400c6b0
 80011cc:	58004000 	.word	0x58004000

080011d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011d6:	4a29      	ldr	r2, [pc, #164]	; (800127c <MX_SPI1_Init+0xac>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_SPI1_Init+0xa8>)
 80011fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001202:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001206:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI1_Init+0xa8>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI1_Init+0xa8>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI1_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI1_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI1_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001252:	2200      	movs	r2, #0
 8001254:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001258:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_SPI1_Init+0xa8>)
 8001266:	f007 fb3f 	bl	80088e8 <HAL_SPI_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001270:	f000 f954 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2400c6d4 	.word	0x2400c6d4
 800127c:	40013000 	.word	0x40013000

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <MX_USART3_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_USART3_UART_Init+0x90>)
 800128c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_USART3_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_USART3_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ca:	f008 fab8 	bl	800983e <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 f922 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012dc:	f009 fed2 	bl	800b084 <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f000 f919 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012ee:	f009 ff07 	bl	800b100 <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 f910 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_USART3_UART_Init+0x90>)
 80012fe:	f009 fe88 	bl	800b012 <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f908 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2400c19c 	.word	0x2400c19c
 8001314:	40004800 	.word	0x40004800

08001318 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001320:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001324:	2209      	movs	r2, #9
 8001326:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132a:	2202      	movs	r2, #2
 800132c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001336:	2202      	movs	r2, #2
 8001338:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134e:	2201      	movs	r2, #1
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001354:	2201      	movs	r2, #1
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001360:	f004 fadc 	bl	800591c <HAL_PCD_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800136a:	f000 f8d7 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2400c22c 	.word	0x2400c22c
 8001378:	40080000 	.word	0x40080000

0800137c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_DMA_Init+0x5c>)
 8001384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <MX_DMA_Init+0x5c>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_DMA_Init+0x5c>)
 8001394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	200b      	movs	r0, #11
 80013a6:	f000 fe30 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013aa:	200b      	movs	r0, #11
 80013ac:	f000 fe47 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	200c      	movs	r0, #12
 80013b6:	f000 fe28 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013ba:	200c      	movs	r0, #12
 80013bc:	f000 fe3f 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	200d      	movs	r0, #13
 80013c6:	f000 fe20 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013ca:	200d      	movs	r0, #13
 80013cc:	f000 fe37 	bl	800203e <HAL_NVIC_EnableIRQ>

}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	58024400 	.word	0x58024400

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <MX_GPIO_Init+0x134>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	4a45      	ldr	r2, [pc, #276]	; (8001510 <MX_GPIO_Init+0x134>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <MX_GPIO_Init+0x134>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <MX_GPIO_Init+0x134>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <MX_GPIO_Init+0x134>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001420:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <MX_GPIO_Init+0x134>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <MX_GPIO_Init+0x134>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	4a36      	ldr	r2, [pc, #216]	; (8001510 <MX_GPIO_Init+0x134>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <MX_GPIO_Init+0x134>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <MX_GPIO_Init+0x134>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <MX_GPIO_Init+0x134>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_GPIO_Init+0x134>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <MX_GPIO_Init+0x134>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <MX_GPIO_Init+0x134>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_GPIO_Init+0x134>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_GPIO_Init+0x134>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <MX_GPIO_Init+0x134>)
 8001490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_GPIO_Init+0x134>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <MX_GPIO_Init+0x138>)
 80014ae:	f004 f9ed 	bl	800588c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <MX_GPIO_Init+0x138>)
 80014ba:	f004 f9e7 	bl	800588c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c4:	4814      	ldr	r0, [pc, #80]	; (8001518 <MX_GPIO_Init+0x13c>)
 80014c6:	f004 f9e1 	bl	800588c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 80014ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_GPIO_Init+0x138>)
 80014e4:	f004 f822 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_GPIO_Init+0x13c>)
 8001502:	f004 f813 	bl	800552c <HAL_GPIO_Init>

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	; 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	58024400 	.word	0x58024400
 8001514:	58020c00 	.word	0x58020c00
 8001518:	58021800 	.word	0x58021800

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_MspInit+0x30>)
 8001530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_MspInit+0x30>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_MspInit+0x30>)
 8001540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	58024400 	.word	0x58024400

0800155c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a59      	ldr	r2, [pc, #356]	; (80016e0 <HAL_ETH_MspInit+0x184>)
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 80ab 	bne.w	80016d6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001582:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001586:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001590:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a4:	4a4f      	ldr	r2, [pc, #316]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c2:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015cc:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	4a40      	ldr	r2, [pc, #256]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a39      	ldr	r2, [pc, #228]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 800163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_ETH_MspInit+0x188>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001652:	2332      	movs	r3, #50	; 0x32
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001662:	230b      	movs	r3, #11
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	481e      	ldr	r0, [pc, #120]	; (80016e8 <HAL_ETH_MspInit+0x18c>)
 800166e:	f003 ff5d 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001672:	2386      	movs	r3, #134	; 0x86
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001682:	230b      	movs	r3, #11
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4817      	ldr	r0, [pc, #92]	; (80016ec <HAL_ETH_MspInit+0x190>)
 800168e:	f003 ff4d 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a4:	230b      	movs	r3, #11
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <HAL_ETH_MspInit+0x194>)
 80016b0:	f003 ff3c 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c6:	230b      	movs	r3, #11
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <HAL_ETH_MspInit+0x198>)
 80016d2:	f003 ff2b 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3738      	adds	r7, #56	; 0x38
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40028000 	.word	0x40028000
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020800 	.word	0x58020800
 80016ec:	58020000 	.word	0x58020000
 80016f0:	58020400 	.word	0x58020400
 80016f4:	58021800 	.word	0x58021800

080016f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0b2      	sub	sp, #200	; 0xc8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	22bc      	movs	r2, #188	; 0xbc
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00a f8ad 	bl	800b868 <memset>
  if(hrtc->Instance==RTC)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_RTC_MspInit+0x58>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d116      	bne.n	8001746 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800171e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4618      	mov	r0, r3
 800172c:	f005 fa60 	bl	8006bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001736:	f7ff fef1 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RTC_MspInit+0x5c>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_RTC_MspInit+0x5c>)
 8001740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	37c8      	adds	r7, #200	; 0xc8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	58004000 	.word	0x58004000
 8001754:	58024400 	.word	0x58024400

08001758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ba      	sub	sp, #232	; 0xe8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	f107 0318 	add.w	r3, r7, #24
 8001774:	22bc      	movs	r2, #188	; 0xbc
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f00a f875 	bl	800b868 <memset>
  if(hspi->Instance==SPI1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_SPI_MspInit+0x174>)
 8001784:	4293      	cmp	r3, r2
 8001786:	f040 809c 	bne.w	80018c2 <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001790:	2300      	movs	r3, #0
 8001792:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	4618      	mov	r0, r3
 800179a:	f005 fa29 	bl	8006bf0 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80017a4:	f7ff feba 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017a8:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ae:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017b8:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017cc:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_SPI_MspInit+0x178>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001802:	2320      	movs	r3, #32
 8001804:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181a:	2305      	movs	r3, #5
 800181c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001824:	4619      	mov	r1, r3
 8001826:	482b      	ldr	r0, [pc, #172]	; (80018d4 <HAL_SPI_MspInit+0x17c>)
 8001828:	f003 fe80 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800182c:	2320      	movs	r3, #32
 800182e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001844:	2305      	movs	r3, #5
 8001846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800184e:	4619      	mov	r1, r3
 8001850:	4821      	ldr	r0, [pc, #132]	; (80018d8 <HAL_SPI_MspInit+0x180>)
 8001852:	f003 fe6b 	bl	800552c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_SPI_MspInit+0x188>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_SPI_MspInit+0x184>)
 800185e:	2226      	movs	r2, #38	; 0x26
 8001860:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_SPI_MspInit+0x184>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001874:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_SPI_MspInit+0x184>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001888:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_SPI_MspInit+0x184>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001896:	4811      	ldr	r0, [pc, #68]	; (80018dc <HAL_SPI_MspInit+0x184>)
 8001898:	f000 fbec 	bl	8002074 <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80018a2:	f7ff fe3b 	bl	800151c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_SPI_MspInit+0x184>)
 80018aa:	679a      	str	r2, [r3, #120]	; 0x78
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_SPI_MspInit+0x184>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2023      	movs	r0, #35	; 0x23
 80018b8:	f000 fba7 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018bc:	2023      	movs	r0, #35	; 0x23
 80018be:	f000 fbbe 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	37e8      	adds	r7, #232	; 0xe8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40013000 	.word	0x40013000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58020000 	.word	0x58020000
 80018d8:	58020400 	.word	0x58020400
 80018dc:	2400c82c 	.word	0x2400c82c
 80018e0:	40020010 	.word	0x40020010

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0b8      	sub	sp, #224	; 0xe0
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	22bc      	movs	r2, #188	; 0xbc
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f009 ffaf 	bl	800b868 <memset>
  if(huart->Instance==USART3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <HAL_UART_MspInit+0x188>)
 8001910:	4293      	cmp	r3, r2
 8001912:	f040 80a6 	bne.w	8001a62 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001916:	2302      	movs	r3, #2
 8001918:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f005 f963 	bl	8006bf0 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001930:	f7ff fdf4 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001934:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <HAL_UART_MspInit+0x18c>)
 8001936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800193a:	4a4d      	ldr	r2, [pc, #308]	; (8001a70 <HAL_UART_MspInit+0x18c>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001944:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_UART_MspInit+0x18c>)
 8001946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_UART_MspInit+0x18c>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	4a45      	ldr	r2, [pc, #276]	; (8001a70 <HAL_UART_MspInit+0x18c>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_UART_MspInit+0x18c>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001970:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001974:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800198a:	2307      	movs	r3, #7
 800198c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001994:	4619      	mov	r1, r3
 8001996:	4837      	ldr	r0, [pc, #220]	; (8001a74 <HAL_UART_MspInit+0x190>)
 8001998:	f003 fdc8 	bl	800552c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_UART_MspInit+0x194>)
 800199e:	4a37      	ldr	r2, [pc, #220]	; (8001a7c <HAL_UART_MspInit+0x198>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019a4:	222d      	movs	r2, #45	; 0x2d
 80019a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80019dc:	4826      	ldr	r0, [pc, #152]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019de:	f000 fb49 	bl	8002074 <HAL_DMA_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80019e8:	f7ff fd98 	bl	800151c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <HAL_UART_MspInit+0x194>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_UART_MspInit+0x1a0>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a00:	222e      	movs	r2, #46	; 0x2e
 8001a02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a06:	2240      	movs	r2, #64	; 0x40
 8001a08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a38:	f000 fb1c 	bl	8002074 <HAL_DMA_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001a42:	f7ff fd6b 	bl	800151c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a4a:	679a      	str	r2, [r3, #120]	; 0x78
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_UART_MspInit+0x19c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2027      	movs	r0, #39	; 0x27
 8001a58:	f000 fad7 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a5c:	2027      	movs	r0, #39	; 0x27
 8001a5e:	f000 faee 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	37e0      	adds	r7, #224	; 0xe0
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40004800 	.word	0x40004800
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58020c00 	.word	0x58020c00
 8001a78:	2400c124 	.word	0x2400c124
 8001a7c:	40020028 	.word	0x40020028
 8001a80:	2400c634 	.word	0x2400c634
 8001a84:	40020040 	.word	0x40020040

08001a88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0b8      	sub	sp, #224	; 0xe0
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	22bc      	movs	r2, #188	; 0xbc
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fedd 	bl	800b868 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a37      	ldr	r2, [pc, #220]	; (8001b90 <HAL_PCD_MspInit+0x108>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d166      	bne.n	8001b86 <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ab8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001abc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001aca:	2303      	movs	r3, #3
 8001acc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ad2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001ad8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001adc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001ade:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 f880 	bl	8006bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001af6:	f7ff fd11 	bl	800151c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001afa:	f004 f8b1 	bl	8005c60 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_PCD_MspInit+0x10c>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <HAL_PCD_MspInit+0x10c>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_PCD_MspInit+0x10c>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001b1c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001b36:	230a      	movs	r3, #10
 8001b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b40:	4619      	mov	r1, r3
 8001b42:	4815      	ldr	r0, [pc, #84]	; (8001b98 <HAL_PCD_MspInit+0x110>)
 8001b44:	f003 fcf2 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b60:	4619      	mov	r1, r3
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <HAL_PCD_MspInit+0x110>)
 8001b64:	f003 fce2 	bl	800552c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_PCD_MspInit+0x10c>)
 8001b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_PCD_MspInit+0x10c>)
 8001b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_PCD_MspInit+0x10c>)
 8001b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	37e0      	adds	r7, #224	; 0xe0
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40080000 	.word	0x40080000
 8001b94:	58024400 	.word	0x58024400
 8001b98:	58020000 	.word	0x58020000

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f8d0 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA1_Stream0_IRQHandler+0x10>)
 8001bf6:	f001 fd65 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2400c82c 	.word	0x2400c82c

08001c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream1_IRQHandler+0x10>)
 8001c0a:	f001 fd5b 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2400c124 	.word	0x2400c124

08001c18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA1_Stream2_IRQHandler+0x10>)
 8001c1e:	f001 fd51 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2400c634 	.word	0x2400c634

08001c2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <SPI1_IRQHandler+0x10>)
 8001c32:	f007 fa9b 	bl	800916c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2400c6d4 	.word	0x2400c6d4

08001c40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <USART3_IRQHandler+0x10>)
 8001c46:	f007 fe4b 	bl	80098e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2400c19c 	.word	0x2400c19c

08001c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c58:	f7fe fcba 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c5e:	490d      	ldr	r1, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c74:	4c0a      	ldr	r4, [pc, #40]	; (8001ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c82:	f009 fdcd 	bl	800b820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c86:	f7ff f835 	bl	8000cf4 <main>
  bx  lr
 8001c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c94:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001c98:	0800b958 	.word	0x0800b958
  ldr r2, =_sbss
 8001c9c:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001ca0:	2400c8a8 	.word	0x2400c8a8

08001ca4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC3_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f000 f9a0 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cb4:	f004 fdc6 	bl	8006844 <HAL_RCC_GetSysClockFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_Init+0x68>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	4913      	ldr	r1, [pc, #76]	; (8001d14 <HAL_Init+0x6c>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_Init+0x68>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_Init+0x6c>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_Init+0x70>)
 8001cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_Init+0x74>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f814 	bl	8001d20 <HAL_InitTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e002      	b.n	8001d08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d02:	f7ff fc11 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	58024400 	.word	0x58024400
 8001d14:	0800b890 	.word	0x0800b890
 8001d18:	24000004 	.word	0x24000004
 8001d1c:	24000000 	.word	0x24000000

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_InitTick+0x60>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e021      	b.n	8001d78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_InitTick+0x64>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_InitTick+0x60>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f985 	bl	800205a <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f000 f94f 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <HAL_InitTick+0x68>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2400001c 	.word	0x2400001c
 8001d84:	24000000 	.word	0x24000000
 8001d88:	24000018 	.word	0x24000018

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2400001c 	.word	0x2400001c
 8001db0:	2400c8a4 	.word	0x2400c8a4

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	2400c8a4 	.word	0x2400c8a4

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2400001c 	.word	0x2400001c

08001e14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetREVID+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	5c001000 	.word	0x5c001000

08001e2c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e3c:	4904      	ldr	r1, [pc, #16]	; (8001e50 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	58000400 	.word	0x58000400

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <__NVIC_SetPriorityGrouping+0x40>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x40>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00
 8001e98:	05fa0000 	.word	0x05fa0000

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff40 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff90 	bl	8001f48 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5f 	bl	8001ef4 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff33 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa4 	bl	8001fb0 <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fe9a 	bl	8001db4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e316      	b.n	80026ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a66      	ldr	r2, [pc, #408]	; (800222c <HAL_DMA_Init+0x1b8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d04a      	beq.n	800212c <HAL_DMA_Init+0xb8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a65      	ldr	r2, [pc, #404]	; (8002230 <HAL_DMA_Init+0x1bc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d045      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_DMA_Init+0x1c0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d040      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a62      	ldr	r2, [pc, #392]	; (8002238 <HAL_DMA_Init+0x1c4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d03b      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a60      	ldr	r2, [pc, #384]	; (800223c <HAL_DMA_Init+0x1c8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d036      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5f      	ldr	r2, [pc, #380]	; (8002240 <HAL_DMA_Init+0x1cc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d031      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5d      	ldr	r2, [pc, #372]	; (8002244 <HAL_DMA_Init+0x1d0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02c      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5c      	ldr	r2, [pc, #368]	; (8002248 <HAL_DMA_Init+0x1d4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d027      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a5a      	ldr	r2, [pc, #360]	; (800224c <HAL_DMA_Init+0x1d8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d022      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a59      	ldr	r2, [pc, #356]	; (8002250 <HAL_DMA_Init+0x1dc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01d      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a57      	ldr	r2, [pc, #348]	; (8002254 <HAL_DMA_Init+0x1e0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d018      	beq.n	800212c <HAL_DMA_Init+0xb8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a56      	ldr	r2, [pc, #344]	; (8002258 <HAL_DMA_Init+0x1e4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_DMA_Init+0xb8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a54      	ldr	r2, [pc, #336]	; (800225c <HAL_DMA_Init+0x1e8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <HAL_DMA_Init+0xb8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a53      	ldr	r2, [pc, #332]	; (8002260 <HAL_DMA_Init+0x1ec>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_DMA_Init+0xb8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a51      	ldr	r2, [pc, #324]	; (8002264 <HAL_DMA_Init+0x1f0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_DMA_Init+0xb8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a50      	ldr	r2, [pc, #320]	; (8002268 <HAL_DMA_Init+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Init+0xbc>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_DMA_Init+0xbe>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 813b 	beq.w	80023ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a37      	ldr	r2, [pc, #220]	; (800222c <HAL_DMA_Init+0x1b8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d04a      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a36      	ldr	r2, [pc, #216]	; (8002230 <HAL_DMA_Init+0x1bc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d045      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a34      	ldr	r2, [pc, #208]	; (8002234 <HAL_DMA_Init+0x1c0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d040      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a33      	ldr	r2, [pc, #204]	; (8002238 <HAL_DMA_Init+0x1c4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d03b      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a31      	ldr	r2, [pc, #196]	; (800223c <HAL_DMA_Init+0x1c8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d036      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_DMA_Init+0x1cc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d031      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_DMA_Init+0x1d0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02c      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <HAL_DMA_Init+0x1d4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d027      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_DMA_Init+0x1d8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d022      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_DMA_Init+0x1dc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01d      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_DMA_Init+0x1e0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d018      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_DMA_Init+0x1e4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d013      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_DMA_Init+0x1e8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00e      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_DMA_Init+0x1ec>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_DMA_Init+0x1f0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_DMA_Init+0x174>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a21      	ldr	r2, [pc, #132]	; (8002268 <HAL_DMA_Init+0x1f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d108      	bne.n	80021fa <HAL_DMA_Init+0x186>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e007      	b.n	800220a <HAL_DMA_Init+0x196>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800220a:	e02f      	b.n	800226c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220c:	f7ff fdd2 	bl	8001db4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d928      	bls.n	800226c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e246      	b.n	80026ba <HAL_DMA_Init+0x646>
 800222c:	40020010 	.word	0x40020010
 8002230:	40020028 	.word	0x40020028
 8002234:	40020040 	.word	0x40020040
 8002238:	40020058 	.word	0x40020058
 800223c:	40020070 	.word	0x40020070
 8002240:	40020088 	.word	0x40020088
 8002244:	400200a0 	.word	0x400200a0
 8002248:	400200b8 	.word	0x400200b8
 800224c:	40020410 	.word	0x40020410
 8002250:	40020428 	.word	0x40020428
 8002254:	40020440 	.word	0x40020440
 8002258:	40020458 	.word	0x40020458
 800225c:	40020470 	.word	0x40020470
 8002260:	40020488 	.word	0x40020488
 8002264:	400204a0 	.word	0x400204a0
 8002268:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1c8      	bne.n	800220c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4b83      	ldr	r3, [pc, #524]	; (8002494 <HAL_DMA_Init+0x420>)
 8002286:	4013      	ands	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002292:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4313      	orrs	r3, r2
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022d0:	4b71      	ldr	r3, [pc, #452]	; (8002498 <HAL_DMA_Init+0x424>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <HAL_DMA_Init+0x428>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022dc:	d328      	bcc.n	8002330 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b28      	cmp	r3, #40	; 0x28
 80022e4:	d903      	bls.n	80022ee <HAL_DMA_Init+0x27a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b2e      	cmp	r3, #46	; 0x2e
 80022ec:	d917      	bls.n	800231e <HAL_DMA_Init+0x2aa>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b3e      	cmp	r3, #62	; 0x3e
 80022f4:	d903      	bls.n	80022fe <HAL_DMA_Init+0x28a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b42      	cmp	r3, #66	; 0x42
 80022fc:	d90f      	bls.n	800231e <HAL_DMA_Init+0x2aa>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b46      	cmp	r3, #70	; 0x46
 8002304:	d903      	bls.n	800230e <HAL_DMA_Init+0x29a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b48      	cmp	r3, #72	; 0x48
 800230c:	d907      	bls.n	800231e <HAL_DMA_Init+0x2aa>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b4e      	cmp	r3, #78	; 0x4e
 8002314:	d905      	bls.n	8002322 <HAL_DMA_Init+0x2ae>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b52      	cmp	r3, #82	; 0x52
 800231c:	d801      	bhi.n	8002322 <HAL_DMA_Init+0x2ae>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_DMA_Init+0x2b0>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 0307 	bic.w	r3, r3, #7
 8002346:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2b04      	cmp	r3, #4
 8002358:	d117      	bne.n	800238a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f002 fb3d 	bl	80049ec <DMA_CheckFifoParam>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e197      	b.n	80026ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f002 fa78 	bl	8004888 <DMA_CalcBaseAndBitshift>
 8002398:	4603      	mov	r3, r0
 800239a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e0cd      	b.n	800254a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <HAL_DMA_Init+0x42c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d022      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a39      	ldr	r2, [pc, #228]	; (80024a4 <HAL_DMA_Init+0x430>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01d      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <HAL_DMA_Init+0x434>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a36      	ldr	r2, [pc, #216]	; (80024ac <HAL_DMA_Init+0x438>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_DMA_Init+0x43c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a33      	ldr	r2, [pc, #204]	; (80024b4 <HAL_DMA_Init+0x440>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a32      	ldr	r2, [pc, #200]	; (80024b8 <HAL_DMA_Init+0x444>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_DMA_Init+0x38a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a30      	ldr	r2, [pc, #192]	; (80024bc <HAL_DMA_Init+0x448>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_DMA_Init+0x38e>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_DMA_Init+0x390>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8097 	beq.w	8002538 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_DMA_Init+0x42c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d021      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_DMA_Init+0x430>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01c      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_DMA_Init+0x434>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d017      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_DMA_Init+0x438>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d012      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_DMA_Init+0x43c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00d      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <HAL_DMA_Init+0x440>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d008      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_DMA_Init+0x444>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_DMA_Init+0x3e4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_DMA_Init+0x448>)
 8002456:	4293      	cmp	r3, r2
 8002458:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_DMA_Init+0x44c>)
 8002476:	4013      	ands	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d020      	beq.n	80024c4 <HAL_DMA_Init+0x450>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b80      	cmp	r3, #128	; 0x80
 8002488:	d102      	bne.n	8002490 <HAL_DMA_Init+0x41c>
 800248a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800248e:	e01a      	b.n	80024c6 <HAL_DMA_Init+0x452>
 8002490:	2300      	movs	r3, #0
 8002492:	e018      	b.n	80024c6 <HAL_DMA_Init+0x452>
 8002494:	fe10803f 	.word	0xfe10803f
 8002498:	5c001000 	.word	0x5c001000
 800249c:	ffff0000 	.word	0xffff0000
 80024a0:	58025408 	.word	0x58025408
 80024a4:	5802541c 	.word	0x5802541c
 80024a8:	58025430 	.word	0x58025430
 80024ac:	58025444 	.word	0x58025444
 80024b0:	58025458 	.word	0x58025458
 80024b4:	5802546c 	.word	0x5802546c
 80024b8:	58025480 	.word	0x58025480
 80024bc:	58025494 	.word	0x58025494
 80024c0:	fffe000f 	.word	0xfffe000f
 80024c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68d2      	ldr	r2, [r2, #12]
 80024ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b6e      	ldr	r3, [pc, #440]	; (80026c4 <HAL_DMA_Init+0x650>)
 800250c:	4413      	add	r3, r2
 800250e:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_DMA_Init+0x654>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	009a      	lsls	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f002 f9b3 	bl	8004888 <DMA_CalcBaseAndBitshift>
 8002522:	4603      	mov	r3, r0
 8002524:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2201      	movs	r2, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	e008      	b.n	800254a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2203      	movs	r2, #3
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0b7      	b.n	80026ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a5f      	ldr	r2, [pc, #380]	; (80026cc <HAL_DMA_Init+0x658>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d072      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a5d      	ldr	r2, [pc, #372]	; (80026d0 <HAL_DMA_Init+0x65c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d06d      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5c      	ldr	r2, [pc, #368]	; (80026d4 <HAL_DMA_Init+0x660>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d068      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_DMA_Init+0x664>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d063      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a59      	ldr	r2, [pc, #356]	; (80026dc <HAL_DMA_Init+0x668>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d05e      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a57      	ldr	r2, [pc, #348]	; (80026e0 <HAL_DMA_Init+0x66c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d059      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a56      	ldr	r2, [pc, #344]	; (80026e4 <HAL_DMA_Init+0x670>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d054      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a54      	ldr	r2, [pc, #336]	; (80026e8 <HAL_DMA_Init+0x674>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d04f      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a53      	ldr	r2, [pc, #332]	; (80026ec <HAL_DMA_Init+0x678>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04a      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a51      	ldr	r2, [pc, #324]	; (80026f0 <HAL_DMA_Init+0x67c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d045      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a50      	ldr	r2, [pc, #320]	; (80026f4 <HAL_DMA_Init+0x680>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d040      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a4e      	ldr	r2, [pc, #312]	; (80026f8 <HAL_DMA_Init+0x684>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d03b      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <HAL_DMA_Init+0x688>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d036      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a4b      	ldr	r2, [pc, #300]	; (8002700 <HAL_DMA_Init+0x68c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a4a      	ldr	r2, [pc, #296]	; (8002704 <HAL_DMA_Init+0x690>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d02c      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a48      	ldr	r2, [pc, #288]	; (8002708 <HAL_DMA_Init+0x694>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d027      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a47      	ldr	r2, [pc, #284]	; (800270c <HAL_DMA_Init+0x698>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_DMA_Init+0x69c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_DMA_Init+0x6a0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d018      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a42      	ldr	r2, [pc, #264]	; (8002718 <HAL_DMA_Init+0x6a4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a41      	ldr	r2, [pc, #260]	; (800271c <HAL_DMA_Init+0x6a8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <HAL_DMA_Init+0x6ac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3e      	ldr	r2, [pc, #248]	; (8002724 <HAL_DMA_Init+0x6b0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_DMA_Init+0x5c6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <HAL_DMA_Init+0x6b4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_DMA_Init+0x5ca>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_DMA_Init+0x5cc>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d032      	beq.n	80026aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f002 fa4d 	bl	8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d102      	bne.n	8002658 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800266c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_DMA_Init+0x624>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b08      	cmp	r3, #8
 800267c:	d80c      	bhi.n	8002698 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f002 faca 	bl	8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e008      	b.n	80026aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	a7fdabf8 	.word	0xa7fdabf8
 80026c8:	cccccccd 	.word	0xcccccccd
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494

0800272c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e226      	b.n	8002b96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_DMA_Start_IT+0x2a>
 8002752:	2302      	movs	r3, #2
 8002754:	e21f      	b.n	8002b96 <HAL_DMA_Start_IT+0x46a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 820a 	bne.w	8002b80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a68      	ldr	r2, [pc, #416]	; (8002920 <HAL_DMA_Start_IT+0x1f4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a66      	ldr	r2, [pc, #408]	; (8002924 <HAL_DMA_Start_IT+0x1f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_DMA_Start_IT+0x1fc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a63      	ldr	r2, [pc, #396]	; (800292c <HAL_DMA_Start_IT+0x200>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a62      	ldr	r2, [pc, #392]	; (8002930 <HAL_DMA_Start_IT+0x204>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a60      	ldr	r2, [pc, #384]	; (8002934 <HAL_DMA_Start_IT+0x208>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5f      	ldr	r2, [pc, #380]	; (8002938 <HAL_DMA_Start_IT+0x20c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_DMA_Start_IT+0x210>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_DMA_Start_IT+0x214>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <HAL_DMA_Start_IT+0x218>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a59      	ldr	r2, [pc, #356]	; (8002948 <HAL_DMA_Start_IT+0x21c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_DMA_Start_IT+0x220>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a56      	ldr	r2, [pc, #344]	; (8002950 <HAL_DMA_Start_IT+0x224>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a54      	ldr	r2, [pc, #336]	; (8002954 <HAL_DMA_Start_IT+0x228>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a53      	ldr	r2, [pc, #332]	; (8002958 <HAL_DMA_Start_IT+0x22c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Start_IT+0xee>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a51      	ldr	r2, [pc, #324]	; (800295c <HAL_DMA_Start_IT+0x230>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <HAL_DMA_Start_IT+0x100>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e007      	b.n	800283c <HAL_DMA_Start_IT+0x110>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f001 fe74 	bl	8004530 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a34      	ldr	r2, [pc, #208]	; (8002920 <HAL_DMA_Start_IT+0x1f4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d04a      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a33      	ldr	r2, [pc, #204]	; (8002924 <HAL_DMA_Start_IT+0x1f8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d045      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_DMA_Start_IT+0x1fc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d040      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_DMA_Start_IT+0x200>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d03b      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <HAL_DMA_Start_IT+0x204>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d036      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_DMA_Start_IT+0x208>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <HAL_DMA_Start_IT+0x20c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02c      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2a      	ldr	r2, [pc, #168]	; (800293c <HAL_DMA_Start_IT+0x210>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d027      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_DMA_Start_IT+0x214>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d022      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_DMA_Start_IT+0x218>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d01d      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_DMA_Start_IT+0x21c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d018      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_DMA_Start_IT+0x220>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_DMA_Start_IT+0x224>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00e      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_DMA_Start_IT+0x228>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_DMA_Start_IT+0x22c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_DMA_Start_IT+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_DMA_Start_IT+0x230>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Start_IT+0x1c0>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_DMA_Start_IT+0x1c2>
 80028ec:	2300      	movs	r3, #0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d036      	beq.n	8002960 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 021e 	bic.w	r2, r3, #30
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0216 	orr.w	r2, r2, #22
 8002904:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d03e      	beq.n	800298c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0208 	orr.w	r2, r2, #8
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e035      	b.n	800298c <HAL_DMA_Start_IT+0x260>
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 020e 	bic.w	r2, r3, #14
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 020a 	orr.w	r2, r2, #10
 8002972:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0204 	orr.w	r2, r2, #4
 800298a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a83      	ldr	r2, [pc, #524]	; (8002ba0 <HAL_DMA_Start_IT+0x474>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d072      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a82      	ldr	r2, [pc, #520]	; (8002ba4 <HAL_DMA_Start_IT+0x478>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d06d      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_DMA_Start_IT+0x47c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d068      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7f      	ldr	r2, [pc, #508]	; (8002bac <HAL_DMA_Start_IT+0x480>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d063      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7d      	ldr	r2, [pc, #500]	; (8002bb0 <HAL_DMA_Start_IT+0x484>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d05e      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7c      	ldr	r2, [pc, #496]	; (8002bb4 <HAL_DMA_Start_IT+0x488>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d059      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7a      	ldr	r2, [pc, #488]	; (8002bb8 <HAL_DMA_Start_IT+0x48c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d054      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a79      	ldr	r2, [pc, #484]	; (8002bbc <HAL_DMA_Start_IT+0x490>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04f      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_DMA_Start_IT+0x494>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d04a      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_DMA_Start_IT+0x498>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d045      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a74      	ldr	r2, [pc, #464]	; (8002bc8 <HAL_DMA_Start_IT+0x49c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d040      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a73      	ldr	r2, [pc, #460]	; (8002bcc <HAL_DMA_Start_IT+0x4a0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d03b      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a71      	ldr	r2, [pc, #452]	; (8002bd0 <HAL_DMA_Start_IT+0x4a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d036      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a70      	ldr	r2, [pc, #448]	; (8002bd4 <HAL_DMA_Start_IT+0x4a8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d031      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_DMA_Start_IT+0x4ac>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02c      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6d      	ldr	r2, [pc, #436]	; (8002bdc <HAL_DMA_Start_IT+0x4b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d027      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6b      	ldr	r2, [pc, #428]	; (8002be0 <HAL_DMA_Start_IT+0x4b4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d022      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6a      	ldr	r2, [pc, #424]	; (8002be4 <HAL_DMA_Start_IT+0x4b8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01d      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a68      	ldr	r2, [pc, #416]	; (8002be8 <HAL_DMA_Start_IT+0x4bc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d018      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a67      	ldr	r2, [pc, #412]	; (8002bec <HAL_DMA_Start_IT+0x4c0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a65      	ldr	r2, [pc, #404]	; (8002bf0 <HAL_DMA_Start_IT+0x4c4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a64      	ldr	r2, [pc, #400]	; (8002bf4 <HAL_DMA_Start_IT+0x4c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <HAL_DMA_Start_IT+0x4cc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <HAL_DMA_Start_IT+0x4d0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_DMA_Start_IT+0x354>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_DMA_Start_IT+0x356>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01a      	beq.n	8002abc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a37      	ldr	r2, [pc, #220]	; (8002ba0 <HAL_DMA_Start_IT+0x474>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d04a      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <HAL_DMA_Start_IT+0x478>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d045      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <HAL_DMA_Start_IT+0x47c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d040      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <HAL_DMA_Start_IT+0x480>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d03b      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_DMA_Start_IT+0x484>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d036      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <HAL_DMA_Start_IT+0x488>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d031      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Start_IT+0x48c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02c      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_DMA_Start_IT+0x490>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d027      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_DMA_Start_IT+0x494>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_DMA_Start_IT+0x498>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01d      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <HAL_DMA_Start_IT+0x49c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d018      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_DMA_Start_IT+0x4a0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <HAL_DMA_Start_IT+0x4a4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_DMA_Start_IT+0x4a8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_DMA_Start_IT+0x4ac>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_DMA_Start_IT+0x430>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_DMA_Start_IT+0x4b0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <HAL_DMA_Start_IT+0x442>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e012      	b.n	8002b94 <HAL_DMA_Start_IT+0x468>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e009      	b.n	8002b94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40020010 	.word	0x40020010
 8002ba4:	40020028 	.word	0x40020028
 8002ba8:	40020040 	.word	0x40020040
 8002bac:	40020058 	.word	0x40020058
 8002bb0:	40020070 	.word	0x40020070
 8002bb4:	40020088 	.word	0x40020088
 8002bb8:	400200a0 	.word	0x400200a0
 8002bbc:	400200b8 	.word	0x400200b8
 8002bc0:	40020410 	.word	0x40020410
 8002bc4:	40020428 	.word	0x40020428
 8002bc8:	40020440 	.word	0x40020440
 8002bcc:	40020458 	.word	0x40020458
 8002bd0:	40020470 	.word	0x40020470
 8002bd4:	40020488 	.word	0x40020488
 8002bd8:	400204a0 	.word	0x400204a0
 8002bdc:	400204b8 	.word	0x400204b8
 8002be0:	58025408 	.word	0x58025408
 8002be4:	5802541c 	.word	0x5802541c
 8002be8:	58025430 	.word	0x58025430
 8002bec:	58025444 	.word	0x58025444
 8002bf0:	58025458 	.word	0x58025458
 8002bf4:	5802546c 	.word	0x5802546c
 8002bf8:	58025480 	.word	0x58025480
 8002bfc:	58025494 	.word	0x58025494

08002c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c08:	f7ff f8d4 	bl	8001db4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e2dc      	b.n	80031d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d008      	beq.n	8002c36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e2cd      	b.n	80031d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a76      	ldr	r2, [pc, #472]	; (8002e14 <HAL_DMA_Abort+0x214>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d04a      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a74      	ldr	r2, [pc, #464]	; (8002e18 <HAL_DMA_Abort+0x218>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d045      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a73      	ldr	r2, [pc, #460]	; (8002e1c <HAL_DMA_Abort+0x21c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d040      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a71      	ldr	r2, [pc, #452]	; (8002e20 <HAL_DMA_Abort+0x220>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d03b      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a70      	ldr	r2, [pc, #448]	; (8002e24 <HAL_DMA_Abort+0x224>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d036      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_DMA_Abort+0x228>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d031      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6d      	ldr	r2, [pc, #436]	; (8002e2c <HAL_DMA_Abort+0x22c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d02c      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6b      	ldr	r2, [pc, #428]	; (8002e30 <HAL_DMA_Abort+0x230>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d027      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_DMA_Abort+0x234>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a68      	ldr	r2, [pc, #416]	; (8002e38 <HAL_DMA_Abort+0x238>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01d      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_DMA_Abort+0x23c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_DMA_Abort+0x240>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HAL_DMA_Abort+0x244>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a62      	ldr	r2, [pc, #392]	; (8002e48 <HAL_DMA_Abort+0x248>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a61      	ldr	r2, [pc, #388]	; (8002e4c <HAL_DMA_Abort+0x24c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_DMA_Abort+0xd6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5f      	ldr	r2, [pc, #380]	; (8002e50 <HAL_DMA_Abort+0x250>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_DMA_Abort+0xda>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_DMA_Abort+0xdc>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 021e 	bic.w	r2, r2, #30
 8002cee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e00a      	b.n	8002d1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 020e 	bic.w	r2, r2, #14
 8002d16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <HAL_DMA_Abort+0x214>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d072      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <HAL_DMA_Abort+0x218>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d06d      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a39      	ldr	r2, [pc, #228]	; (8002e1c <HAL_DMA_Abort+0x21c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d068      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <HAL_DMA_Abort+0x220>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d063      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <HAL_DMA_Abort+0x224>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d05e      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_DMA_Abort+0x228>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d059      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <HAL_DMA_Abort+0x22c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d054      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_DMA_Abort+0x230>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04f      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <HAL_DMA_Abort+0x234>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <HAL_DMA_Abort+0x238>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_DMA_Abort+0x23c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <HAL_DMA_Abort+0x240>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_DMA_Abort+0x244>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <HAL_DMA_Abort+0x248>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_DMA_Abort+0x24c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a25      	ldr	r2, [pc, #148]	; (8002e50 <HAL_DMA_Abort+0x250>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_DMA_Abort+0x254>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_DMA_Abort+0x258>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_DMA_Abort+0x25c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_DMA_Abort+0x260>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_DMA_Abort+0x264>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_DMA_Abort+0x268>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_DMA_Abort+0x26c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_DMA_Abort+0x270>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d132      	bne.n	8002e74 <HAL_DMA_Abort+0x274>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e031      	b.n	8002e76 <HAL_DMA_Abort+0x276>
 8002e12:	bf00      	nop
 8002e14:	40020010 	.word	0x40020010
 8002e18:	40020028 	.word	0x40020028
 8002e1c:	40020040 	.word	0x40020040
 8002e20:	40020058 	.word	0x40020058
 8002e24:	40020070 	.word	0x40020070
 8002e28:	40020088 	.word	0x40020088
 8002e2c:	400200a0 	.word	0x400200a0
 8002e30:	400200b8 	.word	0x400200b8
 8002e34:	40020410 	.word	0x40020410
 8002e38:	40020428 	.word	0x40020428
 8002e3c:	40020440 	.word	0x40020440
 8002e40:	40020458 	.word	0x40020458
 8002e44:	40020470 	.word	0x40020470
 8002e48:	40020488 	.word	0x40020488
 8002e4c:	400204a0 	.word	0x400204a0
 8002e50:	400204b8 	.word	0x400204b8
 8002e54:	58025408 	.word	0x58025408
 8002e58:	5802541c 	.word	0x5802541c
 8002e5c:	58025430 	.word	0x58025430
 8002e60:	58025444 	.word	0x58025444
 8002e64:	58025458 	.word	0x58025458
 8002e68:	5802546c 	.word	0x5802546c
 8002e6c:	58025480 	.word	0x58025480
 8002e70:	58025494 	.word	0x58025494
 8002e74:	2300      	movs	r3, #0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6d      	ldr	r2, [pc, #436]	; (8003044 <HAL_DMA_Abort+0x444>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04a      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a6b      	ldr	r2, [pc, #428]	; (8003048 <HAL_DMA_Abort+0x448>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d045      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6a      	ldr	r2, [pc, #424]	; (800304c <HAL_DMA_Abort+0x44c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d040      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_DMA_Abort+0x450>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d03b      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a67      	ldr	r2, [pc, #412]	; (8003054 <HAL_DMA_Abort+0x454>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d036      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_DMA_Abort+0x458>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a64      	ldr	r2, [pc, #400]	; (800305c <HAL_DMA_Abort+0x45c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02c      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a62      	ldr	r2, [pc, #392]	; (8003060 <HAL_DMA_Abort+0x460>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_DMA_Abort+0x464>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5f      	ldr	r2, [pc, #380]	; (8003068 <HAL_DMA_Abort+0x468>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5e      	ldr	r2, [pc, #376]	; (800306c <HAL_DMA_Abort+0x46c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a5c      	ldr	r2, [pc, #368]	; (8003070 <HAL_DMA_Abort+0x470>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a5b      	ldr	r2, [pc, #364]	; (8003074 <HAL_DMA_Abort+0x474>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a59      	ldr	r2, [pc, #356]	; (8003078 <HAL_DMA_Abort+0x478>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a58      	ldr	r2, [pc, #352]	; (800307c <HAL_DMA_Abort+0x47c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_Abort+0x32a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a56      	ldr	r2, [pc, #344]	; (8003080 <HAL_DMA_Abort+0x480>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <HAL_DMA_Abort+0x33c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e007      	b.n	8002f4c <HAL_DMA_Abort+0x34c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f4c:	e013      	b.n	8002f76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f4e:	f7fe ff31 	bl	8001db4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d90c      	bls.n	8002f76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e12d      	b.n	80031d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <HAL_DMA_Abort+0x444>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04a      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <HAL_DMA_Abort+0x448>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d045      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2c      	ldr	r2, [pc, #176]	; (800304c <HAL_DMA_Abort+0x44c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d040      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_DMA_Abort+0x450>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d03b      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <HAL_DMA_Abort+0x454>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d036      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_DMA_Abort+0x458>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d031      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a26      	ldr	r2, [pc, #152]	; (800305c <HAL_DMA_Abort+0x45c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d02c      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a24      	ldr	r2, [pc, #144]	; (8003060 <HAL_DMA_Abort+0x460>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d027      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a23      	ldr	r2, [pc, #140]	; (8003064 <HAL_DMA_Abort+0x464>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a21      	ldr	r2, [pc, #132]	; (8003068 <HAL_DMA_Abort+0x468>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_DMA_Abort+0x46c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_DMA_Abort+0x470>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <HAL_DMA_Abort+0x474>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_DMA_Abort+0x478>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_DMA_Abort+0x47c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_Abort+0x422>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a18      	ldr	r2, [pc, #96]	; (8003080 <HAL_DMA_Abort+0x480>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_DMA_Abort+0x426>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_DMA_Abort+0x428>
 8003026:	2300      	movs	r3, #0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d02b      	beq.n	8003084 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	223f      	movs	r2, #63	; 0x3f
 800303c:	409a      	lsls	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	e02a      	b.n	800309a <HAL_DMA_Abort+0x49a>
 8003044:	40020010 	.word	0x40020010
 8003048:	40020028 	.word	0x40020028
 800304c:	40020040 	.word	0x40020040
 8003050:	40020058 	.word	0x40020058
 8003054:	40020070 	.word	0x40020070
 8003058:	40020088 	.word	0x40020088
 800305c:	400200a0 	.word	0x400200a0
 8003060:	400200b8 	.word	0x400200b8
 8003064:	40020410 	.word	0x40020410
 8003068:	40020428 	.word	0x40020428
 800306c:	40020440 	.word	0x40020440
 8003070:	40020458 	.word	0x40020458
 8003074:	40020470 	.word	0x40020470
 8003078:	40020488 	.word	0x40020488
 800307c:	400204a0 	.word	0x400204a0
 8003080:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <HAL_DMA_Abort+0x5dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d072      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <HAL_DMA_Abort+0x5e0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d06d      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a4c      	ldr	r2, [pc, #304]	; (80031e4 <HAL_DMA_Abort+0x5e4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d068      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a4a      	ldr	r2, [pc, #296]	; (80031e8 <HAL_DMA_Abort+0x5e8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d063      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a49      	ldr	r2, [pc, #292]	; (80031ec <HAL_DMA_Abort+0x5ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d05e      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a47      	ldr	r2, [pc, #284]	; (80031f0 <HAL_DMA_Abort+0x5f0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d059      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a46      	ldr	r2, [pc, #280]	; (80031f4 <HAL_DMA_Abort+0x5f4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d054      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <HAL_DMA_Abort+0x5f8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d04f      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a43      	ldr	r2, [pc, #268]	; (80031fc <HAL_DMA_Abort+0x5fc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d04a      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a41      	ldr	r2, [pc, #260]	; (8003200 <HAL_DMA_Abort+0x600>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d045      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a40      	ldr	r2, [pc, #256]	; (8003204 <HAL_DMA_Abort+0x604>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d040      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a3e      	ldr	r2, [pc, #248]	; (8003208 <HAL_DMA_Abort+0x608>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d03b      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3d      	ldr	r2, [pc, #244]	; (800320c <HAL_DMA_Abort+0x60c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d036      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <HAL_DMA_Abort+0x610>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3a      	ldr	r2, [pc, #232]	; (8003214 <HAL_DMA_Abort+0x614>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d02c      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a38      	ldr	r2, [pc, #224]	; (8003218 <HAL_DMA_Abort+0x618>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d027      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a37      	ldr	r2, [pc, #220]	; (800321c <HAL_DMA_Abort+0x61c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a35      	ldr	r2, [pc, #212]	; (8003220 <HAL_DMA_Abort+0x620>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <HAL_DMA_Abort+0x624>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a32      	ldr	r2, [pc, #200]	; (8003228 <HAL_DMA_Abort+0x628>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a31      	ldr	r2, [pc, #196]	; (800322c <HAL_DMA_Abort+0x62c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <HAL_DMA_Abort+0x630>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <HAL_DMA_Abort+0x634>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <HAL_DMA_Abort+0x638>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_DMA_Abort+0x58e>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_DMA_Abort+0x590>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800319c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40020010 	.word	0x40020010
 80031e0:	40020028 	.word	0x40020028
 80031e4:	40020040 	.word	0x40020040
 80031e8:	40020058 	.word	0x40020058
 80031ec:	40020070 	.word	0x40020070
 80031f0:	40020088 	.word	0x40020088
 80031f4:	400200a0 	.word	0x400200a0
 80031f8:	400200b8 	.word	0x400200b8
 80031fc:	40020410 	.word	0x40020410
 8003200:	40020428 	.word	0x40020428
 8003204:	40020440 	.word	0x40020440
 8003208:	40020458 	.word	0x40020458
 800320c:	40020470 	.word	0x40020470
 8003210:	40020488 	.word	0x40020488
 8003214:	400204a0 	.word	0x400204a0
 8003218:	400204b8 	.word	0x400204b8
 800321c:	58025408 	.word	0x58025408
 8003220:	5802541c 	.word	0x5802541c
 8003224:	58025430 	.word	0x58025430
 8003228:	58025444 	.word	0x58025444
 800322c:	58025458 	.word	0x58025458
 8003230:	5802546c 	.word	0x5802546c
 8003234:	58025480 	.word	0x58025480
 8003238:	58025494 	.word	0x58025494

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e205      	b.n	800365a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d004      	beq.n	8003264 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e1fa      	b.n	800365a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a8c      	ldr	r2, [pc, #560]	; (800349c <HAL_DMA_Abort_IT+0x260>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04a      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a8b      	ldr	r2, [pc, #556]	; (80034a0 <HAL_DMA_Abort_IT+0x264>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d045      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a89      	ldr	r2, [pc, #548]	; (80034a4 <HAL_DMA_Abort_IT+0x268>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d040      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a88      	ldr	r2, [pc, #544]	; (80034a8 <HAL_DMA_Abort_IT+0x26c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d03b      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a86      	ldr	r2, [pc, #536]	; (80034ac <HAL_DMA_Abort_IT+0x270>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d036      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a85      	ldr	r2, [pc, #532]	; (80034b0 <HAL_DMA_Abort_IT+0x274>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d031      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_DMA_Abort_IT+0x278>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02c      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a82      	ldr	r2, [pc, #520]	; (80034b8 <HAL_DMA_Abort_IT+0x27c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d027      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a80      	ldr	r2, [pc, #512]	; (80034bc <HAL_DMA_Abort_IT+0x280>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7f      	ldr	r2, [pc, #508]	; (80034c0 <HAL_DMA_Abort_IT+0x284>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d01d      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7d      	ldr	r2, [pc, #500]	; (80034c4 <HAL_DMA_Abort_IT+0x288>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_DMA_Abort_IT+0x28c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a7a      	ldr	r2, [pc, #488]	; (80034cc <HAL_DMA_Abort_IT+0x290>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a79      	ldr	r2, [pc, #484]	; (80034d0 <HAL_DMA_Abort_IT+0x294>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a77      	ldr	r2, [pc, #476]	; (80034d4 <HAL_DMA_Abort_IT+0x298>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_Abort_IT+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a76      	ldr	r2, [pc, #472]	; (80034d8 <HAL_DMA_Abort_IT+0x29c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_DMA_Abort_IT+0xcc>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_DMA_Abort_IT+0xce>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d065      	beq.n	80033da <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2204      	movs	r2, #4
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a60      	ldr	r2, [pc, #384]	; (800349c <HAL_DMA_Abort_IT+0x260>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04a      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5e      	ldr	r2, [pc, #376]	; (80034a0 <HAL_DMA_Abort_IT+0x264>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d045      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5d      	ldr	r2, [pc, #372]	; (80034a4 <HAL_DMA_Abort_IT+0x268>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <HAL_DMA_Abort_IT+0x26c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d03b      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5a      	ldr	r2, [pc, #360]	; (80034ac <HAL_DMA_Abort_IT+0x270>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d036      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_DMA_Abort_IT+0x274>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <HAL_DMA_Abort_IT+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d02c      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a55      	ldr	r2, [pc, #340]	; (80034b8 <HAL_DMA_Abort_IT+0x27c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_DMA_Abort_IT+0x280>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_DMA_Abort_IT+0x284>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_DMA_Abort_IT+0x288>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <HAL_DMA_Abort_IT+0x28c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_DMA_Abort_IT+0x290>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4c      	ldr	r2, [pc, #304]	; (80034d0 <HAL_DMA_Abort_IT+0x294>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_DMA_Abort_IT+0x298>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_DMA_Abort_IT+0x17a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a49      	ldr	r2, [pc, #292]	; (80034d8 <HAL_DMA_Abort_IT+0x29c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d108      	bne.n	80033c8 <HAL_DMA_Abort_IT+0x18c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e147      	b.n	8003658 <HAL_DMA_Abort_IT+0x41c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e13e      	b.n	8003658 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 020e 	bic.w	r2, r2, #14
 80033e8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	; (800349c <HAL_DMA_Abort_IT+0x260>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04a      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <HAL_DMA_Abort_IT+0x264>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d045      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <HAL_DMA_Abort_IT+0x268>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d040      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <HAL_DMA_Abort_IT+0x26c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d03b      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_DMA_Abort_IT+0x270>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d036      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_DMA_Abort_IT+0x274>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d031      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_DMA_Abort_IT+0x278>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02c      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <HAL_DMA_Abort_IT+0x27c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_DMA_Abort_IT+0x280>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_DMA_Abort_IT+0x284>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_DMA_Abort_IT+0x288>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_DMA_Abort_IT+0x28c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_DMA_Abort_IT+0x290>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_DMA_Abort_IT+0x294>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_DMA_Abort_IT+0x298>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_DMA_Abort_IT+0x24e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <HAL_DMA_Abort_IT+0x29c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d128      	bne.n	80034dc <HAL_DMA_Abort_IT+0x2a0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e027      	b.n	80034ec <HAL_DMA_Abort_IT+0x2b0>
 800349c:	40020010 	.word	0x40020010
 80034a0:	40020028 	.word	0x40020028
 80034a4:	40020040 	.word	0x40020040
 80034a8:	40020058 	.word	0x40020058
 80034ac:	40020070 	.word	0x40020070
 80034b0:	40020088 	.word	0x40020088
 80034b4:	400200a0 	.word	0x400200a0
 80034b8:	400200b8 	.word	0x400200b8
 80034bc:	40020410 	.word	0x40020410
 80034c0:	40020428 	.word	0x40020428
 80034c4:	40020440 	.word	0x40020440
 80034c8:	40020458 	.word	0x40020458
 80034cc:	40020470 	.word	0x40020470
 80034d0:	40020488 	.word	0x40020488
 80034d4:	400204a0 	.word	0x400204a0
 80034d8:	400204b8 	.word	0x400204b8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <HAL_DMA_Abort_IT+0x428>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d072      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5b      	ldr	r2, [pc, #364]	; (8003668 <HAL_DMA_Abort_IT+0x42c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d06d      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <HAL_DMA_Abort_IT+0x430>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d068      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_DMA_Abort_IT+0x434>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d063      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_DMA_Abort_IT+0x438>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d05e      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_DMA_Abort_IT+0x43c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d059      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a53      	ldr	r2, [pc, #332]	; (800367c <HAL_DMA_Abort_IT+0x440>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d054      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_DMA_Abort_IT+0x444>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04f      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a50      	ldr	r2, [pc, #320]	; (8003684 <HAL_DMA_Abort_IT+0x448>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04a      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4f      	ldr	r2, [pc, #316]	; (8003688 <HAL_DMA_Abort_IT+0x44c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d045      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a4d      	ldr	r2, [pc, #308]	; (800368c <HAL_DMA_Abort_IT+0x450>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d040      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <HAL_DMA_Abort_IT+0x454>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d03b      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_DMA_Abort_IT+0x458>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d036      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_DMA_Abort_IT+0x45c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d031      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a47      	ldr	r2, [pc, #284]	; (800369c <HAL_DMA_Abort_IT+0x460>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02c      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a46      	ldr	r2, [pc, #280]	; (80036a0 <HAL_DMA_Abort_IT+0x464>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d027      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a44      	ldr	r2, [pc, #272]	; (80036a4 <HAL_DMA_Abort_IT+0x468>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a43      	ldr	r2, [pc, #268]	; (80036a8 <HAL_DMA_Abort_IT+0x46c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01d      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a41      	ldr	r2, [pc, #260]	; (80036ac <HAL_DMA_Abort_IT+0x470>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a40      	ldr	r2, [pc, #256]	; (80036b0 <HAL_DMA_Abort_IT+0x474>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3e      	ldr	r2, [pc, #248]	; (80036b4 <HAL_DMA_Abort_IT+0x478>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3d      	ldr	r2, [pc, #244]	; (80036b8 <HAL_DMA_Abort_IT+0x47c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3b      	ldr	r2, [pc, #236]	; (80036bc <HAL_DMA_Abort_IT+0x480>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_DMA_Abort_IT+0x3a0>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <HAL_DMA_Abort_IT+0x484>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_DMA_Abort_IT+0x3a4>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_DMA_Abort_IT+0x3a6>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d028      	beq.n	8003638 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003614:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003636:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	58025408 	.word	0x58025408
 80036a8:	5802541c 	.word	0x5802541c
 80036ac:	58025430 	.word	0x58025430
 80036b0:	58025444 	.word	0x58025444
 80036b4:	58025458 	.word	0x58025458
 80036b8:	5802546c 	.word	0x5802546c
 80036bc:	58025480 	.word	0x58025480
 80036c0:	58025494 	.word	0x58025494

080036c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036d0:	4b67      	ldr	r3, [pc, #412]	; (8003870 <HAL_DMA_IRQHandler+0x1ac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a67      	ldr	r2, [pc, #412]	; (8003874 <HAL_DMA_IRQHandler+0x1b0>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5f      	ldr	r2, [pc, #380]	; (8003878 <HAL_DMA_IRQHandler+0x1b4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d04a      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5d      	ldr	r2, [pc, #372]	; (800387c <HAL_DMA_IRQHandler+0x1b8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d045      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a5c      	ldr	r2, [pc, #368]	; (8003880 <HAL_DMA_IRQHandler+0x1bc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d040      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a5a      	ldr	r2, [pc, #360]	; (8003884 <HAL_DMA_IRQHandler+0x1c0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d03b      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a59      	ldr	r2, [pc, #356]	; (8003888 <HAL_DMA_IRQHandler+0x1c4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d036      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a57      	ldr	r2, [pc, #348]	; (800388c <HAL_DMA_IRQHandler+0x1c8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d031      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a56      	ldr	r2, [pc, #344]	; (8003890 <HAL_DMA_IRQHandler+0x1cc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d02c      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a54      	ldr	r2, [pc, #336]	; (8003894 <HAL_DMA_IRQHandler+0x1d0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d027      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a53      	ldr	r2, [pc, #332]	; (8003898 <HAL_DMA_IRQHandler+0x1d4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d022      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a51      	ldr	r2, [pc, #324]	; (800389c <HAL_DMA_IRQHandler+0x1d8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01d      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a50      	ldr	r2, [pc, #320]	; (80038a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d018      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a4e      	ldr	r2, [pc, #312]	; (80038a4 <HAL_DMA_IRQHandler+0x1e0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a4d      	ldr	r2, [pc, #308]	; (80038a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a4b      	ldr	r2, [pc, #300]	; (80038ac <HAL_DMA_IRQHandler+0x1e8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_DMA_IRQHandler+0xd2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a48      	ldr	r2, [pc, #288]	; (80038b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_DMA_IRQHandler+0xd6>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_DMA_IRQHandler+0xd8>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 842b 	beq.w	8003ff8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2208      	movs	r2, #8
 80037ac:	409a      	lsls	r2, r3
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80a2 	beq.w	80038fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <HAL_DMA_IRQHandler+0x1b4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04a      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_DMA_IRQHandler+0x1b8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d045      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <HAL_DMA_IRQHandler+0x1bc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d040      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <HAL_DMA_IRQHandler+0x1c0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d03b      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a28      	ldr	r2, [pc, #160]	; (8003888 <HAL_DMA_IRQHandler+0x1c4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d036      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a27      	ldr	r2, [pc, #156]	; (800388c <HAL_DMA_IRQHandler+0x1c8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d031      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a25      	ldr	r2, [pc, #148]	; (8003890 <HAL_DMA_IRQHandler+0x1cc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02c      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a24      	ldr	r2, [pc, #144]	; (8003894 <HAL_DMA_IRQHandler+0x1d0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d027      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_DMA_IRQHandler+0x1d4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_DMA_IRQHandler+0x1d8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01d      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1f      	ldr	r2, [pc, #124]	; (80038a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_DMA_IRQHandler+0x1e0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_DMA_IRQHandler+0x1e8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <HAL_DMA_IRQHandler+0x1ec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_IRQHandler+0x194>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d12f      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x1f4>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e02e      	b.n	80038cc <HAL_DMA_IRQHandler+0x208>
 800386e:	bf00      	nop
 8003870:	24000000 	.word	0x24000000
 8003874:	1b4e81b5 	.word	0x1b4e81b5
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d015      	beq.n	80038fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2208      	movs	r2, #8
 80038ea:	409a      	lsls	r2, r3
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d06e      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a69      	ldr	r2, [pc, #420]	; (8003abc <HAL_DMA_IRQHandler+0x3f8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d04a      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a67      	ldr	r2, [pc, #412]	; (8003ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d045      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_DMA_IRQHandler+0x400>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d040      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a64      	ldr	r2, [pc, #400]	; (8003ac8 <HAL_DMA_IRQHandler+0x404>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d03b      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a63      	ldr	r2, [pc, #396]	; (8003acc <HAL_DMA_IRQHandler+0x408>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d036      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a61      	ldr	r2, [pc, #388]	; (8003ad0 <HAL_DMA_IRQHandler+0x40c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d031      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a60      	ldr	r2, [pc, #384]	; (8003ad4 <HAL_DMA_IRQHandler+0x410>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d02c      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a5e      	ldr	r2, [pc, #376]	; (8003ad8 <HAL_DMA_IRQHandler+0x414>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d027      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5d      	ldr	r2, [pc, #372]	; (8003adc <HAL_DMA_IRQHandler+0x418>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d022      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a5b      	ldr	r2, [pc, #364]	; (8003ae0 <HAL_DMA_IRQHandler+0x41c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01d      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <HAL_DMA_IRQHandler+0x420>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a58      	ldr	r2, [pc, #352]	; (8003ae8 <HAL_DMA_IRQHandler+0x424>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_DMA_IRQHandler+0x428>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a55      	ldr	r2, [pc, #340]	; (8003af0 <HAL_DMA_IRQHandler+0x42c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_DMA_IRQHandler+0x430>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x2ee>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_DMA_IRQHandler+0x434>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10a      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x304>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e003      	b.n	80039d0 <HAL_DMA_IRQHandler+0x30c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	f043 0202 	orr.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2204      	movs	r2, #4
 80039fa:	409a      	lsls	r2, r3
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 808f 	beq.w	8003b24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <HAL_DMA_IRQHandler+0x3f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d04a      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d045      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <HAL_DMA_IRQHandler+0x400>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d040      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_DMA_IRQHandler+0x404>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d03b      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_DMA_IRQHandler+0x408>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d036      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_DMA_IRQHandler+0x40c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d031      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_DMA_IRQHandler+0x410>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d02c      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_IRQHandler+0x414>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d027      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a20      	ldr	r2, [pc, #128]	; (8003adc <HAL_DMA_IRQHandler+0x418>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_IRQHandler+0x41c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_DMA_IRQHandler+0x420>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_IRQHandler+0x424>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_DMA_IRQHandler+0x428>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_DMA_IRQHandler+0x42c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_DMA_IRQHandler+0x430>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x3e2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_DMA_IRQHandler+0x434>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12a      	bne.n	8003afc <HAL_DMA_IRQHandler+0x438>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e023      	b.n	8003b04 <HAL_DMA_IRQHandler+0x440>
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2204      	movs	r2, #4
 8003b12:	409a      	lsls	r2, r3
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f043 0204 	orr.w	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a6 	beq.w	8003c86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a85      	ldr	r2, [pc, #532]	; (8003d54 <HAL_DMA_IRQHandler+0x690>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d04a      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a83      	ldr	r2, [pc, #524]	; (8003d58 <HAL_DMA_IRQHandler+0x694>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d045      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a82      	ldr	r2, [pc, #520]	; (8003d5c <HAL_DMA_IRQHandler+0x698>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d040      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a80      	ldr	r2, [pc, #512]	; (8003d60 <HAL_DMA_IRQHandler+0x69c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d03b      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7f      	ldr	r2, [pc, #508]	; (8003d64 <HAL_DMA_IRQHandler+0x6a0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d036      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a7d      	ldr	r2, [pc, #500]	; (8003d68 <HAL_DMA_IRQHandler+0x6a4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d031      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a7c      	ldr	r2, [pc, #496]	; (8003d6c <HAL_DMA_IRQHandler+0x6a8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d02c      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <HAL_DMA_IRQHandler+0x6ac>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d027      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a79      	ldr	r2, [pc, #484]	; (8003d74 <HAL_DMA_IRQHandler+0x6b0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a77      	ldr	r2, [pc, #476]	; (8003d78 <HAL_DMA_IRQHandler+0x6b4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a76      	ldr	r2, [pc, #472]	; (8003d7c <HAL_DMA_IRQHandler+0x6b8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d018      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a74      	ldr	r2, [pc, #464]	; (8003d80 <HAL_DMA_IRQHandler+0x6bc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a73      	ldr	r2, [pc, #460]	; (8003d84 <HAL_DMA_IRQHandler+0x6c0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a71      	ldr	r2, [pc, #452]	; (8003d88 <HAL_DMA_IRQHandler+0x6c4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a70      	ldr	r2, [pc, #448]	; (8003d8c <HAL_DMA_IRQHandler+0x6c8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_DMA_IRQHandler+0x516>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a6e      	ldr	r2, [pc, #440]	; (8003d90 <HAL_DMA_IRQHandler+0x6cc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x52c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e009      	b.n	8003c04 <HAL_DMA_IRQHandler+0x540>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03e      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2210      	movs	r2, #16
 8003c12:	409a      	lsls	r2, r3
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d024      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	e01f      	b.n	8003c86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01b      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e016      	b.n	8003c86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2220      	movs	r2, #32
 8003c90:	409a      	lsls	r2, r3
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8110 	beq.w	8003ebc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_DMA_IRQHandler+0x690>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04a      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <HAL_DMA_IRQHandler+0x694>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d045      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <HAL_DMA_IRQHandler+0x698>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d040      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <HAL_DMA_IRQHandler+0x69c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d03b      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <HAL_DMA_IRQHandler+0x6a0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d036      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <HAL_DMA_IRQHandler+0x6a4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d031      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a23      	ldr	r2, [pc, #140]	; (8003d6c <HAL_DMA_IRQHandler+0x6a8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d02c      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <HAL_DMA_IRQHandler+0x6ac>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d027      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <HAL_DMA_IRQHandler+0x6b0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d022      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <HAL_DMA_IRQHandler+0x6b4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d01d      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <HAL_DMA_IRQHandler+0x6b8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d018      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_DMA_IRQHandler+0x6bc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_DMA_IRQHandler+0x6c0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_DMA_IRQHandler+0x6c4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <HAL_DMA_IRQHandler+0x6c8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x678>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <HAL_DMA_IRQHandler+0x6cc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d12b      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x6d0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e02a      	b.n	8003da8 <HAL_DMA_IRQHandler+0x6e4>
 8003d52:	bf00      	nop
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf14      	ite	ne
 8003da2:	2301      	movne	r3, #1
 8003da4:	2300      	moveq	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8087 	beq.w	8003ebc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	2220      	movs	r2, #32
 8003db8:	409a      	lsls	r2, r3
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d139      	bne.n	8003e3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0216 	bic.w	r2, r2, #22
 8003dd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x736>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0208 	bic.w	r2, r2, #8
 8003e08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	223f      	movs	r2, #63	; 0x3f
 8003e14:	409a      	lsls	r2, r3
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 834a 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
          }
          return;
 8003e3c:	e344      	b.n	80044c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d018      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d02c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	4798      	blx	r3
 8003e6a:	e027      	b.n	8003ebc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
 8003e7c:	e01e      	b.n	8003ebc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10f      	bne.n	8003eac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0210 	bic.w	r2, r2, #16
 8003e9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8306 	beq.w	80044d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8088 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a7a      	ldr	r2, [pc, #488]	; (80040cc <HAL_DMA_IRQHandler+0xa08>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d04a      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a79      	ldr	r2, [pc, #484]	; (80040d0 <HAL_DMA_IRQHandler+0xa0c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d045      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a77      	ldr	r2, [pc, #476]	; (80040d4 <HAL_DMA_IRQHandler+0xa10>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d040      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a76      	ldr	r2, [pc, #472]	; (80040d8 <HAL_DMA_IRQHandler+0xa14>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d03b      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a74      	ldr	r2, [pc, #464]	; (80040dc <HAL_DMA_IRQHandler+0xa18>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d036      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a73      	ldr	r2, [pc, #460]	; (80040e0 <HAL_DMA_IRQHandler+0xa1c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d031      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a71      	ldr	r2, [pc, #452]	; (80040e4 <HAL_DMA_IRQHandler+0xa20>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02c      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a70      	ldr	r2, [pc, #448]	; (80040e8 <HAL_DMA_IRQHandler+0xa24>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d027      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6e      	ldr	r2, [pc, #440]	; (80040ec <HAL_DMA_IRQHandler+0xa28>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d022      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6d      	ldr	r2, [pc, #436]	; (80040f0 <HAL_DMA_IRQHandler+0xa2c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d01d      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a6b      	ldr	r2, [pc, #428]	; (80040f4 <HAL_DMA_IRQHandler+0xa30>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d018      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a6a      	ldr	r2, [pc, #424]	; (80040f8 <HAL_DMA_IRQHandler+0xa34>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a68      	ldr	r2, [pc, #416]	; (80040fc <HAL_DMA_IRQHandler+0xa38>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a67      	ldr	r2, [pc, #412]	; (8004100 <HAL_DMA_IRQHandler+0xa3c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_DMA_IRQHandler+0xa40>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x8b8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a64      	ldr	r2, [pc, #400]	; (8004108 <HAL_DMA_IRQHandler+0xa44>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d108      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x8ca>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e007      	b.n	8003f9e <HAL_DMA_IRQHandler+0x8da>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d307      	bcc.n	8003fba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f2      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x8da>
 8003fb8:	e000      	b.n	8003fbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003fd2:	e003      	b.n	8003fdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8272 	beq.w	80044d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e26c      	b.n	80044d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a43      	ldr	r2, [pc, #268]	; (800410c <HAL_DMA_IRQHandler+0xa48>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a42      	ldr	r2, [pc, #264]	; (8004110 <HAL_DMA_IRQHandler+0xa4c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d01d      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a40      	ldr	r2, [pc, #256]	; (8004114 <HAL_DMA_IRQHandler+0xa50>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <HAL_DMA_IRQHandler+0xa54>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3d      	ldr	r2, [pc, #244]	; (800411c <HAL_DMA_IRQHandler+0xa58>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3c      	ldr	r2, [pc, #240]	; (8004120 <HAL_DMA_IRQHandler+0xa5c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <HAL_DMA_IRQHandler+0xa60>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_IRQHandler+0x984>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a39      	ldr	r2, [pc, #228]	; (8004128 <HAL_DMA_IRQHandler+0xa64>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_DMA_IRQHandler+0x988>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_DMA_IRQHandler+0x98a>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 823f 	beq.w	80044d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2204      	movs	r2, #4
 8004066:	409a      	lsls	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80cd 	beq.w	800420c <HAL_DMA_IRQHandler+0xb48>
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80c7 	beq.w	800420c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2204      	movs	r2, #4
 8004088:	409a      	lsls	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d049      	beq.n	800412c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8210 	beq.w	80044cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b4:	e20a      	b.n	80044cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8206 	beq.w	80044cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c8:	e200      	b.n	80044cc <HAL_DMA_IRQHandler+0xe08>
 80040ca:	bf00      	nop
 80040cc:	40020010 	.word	0x40020010
 80040d0:	40020028 	.word	0x40020028
 80040d4:	40020040 	.word	0x40020040
 80040d8:	40020058 	.word	0x40020058
 80040dc:	40020070 	.word	0x40020070
 80040e0:	40020088 	.word	0x40020088
 80040e4:	400200a0 	.word	0x400200a0
 80040e8:	400200b8 	.word	0x400200b8
 80040ec:	40020410 	.word	0x40020410
 80040f0:	40020428 	.word	0x40020428
 80040f4:	40020440 	.word	0x40020440
 80040f8:	40020458 	.word	0x40020458
 80040fc:	40020470 	.word	0x40020470
 8004100:	40020488 	.word	0x40020488
 8004104:	400204a0 	.word	0x400204a0
 8004108:	400204b8 	.word	0x400204b8
 800410c:	58025408 	.word	0x58025408
 8004110:	5802541c 	.word	0x5802541c
 8004114:	58025430 	.word	0x58025430
 8004118:	58025444 	.word	0x58025444
 800411c:	58025458 	.word	0x58025458
 8004120:	5802546c 	.word	0x5802546c
 8004124:	58025480 	.word	0x58025480
 8004128:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d160      	bne.n	80041f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a8c      	ldr	r2, [pc, #560]	; (800436c <HAL_DMA_IRQHandler+0xca8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a8a      	ldr	r2, [pc, #552]	; (8004370 <HAL_DMA_IRQHandler+0xcac>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a89      	ldr	r2, [pc, #548]	; (8004374 <HAL_DMA_IRQHandler+0xcb0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a87      	ldr	r2, [pc, #540]	; (8004378 <HAL_DMA_IRQHandler+0xcb4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a86      	ldr	r2, [pc, #536]	; (800437c <HAL_DMA_IRQHandler+0xcb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a84      	ldr	r2, [pc, #528]	; (8004380 <HAL_DMA_IRQHandler+0xcbc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a83      	ldr	r2, [pc, #524]	; (8004384 <HAL_DMA_IRQHandler+0xcc0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a81      	ldr	r2, [pc, #516]	; (8004388 <HAL_DMA_IRQHandler+0xcc4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a80      	ldr	r2, [pc, #512]	; (800438c <HAL_DMA_IRQHandler+0xcc8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a7e      	ldr	r2, [pc, #504]	; (8004390 <HAL_DMA_IRQHandler+0xccc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7d      	ldr	r2, [pc, #500]	; (8004394 <HAL_DMA_IRQHandler+0xcd0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7b      	ldr	r2, [pc, #492]	; (8004398 <HAL_DMA_IRQHandler+0xcd4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7a      	ldr	r2, [pc, #488]	; (800439c <HAL_DMA_IRQHandler+0xcd8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a78      	ldr	r2, [pc, #480]	; (80043a0 <HAL_DMA_IRQHandler+0xcdc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a77      	ldr	r2, [pc, #476]	; (80043a4 <HAL_DMA_IRQHandler+0xce0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xb12>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a75      	ldr	r2, [pc, #468]	; (80043a8 <HAL_DMA_IRQHandler+0xce4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d108      	bne.n	80041e8 <HAL_DMA_IRQHandler+0xb24>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e007      	b.n	80041f8 <HAL_DMA_IRQHandler+0xb34>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0204 	bic.w	r2, r2, #4
 80041f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8165 	beq.w	80044cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800420a:	e15f      	b.n	80044cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2202      	movs	r2, #2
 8004216:	409a      	lsls	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80c5 	beq.w	80043ac <HAL_DMA_IRQHandler+0xce8>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80bf 	beq.w	80043ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2202      	movs	r2, #2
 8004238:	409a      	lsls	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d018      	beq.n	800427a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 813a 	beq.w	80044d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004264:	e134      	b.n	80044d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8130 	beq.w	80044d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004278:	e12a      	b.n	80044d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d168      	bne.n	8004356 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a38      	ldr	r2, [pc, #224]	; (800436c <HAL_DMA_IRQHandler+0xca8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d04a      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a37      	ldr	r2, [pc, #220]	; (8004370 <HAL_DMA_IRQHandler+0xcac>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d045      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a35      	ldr	r2, [pc, #212]	; (8004374 <HAL_DMA_IRQHandler+0xcb0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d040      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a34      	ldr	r2, [pc, #208]	; (8004378 <HAL_DMA_IRQHandler+0xcb4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d03b      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a32      	ldr	r2, [pc, #200]	; (800437c <HAL_DMA_IRQHandler+0xcb8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d036      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a31      	ldr	r2, [pc, #196]	; (8004380 <HAL_DMA_IRQHandler+0xcbc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d031      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <HAL_DMA_IRQHandler+0xcc0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02c      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <HAL_DMA_IRQHandler+0xcc4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d027      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <HAL_DMA_IRQHandler+0xcc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <HAL_DMA_IRQHandler+0xccc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a29      	ldr	r2, [pc, #164]	; (8004394 <HAL_DMA_IRQHandler+0xcd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a28      	ldr	r2, [pc, #160]	; (8004398 <HAL_DMA_IRQHandler+0xcd4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_DMA_IRQHandler+0xcd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a25      	ldr	r2, [pc, #148]	; (80043a0 <HAL_DMA_IRQHandler+0xcdc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_DMA_IRQHandler+0xce0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_DMA_IRQHandler+0xc60>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <HAL_DMA_IRQHandler+0xce4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <HAL_DMA_IRQHandler+0xc72>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0214 	bic.w	r2, r2, #20
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e007      	b.n	8004346 <HAL_DMA_IRQHandler+0xc82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 020a 	bic.w	r2, r2, #10
 8004344:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80b8 	beq.w	80044d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004368:	e0b2      	b.n	80044d0 <HAL_DMA_IRQHandler+0xe0c>
 800436a:	bf00      	nop
 800436c:	40020010 	.word	0x40020010
 8004370:	40020028 	.word	0x40020028
 8004374:	40020040 	.word	0x40020040
 8004378:	40020058 	.word	0x40020058
 800437c:	40020070 	.word	0x40020070
 8004380:	40020088 	.word	0x40020088
 8004384:	400200a0 	.word	0x400200a0
 8004388:	400200b8 	.word	0x400200b8
 800438c:	40020410 	.word	0x40020410
 8004390:	40020428 	.word	0x40020428
 8004394:	40020440 	.word	0x40020440
 8004398:	40020458 	.word	0x40020458
 800439c:	40020470 	.word	0x40020470
 80043a0:	40020488 	.word	0x40020488
 80043a4:	400204a0 	.word	0x400204a0
 80043a8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2208      	movs	r2, #8
 80043b6:	409a      	lsls	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8088 	beq.w	80044d2 <HAL_DMA_IRQHandler+0xe0e>
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8082 	beq.w	80044d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a41      	ldr	r2, [pc, #260]	; (80044d8 <HAL_DMA_IRQHandler+0xe14>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d04a      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3f      	ldr	r2, [pc, #252]	; (80044dc <HAL_DMA_IRQHandler+0xe18>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d045      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <HAL_DMA_IRQHandler+0xe1c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d040      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a3c      	ldr	r2, [pc, #240]	; (80044e4 <HAL_DMA_IRQHandler+0xe20>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d03b      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3b      	ldr	r2, [pc, #236]	; (80044e8 <HAL_DMA_IRQHandler+0xe24>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d036      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a39      	ldr	r2, [pc, #228]	; (80044ec <HAL_DMA_IRQHandler+0xe28>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d031      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <HAL_DMA_IRQHandler+0xe2c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d02c      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a36      	ldr	r2, [pc, #216]	; (80044f4 <HAL_DMA_IRQHandler+0xe30>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d027      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a35      	ldr	r2, [pc, #212]	; (80044f8 <HAL_DMA_IRQHandler+0xe34>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d022      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a33      	ldr	r2, [pc, #204]	; (80044fc <HAL_DMA_IRQHandler+0xe38>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d01d      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a32      	ldr	r2, [pc, #200]	; (8004500 <HAL_DMA_IRQHandler+0xe3c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a30      	ldr	r2, [pc, #192]	; (8004504 <HAL_DMA_IRQHandler+0xe40>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <HAL_DMA_IRQHandler+0xe44>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2d      	ldr	r2, [pc, #180]	; (800450c <HAL_DMA_IRQHandler+0xe48>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <HAL_DMA_IRQHandler+0xe4c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_DMA_IRQHandler+0xdaa>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <HAL_DMA_IRQHandler+0xe50>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <HAL_DMA_IRQHandler+0xdbc>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 021c 	bic.w	r2, r2, #28
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e007      	b.n	8004490 <HAL_DMA_IRQHandler+0xdcc>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 020e 	bic.w	r2, r2, #14
 800448e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e004      	b.n	80044d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044c8:	bf00      	nop
 80044ca:	e002      	b.n	80044d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044cc:	bf00      	nop
 80044ce:	e000      	b.n	80044d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044d2:	3728      	adds	r7, #40	; 0x28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40020010 	.word	0x40020010
 80044dc:	40020028 	.word	0x40020028
 80044e0:	40020040 	.word	0x40020040
 80044e4:	40020058 	.word	0x40020058
 80044e8:	40020070 	.word	0x40020070
 80044ec:	40020088 	.word	0x40020088
 80044f0:	400200a0 	.word	0x400200a0
 80044f4:	400200b8 	.word	0x400200b8
 80044f8:	40020410 	.word	0x40020410
 80044fc:	40020428 	.word	0x40020428
 8004500:	40020440 	.word	0x40020440
 8004504:	40020458 	.word	0x40020458
 8004508:	40020470 	.word	0x40020470
 800450c:	40020488 	.word	0x40020488
 8004510:	400204a0 	.word	0x400204a0
 8004514:	400204b8 	.word	0x400204b8

08004518 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a84      	ldr	r2, [pc, #528]	; (8004760 <DMA_SetConfig+0x230>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d072      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a82      	ldr	r2, [pc, #520]	; (8004764 <DMA_SetConfig+0x234>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d06d      	beq.n	800463a <DMA_SetConfig+0x10a>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a81      	ldr	r2, [pc, #516]	; (8004768 <DMA_SetConfig+0x238>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d068      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a7f      	ldr	r2, [pc, #508]	; (800476c <DMA_SetConfig+0x23c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d063      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7e      	ldr	r2, [pc, #504]	; (8004770 <DMA_SetConfig+0x240>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d05e      	beq.n	800463a <DMA_SetConfig+0x10a>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7c      	ldr	r2, [pc, #496]	; (8004774 <DMA_SetConfig+0x244>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d059      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7b      	ldr	r2, [pc, #492]	; (8004778 <DMA_SetConfig+0x248>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d054      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a79      	ldr	r2, [pc, #484]	; (800477c <DMA_SetConfig+0x24c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d04f      	beq.n	800463a <DMA_SetConfig+0x10a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a78      	ldr	r2, [pc, #480]	; (8004780 <DMA_SetConfig+0x250>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d04a      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a76      	ldr	r2, [pc, #472]	; (8004784 <DMA_SetConfig+0x254>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d045      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a75      	ldr	r2, [pc, #468]	; (8004788 <DMA_SetConfig+0x258>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d040      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a73      	ldr	r2, [pc, #460]	; (800478c <DMA_SetConfig+0x25c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d03b      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a72      	ldr	r2, [pc, #456]	; (8004790 <DMA_SetConfig+0x260>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d036      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a70      	ldr	r2, [pc, #448]	; (8004794 <DMA_SetConfig+0x264>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d031      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6f      	ldr	r2, [pc, #444]	; (8004798 <DMA_SetConfig+0x268>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d02c      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6d      	ldr	r2, [pc, #436]	; (800479c <DMA_SetConfig+0x26c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d027      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6c      	ldr	r2, [pc, #432]	; (80047a0 <DMA_SetConfig+0x270>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <DMA_SetConfig+0x274>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01d      	beq.n	800463a <DMA_SetConfig+0x10a>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a69      	ldr	r2, [pc, #420]	; (80047a8 <DMA_SetConfig+0x278>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d018      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a67      	ldr	r2, [pc, #412]	; (80047ac <DMA_SetConfig+0x27c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a66      	ldr	r2, [pc, #408]	; (80047b0 <DMA_SetConfig+0x280>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <DMA_SetConfig+0x10a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a64      	ldr	r2, [pc, #400]	; (80047b4 <DMA_SetConfig+0x284>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a63      	ldr	r2, [pc, #396]	; (80047b8 <DMA_SetConfig+0x288>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a61      	ldr	r2, [pc, #388]	; (80047bc <DMA_SetConfig+0x28c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <DMA_SetConfig+0x10e>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <DMA_SetConfig+0x110>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800464c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800465e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3e      	ldr	r2, [pc, #248]	; (8004760 <DMA_SetConfig+0x230>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d04a      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3d      	ldr	r2, [pc, #244]	; (8004764 <DMA_SetConfig+0x234>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d045      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3b      	ldr	r2, [pc, #236]	; (8004768 <DMA_SetConfig+0x238>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d040      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3a      	ldr	r2, [pc, #232]	; (800476c <DMA_SetConfig+0x23c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d03b      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a38      	ldr	r2, [pc, #224]	; (8004770 <DMA_SetConfig+0x240>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d036      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a37      	ldr	r2, [pc, #220]	; (8004774 <DMA_SetConfig+0x244>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d031      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a35      	ldr	r2, [pc, #212]	; (8004778 <DMA_SetConfig+0x248>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02c      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a34      	ldr	r2, [pc, #208]	; (800477c <DMA_SetConfig+0x24c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d027      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a32      	ldr	r2, [pc, #200]	; (8004780 <DMA_SetConfig+0x250>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d022      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a31      	ldr	r2, [pc, #196]	; (8004784 <DMA_SetConfig+0x254>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d01d      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <DMA_SetConfig+0x258>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d018      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2e      	ldr	r2, [pc, #184]	; (800478c <DMA_SetConfig+0x25c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <DMA_SetConfig+0x260>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <DMA_SetConfig+0x264>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d009      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <DMA_SetConfig+0x268>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <DMA_SetConfig+0x1d0>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a28      	ldr	r2, [pc, #160]	; (800479c <DMA_SetConfig+0x26c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <DMA_SetConfig+0x1d4>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <DMA_SetConfig+0x1d6>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d05a      	beq.n	80047c0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	223f      	movs	r2, #63	; 0x3f
 8004714:	409a      	lsls	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004728:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d108      	bne.n	800474c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800474a:	e087      	b.n	800485c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]
}
 800475c:	e07e      	b.n	800485c <DMA_SetConfig+0x32c>
 800475e:	bf00      	nop
 8004760:	40020010 	.word	0x40020010
 8004764:	40020028 	.word	0x40020028
 8004768:	40020040 	.word	0x40020040
 800476c:	40020058 	.word	0x40020058
 8004770:	40020070 	.word	0x40020070
 8004774:	40020088 	.word	0x40020088
 8004778:	400200a0 	.word	0x400200a0
 800477c:	400200b8 	.word	0x400200b8
 8004780:	40020410 	.word	0x40020410
 8004784:	40020428 	.word	0x40020428
 8004788:	40020440 	.word	0x40020440
 800478c:	40020458 	.word	0x40020458
 8004790:	40020470 	.word	0x40020470
 8004794:	40020488 	.word	0x40020488
 8004798:	400204a0 	.word	0x400204a0
 800479c:	400204b8 	.word	0x400204b8
 80047a0:	58025408 	.word	0x58025408
 80047a4:	5802541c 	.word	0x5802541c
 80047a8:	58025430 	.word	0x58025430
 80047ac:	58025444 	.word	0x58025444
 80047b0:	58025458 	.word	0x58025458
 80047b4:	5802546c 	.word	0x5802546c
 80047b8:	58025480 	.word	0x58025480
 80047bc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <DMA_SetConfig+0x338>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a27      	ldr	r2, [pc, #156]	; (800486c <DMA_SetConfig+0x33c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a25      	ldr	r2, [pc, #148]	; (8004870 <DMA_SetConfig+0x340>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a24      	ldr	r2, [pc, #144]	; (8004874 <DMA_SetConfig+0x344>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a22      	ldr	r2, [pc, #136]	; (8004878 <DMA_SetConfig+0x348>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <DMA_SetConfig+0x34c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <DMA_SetConfig+0x350>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <DMA_SetConfig+0x2e0>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <DMA_SetConfig+0x354>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <DMA_SetConfig+0x2e4>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <DMA_SetConfig+0x2e6>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	409a      	lsls	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d108      	bne.n	800484c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	60da      	str	r2, [r3, #12]
}
 800484a:	e007      	b.n	800485c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	58025408 	.word	0x58025408
 800486c:	5802541c 	.word	0x5802541c
 8004870:	58025430 	.word	0x58025430
 8004874:	58025444 	.word	0x58025444
 8004878:	58025458 	.word	0x58025458
 800487c:	5802546c 	.word	0x5802546c
 8004880:	58025480 	.word	0x58025480
 8004884:	58025494 	.word	0x58025494

08004888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <DMA_CalcBaseAndBitshift+0x118>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d04a      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d045      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3f      	ldr	r2, [pc, #252]	; (80049a8 <DMA_CalcBaseAndBitshift+0x120>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d040      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a3e      	ldr	r2, [pc, #248]	; (80049ac <DMA_CalcBaseAndBitshift+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d03b      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <DMA_CalcBaseAndBitshift+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d036      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d031      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a39      	ldr	r2, [pc, #228]	; (80049b8 <DMA_CalcBaseAndBitshift+0x130>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02c      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a38      	ldr	r2, [pc, #224]	; (80049bc <DMA_CalcBaseAndBitshift+0x134>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d027      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <DMA_CalcBaseAndBitshift+0x138>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a35      	ldr	r2, [pc, #212]	; (80049c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <DMA_CalcBaseAndBitshift+0x140>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a32      	ldr	r2, [pc, #200]	; (80049cc <DMA_CalcBaseAndBitshift+0x144>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a30      	ldr	r2, [pc, #192]	; (80049d0 <DMA_CalcBaseAndBitshift+0x148>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <DMA_CalcBaseAndBitshift+0x150>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <DMA_CalcBaseAndBitshift+0xa8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <DMA_CalcBaseAndBitshift+0x154>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <DMA_CalcBaseAndBitshift+0xac>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <DMA_CalcBaseAndBitshift+0xae>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d024      	beq.n	8004984 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	3b10      	subs	r3, #16
 8004942:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <DMA_CalcBaseAndBitshift+0x158>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d908      	bls.n	8004974 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <DMA_CalcBaseAndBitshift+0x160>)
 800496a:	4013      	ands	r3, r2
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58
 8004972:	e00d      	b.n	8004990 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <DMA_CalcBaseAndBitshift+0x160>)
 800497c:	4013      	ands	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6593      	str	r3, [r2, #88]	; 0x58
 8004982:	e005      	b.n	8004990 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40020010 	.word	0x40020010
 80049a4:	40020028 	.word	0x40020028
 80049a8:	40020040 	.word	0x40020040
 80049ac:	40020058 	.word	0x40020058
 80049b0:	40020070 	.word	0x40020070
 80049b4:	40020088 	.word	0x40020088
 80049b8:	400200a0 	.word	0x400200a0
 80049bc:	400200b8 	.word	0x400200b8
 80049c0:	40020410 	.word	0x40020410
 80049c4:	40020428 	.word	0x40020428
 80049c8:	40020440 	.word	0x40020440
 80049cc:	40020458 	.word	0x40020458
 80049d0:	40020470 	.word	0x40020470
 80049d4:	40020488 	.word	0x40020488
 80049d8:	400204a0 	.word	0x400204a0
 80049dc:	400204b8 	.word	0x400204b8
 80049e0:	aaaaaaab 	.word	0xaaaaaaab
 80049e4:	0800b918 	.word	0x0800b918
 80049e8:	fffffc00 	.word	0xfffffc00

080049ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d120      	bne.n	8004a42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d858      	bhi.n	8004aba <DMA_CheckFifoParam+0xce>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <DMA_CheckFifoParam+0x24>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004a33 	.word	0x08004a33
 8004a18:	08004a21 	.word	0x08004a21
 8004a1c:	08004abb 	.word	0x08004abb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d048      	beq.n	8004abe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a30:	e045      	b.n	8004abe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a3a:	d142      	bne.n	8004ac2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a40:	e03f      	b.n	8004ac2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4a:	d123      	bne.n	8004a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d838      	bhi.n	8004ac6 <DMA_CheckFifoParam+0xda>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <DMA_CheckFifoParam+0x70>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004a73 	.word	0x08004a73
 8004a64:	08004a6d 	.word	0x08004a6d
 8004a68:	08004a85 	.word	0x08004a85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a70:	e030      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d025      	beq.n	8004aca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a82:	e022      	b.n	8004aca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a8c:	d11f      	bne.n	8004ace <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a92:	e01c      	b.n	8004ace <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d902      	bls.n	8004aa2 <DMA_CheckFifoParam+0xb6>
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d003      	beq.n	8004aa8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004aa0:	e018      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa6:	e015      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ab8:	e00b      	b.n	8004ad2 <DMA_CheckFifoParam+0xe6>
        break;
 8004aba:	bf00      	nop
 8004abc:	e00a      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e008      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ac2:	bf00      	nop
 8004ac4:	e006      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ac6:	bf00      	nop
 8004ac8:	e004      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <DMA_CheckFifoParam+0xe8>
    break;
 8004ad2:	bf00      	nop
    }
  }

  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a38      	ldr	r2, [pc, #224]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a36      	ldr	r2, [pc, #216]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a33      	ldr	r2, [pc, #204]	; (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a32      	ldr	r2, [pc, #200]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a30      	ldr	r2, [pc, #192]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2f      	ldr	r2, [pc, #188]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	3b08      	subs	r3, #8
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b80:	e024      	b.n	8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	3b10      	subs	r3, #16
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d806      	bhi.n	8004baa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d902      	bls.n	8004baa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004bbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	58025408 	.word	0x58025408
 8004bdc:	5802541c 	.word	0x5802541c
 8004be0:	58025430 	.word	0x58025430
 8004be4:	58025444 	.word	0x58025444
 8004be8:	58025458 	.word	0x58025458
 8004bec:	5802546c 	.word	0x5802546c
 8004bf0:	58025480 	.word	0x58025480
 8004bf4:	58025494 	.word	0x58025494
 8004bf8:	cccccccd 	.word	0xcccccccd
 8004bfc:	16009600 	.word	0x16009600
 8004c00:	58025880 	.word	0x58025880
 8004c04:	aaaaaaab 	.word	0xaaaaaaab
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	4002040f 	.word	0x4002040f
 8004c10:	10008200 	.word	0x10008200
 8004c14:	40020880 	.word	0x40020880

08004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d04a      	beq.n	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d847      	bhi.n	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ca0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ca2:	e009      	b.n	8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004cb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	58025408 	.word	0x58025408
 8004cd4:	5802541c 	.word	0x5802541c
 8004cd8:	58025430 	.word	0x58025430
 8004cdc:	58025444 	.word	0x58025444
 8004ce0:	58025458 	.word	0x58025458
 8004ce4:	5802546c 	.word	0x5802546c
 8004ce8:	58025480 	.word	0x58025480
 8004cec:	58025494 	.word	0x58025494
 8004cf0:	1600963f 	.word	0x1600963f
 8004cf4:	58025940 	.word	0x58025940
 8004cf8:	1000823f 	.word	0x1000823f
 8004cfc:	40020940 	.word	0x40020940

08004d00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0c6      	b.n	8004ea0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc fc1e 	bl	800155c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2223      	movs	r2, #35	; 0x23
 8004d24:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d26:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <HAL_ETH_Init+0x1a8>)
 8004d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d2c:	4a5e      	ldr	r2, [pc, #376]	; (8004ea8 <HAL_ETH_Init+0x1a8>)
 8004d2e:	f043 0302 	orr.w	r3, r3, #2
 8004d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d36:	4b5c      	ldr	r3, [pc, #368]	; (8004ea8 <HAL_ETH_Init+0x1a8>)
 8004d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7a1b      	ldrb	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fd f86d 	bl	8001e2c <HAL_SYSCFG_ETHInterfaceSelect>
 8004d52:	e003      	b.n	8004d5c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d58:	f7fd f868 	bl	8001e2c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d74:	f7fd f81e 	bl	8001db4 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d7a:	e00f      	b.n	8004d9c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004d7c:	f7fd f81a 	bl	8001db4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d8a:	d907      	bls.n	8004d9c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	22e0      	movs	r2, #224	; 0xe0
 8004d96:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e081      	b.n	8004ea0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fac0 	bl	8005334 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004db4:	f001 fec0 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a3c      	ldr	r2, [pc, #240]	; (8004eac <HAL_ETH_Init+0x1ac>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	0c9a      	lsrs	r2, r3, #18
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fa13 	bl	80051f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004de8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004dec:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	22e0      	movs	r2, #224	; 0xe0
 8004e04:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04a      	b.n	8004ea0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e12:	4413      	add	r3, r2
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <HAL_ETH_Init+0x1b0>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6952      	ldr	r2, [r2, #20]
 8004e1e:	0052      	lsls	r2, r2, #1
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	6809      	ldr	r1, [r1, #0]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e2a:	440b      	add	r3, r1
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fad8 	bl	80053e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb1c 	bl	8005472 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	3305      	adds	r3, #5
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	3303      	adds	r3, #3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	061a      	lsls	r2, r3, #24
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	3302      	adds	r3, #2
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	3301      	adds	r3, #1
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2210      	movs	r2, #16
 8004e96:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	431bde83 	.word	0x431bde83
 8004eb0:	ffff8001 	.word	0xffff8001

08004eb4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004ec6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	791b      	ldrb	r3, [r3, #4]
 8004ecc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004ece:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	7b1b      	ldrb	r3, [r3, #12]
 8004ed4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004ed6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	7b5b      	ldrb	r3, [r3, #13]
 8004edc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004ede:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	7b9b      	ldrb	r3, [r3, #14]
 8004ee4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004ee6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	7bdb      	ldrb	r3, [r3, #15]
 8004eec:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004eee:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	7c12      	ldrb	r2, [r2, #16]
 8004ef4:	2a00      	cmp	r2, #0
 8004ef6:	d102      	bne.n	8004efe <ETH_SetMACConfig+0x4a>
 8004ef8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004efc:	e000      	b.n	8004f00 <ETH_SetMACConfig+0x4c>
 8004efe:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f00:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	7c52      	ldrb	r2, [r2, #17]
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d102      	bne.n	8004f10 <ETH_SetMACConfig+0x5c>
 8004f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f0e:	e000      	b.n	8004f12 <ETH_SetMACConfig+0x5e>
 8004f10:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f12:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	7c9b      	ldrb	r3, [r3, #18]
 8004f18:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f1a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004f20:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004f26:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	7f1b      	ldrb	r3, [r3, #28]
 8004f2c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004f2e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	7f5b      	ldrb	r3, [r3, #29]
 8004f34:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004f36:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	7f92      	ldrb	r2, [r2, #30]
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	d102      	bne.n	8004f46 <ETH_SetMACConfig+0x92>
 8004f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f44:	e000      	b.n	8004f48 <ETH_SetMACConfig+0x94>
 8004f46:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004f48:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	7fdb      	ldrb	r3, [r3, #31]
 8004f4e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004f50:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	d102      	bne.n	8004f62 <ETH_SetMACConfig+0xae>
 8004f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f60:	e000      	b.n	8004f64 <ETH_SetMACConfig+0xb0>
 8004f62:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004f64:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004f6a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f72:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004f74:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <ETH_SetMACConfig+0x22c>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f9e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fa0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004faa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fb2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004fb4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	d102      	bne.n	8004fc6 <ETH_SetMACConfig+0x112>
 8004fc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fc4:	e000      	b.n	8004fc8 <ETH_SetMACConfig+0x114>
 8004fc6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004fc8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <ETH_SetMACConfig+0x230>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <ETH_SetMACConfig+0x234>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	68f9      	ldr	r1, [r7, #12]
 8005006:	430b      	orrs	r3, r1
 8005008:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005010:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005016:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800501e:	2a00      	cmp	r2, #0
 8005020:	d101      	bne.n	8005026 <ETH_SetMACConfig+0x172>
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	e000      	b.n	8005028 <ETH_SetMACConfig+0x174>
 8005026:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005028:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800503a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800503e:	4013      	ands	r3, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	68f9      	ldr	r1, [r7, #12]
 8005046:	430b      	orrs	r3, r1
 8005048:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005050:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005058:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f023 0103 	bic.w	r1, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	430a      	orrs	r2, r1
 8005072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800507e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800509a:	2a00      	cmp	r2, #0
 800509c:	d101      	bne.n	80050a2 <ETH_SetMACConfig+0x1ee>
 800509e:	2240      	movs	r2, #64	; 0x40
 80050a0:	e000      	b.n	80050a4 <ETH_SetMACConfig+0x1f0>
 80050a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80050a4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80050ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050ae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80050b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80050c4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	00048083 	.word	0x00048083
 80050e4:	c0f88000 	.word	0xc0f88000
 80050e8:	fffffef0 	.word	0xfffffef0

080050ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b38      	ldr	r3, [pc, #224]	; (80051e4 <ETH_SetDMAConfig+0xf8>)
 8005102:	4013      	ands	r3, r2
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	6809      	ldr	r1, [r1, #0]
 800510c:	431a      	orrs	r2, r3
 800510e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005112:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	791b      	ldrb	r3, [r3, #4]
 8005118:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800511e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	7b1b      	ldrb	r3, [r3, #12]
 8005124:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005132:	4413      	add	r3, r2
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <ETH_SetDMAConfig+0xfc>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	431a      	orrs	r2, r3
 8005142:	f241 0304 	movw	r3, #4100	; 0x1004
 8005146:	440b      	add	r3, r1
 8005148:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	7b5b      	ldrb	r3, [r3, #13]
 800514e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b22      	ldr	r3, [pc, #136]	; (80051ec <ETH_SetDMAConfig+0x100>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6811      	ldr	r1, [r2, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	431a      	orrs	r2, r3
 800516e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005172:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	7d1b      	ldrb	r3, [r3, #20]
 800517c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800517e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	7f5b      	ldrb	r3, [r3, #29]
 8005184:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005192:	4413      	add	r3, r2
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <ETH_SetDMAConfig+0x104>)
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6811      	ldr	r1, [r2, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80051a6:	440b      	add	r3, r1
 80051a8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	7f1b      	ldrb	r3, [r3, #28]
 80051ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80051c0:	4413      	add	r3, r2
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <ETH_SetDMAConfig+0x108>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6811      	ldr	r1, [r2, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80051d4:	440b      	add	r3, r1
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	ffff87fd 	.word	0xffff87fd
 80051e8:	ffff2ffe 	.word	0xffff2ffe
 80051ec:	fffec000 	.word	0xfffec000
 80051f0:	ffc0efef 	.word	0xffc0efef
 80051f4:	7fc0ffff 	.word	0x7fc0ffff

080051f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b0a4      	sub	sp, #144	; 0x90
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005206:	2300      	movs	r3, #0
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800523a:	2300      	movs	r3, #0
 800523c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005240:	2300      	movs	r3, #0
 8005242:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005250:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005254:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005272:	2300      	movs	r3, #0
 8005274:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005276:	2300      	movs	r3, #0
 8005278:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800527a:	2300      	movs	r3, #0
 800527c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005290:	2320      	movs	r3, #32
 8005292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80052a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052ac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80052b4:	2302      	movs	r3, #2
 80052b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80052d2:	2300      	movs	r3, #0
 80052d4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fde6 	bl	8004eb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052ec:	2301      	movs	r3, #1
 80052ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005302:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005306:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005308:	2300      	movs	r3, #0
 800530a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800530c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005310:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005318:	f44f 7306 	mov.w	r3, #536	; 0x218
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fee1 	bl	80050ec <ETH_SetDMAConfig>
}
 800532a:	bf00      	nop
 800532c:	3790      	adds	r7, #144	; 0x90
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005344:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800534c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800534e:	f001 fbf3 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8005352:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d908      	bls.n	800536e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d804      	bhi.n	800536e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e027      	b.n	80053be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d908      	bls.n	8005388 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d204      	bcs.n	8005388 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e01a      	b.n	80053be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d303      	bcc.n	8005398 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a12      	ldr	r2, [pc, #72]	; (80053dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d911      	bls.n	80053bc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d908      	bls.n	80053b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d804      	bhi.n	80053b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e005      	b.n	80053be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e000      	b.n	80053be <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80053bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	01312cff 	.word	0x01312cff
 80053d4:	02160ebf 	.word	0x02160ebf
 80053d8:	03938700 	.word	0x03938700
 80053dc:	05f5e0ff 	.word	0x05f5e0ff
 80053e0:	08f0d17f 	.word	0x08f0d17f

080053e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e01d      	b.n	800542e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68d9      	ldr	r1, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4613      	mov	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2200      	movs	r2, #0
 800541a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	3206      	adds	r2, #6
 8005424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d9de      	bls.n	80053f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f241 132c 	movw	r3, #4396	; 0x112c
 8005442:	4413      	add	r3, r2
 8005444:	2203      	movs	r2, #3
 8005446:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68d9      	ldr	r1, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	f241 1314 	movw	r3, #4372	; 0x1114
 8005454:	4413      	add	r3, r2
 8005456:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005464:	601a      	str	r2, [r3, #0]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e024      	b.n	80054ca <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6919      	ldr	r1, [r3, #16]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2200      	movs	r2, #0
 80054ae:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3310      	adds	r3, #16
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3301      	adds	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d9d7      	bls.n	8005480 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	f241 1330 	movw	r3, #4400	; 0x1130
 80054f6:	4413      	add	r3, r2
 80054f8:	2203      	movs	r2, #3
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6919      	ldr	r1, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	f241 131c 	movw	r3, #4380	; 0x111c
 8005508:	4413      	add	r3, r2
 800550a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	f241 1328 	movw	r3, #4392	; 0x1128
 800551c:	4413      	add	r3, r2
 800551e:	6019      	str	r1, [r3, #0]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800553a:	4b89      	ldr	r3, [pc, #548]	; (8005760 <HAL_GPIO_Init+0x234>)
 800553c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800553e:	e194      	b.n	800586a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	2101      	movs	r1, #1
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8186 	beq.w	8005864 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d005      	beq.n	8005570 <HAL_GPIO_Init+0x44>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d130      	bne.n	80055d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	2203      	movs	r2, #3
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055a6:	2201      	movs	r2, #1
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f003 0201 	and.w	r2, r3, #1
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d017      	beq.n	800560e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d123      	bne.n	8005662 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	08da      	lsrs	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3208      	adds	r2, #8
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	08da      	lsrs	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3208      	adds	r2, #8
 800565c:	69b9      	ldr	r1, [r7, #24]
 800565e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	2203      	movs	r2, #3
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0203 	and.w	r2, r3, #3
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4313      	orrs	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80e0 	beq.w	8005864 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a4:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_GPIO_Init+0x238>)
 80056a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056aa:	4a2e      	ldr	r2, [pc, #184]	; (8005764 <HAL_GPIO_Init+0x238>)
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056b4:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_GPIO_Init+0x238>)
 80056b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056c2:	4a29      	ldr	r2, [pc, #164]	; (8005768 <HAL_GPIO_Init+0x23c>)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	3302      	adds	r3, #2
 80056ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <HAL_GPIO_Init+0x240>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d052      	beq.n	8005794 <HAL_GPIO_Init+0x268>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_GPIO_Init+0x244>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d031      	beq.n	800575a <HAL_GPIO_Init+0x22e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <HAL_GPIO_Init+0x248>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d02b      	beq.n	8005756 <HAL_GPIO_Init+0x22a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <HAL_GPIO_Init+0x24c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d025      	beq.n	8005752 <HAL_GPIO_Init+0x226>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1c      	ldr	r2, [pc, #112]	; (800577c <HAL_GPIO_Init+0x250>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01f      	beq.n	800574e <HAL_GPIO_Init+0x222>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_GPIO_Init+0x254>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d019      	beq.n	800574a <HAL_GPIO_Init+0x21e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_GPIO_Init+0x258>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_GPIO_Init+0x21a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a19      	ldr	r2, [pc, #100]	; (8005788 <HAL_GPIO_Init+0x25c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00d      	beq.n	8005742 <HAL_GPIO_Init+0x216>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_GPIO_Init+0x260>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <HAL_GPIO_Init+0x212>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HAL_GPIO_Init+0x264>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d101      	bne.n	800573a <HAL_GPIO_Init+0x20e>
 8005736:	2309      	movs	r3, #9
 8005738:	e02d      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800573a:	230a      	movs	r3, #10
 800573c:	e02b      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800573e:	2308      	movs	r3, #8
 8005740:	e029      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005742:	2307      	movs	r3, #7
 8005744:	e027      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005746:	2306      	movs	r3, #6
 8005748:	e025      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800574a:	2305      	movs	r3, #5
 800574c:	e023      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800574e:	2304      	movs	r3, #4
 8005750:	e021      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005752:	2303      	movs	r3, #3
 8005754:	e01f      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005756:	2302      	movs	r3, #2
 8005758:	e01d      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800575a:	2301      	movs	r3, #1
 800575c:	e01b      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800575e:	bf00      	nop
 8005760:	58000080 	.word	0x58000080
 8005764:	58024400 	.word	0x58024400
 8005768:	58000400 	.word	0x58000400
 800576c:	58020000 	.word	0x58020000
 8005770:	58020400 	.word	0x58020400
 8005774:	58020800 	.word	0x58020800
 8005778:	58020c00 	.word	0x58020c00
 800577c:	58021000 	.word	0x58021000
 8005780:	58021400 	.word	0x58021400
 8005784:	58021800 	.word	0x58021800
 8005788:	58021c00 	.word	0x58021c00
 800578c:	58022000 	.word	0x58022000
 8005790:	58022400 	.word	0x58022400
 8005794:	2300      	movs	r3, #0
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	f002 0203 	and.w	r2, r2, #3
 800579c:	0092      	lsls	r2, r2, #2
 800579e:	4093      	lsls	r3, r2
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a6:	4938      	ldr	r1, [pc, #224]	; (8005888 <HAL_GPIO_Init+0x35c>)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	089b      	lsrs	r3, r3, #2
 80057ac:	3302      	adds	r3, #2
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3301      	adds	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f ae63 	bne.w	8005540 <HAL_GPIO_Init+0x14>
  }
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	3724      	adds	r7, #36	; 0x24
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	58000400 	.word	0x58000400

0800588c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	807b      	strh	r3, [r7, #2]
 8005898:	4613      	mov	r3, r2
 800589a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800589c:	787b      	ldrb	r3, [r7, #1]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058a2:	887a      	ldrh	r2, [r7, #2]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058a8:	e003      	b.n	80058b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058aa:	887b      	ldrh	r3, [r7, #2]
 80058ac:	041a      	lsls	r2, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	619a      	str	r2, [r3, #24]
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80058c8:	4a08      	ldr	r2, [pc, #32]	; (80058ec <HAL_HSEM_FastTake+0x2c>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3320      	adds	r3, #32
 80058ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <HAL_HSEM_FastTake+0x30>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58026400 	.word	0x58026400
 80058f0:	80000300 	.word	0x80000300

080058f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80058fe:	4906      	ldr	r1, [pc, #24]	; (8005918 <HAL_HSEM_Release+0x24>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	58026400 	.word	0x58026400

0800591c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b08f      	sub	sp, #60	; 0x3c
 8005920:	af0a      	add	r7, sp, #40	; 0x28
 8005922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e116      	b.n	8005b5c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fc f89d 	bl	8001a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2203      	movs	r2, #3
 8005952:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f005 fcc1 	bl	800b2f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	687e      	ldr	r6, [r7, #4]
 800597a:	466d      	mov	r5, sp
 800597c:	f106 0410 	add.w	r4, r6, #16
 8005980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800598c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005990:	1d33      	adds	r3, r6, #4
 8005992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005994:	6838      	ldr	r0, [r7, #0]
 8005996:	f005 fc3f 	bl	800b218 <USB_CoreInit>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0d7      	b.n	8005b5c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f005 fcaf 	bl	800b316 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e04a      	b.n	8005a54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059be:	7bfa      	ldrb	r2, [r7, #15]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	333d      	adds	r3, #61	; 0x3d
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	333c      	adds	r3, #60	; 0x3c
 80059e2:	7bfa      	ldrb	r2, [r7, #15]
 80059e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	b298      	uxth	r0, r3
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3342      	adds	r3, #66	; 0x42
 80059fa:	4602      	mov	r2, r0
 80059fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	333f      	adds	r3, #63	; 0x3f
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a12:	7bfa      	ldrb	r2, [r7, #15]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3344      	adds	r3, #68	; 0x44
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	3348      	adds	r3, #72	; 0x48
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a3a:	7bfa      	ldrb	r2, [r7, #15]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	3350      	adds	r3, #80	; 0x50
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	3301      	adds	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	7bfa      	ldrb	r2, [r7, #15]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d3af      	bcc.n	80059be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
 8005a62:	e044      	b.n	8005aee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	1a9b      	subs	r3, r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a90:	7bfa      	ldrb	r2, [r7, #15]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ad2:	7bfa      	ldrb	r2, [r7, #15]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	3301      	adds	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	7bfa      	ldrb	r2, [r7, #15]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d3b5      	bcc.n	8005a64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	687e      	ldr	r6, [r7, #4]
 8005b00:	466d      	mov	r5, sp
 8005b02:	f106 0410 	add.w	r4, r6, #16
 8005b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b16:	1d33      	adds	r3, r6, #4
 8005b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	f005 fc48 	bl	800b3b0 <USB_DevInit>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e014      	b.n	8005b5c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d102      	bne.n	8005b50 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f80a 	bl	8005b64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f005 fe02 	bl	800b75e <USB_DevDisconnect>

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	10000003 	.word	0x10000003

08005bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005bb4:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bc0:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d001      	beq.n	8005bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e040      	b.n	8005c54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e03e      	b.n	8005c54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005bde:	491f      	ldr	r1, [pc, #124]	; (8005c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005be6:	f7fc f8e5 	bl	8001db4 <HAL_GetTick>
 8005bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bec:	e009      	b.n	8005c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bee:	f7fc f8e1 	bl	8001db4 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfc:	d901      	bls.n	8005c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e028      	b.n	8005c54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c02:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0e:	d1ee      	bne.n	8005bee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b1e      	cmp	r3, #30
 8005c14:	d008      	beq.n	8005c28 <HAL_PWREx_ConfigSupply+0x7c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1a:	d005      	beq.n	8005c28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b1d      	cmp	r3, #29
 8005c20:	d002      	beq.n	8005c28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b2d      	cmp	r3, #45	; 0x2d
 8005c26:	d114      	bne.n	8005c52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005c28:	f7fc f8c4 	bl	8001db4 <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c2e:	e009      	b.n	8005c44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c30:	f7fc f8c0 	bl	8001db4 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c3e:	d901      	bls.n	8005c44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e007      	b.n	8005c54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c50:	d1ee      	bne.n	8005c30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	58024800 	.word	0x58024800

08005c60 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c6e:	60d3      	str	r3, [r2, #12]
}
 8005c70:	bf00      	nop
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	58024800 	.word	0x58024800

08005c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f000 bc1c 	b.w	80064cc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8087 	beq.w	8005db0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca2:	4b9e      	ldr	r3, [pc, #632]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cac:	4b9b      	ldr	r3, [pc, #620]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d007      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x48>
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	2b18      	cmp	r3, #24
 8005cbc:	d110      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x60>
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc8:	4b94      	ldr	r3, [pc, #592]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d06c      	beq.n	8005dae <HAL_RCC_OscConfig+0x12e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d168      	bne.n	8005dae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e3f5      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d106      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x78>
 8005cea:	4b8c      	ldr	r3, [pc, #560]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a8b      	ldr	r2, [pc, #556]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e02e      	b.n	8005d56 <HAL_RCC_OscConfig+0xd6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <HAL_RCC_OscConfig+0x9a>
 8005d00:	4b86      	ldr	r3, [pc, #536]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a85      	ldr	r2, [pc, #532]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4b83      	ldr	r3, [pc, #524]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a82      	ldr	r2, [pc, #520]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	e01d      	b.n	8005d56 <HAL_RCC_OscConfig+0xd6>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCC_OscConfig+0xbe>
 8005d24:	4b7d      	ldr	r3, [pc, #500]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a7c      	ldr	r2, [pc, #496]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	4b7a      	ldr	r3, [pc, #488]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a79      	ldr	r2, [pc, #484]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e00b      	b.n	8005d56 <HAL_RCC_OscConfig+0xd6>
 8005d3e:	4b77      	ldr	r3, [pc, #476]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a76      	ldr	r2, [pc, #472]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	4b74      	ldr	r3, [pc, #464]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a73      	ldr	r2, [pc, #460]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5e:	f7fc f829 	bl	8001db4 <HAL_GetTick>
 8005d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d66:	f7fc f825 	bl	8001db4 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b64      	cmp	r3, #100	; 0x64
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e3a9      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d78:	4b68      	ldr	r3, [pc, #416]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <HAL_RCC_OscConfig+0xe6>
 8005d84:	e014      	b.n	8005db0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d86:	f7fc f815 	bl	8001db4 <HAL_GetTick>
 8005d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d8e:	f7fc f811 	bl	8001db4 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b64      	cmp	r3, #100	; 0x64
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e395      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005da0:	4b5e      	ldr	r3, [pc, #376]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1f0      	bne.n	8005d8e <HAL_RCC_OscConfig+0x10e>
 8005dac:	e000      	b.n	8005db0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80ca 	beq.w	8005f52 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dbe:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dc8:	4b54      	ldr	r3, [pc, #336]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <HAL_RCC_OscConfig+0x164>
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b18      	cmp	r3, #24
 8005dd8:	d156      	bne.n	8005e88 <HAL_RCC_OscConfig+0x208>
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d151      	bne.n	8005e88 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de4:	4b4d      	ldr	r3, [pc, #308]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_OscConfig+0x17c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e367      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dfc:	4b47      	ldr	r3, [pc, #284]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f023 0219 	bic.w	r2, r3, #25
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4944      	ldr	r1, [pc, #272]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e0e:	f7fb ffd1 	bl	8001db4 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e16:	f7fb ffcd 	bl	8001db4 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e351      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e28:	4b3c      	ldr	r3, [pc, #240]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e34:	f7fb ffee 	bl	8001e14 <HAL_GetREVID>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d817      	bhi.n	8005e72 <HAL_RCC_OscConfig+0x1f2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d108      	bne.n	8005e5c <HAL_RCC_OscConfig+0x1dc>
 8005e4a:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e52:	4a32      	ldr	r2, [pc, #200]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e5a:	e07a      	b.n	8005f52 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5c:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	031b      	lsls	r3, r3, #12
 8005e6a:	492c      	ldr	r1, [pc, #176]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e70:	e06f      	b.n	8005f52 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e72:	4b2a      	ldr	r3, [pc, #168]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	061b      	lsls	r3, r3, #24
 8005e80:	4926      	ldr	r1, [pc, #152]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e86:	e064      	b.n	8005f52 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d047      	beq.n	8005f20 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e90:	4b22      	ldr	r3, [pc, #136]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f023 0219 	bic.w	r2, r3, #25
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	491f      	ldr	r1, [pc, #124]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea2:	f7fb ff87 	bl	8001db4 <HAL_GetTick>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eaa:	f7fb ff83 	bl	8001db4 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e307      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f0      	beq.n	8005eaa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec8:	f7fb ffa4 	bl	8001e14 <HAL_GetREVID>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d817      	bhi.n	8005f06 <HAL_RCC_OscConfig+0x286>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d108      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x270>
 8005ede:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ee6:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eec:	6053      	str	r3, [r2, #4]
 8005eee:	e030      	b.n	8005f52 <HAL_RCC_OscConfig+0x2d2>
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	031b      	lsls	r3, r3, #12
 8005efe:	4907      	ldr	r1, [pc, #28]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	604b      	str	r3, [r1, #4]
 8005f04:	e025      	b.n	8005f52 <HAL_RCC_OscConfig+0x2d2>
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	061b      	lsls	r3, r3, #24
 8005f14:	4901      	ldr	r1, [pc, #4]	; (8005f1c <HAL_RCC_OscConfig+0x29c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	604b      	str	r3, [r1, #4]
 8005f1a:	e01a      	b.n	8005f52 <HAL_RCC_OscConfig+0x2d2>
 8005f1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f20:	4b9e      	ldr	r3, [pc, #632]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a9d      	ldr	r2, [pc, #628]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fb ff42 	bl	8001db4 <HAL_GetTick>
 8005f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f34:	f7fb ff3e 	bl	8001db4 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e2c2      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f46:	4b95      	ldr	r3, [pc, #596]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80a9 	beq.w	80060b2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f60:	4b8e      	ldr	r3, [pc, #568]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f6a:	4b8c      	ldr	r3, [pc, #560]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d007      	beq.n	8005f86 <HAL_RCC_OscConfig+0x306>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b18      	cmp	r3, #24
 8005f7a:	d13a      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x372>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d135      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f86:	4b85      	ldr	r3, [pc, #532]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_RCC_OscConfig+0x31e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	2b80      	cmp	r3, #128	; 0x80
 8005f98:	d001      	beq.n	8005f9e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e296      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f9e:	f7fb ff39 	bl	8001e14 <HAL_GetREVID>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d817      	bhi.n	8005fdc <HAL_RCC_OscConfig+0x35c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d108      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x346>
 8005fb4:	4b79      	ldr	r3, [pc, #484]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fbc:	4a77      	ldr	r2, [pc, #476]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fc2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fc4:	e075      	b.n	80060b2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fc6:	4b75      	ldr	r3, [pc, #468]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	069b      	lsls	r3, r3, #26
 8005fd4:	4971      	ldr	r1, [pc, #452]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fda:	e06a      	b.n	80060b2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fdc:	4b6f      	ldr	r3, [pc, #444]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	496c      	ldr	r1, [pc, #432]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ff0:	e05f      	b.n	80060b2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d042      	beq.n	8006080 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ffa:	4b68      	ldr	r3, [pc, #416]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a67      	ldr	r2, [pc, #412]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006006:	f7fb fed5 	bl	8001db4 <HAL_GetTick>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800600e:	f7fb fed1 	bl	8001db4 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e255      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800602c:	f7fb fef2 	bl	8001e14 <HAL_GetREVID>
 8006030:	4603      	mov	r3, r0
 8006032:	f241 0203 	movw	r2, #4099	; 0x1003
 8006036:	4293      	cmp	r3, r2
 8006038:	d817      	bhi.n	800606a <HAL_RCC_OscConfig+0x3ea>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	2b20      	cmp	r3, #32
 8006040:	d108      	bne.n	8006054 <HAL_RCC_OscConfig+0x3d4>
 8006042:	4b56      	ldr	r3, [pc, #344]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800604a:	4a54      	ldr	r2, [pc, #336]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 800604c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006050:	6053      	str	r3, [r2, #4]
 8006052:	e02e      	b.n	80060b2 <HAL_RCC_OscConfig+0x432>
 8006054:	4b51      	ldr	r3, [pc, #324]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	069b      	lsls	r3, r3, #26
 8006062:	494e      	ldr	r1, [pc, #312]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006064:	4313      	orrs	r3, r2
 8006066:	604b      	str	r3, [r1, #4]
 8006068:	e023      	b.n	80060b2 <HAL_RCC_OscConfig+0x432>
 800606a:	4b4c      	ldr	r3, [pc, #304]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	061b      	lsls	r3, r3, #24
 8006078:	4948      	ldr	r1, [pc, #288]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	60cb      	str	r3, [r1, #12]
 800607e:	e018      	b.n	80060b2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006080:	4b46      	ldr	r3, [pc, #280]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a45      	ldr	r2, [pc, #276]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fb fe92 	bl	8001db4 <HAL_GetTick>
 8006090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006094:	f7fb fe8e 	bl	8001db4 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e212      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060a6:	4b3d      	ldr	r3, [pc, #244]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d036      	beq.n	800612c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d019      	beq.n	80060fa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060c6:	4b35      	ldr	r3, [pc, #212]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 80060c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ca:	4a34      	ldr	r2, [pc, #208]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d2:	f7fb fe6f 	bl	8001db4 <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060da:	f7fb fe6b 	bl	8001db4 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e1ef      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ec:	4b2b      	ldr	r3, [pc, #172]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 80060ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x45a>
 80060f8:	e018      	b.n	800612c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060fa:	4b28      	ldr	r3, [pc, #160]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	4a27      	ldr	r2, [pc, #156]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006106:	f7fb fe55 	bl	8001db4 <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800610e:	f7fb fe51 	bl	8001db4 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e1d5      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d039      	beq.n	80061ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d019      	beq.n	8006174 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006140:	4b16      	ldr	r3, [pc, #88]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800614a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800614c:	f7fb fe32 	bl	8001db4 <HAL_GetTick>
 8006150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006154:	f7fb fe2e 	bl	8001db4 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e1b2      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x4d4>
 8006172:	e01b      	b.n	80061ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a08      	ldr	r2, [pc, #32]	; (800619c <HAL_RCC_OscConfig+0x51c>)
 800617a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800617e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006180:	f7fb fe18 	bl	8001db4 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006186:	e00b      	b.n	80061a0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006188:	f7fb fe14 	bl	8001db4 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d904      	bls.n	80061a0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e198      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
 800619a:	bf00      	nop
 800619c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061a0:	4ba3      	ldr	r3, [pc, #652]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ed      	bne.n	8006188 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8081 	beq.w	80062bc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061ba:	4b9e      	ldr	r3, [pc, #632]	; (8006434 <HAL_RCC_OscConfig+0x7b4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a9d      	ldr	r2, [pc, #628]	; (8006434 <HAL_RCC_OscConfig+0x7b4>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061c6:	f7fb fdf5 	bl	8001db4 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061ce:	f7fb fdf1 	bl	8001db4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b64      	cmp	r3, #100	; 0x64
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e175      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e0:	4b94      	ldr	r3, [pc, #592]	; (8006434 <HAL_RCC_OscConfig+0x7b4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x582>
 80061f4:	4b8e      	ldr	r3, [pc, #568]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	4a8d      	ldr	r2, [pc, #564]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006200:	e02d      	b.n	800625e <HAL_RCC_OscConfig+0x5de>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x5a4>
 800620a:	4b89      	ldr	r3, [pc, #548]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	4a88      	ldr	r2, [pc, #544]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006210:	f023 0301 	bic.w	r3, r3, #1
 8006214:	6713      	str	r3, [r2, #112]	; 0x70
 8006216:	4b86      	ldr	r3, [pc, #536]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	4a85      	ldr	r2, [pc, #532]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800621c:	f023 0304 	bic.w	r3, r3, #4
 8006220:	6713      	str	r3, [r2, #112]	; 0x70
 8006222:	e01c      	b.n	800625e <HAL_RCC_OscConfig+0x5de>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b05      	cmp	r3, #5
 800622a:	d10c      	bne.n	8006246 <HAL_RCC_OscConfig+0x5c6>
 800622c:	4b80      	ldr	r3, [pc, #512]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	4a7f      	ldr	r2, [pc, #508]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006232:	f043 0304 	orr.w	r3, r3, #4
 8006236:	6713      	str	r3, [r2, #112]	; 0x70
 8006238:	4b7d      	ldr	r3, [pc, #500]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	4a7c      	ldr	r2, [pc, #496]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6713      	str	r3, [r2, #112]	; 0x70
 8006244:	e00b      	b.n	800625e <HAL_RCC_OscConfig+0x5de>
 8006246:	4b7a      	ldr	r3, [pc, #488]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a79      	ldr	r2, [pc, #484]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
 8006252:	4b77      	ldr	r3, [pc, #476]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	4a76      	ldr	r2, [pc, #472]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d015      	beq.n	8006292 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006266:	f7fb fda5 	bl	8001db4 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626c:	e00a      	b.n	8006284 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7fb fda1 	bl	8001db4 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	f241 3288 	movw	r2, #5000	; 0x1388
 800627c:	4293      	cmp	r3, r2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e123      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006284:	4b6a      	ldr	r3, [pc, #424]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0ee      	beq.n	800626e <HAL_RCC_OscConfig+0x5ee>
 8006290:	e014      	b.n	80062bc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fb fd8f 	bl	8001db4 <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fb fd8b 	bl	8001db4 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e10d      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062b0:	4b5f      	ldr	r3, [pc, #380]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ee      	bne.n	800629a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8102 	beq.w	80064ca <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062c6:	4b5a      	ldr	r3, [pc, #360]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ce:	2b18      	cmp	r3, #24
 80062d0:	f000 80bd 	beq.w	800644e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b02      	cmp	r3, #2
 80062da:	f040 8095 	bne.w	8006408 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062de:	4b54      	ldr	r3, [pc, #336]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a53      	ldr	r2, [pc, #332]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80062e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fb fd63 	bl	8001db4 <HAL_GetTick>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f2:	f7fb fd5f 	bl	8001db4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e0e3      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006304:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f0      	bne.n	80062f2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006310:	4b47      	ldr	r3, [pc, #284]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006314:	4b48      	ldr	r3, [pc, #288]	; (8006438 <HAL_RCC_OscConfig+0x7b8>)
 8006316:	4013      	ands	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	430a      	orrs	r2, r1
 8006324:	4942      	ldr	r1, [pc, #264]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006326:	4313      	orrs	r3, r2
 8006328:	628b      	str	r3, [r1, #40]	; 0x28
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	3b01      	subs	r3, #1
 8006330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	3b01      	subs	r3, #1
 800633a:	025b      	lsls	r3, r3, #9
 800633c:	b29b      	uxth	r3, r3
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	3b01      	subs	r3, #1
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	3b01      	subs	r3, #1
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800635a:	4935      	ldr	r1, [pc, #212]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800635c:	4313      	orrs	r3, r2
 800635e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006360:	4b33      	ldr	r3, [pc, #204]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	4a32      	ldr	r2, [pc, #200]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800636c:	4b30      	ldr	r3, [pc, #192]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800636e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006370:	4b32      	ldr	r3, [pc, #200]	; (800643c <HAL_RCC_OscConfig+0x7bc>)
 8006372:	4013      	ands	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006378:	00d2      	lsls	r2, r2, #3
 800637a:	492d      	ldr	r1, [pc, #180]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800637c:	4313      	orrs	r3, r2
 800637e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006380:	4b2b      	ldr	r3, [pc, #172]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	f023 020c 	bic.w	r2, r3, #12
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	4928      	ldr	r1, [pc, #160]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800638e:	4313      	orrs	r3, r2
 8006390:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006392:	4b27      	ldr	r3, [pc, #156]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	f023 0202 	bic.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	4924      	ldr	r1, [pc, #144]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063a4:	4b22      	ldr	r3, [pc, #136]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a21      	ldr	r2, [pc, #132]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063bc:	4b1c      	ldr	r3, [pc, #112]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063c8:	4b19      	ldr	r3, [pc, #100]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	4a18      	ldr	r2, [pc, #96]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d4:	4b16      	ldr	r3, [pc, #88]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a15      	ldr	r2, [pc, #84]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fb fce8 	bl	8001db4 <HAL_GetTick>
 80063e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e8:	f7fb fce4 	bl	8001db4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e068      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x768>
 8006406:	e060      	b.n	80064ca <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006408:	4b09      	ldr	r3, [pc, #36]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a08      	ldr	r2, [pc, #32]	; (8006430 <HAL_RCC_OscConfig+0x7b0>)
 800640e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fb fcce 	bl	8001db4 <HAL_GetTick>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800641a:	e011      	b.n	8006440 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641c:	f7fb fcca 	bl	8001db4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d90a      	bls.n	8006440 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e04e      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
 800642e:	bf00      	nop
 8006430:	58024400 	.word	0x58024400
 8006434:	58024800 	.word	0x58024800
 8006438:	fffffc0c 	.word	0xfffffc0c
 800643c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006440:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <HAL_RCC_OscConfig+0x854>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e7      	bne.n	800641c <HAL_RCC_OscConfig+0x79c>
 800644c:	e03d      	b.n	80064ca <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800644e:	4b21      	ldr	r3, [pc, #132]	; (80064d4 <HAL_RCC_OscConfig+0x854>)
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006454:	4b1f      	ldr	r3, [pc, #124]	; (80064d4 <HAL_RCC_OscConfig+0x854>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b01      	cmp	r3, #1
 8006460:	d031      	beq.n	80064c6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f003 0203 	and.w	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800646c:	429a      	cmp	r2, r3
 800646e:	d12a      	bne.n	80064c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d122      	bne.n	80064c6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d11a      	bne.n	80064c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	0a5b      	lsrs	r3, r3, #9
 8006494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d111      	bne.n	80064c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d108      	bne.n	80064c6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	0e1b      	lsrs	r3, r3, #24
 80064b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d001      	beq.n	80064ca <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3730      	adds	r7, #48	; 0x30
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	58024400 	.word	0x58024400

080064d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e19c      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b8a      	ldr	r3, [pc, #552]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d910      	bls.n	800651c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b87      	ldr	r3, [pc, #540]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 020f 	bic.w	r2, r3, #15
 8006502:	4985      	ldr	r1, [pc, #532]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	4b83      	ldr	r3, [pc, #524]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d001      	beq.n	800651c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e184      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d010      	beq.n	800654a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	4b7b      	ldr	r3, [pc, #492]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006534:	429a      	cmp	r2, r3
 8006536:	d908      	bls.n	800654a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006538:	4b78      	ldr	r3, [pc, #480]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	4975      	ldr	r1, [pc, #468]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006546:	4313      	orrs	r3, r2
 8006548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	4b70      	ldr	r3, [pc, #448]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006562:	429a      	cmp	r2, r3
 8006564:	d908      	bls.n	8006578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006566:	4b6d      	ldr	r3, [pc, #436]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	496a      	ldr	r1, [pc, #424]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006574:	4313      	orrs	r3, r2
 8006576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	d010      	beq.n	80065a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	4b64      	ldr	r3, [pc, #400]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006590:	429a      	cmp	r2, r3
 8006592:	d908      	bls.n	80065a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006594:	4b61      	ldr	r3, [pc, #388]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	495e      	ldr	r1, [pc, #376]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d010      	beq.n	80065d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69da      	ldr	r2, [r3, #28]
 80065b6:	4b59      	ldr	r3, [pc, #356]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065be:	429a      	cmp	r2, r3
 80065c0:	d908      	bls.n	80065d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065c2:	4b56      	ldr	r3, [pc, #344]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4953      	ldr	r1, [pc, #332]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d010      	beq.n	8006602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	4b4d      	ldr	r3, [pc, #308]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d908      	bls.n	8006602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f0:	4b4a      	ldr	r3, [pc, #296]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f023 020f 	bic.w	r2, r3, #15
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	4947      	ldr	r1, [pc, #284]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d055      	beq.n	80066ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800660e:	4b43      	ldr	r3, [pc, #268]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4940      	ldr	r1, [pc, #256]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800661c:	4313      	orrs	r3, r2
 800661e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d107      	bne.n	8006638 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006628:	4b3c      	ldr	r3, [pc, #240]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d121      	bne.n	8006678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0f6      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d107      	bne.n	8006650 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006640:	4b36      	ldr	r3, [pc, #216]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d115      	bne.n	8006678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0ea      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d107      	bne.n	8006668 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006658:	4b30      	ldr	r3, [pc, #192]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0de      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006668:	4b2c      	ldr	r3, [pc, #176]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0d6      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f023 0207 	bic.w	r2, r3, #7
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4925      	ldr	r1, [pc, #148]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 8006686:	4313      	orrs	r3, r2
 8006688:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668a:	f7fb fb93 	bl	8001db4 <HAL_GetTick>
 800668e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006690:	e00a      	b.n	80066a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006692:	f7fb fb8f 	bl	8001db4 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e0be      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a8:	4b1c      	ldr	r3, [pc, #112]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d1eb      	bne.n	8006692 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d010      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	4b14      	ldr	r3, [pc, #80]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d208      	bcs.n	80066e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d6:	4b11      	ldr	r3, [pc, #68]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f023 020f 	bic.w	r2, r3, #15
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	490e      	ldr	r1, [pc, #56]	; (800671c <HAL_RCC_ClockConfig+0x244>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d214      	bcs.n	8006720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 020f 	bic.w	r2, r3, #15
 80066fe:	4906      	ldr	r1, [pc, #24]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006706:	4b04      	ldr	r3, [pc, #16]	; (8006718 <HAL_RCC_ClockConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d005      	beq.n	8006720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e086      	b.n	8006826 <HAL_RCC_ClockConfig+0x34e>
 8006718:	52002000 	.word	0x52002000
 800671c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	4b3f      	ldr	r3, [pc, #252]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006738:	429a      	cmp	r2, r3
 800673a:	d208      	bcs.n	800674e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800673c:	4b3c      	ldr	r3, [pc, #240]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	4939      	ldr	r1, [pc, #228]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 800674a:	4313      	orrs	r3, r2
 800674c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d010      	beq.n	800677c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	4b34      	ldr	r3, [pc, #208]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006766:	429a      	cmp	r2, r3
 8006768:	d208      	bcs.n	800677c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	492e      	ldr	r1, [pc, #184]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 8006778:	4313      	orrs	r3, r2
 800677a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d010      	beq.n	80067aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	4b28      	ldr	r3, [pc, #160]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006794:	429a      	cmp	r2, r3
 8006796:	d208      	bcs.n	80067aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	4922      	ldr	r1, [pc, #136]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d010      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d208      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	4917      	ldr	r1, [pc, #92]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067d8:	f000 f834 	bl	8006844 <HAL_RCC_GetSysClockFreq>
 80067dc:	4602      	mov	r2, r0
 80067de:	4b14      	ldr	r3, [pc, #80]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	4912      	ldr	r1, [pc, #72]	; (8006834 <HAL_RCC_ClockConfig+0x35c>)
 80067ea:	5ccb      	ldrb	r3, [r1, r3]
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
 80067f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	4a0d      	ldr	r2, [pc, #52]	; (8006834 <HAL_RCC_ClockConfig+0x35c>)
 8006800:	5cd3      	ldrb	r3, [r2, r3]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <HAL_RCC_ClockConfig+0x360>)
 800680e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <HAL_RCC_ClockConfig+0x364>)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <HAL_RCC_ClockConfig+0x368>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7fb fa80 	bl	8001d20 <HAL_InitTick>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	58024400 	.word	0x58024400
 8006834:	0800b890 	.word	0x0800b890
 8006838:	24000004 	.word	0x24000004
 800683c:	24000000 	.word	0x24000000
 8006840:	24000018 	.word	0x24000018

08006844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800684a:	4bb3      	ldr	r3, [pc, #716]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006852:	2b18      	cmp	r3, #24
 8006854:	f200 8155 	bhi.w	8006b02 <HAL_RCC_GetSysClockFreq+0x2be>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_RCC_GetSysClockFreq+0x1c>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	080068c5 	.word	0x080068c5
 8006864:	08006b03 	.word	0x08006b03
 8006868:	08006b03 	.word	0x08006b03
 800686c:	08006b03 	.word	0x08006b03
 8006870:	08006b03 	.word	0x08006b03
 8006874:	08006b03 	.word	0x08006b03
 8006878:	08006b03 	.word	0x08006b03
 800687c:	08006b03 	.word	0x08006b03
 8006880:	080068eb 	.word	0x080068eb
 8006884:	08006b03 	.word	0x08006b03
 8006888:	08006b03 	.word	0x08006b03
 800688c:	08006b03 	.word	0x08006b03
 8006890:	08006b03 	.word	0x08006b03
 8006894:	08006b03 	.word	0x08006b03
 8006898:	08006b03 	.word	0x08006b03
 800689c:	08006b03 	.word	0x08006b03
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	08006b03 	.word	0x08006b03
 80068a8:	08006b03 	.word	0x08006b03
 80068ac:	08006b03 	.word	0x08006b03
 80068b0:	08006b03 	.word	0x08006b03
 80068b4:	08006b03 	.word	0x08006b03
 80068b8:	08006b03 	.word	0x08006b03
 80068bc:	08006b03 	.word	0x08006b03
 80068c0:	080068f7 	.word	0x080068f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c4:	4b94      	ldr	r3, [pc, #592]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d009      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068d0:	4b91      	ldr	r3, [pc, #580]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	08db      	lsrs	r3, r3, #3
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	4a90      	ldr	r2, [pc, #576]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80068e2:	e111      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068e4:	4b8d      	ldr	r3, [pc, #564]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068e6:	61bb      	str	r3, [r7, #24]
    break;
 80068e8:	e10e      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80068ea:	4b8d      	ldr	r3, [pc, #564]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068ec:	61bb      	str	r3, [r7, #24]
    break;
 80068ee:	e10b      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80068f0:	4b8c      	ldr	r3, [pc, #560]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80068f2:	61bb      	str	r3, [r7, #24]
    break;
 80068f4:	e108      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068f6:	4b88      	ldr	r3, [pc, #544]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006900:	4b85      	ldr	r3, [pc, #532]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800690a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800690c:	4b82      	ldr	r3, [pc, #520]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006916:	4b80      	ldr	r3, [pc, #512]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691a:	08db      	lsrs	r3, r3, #3
 800691c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80e1 	beq.w	8006afc <HAL_RCC_GetSysClockFreq+0x2b8>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b02      	cmp	r3, #2
 800693e:	f000 8083 	beq.w	8006a48 <HAL_RCC_GetSysClockFreq+0x204>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b02      	cmp	r3, #2
 8006946:	f200 80a1 	bhi.w	8006a8c <HAL_RCC_GetSysClockFreq+0x248>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_RCC_GetSysClockFreq+0x114>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d056      	beq.n	8006a04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006956:	e099      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006958:	4b6f      	ldr	r3, [pc, #444]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d02d      	beq.n	80069c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006964:	4b6c      	ldr	r3, [pc, #432]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	08db      	lsrs	r3, r3, #3
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	4a6b      	ldr	r2, [pc, #428]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
 8006974:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	ee07 3a90 	vmov	s15, r3
 800697c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698e:	4b62      	ldr	r3, [pc, #392]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699e:	ed97 6a02 	vldr	s12, [r7, #8]
 80069a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069be:	e087      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b2c <HAL_RCC_GetSysClockFreq+0x2e8>
 80069ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d2:	4b51      	ldr	r3, [pc, #324]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a02:	e065      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a16:	4b40      	ldr	r3, [pc, #256]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a46:	e043      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5a:	4b2f      	ldr	r3, [pc, #188]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a8a:	e021      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9e:	4b1e      	ldr	r3, [pc, #120]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ace:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ada:	3301      	adds	r3, #1
 8006adc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af4:	ee17 3a90 	vmov	r3, s15
 8006af8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006afa:	e005      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
    break;
 8006b00:	e002      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b02:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b04:	61bb      	str	r3, [r7, #24]
    break;
 8006b06:	bf00      	nop
  }

  return sysclockfreq;
 8006b08:	69bb      	ldr	r3, [r7, #24]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3724      	adds	r7, #36	; 0x24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	03d09000 	.word	0x03d09000
 8006b20:	003d0900 	.word	0x003d0900
 8006b24:	007a1200 	.word	0x007a1200
 8006b28:	46000000 	.word	0x46000000
 8006b2c:	4c742400 	.word	0x4c742400
 8006b30:	4a742400 	.word	0x4a742400
 8006b34:	4af42400 	.word	0x4af42400

08006b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b3e:	f7ff fe81 	bl	8006844 <HAL_RCC_GetSysClockFreq>
 8006b42:	4602      	mov	r2, r0
 8006b44:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	490f      	ldr	r1, [pc, #60]	; (8006b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006b50:	5ccb      	ldrb	r3, [r1, r3]
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006b66:	5cd3      	ldrb	r3, [r2, r3]
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b72:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b76:	4a07      	ldr	r2, [pc, #28]	; (8006b94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b7c:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	0800b890 	.word	0x0800b890
 8006b90:	24000004 	.word	0x24000004
 8006b94:	24000000 	.word	0x24000000

08006b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b9c:	f7ff ffcc 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bae:	5ccb      	ldrb	r3, [r1, r3]
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	58024400 	.word	0x58024400
 8006bc0:	0800b890 	.word	0x0800b890

08006bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bc8:	f7ff ffb6 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4904      	ldr	r1, [pc, #16]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	58024400 	.word	0x58024400
 8006bec:	0800b890 	.word	0x0800b890

08006bf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d03f      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c14:	d02a      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c1a:	d824      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c20:	d018      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c26:	d81e      	bhi.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c30:	d007      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c32:	e018      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c34:	4bab      	ldr	r3, [pc, #684]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	4aaa      	ldr	r2, [pc, #680]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c40:	e015      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	2102      	movs	r1, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 f9cf 	bl	8007fec <RCCEx_PLL2_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c52:	e00c      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3324      	adds	r3, #36	; 0x24
 8006c58:	2102      	movs	r1, #2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fa78 	bl	8008150 <RCCEx_PLL3_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c64:	e003      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6a:	e000      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c74:	4b9b      	ldr	r3, [pc, #620]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c80:	4998      	ldr	r1, [pc, #608]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	650b      	str	r3, [r1, #80]	; 0x50
 8006c86:	e001      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d03d      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d826      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cbd 	.word	0x08006cbd
 8006cac:	08006ccb 	.word	0x08006ccb
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cf5 	.word	0x08006cf5
 8006cb8:	08006cf5 	.word	0x08006cf5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cbc:	4b89      	ldr	r3, [pc, #548]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	4a88      	ldr	r2, [pc, #544]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cc8:	e015      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 f98b 	bl	8007fec <RCCEx_PLL2_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cda:	e00c      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3324      	adds	r3, #36	; 0x24
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 fa34 	bl	8008150 <RCCEx_PLL3_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d109      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cfc:	4b79      	ldr	r3, [pc, #484]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	f023 0207 	bic.w	r2, r3, #7
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d08:	4976      	ldr	r1, [pc, #472]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006d0e:	e001      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d042      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d28:	d02b      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d825      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d30:	2bc0      	cmp	r3, #192	; 0xc0
 8006d32:	d028      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d34:	2bc0      	cmp	r3, #192	; 0xc0
 8006d36:	d821      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d38:	2b80      	cmp	r3, #128	; 0x80
 8006d3a:	d016      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d81d      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d007      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006d48:	e018      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4a:	4b66      	ldr	r3, [pc, #408]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	4a65      	ldr	r2, [pc, #404]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d56:	e017      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 f944 	bl	8007fec <RCCEx_PLL2_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d68:	e00e      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3324      	adds	r3, #36	; 0x24
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f9ed 	bl	8008150 <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d7a:	e005      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d80:	e002      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d8e:	4b55      	ldr	r3, [pc, #340]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	4952      	ldr	r1, [pc, #328]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	650b      	str	r3, [r1, #80]	; 0x50
 8006da0:	e001      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d049      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dbc:	d030      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc2:	d82a      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006dc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dc8:	d02c      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006dca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dce:	d824      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd4:	d018      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dda:	d81e      	bhi.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de4:	d007      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006de6:	e018      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de8:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a3d      	ldr	r2, [pc, #244]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006df4:	e017      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 f8f5 	bl	8007fec <RCCEx_PLL2_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e06:	e00e      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3324      	adds	r3, #36	; 0x24
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 f99e 	bl	8008150 <RCCEx_PLL3_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e18:	e005      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1e:	e002      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e20:	bf00      	nop
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e2c:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e3a:	492a      	ldr	r1, [pc, #168]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e40:	e001      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d04c      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e5c:	d030      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e62:	d82a      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e68:	d02c      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006e6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e6e:	d824      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e74:	d018      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e7a:	d81e      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e84:	d007      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e86:	e018      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e88:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e94:	e017      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 f8a5 	bl	8007fec <RCCEx_PLL2_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ea6:	e00e      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 f94e 	bl	8008150 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eb8:	e005      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebe:	e002      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eda:	4902      	ldr	r1, [pc, #8]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee0:	e004      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006ee2:	bf00      	nop
 8006ee4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d032      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efc:	2b30      	cmp	r3, #48	; 0x30
 8006efe:	d01c      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f00:	2b30      	cmp	r3, #48	; 0x30
 8006f02:	d817      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d00c      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d813      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d016      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d10f      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f14:	4baf      	ldr	r3, [pc, #700]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4aae      	ldr	r2, [pc, #696]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f20:	e00e      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 f85f 	bl	8007fec <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f32:	e005      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
      break;
 8006f38:	e002      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f46:	4ba3      	ldr	r3, [pc, #652]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	49a0      	ldr	r1, [pc, #640]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f58:	e001      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d047      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f72:	d030      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f78:	d82a      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f7e:	d02c      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006f80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f84:	d824      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d018      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f90:	d81e      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9a:	d007      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006f9c:	e018      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9e:	4b8d      	ldr	r3, [pc, #564]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a8c      	ldr	r2, [pc, #560]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006faa:	e017      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f81a 	bl	8007fec <RCCEx_PLL2_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fbc:	e00e      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3324      	adds	r3, #36	; 0x24
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 f8c3 	bl	8008150 <RCCEx_PLL3_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fce:	e005      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd4:	e002      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fe2:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fee:	4979      	ldr	r1, [pc, #484]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ff4:	e001      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d049      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800700e:	d02e      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007014:	d828      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800701a:	d02a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800701c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007020:	d822      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007026:	d026      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800702c:	d81c      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800702e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007032:	d010      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007038:	d816      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01d      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800703e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007042:	d111      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	2101      	movs	r1, #1
 800704a:	4618      	mov	r0, r3
 800704c:	f000 ffce 	bl	8007fec <RCCEx_PLL2_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007054:	e012      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3324      	adds	r3, #36	; 0x24
 800705a:	2101      	movs	r1, #1
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f877 	bl	8008150 <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007066:	e009      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
      break;
 800706c:	e006      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800706e:	bf00      	nop
 8007070:	e004      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007072:	bf00      	nop
 8007074:	e002      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007076:	bf00      	nop
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800707a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007082:	4b54      	ldr	r3, [pc, #336]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007086:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	4951      	ldr	r1, [pc, #324]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007090:	4313      	orrs	r3, r2
 8007092:	650b      	str	r3, [r1, #80]	; 0x50
 8007094:	e001      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d04b      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b0:	d02e      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80070b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b6:	d828      	bhi.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d02a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d822      	bhi.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070c8:	d026      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80070ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070ce:	d81c      	bhi.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d4:	d010      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070da:	d816      	bhi.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01d      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80070e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070e4:	d111      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2101      	movs	r1, #1
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 ff7d 	bl	8007fec <RCCEx_PLL2_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070f6:	e012      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3324      	adds	r3, #36	; 0x24
 80070fc:	2101      	movs	r1, #1
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 f826 	bl	8008150 <RCCEx_PLL3_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007108:	e009      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
      break;
 800710e:	e006      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007110:	bf00      	nop
 8007112:	e004      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007114:	bf00      	nop
 8007116:	e002      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007118:	bf00      	nop
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800711c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007124:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007128:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007132:	4928      	ldr	r1, [pc, #160]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007134:	4313      	orrs	r3, r2
 8007136:	658b      	str	r3, [r1, #88]	; 0x58
 8007138:	e001      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02f      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800714e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007152:	d00e      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007158:	d814      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d015      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800715e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007162:	d10f      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007164:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800716a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007170:	e00c      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	2101      	movs	r1, #1
 8007178:	4618      	mov	r0, r3
 800717a:	f000 ff37 	bl	8007fec <RCCEx_PLL2_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007182:	e003      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
      break;
 8007188:	e000      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800718a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007192:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719e:	490d      	ldr	r1, [pc, #52]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	650b      	str	r3, [r1, #80]	; 0x50
 80071a4:	e001      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d033      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d81c      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071ff 	.word	0x080071ff
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071e7 	.word	0x080071e7
 80071d0:	080071ff 	.word	0x080071ff
 80071d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d8:	4bb8      	ldr	r3, [pc, #736]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4ab7      	ldr	r2, [pc, #732]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fefd 	bl	8007fec <RCCEx_PLL2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071f6:	e003      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	75fb      	strb	r3, [r7, #23]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80071fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007206:	4bad      	ldr	r3, [pc, #692]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720a:	f023 0203 	bic.w	r2, r3, #3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	49aa      	ldr	r1, [pc, #680]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007214:	4313      	orrs	r3, r2
 8007216:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007218:	e001      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8086 	beq.w	8007338 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800722c:	4ba4      	ldr	r3, [pc, #656]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4aa3      	ldr	r2, [pc, #652]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007238:	f7fa fdbc 	bl	8001db4 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800723e:	e009      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007240:	f7fa fdb8 	bl	8001db4 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	; 0x64
 800724c:	d902      	bls.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	75fb      	strb	r3, [r7, #23]
        break;
 8007252:	e005      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007254:	4b9a      	ldr	r3, [pc, #616]	; (80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0ef      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d166      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007266:	4b95      	ldr	r3, [pc, #596]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007270:	4053      	eors	r3, r2
 8007272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007276:	2b00      	cmp	r3, #0
 8007278:	d013      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800727a:	4b90      	ldr	r3, [pc, #576]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007282:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007284:	4b8d      	ldr	r3, [pc, #564]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	4a8c      	ldr	r2, [pc, #560]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800728a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800728e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007290:	4b8a      	ldr	r3, [pc, #552]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	4a89      	ldr	r2, [pc, #548]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800729c:	4a87      	ldr	r2, [pc, #540]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ac:	d115      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fa fd81 	bl	8001db4 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b4:	e00b      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b6:	f7fa fd7d 	bl	8001db4 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d902      	bls.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	75fb      	strb	r3, [r7, #23]
            break;
 80072cc:	e005      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ce:	4b7b      	ldr	r3, [pc, #492]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0ed      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d126      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ee:	d10d      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80072f0:	4b72      	ldr	r3, [pc, #456]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072fe:	0919      	lsrs	r1, r3, #4
 8007300:	4b70      	ldr	r3, [pc, #448]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007302:	400b      	ands	r3, r1
 8007304:	496d      	ldr	r1, [pc, #436]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007306:	4313      	orrs	r3, r2
 8007308:	610b      	str	r3, [r1, #16]
 800730a:	e005      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800730c:	4b6b      	ldr	r3, [pc, #428]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	4a6a      	ldr	r2, [pc, #424]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007312:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007316:	6113      	str	r3, [r2, #16]
 8007318:	4b68      	ldr	r3, [pc, #416]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800731a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007326:	4965      	ldr	r1, [pc, #404]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007328:	4313      	orrs	r3, r2
 800732a:	670b      	str	r3, [r1, #112]	; 0x70
 800732c:	e004      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	75bb      	strb	r3, [r7, #22]
 8007332:	e001      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d07e      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007348:	2b28      	cmp	r3, #40	; 0x28
 800734a:	d867      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800734c:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007423 	.word	0x08007423
 8007358:	0800741d 	.word	0x0800741d
 800735c:	0800741d 	.word	0x0800741d
 8007360:	0800741d 	.word	0x0800741d
 8007364:	0800741d 	.word	0x0800741d
 8007368:	0800741d 	.word	0x0800741d
 800736c:	0800741d 	.word	0x0800741d
 8007370:	0800741d 	.word	0x0800741d
 8007374:	080073f9 	.word	0x080073f9
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800741d 	.word	0x0800741d
 8007380:	0800741d 	.word	0x0800741d
 8007384:	0800741d 	.word	0x0800741d
 8007388:	0800741d 	.word	0x0800741d
 800738c:	0800741d 	.word	0x0800741d
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800740b 	.word	0x0800740b
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	0800741d 	.word	0x0800741d
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	08007423 	.word	0x08007423
 80073b8:	0800741d 	.word	0x0800741d
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	08007423 	.word	0x08007423
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	08007423 	.word	0x08007423
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3304      	adds	r3, #4
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fdf4 	bl	8007fec <RCCEx_PLL2_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007408:	e00c      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3324      	adds	r3, #36	; 0x24
 800740e:	2101      	movs	r1, #1
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fe9d 	bl	8008150 <RCCEx_PLL3_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	e000      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800742a:	4b24      	ldr	r3, [pc, #144]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800742c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007436:	4921      	ldr	r1, [pc, #132]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007438:	4313      	orrs	r3, r2
 800743a:	654b      	str	r3, [r1, #84]	; 0x54
 800743c:	e001      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d03e      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	2b05      	cmp	r3, #5
 8007454:	d820      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	0800749f 	.word	0x0800749f
 8007460:	08007475 	.word	0x08007475
 8007464:	08007487 	.word	0x08007487
 8007468:	0800749f 	.word	0x0800749f
 800746c:	0800749f 	.word	0x0800749f
 8007470:	0800749f 	.word	0x0800749f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	2101      	movs	r1, #1
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fdb6 	bl	8007fec <RCCEx_PLL2_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007484:	e00c      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3324      	adds	r3, #36	; 0x24
 800748a:	2101      	movs	r1, #1
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fe5f 	bl	8008150 <RCCEx_PLL3_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007496:	e003      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
      break;
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800749e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d110      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074a6:	4b05      	ldr	r3, [pc, #20]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f023 0207 	bic.w	r2, r3, #7
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b2:	4902      	ldr	r1, [pc, #8]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	654b      	str	r3, [r1, #84]	; 0x54
 80074b8:	e008      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80074ba:	bf00      	nop
 80074bc:	58024400 	.word	0x58024400
 80074c0:	58024800 	.word	0x58024800
 80074c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d039      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d820      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	0800752b 	.word	0x0800752b
 80074ec:	08007501 	.word	0x08007501
 80074f0:	08007513 	.word	0x08007513
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fd70 	bl	8007fec <RCCEx_PLL2_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007510:	e00c      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fe19 	bl	8008150 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007522:	e003      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]
      break;
 8007528:	e000      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800752a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007532:	4bb7      	ldr	r3, [pc, #732]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007536:	f023 0207 	bic.w	r2, r3, #7
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007540:	49b3      	ldr	r1, [pc, #716]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007542:	4313      	orrs	r3, r2
 8007544:	658b      	str	r3, [r1, #88]	; 0x58
 8007546:	e001      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d04b      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800755e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007562:	d02e      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007568:	d828      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756e:	d02a      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007574:	d822      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800757a:	d026      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800757c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007580:	d81c      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007586:	d010      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758c:	d816      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01d      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007596:	d111      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3304      	adds	r3, #4
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fd24 	bl	8007fec <RCCEx_PLL2_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075a8:	e012      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3324      	adds	r3, #36	; 0x24
 80075ae:	2102      	movs	r1, #2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fdcd 	bl	8008150 <RCCEx_PLL3_Config>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80075ba:	e009      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	75fb      	strb	r3, [r7, #23]
      break;
 80075c0:	e006      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075c2:	bf00      	nop
 80075c4:	e004      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80075ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10a      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075d6:	4b8e      	ldr	r3, [pc, #568]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e4:	498a      	ldr	r1, [pc, #552]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	654b      	str	r3, [r1, #84]	; 0x54
 80075ea:	e001      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d04b      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007602:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007606:	d02e      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007608:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800760c:	d828      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007612:	d02a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007618:	d822      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800761a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800761e:	d026      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007624:	d81c      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762a:	d010      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800762c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007630:	d816      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01d      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800763a:	d111      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fcd2 	bl	8007fec <RCCEx_PLL2_Config>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800764c:	e012      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3324      	adds	r3, #36	; 0x24
 8007652:	2102      	movs	r1, #2
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fd7b 	bl	8008150 <RCCEx_PLL3_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800765e:	e009      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75fb      	strb	r3, [r7, #23]
      break;
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007666:	bf00      	nop
 8007668:	e004      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800767a:	4b65      	ldr	r3, [pc, #404]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007688:	4961      	ldr	r1, [pc, #388]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800768a:	4313      	orrs	r3, r2
 800768c:	658b      	str	r3, [r1, #88]	; 0x58
 800768e:	e001      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769c:	2b00      	cmp	r3, #0
 800769e:	d04b      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076aa:	d02e      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80076ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076b0:	d828      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b6:	d02a      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80076b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076bc:	d822      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076c2:	d026      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80076c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80076c8:	d81c      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ce:	d010      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80076d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076d4:	d816      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01d      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80076da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076de:	d111      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3304      	adds	r3, #4
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fc80 	bl	8007fec <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076f0:	e012      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3324      	adds	r3, #36	; 0x24
 80076f6:	2102      	movs	r1, #2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fd29 	bl	8008150 <RCCEx_PLL3_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007702:	e009      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	e006      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800770a:	bf00      	nop
 800770c:	e004      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800770e:	bf00      	nop
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800771e:	4b3c      	ldr	r3, [pc, #240]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800772c:	4938      	ldr	r1, [pc, #224]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800772e:	4313      	orrs	r3, r2
 8007730:	658b      	str	r3, [r1, #88]	; 0x58
 8007732:	e001      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01a      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774e:	d10a      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	2102      	movs	r1, #2
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fcfa 	bl	8008150 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007766:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007774:	4926      	ldr	r1, [pc, #152]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007776:	4313      	orrs	r3, r2
 8007778:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01a      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800778c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007790:	d10a      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3324      	adds	r3, #36	; 0x24
 8007796:	2102      	movs	r1, #2
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fcd9 	bl	8008150 <RCCEx_PLL3_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077a8:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b6:	4916      	ldr	r1, [pc, #88]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d036      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d2:	d01f      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80077d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d8:	d817      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80077de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e2:	d009      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80077e4:	e011      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3304      	adds	r3, #4
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fbfd 	bl	8007fec <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077f6:	e00e      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fca6 	bl	8008150 <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007808:	e005      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007810:	58024400 	.word	0x58024400
      break;
 8007814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800781c:	4b93      	ldr	r3, [pc, #588]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800782a:	4990      	ldr	r1, [pc, #576]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800782c:	4313      	orrs	r3, r2
 800782e:	658b      	str	r3, [r1, #88]	; 0x58
 8007830:	e001      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d033      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800784c:	d01c      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800784e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007852:	d816      	bhi.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007858:	d003      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800785a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800785e:	d007      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007860:	e00f      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007862:	4b82      	ldr	r3, [pc, #520]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	4a81      	ldr	r2, [pc, #516]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800786e:	e00c      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3324      	adds	r3, #36	; 0x24
 8007874:	2101      	movs	r1, #1
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fc6a 	bl	8008150 <RCCEx_PLL3_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007880:	e003      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
      break;
 8007886:	e000      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007890:	4b76      	ldr	r3, [pc, #472]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	4973      	ldr	r1, [pc, #460]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	654b      	str	r3, [r1, #84]	; 0x54
 80078a4:	e001      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d029      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80078be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c2:	d007      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80078c4:	e00f      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c6:	4b69      	ldr	r3, [pc, #420]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	4a68      	ldr	r2, [pc, #416]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078d2:	e00b      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	2102      	movs	r1, #2
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fb86 	bl	8007fec <RCCEx_PLL2_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078e4:	e002      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078f2:	4b5e      	ldr	r3, [pc, #376]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80078f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	495b      	ldr	r1, [pc, #364]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007900:	4313      	orrs	r3, r2
 8007902:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007904:	e001      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3324      	adds	r3, #36	; 0x24
 800791a:	2102      	movs	r1, #2
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fc17 	bl	8008150 <RCCEx_PLL3_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d030      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007940:	d017      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d811      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794c:	d013      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800794e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007952:	d80b      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d010      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795c:	d106      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795e:	4b43      	ldr	r3, [pc, #268]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	4a42      	ldr	r2, [pc, #264]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800796a:	e007      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
      break;
 8007970:	e004      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007972:	bf00      	nop
 8007974:	e002      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800797a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007982:	4b3a      	ldr	r3, [pc, #232]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800798e:	4937      	ldr	r1, [pc, #220]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007990:	4313      	orrs	r3, r2
 8007992:	654b      	str	r3, [r1, #84]	; 0x54
 8007994:	e001      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079a6:	4b31      	ldr	r3, [pc, #196]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	492e      	ldr	r1, [pc, #184]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80079c4:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079d2:	4926      	ldr	r1, [pc, #152]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079e4:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f0:	491e      	ldr	r1, [pc, #120]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a02:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a0c:	6113      	str	r3, [r2, #16]
 8007a0e:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a10:	691a      	ldr	r2, [r3, #16]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a18:	4914      	ldr	r1, [pc, #80]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da08      	bge.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a26:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a32:	490e      	ldr	r1, [pc, #56]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a44:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a52:	4906      	ldr	r1, [pc, #24]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a58:	7dbb      	ldrb	r3, [r7, #22]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	58024400 	.word	0x58024400

08007a70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a74:	f7ff f860 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	4904      	ldr	r1, [pc, #16]	; (8007a98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a86:	5ccb      	ldrb	r3, [r1, r3]
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	58024400 	.word	0x58024400
 8007a98:	0800b890 	.word	0x0800b890

08007a9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b089      	sub	sp, #36	; 0x24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aa4:	4ba1      	ldr	r3, [pc, #644]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007aae:	4b9f      	ldr	r3, [pc, #636]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	0b1b      	lsrs	r3, r3, #12
 8007ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ab8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007aba:	4b9c      	ldr	r3, [pc, #624]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	091b      	lsrs	r3, r3, #4
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ac6:	4b99      	ldr	r3, [pc, #612]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	08db      	lsrs	r3, r3, #3
 8007acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8111 	beq.w	8007d0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	f000 8083 	beq.w	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	f200 80a1 	bhi.w	8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d056      	beq.n	8007bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b06:	e099      	b.n	8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b08:	4b88      	ldr	r3, [pc, #544]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d02d      	beq.n	8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b14:	4b85      	ldr	r3, [pc, #532]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	08db      	lsrs	r3, r3, #3
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	4a84      	ldr	r2, [pc, #528]	; (8007d30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3e:	4b7b      	ldr	r3, [pc, #492]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b6e:	e087      	b.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b82:	4b6a      	ldr	r3, [pc, #424]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bb2:	e065      	b.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bf6:	e043      	b.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b48      	ldr	r3, [pc, #288]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c3a:	e021      	b.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4e:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c80:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	0a5b      	lsrs	r3, r3, #9
 8007c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca6:	ee17 2a90 	vmov	r2, s15
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007cae:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb8:	ee07 3a90 	vmov	s15, r3
 8007cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd4:	ee17 2a90 	vmov	r2, s15
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007cdc:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	0e1b      	lsrs	r3, r3, #24
 8007ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d02:	ee17 2a90 	vmov	r2, s15
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d0a:	e008      	b.n	8007d1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	609a      	str	r2, [r3, #8]
}
 8007d1e:	bf00      	nop
 8007d20:	3724      	adds	r7, #36	; 0x24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	03d09000 	.word	0x03d09000
 8007d34:	46000000 	.word	0x46000000
 8007d38:	4c742400 	.word	0x4c742400
 8007d3c:	4a742400 	.word	0x4a742400
 8007d40:	4af42400 	.word	0x4af42400

08007d44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b089      	sub	sp, #36	; 0x24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d4c:	4ba1      	ldr	r3, [pc, #644]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d56:	4b9f      	ldr	r3, [pc, #636]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	0d1b      	lsrs	r3, r3, #20
 8007d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d62:	4b9c      	ldr	r3, [pc, #624]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d6e:	4b99      	ldr	r3, [pc, #612]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	fb02 f303 	mul.w	r3, r2, r3
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 8111 	beq.w	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	f000 8083 	beq.w	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	f200 80a1 	bhi.w	8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d056      	beq.n	8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007dae:	e099      	b.n	8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007db0:	4b88      	ldr	r3, [pc, #544]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d02d      	beq.n	8007e18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dbc:	4b85      	ldr	r3, [pc, #532]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	08db      	lsrs	r3, r3, #3
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	4a84      	ldr	r2, [pc, #528]	; (8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dcc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de6:	4b7b      	ldr	r3, [pc, #492]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e16:	e087      	b.n	8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2a:	4b6a      	ldr	r3, [pc, #424]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e5a:	e065      	b.n	8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6e:	4b59      	ldr	r3, [pc, #356]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e9e:	e043      	b.n	8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb2:	4b48      	ldr	r3, [pc, #288]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee2:	e021      	b.n	8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef6:	4b37      	ldr	r3, [pc, #220]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f28:	4b2a      	ldr	r3, [pc, #168]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	0a5b      	lsrs	r3, r3, #9
 8007f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f4e:	ee17 2a90 	vmov	r2, s15
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f56:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f60:	ee07 3a90 	vmov	s15, r3
 8007f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f7c:	ee17 2a90 	vmov	r2, s15
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f84:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	0e1b      	lsrs	r3, r3, #24
 8007f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007faa:	ee17 2a90 	vmov	r2, s15
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	609a      	str	r2, [r3, #8]
}
 8007fc6:	bf00      	nop
 8007fc8:	3724      	adds	r7, #36	; 0x24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	03d09000 	.word	0x03d09000
 8007fdc:	46000000 	.word	0x46000000
 8007fe0:	4c742400 	.word	0x4c742400
 8007fe4:	4a742400 	.word	0x4a742400
 8007fe8:	4af42400 	.word	0x4af42400

08007fec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ffa:	4b53      	ldr	r3, [pc, #332]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b03      	cmp	r3, #3
 8008004:	d101      	bne.n	800800a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e099      	b.n	800813e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800800a:	4b4f      	ldr	r3, [pc, #316]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a4e      	ldr	r2, [pc, #312]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008010:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008016:	f7f9 fecd 	bl	8001db4 <HAL_GetTick>
 800801a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800801c:	e008      	b.n	8008030 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800801e:	f7f9 fec9 	bl	8001db4 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e086      	b.n	800813e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008030:	4b45      	ldr	r3, [pc, #276]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f0      	bne.n	800801e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800803c:	4b42      	ldr	r3, [pc, #264]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	031b      	lsls	r3, r3, #12
 800804a:	493f      	ldr	r1, [pc, #252]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 800804c:	4313      	orrs	r3, r2
 800804e:	628b      	str	r3, [r1, #40]	; 0x28
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	3b01      	subs	r3, #1
 8008056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	3b01      	subs	r3, #1
 8008060:	025b      	lsls	r3, r3, #9
 8008062:	b29b      	uxth	r3, r3
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	3b01      	subs	r3, #1
 800806c:	041b      	lsls	r3, r3, #16
 800806e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	3b01      	subs	r3, #1
 800807a:	061b      	lsls	r3, r3, #24
 800807c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008080:	4931      	ldr	r1, [pc, #196]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008082:	4313      	orrs	r3, r2
 8008084:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008086:	4b30      	ldr	r3, [pc, #192]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	492d      	ldr	r1, [pc, #180]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008094:	4313      	orrs	r3, r2
 8008096:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008098:	4b2b      	ldr	r3, [pc, #172]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	f023 0220 	bic.w	r2, r3, #32
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	4928      	ldr	r1, [pc, #160]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080aa:	4b27      	ldr	r3, [pc, #156]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	4a26      	ldr	r2, [pc, #152]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	f023 0310 	bic.w	r3, r3, #16
 80080b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ba:	4b24      	ldr	r3, [pc, #144]	; (800814c <RCCEx_PLL2_Config+0x160>)
 80080bc:	4013      	ands	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	69d2      	ldr	r2, [r2, #28]
 80080c2:	00d2      	lsls	r2, r2, #3
 80080c4:	4920      	ldr	r1, [pc, #128]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080ca:	4b1f      	ldr	r3, [pc, #124]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080d0:	f043 0310 	orr.w	r3, r3, #16
 80080d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a19      	ldr	r2, [pc, #100]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080e8:	e00f      	b.n	800810a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d106      	bne.n	80080fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080f0:	4b15      	ldr	r3, [pc, #84]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	4a14      	ldr	r2, [pc, #80]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 80080f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080fc:	e005      	b.n	800810a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	4a11      	ldr	r2, [pc, #68]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008108:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a0e      	ldr	r2, [pc, #56]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008116:	f7f9 fe4d 	bl	8001db4 <HAL_GetTick>
 800811a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800811c:	e008      	b.n	8008130 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800811e:	f7f9 fe49 	bl	8001db4 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e006      	b.n	800813e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <RCCEx_PLL2_Config+0x15c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0f0      	beq.n	800811e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	58024400 	.word	0x58024400
 800814c:	ffff0007 	.word	0xffff0007

08008150 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800815e:	4b53      	ldr	r3, [pc, #332]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b03      	cmp	r3, #3
 8008168:	d101      	bne.n	800816e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e099      	b.n	80082a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800816e:	4b4f      	ldr	r3, [pc, #316]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a4e      	ldr	r2, [pc, #312]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800817a:	f7f9 fe1b 	bl	8001db4 <HAL_GetTick>
 800817e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008180:	e008      	b.n	8008194 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008182:	f7f9 fe17 	bl	8001db4 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d901      	bls.n	8008194 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e086      	b.n	80082a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008194:	4b45      	ldr	r3, [pc, #276]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1f0      	bne.n	8008182 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081a0:	4b42      	ldr	r3, [pc, #264]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	051b      	lsls	r3, r3, #20
 80081ae:	493f      	ldr	r1, [pc, #252]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	628b      	str	r3, [r1, #40]	; 0x28
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	025b      	lsls	r3, r3, #9
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	431a      	orrs	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	041b      	lsls	r3, r3, #16
 80081d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	3b01      	subs	r3, #1
 80081de:	061b      	lsls	r3, r3, #24
 80081e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081e4:	4931      	ldr	r1, [pc, #196]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081ea:	4b30      	ldr	r3, [pc, #192]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	492d      	ldr	r1, [pc, #180]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081fc:	4b2b      	ldr	r3, [pc, #172]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	4928      	ldr	r1, [pc, #160]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 800820a:	4313      	orrs	r3, r2
 800820c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800820e:	4b27      	ldr	r3, [pc, #156]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	4a26      	ldr	r2, [pc, #152]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 800821c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800821e:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <RCCEx_PLL3_Config+0x160>)
 8008220:	4013      	ands	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	69d2      	ldr	r2, [r2, #28]
 8008226:	00d2      	lsls	r2, r2, #3
 8008228:	4920      	ldr	r1, [pc, #128]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 800822a:	4313      	orrs	r3, r2
 800822c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800822e:	4b1f      	ldr	r3, [pc, #124]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d106      	bne.n	800824e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	4a19      	ldr	r2, [pc, #100]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800824a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800824c:	e00f      	b.n	800826e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d106      	bne.n	8008262 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a14      	ldr	r2, [pc, #80]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 800825a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800825e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008260:	e005      	b.n	800826e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	4a11      	ldr	r2, [pc, #68]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800826c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a0e      	ldr	r2, [pc, #56]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800827a:	f7f9 fd9b 	bl	8001db4 <HAL_GetTick>
 800827e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008280:	e008      	b.n	8008294 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008282:	f7f9 fd97 	bl	8001db4 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e006      	b.n	80082a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <RCCEx_PLL3_Config+0x15c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0f0      	beq.n	8008282 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	58024400 	.word	0x58024400
 80082b0:	ffff0007 	.word	0xffff0007

080082b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d067      	beq.n	8008396 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7f9 fa0c 	bl	80016f8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	22ca      	movs	r2, #202	; 0xca
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2253      	movs	r2, #83	; 0x53
 80082f6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fa49 	bl	8008790 <RTC_EnterInitMode>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d13b      	bne.n	8008380 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b23      	ldr	r3, [pc, #140]	; (80083a0 <HAL_RTC_Init+0xec>)
 8008314:	400b      	ands	r3, r1
 8008316:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6899      	ldr	r1, [r3, #8]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	0419      	lsls	r1, r3, #16
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fa55 	bl	80087f8 <RTC_ExitInitMode>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d113      	bne.n	8008380 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0203 	bic.w	r2, r2, #3
 8008366:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69da      	ldr	r2, [r3, #28]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	ff8fffbf 	.word	0xff8fffbf

080083a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_RTC_SetTime+0x1a>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e089      	b.n	80084d2 <HAL_RTC_SetTime+0x12e>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2202      	movs	r2, #2
 80083ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	22ca      	movs	r2, #202	; 0xca
 80083d4:	625a      	str	r2, [r3, #36]	; 0x24
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2253      	movs	r2, #83	; 0x53
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f9d6 	bl	8008790 <RTC_EnterInitMode>
 80083e4:	4603      	mov	r3, r0
 80083e6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80083e8:	7cfb      	ldrb	r3, [r7, #19]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d161      	bne.n	80084b2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d126      	bne.n	8008442 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2200      	movs	r2, #0
 8008406:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fa31 	bl	8008874 <RTC_ByteToBcd2>
 8008412:	4603      	mov	r3, r0
 8008414:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fa2a 	bl	8008874 <RTC_ByteToBcd2>
 8008420:	4603      	mov	r3, r0
 8008422:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008424:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	789b      	ldrb	r3, [r3, #2]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fa22 	bl	8008874 <RTC_ByteToBcd2>
 8008430:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008432:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	78db      	ldrb	r3, [r3, #3]
 800843a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	e018      	b.n	8008474 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008462:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008468:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	78db      	ldrb	r3, [r3, #3]
 800846e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	6979      	ldr	r1, [r7, #20]
 800847a:	4b18      	ldr	r3, [pc, #96]	; (80084dc <HAL_RTC_SetTime+0x138>)
 800847c:	400b      	ands	r3, r1
 800847e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800848e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6899      	ldr	r1, [r3, #8]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	431a      	orrs	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f9a5 	bl	80087f8 <RTC_ExitInitMode>
 80084ae:	4603      	mov	r3, r0
 80084b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	22ff      	movs	r2, #255	; 0xff
 80084b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80084ba:	7cfb      	ldrb	r3, [r7, #19]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80084d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd90      	pop	{r4, r7, pc}
 80084da:	bf00      	nop
 80084dc:	007f7f7f 	.word	0x007f7f7f

080084e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b22      	ldr	r3, [pc, #136]	; (8008594 <HAL_RTC_GetTime+0xb4>)
 800850c:	4013      	ands	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	0c1b      	lsrs	r3, r3, #16
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	0a1b      	lsrs	r3, r3, #8
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008538:	b2da      	uxtb	r2, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	0d9b      	lsrs	r3, r3, #22
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	b2da      	uxtb	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11a      	bne.n	800858a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f9ab 	bl	80088b4 <RTC_Bcd2ToByte>
 800855e:	4603      	mov	r3, r0
 8008560:	461a      	mov	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f9a2 	bl	80088b4 <RTC_Bcd2ToByte>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	789b      	ldrb	r3, [r3, #2]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f999 	bl	80088b4 <RTC_Bcd2ToByte>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	007f7f7f 	.word	0x007f7f7f

08008598 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008598:	b590      	push	{r4, r7, lr}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_RTC_SetDate+0x1a>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e073      	b.n	800869a <HAL_RTC_SetDate+0x102>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10e      	bne.n	80085e6 <HAL_RTC_SetDate+0x4e>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d008      	beq.n	80085e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	f023 0310 	bic.w	r3, r3, #16
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	330a      	adds	r3, #10
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11c      	bne.n	8008626 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f93f 	bl	8008874 <RTC_ByteToBcd2>
 80085f6:	4603      	mov	r3, r0
 80085f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f938 	bl	8008874 <RTC_ByteToBcd2>
 8008604:	4603      	mov	r3, r0
 8008606:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008608:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	789b      	ldrb	r3, [r3, #2]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f930 	bl	8008874 <RTC_ByteToBcd2>
 8008614:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008616:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e00e      	b.n	8008644 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	78db      	ldrb	r3, [r3, #3]
 800862a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008632:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008638:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	22ca      	movs	r2, #202	; 0xca
 800864a:	625a      	str	r2, [r3, #36]	; 0x24
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2253      	movs	r2, #83	; 0x53
 8008652:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 f89b 	bl	8008790 <RTC_EnterInitMode>
 800865a:	4603      	mov	r3, r0
 800865c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800865e:	7cfb      	ldrb	r3, [r7, #19]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	6979      	ldr	r1, [r7, #20]
 800866a:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <HAL_RTC_SetDate+0x10c>)
 800866c:	400b      	ands	r3, r1
 800866e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f8c1 	bl	80087f8 <RTC_ExitInitMode>
 8008676:	4603      	mov	r3, r0
 8008678:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	22ff      	movs	r2, #255	; 0xff
 8008680:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008682:	7cfb      	ldrb	r3, [r7, #19]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008698:	7cfb      	ldrb	r3, [r7, #19]


}
 800869a:	4618      	mov	r0, r3
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd90      	pop	{r4, r7, pc}
 80086a2:	bf00      	nop
 80086a4:	00ffff3f 	.word	0x00ffff3f

080086a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	4b21      	ldr	r3, [pc, #132]	; (8008740 <HAL_RTC_GetDate+0x98>)
 80086bc:	4013      	ands	r3, r2
 80086be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	0c1b      	lsrs	r3, r3, #16
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	0a1b      	lsrs	r3, r3, #8
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 031f 	and.w	r3, r3, #31
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	0b5b      	lsrs	r3, r3, #13
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d11a      	bne.n	8008734 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	78db      	ldrb	r3, [r3, #3]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f8d6 	bl	80088b4 <RTC_Bcd2ToByte>
 8008708:	4603      	mov	r3, r0
 800870a:	461a      	mov	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f8cd 	bl	80088b4 <RTC_Bcd2ToByte>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	789b      	ldrb	r3, [r3, #2]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 f8c4 	bl	80088b4 <RTC_Bcd2ToByte>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	00ffff3f 	.word	0x00ffff3f

08008744 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800875a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800875c:	f7f9 fb2a 	bl	8001db4 <HAL_GetTick>
 8008760:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008762:	e009      	b.n	8008778 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008764:	f7f9 fb26 	bl	8001db4 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008772:	d901      	bls.n	8008778 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e007      	b.n	8008788 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0ee      	beq.n	8008764 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d120      	bne.n	80087ec <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80087b4:	f7f9 fafe 	bl	8001db4 <HAL_GetTick>
 80087b8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80087ba:	e00d      	b.n	80087d8 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80087bc:	f7f9 fafa 	bl	8001db4 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ca:	d905      	bls.n	80087d8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2203      	movs	r2, #3
 80087d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d102      	bne.n	80087ec <RTC_EnterInitMode+0x5c>
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d1e7      	bne.n	80087bc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <RTC_ExitInitMode+0x78>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	4a19      	ldr	r2, [pc, #100]	; (8008870 <RTC_ExitInitMode+0x78>)
 800880a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800880e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008810:	4b17      	ldr	r3, [pc, #92]	; (8008870 <RTC_ExitInitMode+0x78>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10c      	bne.n	8008836 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ff91 	bl	8008744 <HAL_RTC_WaitForSynchro>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01e      	beq.n	8008866 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2203      	movs	r2, #3
 800882c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	73fb      	strb	r3, [r7, #15]
 8008834:	e017      	b.n	8008866 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008836:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <RTC_ExitInitMode+0x78>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	4a0d      	ldr	r2, [pc, #52]	; (8008870 <RTC_ExitInitMode+0x78>)
 800883c:	f023 0320 	bic.w	r3, r3, #32
 8008840:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ff7e 	bl	8008744 <HAL_RTC_WaitForSynchro>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2203      	movs	r2, #3
 8008852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <RTC_ExitInitMode+0x78>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	4a04      	ldr	r2, [pc, #16]	; (8008870 <RTC_ExitInitMode+0x78>)
 8008860:	f043 0320 	orr.w	r3, r3, #32
 8008864:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	58004000 	.word	0x58004000

08008874 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8008886:	e005      	b.n	8008894 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3b0a      	subs	r3, #10
 8008892:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	2b09      	cmp	r3, #9
 8008898:	d8f6      	bhi.n	8008888 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	7afb      	ldrb	r3, [r7, #11]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b2db      	uxtb	r3, r3
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	091b      	lsrs	r3, r3, #4
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	0092      	lsls	r2, r2, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	4413      	add	r3, r2
 80088da:	b2db      	uxtb	r3, r3
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e0f1      	b.n	8008ade <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a78      	ldr	r2, [pc, #480]	; (8008ae8 <HAL_SPI_Init+0x200>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <HAL_SPI_Init+0x42>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a77      	ldr	r2, [pc, #476]	; (8008aec <HAL_SPI_Init+0x204>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00a      	beq.n	800892a <HAL_SPI_Init+0x42>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a75      	ldr	r2, [pc, #468]	; (8008af0 <HAL_SPI_Init+0x208>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d005      	beq.n	800892a <HAL_SPI_Init+0x42>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d901      	bls.n	800892a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e0d9      	b.n	8008ade <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 ff6c 	bl	8009808 <SPI_GetPacketSize>
 8008930:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a6c      	ldr	r2, [pc, #432]	; (8008ae8 <HAL_SPI_Init+0x200>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00c      	beq.n	8008956 <HAL_SPI_Init+0x6e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a6a      	ldr	r2, [pc, #424]	; (8008aec <HAL_SPI_Init+0x204>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <HAL_SPI_Init+0x6e>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a69      	ldr	r2, [pc, #420]	; (8008af0 <HAL_SPI_Init+0x208>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d002      	beq.n	8008956 <HAL_SPI_Init+0x6e>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b08      	cmp	r3, #8
 8008954:	d811      	bhi.n	800897a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800895a:	4a63      	ldr	r2, [pc, #396]	; (8008ae8 <HAL_SPI_Init+0x200>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d009      	beq.n	8008974 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a61      	ldr	r2, [pc, #388]	; (8008aec <HAL_SPI_Init+0x204>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <HAL_SPI_Init+0x8c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a60      	ldr	r2, [pc, #384]	; (8008af0 <HAL_SPI_Init+0x208>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d104      	bne.n	800897e <HAL_SPI_Init+0x96>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b10      	cmp	r3, #16
 8008978:	d901      	bls.n	800897e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e0af      	b.n	8008ade <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f8 fee0 	bl	8001758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0201 	bic.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80089ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089c4:	d119      	bne.n	80089fa <HAL_SPI_Init+0x112>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ce:	d103      	bne.n	80089d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10c      	bne.n	80089fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80089e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e8:	d107      	bne.n	80089fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	431a      	orrs	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0c:	ea42 0103 	orr.w	r1, r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a5a:	ea42 0103 	orr.w	r1, r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d113      	bne.n	8008a9a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a84:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a98:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40013000 	.word	0x40013000
 8008aec:	40003800 	.word	0x40003800
 8008af0:	40003c00 	.word	0x40003c00

08008af4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08a      	sub	sp, #40	; 0x28
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	4613      	mov	r3, r2
 8008b02:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3320      	adds	r3, #32
 8008b0a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <HAL_SPI_Transmit+0x2a>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e1d7      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b26:	f7f9 f945 	bl	8001db4 <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d007      	beq.n	8008b48 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008b44:	7efb      	ldrb	r3, [r7, #27]
 8008b46:	e1c2      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <HAL_SPI_Transmit+0x60>
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008b60:	7efb      	ldrb	r3, [r7, #27]
 8008b62:	e1b4      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2203      	movs	r2, #3
 8008b68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	88fa      	ldrh	r2, [r7, #6]
 8008b7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	88fa      	ldrh	r2, [r7, #6]
 8008b86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008bb4:	d107      	bne.n	8008bc6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	4b96      	ldr	r3, [pc, #600]	; (8008e28 <HAL_SPI_Transmit+0x334>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	88f9      	ldrh	r1, [r7, #6]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f042 0201 	orr.w	r2, r2, #1
 8008be8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bf2:	d107      	bne.n	8008c04 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b0f      	cmp	r3, #15
 8008c0a:	d947      	bls.n	8008c9c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008c0c:	e03f      	b.n	8008c8e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d114      	bne.n	8008c46 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2c:	1d1a      	adds	r2, r3, #4
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008c44:	e023      	b.n	8008c8e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c46:	f7f9 f8b5 	bl	8001db4 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d803      	bhi.n	8008c5e <HAL_SPI_Transmit+0x16a>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d102      	bne.n	8008c64 <HAL_SPI_Transmit+0x170>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d114      	bne.n	8008c8e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fd01 	bl	800966c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e11f      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1b9      	bne.n	8008c0e <HAL_SPI_Transmit+0x11a>
 8008c9a:	e0f2      	b.n	8008e82 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b07      	cmp	r3, #7
 8008ca2:	f240 80e7 	bls.w	8008e74 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008ca6:	e05d      	b.n	8008d64 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d132      	bne.n	8008d1c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d918      	bls.n	8008cf4 <HAL_SPI_Transmit+0x200>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d014      	beq.n	8008cf4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	3b02      	subs	r3, #2
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008cf2:	e037      	b.n	8008d64 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf8:	881a      	ldrh	r2, [r3, #0]
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d02:	1c9a      	adds	r2, r3, #2
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008d1a:	e023      	b.n	8008d64 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d1c:	f7f9 f84a 	bl	8001db4 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d803      	bhi.n	8008d34 <HAL_SPI_Transmit+0x240>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d102      	bne.n	8008d3a <HAL_SPI_Transmit+0x246>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d114      	bne.n	8008d64 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fc96 	bl	800966c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e0b4      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d19b      	bne.n	8008ca8 <HAL_SPI_Transmit+0x1b4>
 8008d70:	e087      	b.n	8008e82 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d155      	bne.n	8008e2c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d918      	bls.n	8008dbe <HAL_SPI_Transmit+0x2ca>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	d914      	bls.n	8008dbe <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da4:	1d1a      	adds	r2, r3, #4
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b04      	subs	r3, #4
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008dbc:	e05a      	b.n	8008e74 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d917      	bls.n	8008dfa <HAL_SPI_Transmit+0x306>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d013      	beq.n	8008dfa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd6:	881a      	ldrh	r2, [r3, #0]
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de0:	1c9a      	adds	r2, r3, #2
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b02      	subs	r3, #2
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008df8:	e03c      	b.n	8008e74 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3320      	adds	r3, #32
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008e24:	e026      	b.n	8008e74 <HAL_SPI_Transmit+0x380>
 8008e26:	bf00      	nop
 8008e28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e2c:	f7f8 ffc2 	bl	8001db4 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d803      	bhi.n	8008e44 <HAL_SPI_Transmit+0x350>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d102      	bne.n	8008e4a <HAL_SPI_Transmit+0x356>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d114      	bne.n	8008e74 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fc0e 	bl	800966c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e02c      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f47f af78 	bne.w	8008d72 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2108      	movs	r1, #8
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fc8d 	bl	80097ac <SPI_WaitOnFlagUntilTimeout>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e9e:	f043 0220 	orr.w	r2, r3, #32
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fbdf 	bl	800966c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e000      	b.n	8008ece <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008ecc:	7efb      	ldrb	r3, [r7, #27]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop

08008ed8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <HAL_SPI_Transmit_DMA+0x20>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e12c      	b.n	8009152 <HAL_SPI_Transmit_DMA+0x27a>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d007      	beq.n	8008f1c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	e11a      	b.n	8009152 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <HAL_SPI_Transmit_DMA+0x50>
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d107      	bne.n	8008f38 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	e10c      	b.n	8009152 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	88fa      	ldrh	r2, [r7, #6]
 8008f52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	88fa      	ldrh	r2, [r7, #6]
 8008f5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008f88:	d107      	bne.n	8008f9a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f98:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	2b0f      	cmp	r3, #15
 8008fa0:	d905      	bls.n	8008fae <HAL_SPI_Transmit_DMA+0xd6>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fac:	d10f      	bne.n	8008fce <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008fb2:	2b07      	cmp	r3, #7
 8008fb4:	d913      	bls.n	8008fde <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc0:	d00d      	beq.n	8008fde <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fc6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fcc:	d007      	beq.n	8008fde <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	e0b9      	b.n	8009152 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	2b07      	cmp	r3, #7
 8008fe4:	d820      	bhi.n	8009028 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff0:	d109      	bne.n	8009006 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	105b      	asrs	r3, r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009010:	d11e      	bne.n	8009050 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009018:	b29b      	uxth	r3, r3
 800901a:	3303      	adds	r3, #3
 800901c:	109b      	asrs	r3, r3, #2
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009026:	e013      	b.n	8009050 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2b0f      	cmp	r3, #15
 800902e:	d80f      	bhi.n	8009050 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903a:	d109      	bne.n	8009050 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009042:	b29b      	uxth	r3, r3
 8009044:	3301      	adds	r3, #1
 8009046:	105b      	asrs	r3, r3, #1
 8009048:	b29a      	uxth	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009054:	4a41      	ldr	r2, [pc, #260]	; (800915c <HAL_SPI_Transmit_DMA+0x284>)
 8009056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800905c:	4a40      	ldr	r2, [pc, #256]	; (8009160 <HAL_SPI_Transmit_DMA+0x288>)
 800905e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009064:	4a3f      	ldr	r2, [pc, #252]	; (8009164 <HAL_SPI_Transmit_DMA+0x28c>)
 8009066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800906c:	2200      	movs	r2, #0
 800906e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800907e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009088:	4619      	mov	r1, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3320      	adds	r3, #32
 8009090:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009098:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800909a:	f7f9 fb47 	bl	800272c <HAL_DMA_Start_IT>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d013      	beq.n	80090cc <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090aa:	f043 0210 	orr.w	r2, r3, #16
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	e042      	b.n	8009152 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d6:	d108      	bne.n	80090ea <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <HAL_SPI_Transmit_DMA+0x290>)
 80090e4:	400b      	ands	r3, r1
 80090e6:	6053      	str	r3, [r2, #4]
 80090e8:	e009      	b.n	80090fe <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	4b1d      	ldr	r3, [pc, #116]	; (8009168 <HAL_SPI_Transmit_DMA+0x290>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	88f9      	ldrh	r1, [r7, #6]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	430b      	orrs	r3, r1
 80090fc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800910c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800911c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f042 0201 	orr.w	r2, r2, #1
 800912c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009136:	d107      	bne.n	8009148 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009146:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8009150:	7dfb      	ldrb	r3, [r7, #23]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	080095d7 	.word	0x080095d7
 8009160:	08009591 	.word	0x08009591
 8009164:	080095f3 	.word	0x080095f3
 8009168:	ffff0000 	.word	0xffff0000

0800916c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08a      	sub	sp, #40	; 0x28
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009184:	6a3a      	ldr	r2, [r7, #32]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4013      	ands	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009194:	2300      	movs	r3, #0
 8009196:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800919e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3330      	adds	r3, #48	; 0x30
 80091a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d113      	bne.n	80091da <HAL_SPI_IRQHandler+0x6e>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10e      	bne.n	80091da <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d009      	beq.n	80091da <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
    handled = 1UL;
 80091d6:	2301      	movs	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10f      	bne.n	8009204 <HAL_SPI_IRQHandler+0x98>
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d105      	bne.n	8009204 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
    handled = 1UL;
 8009200:	2301      	movs	r3, #1
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10f      	bne.n	800922e <HAL_SPI_IRQHandler+0xc2>
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
    handled = 1UL;
 800922a:	2301      	movs	r3, #1
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 816f 	bne.w	8009514 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 80a0 	beq.w	8009382 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0208 	orr.w	r2, r2, #8
 8009250:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	699a      	ldr	r2, [r3, #24]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0210 	orr.w	r2, r2, #16
 8009260:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699a      	ldr	r2, [r3, #24]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009270:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691a      	ldr	r2, [r3, #16]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0208 	bic.w	r2, r2, #8
 8009280:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00f      	beq.n	80092ac <HAL_SPI_IRQHandler+0x140>
 800928c:	7cfb      	ldrb	r3, [r7, #19]
 800928e:	2b04      	cmp	r3, #4
 8009290:	d004      	beq.n	800929c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d007      	beq.n	80092ac <HAL_SPI_IRQHandler+0x140>
 800929c:	7cfb      	ldrb	r3, [r7, #19]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d059      	beq.n	8009356 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d154      	bne.n	8009356 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d13d      	bne.n	8009336 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80092ba:	e036      	b.n	800932a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b0f      	cmp	r3, #15
 80092c2:	d90b      	bls.n	80092dc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092ce:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d4:	1d1a      	adds	r2, r3, #4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	665a      	str	r2, [r3, #100]	; 0x64
 80092da:	e01d      	b.n	8009318 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b07      	cmp	r3, #7
 80092e2:	d90b      	bls.n	80092fc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	8812      	ldrh	r2, [r2, #0]
 80092ec:	b292      	uxth	r2, r2
 80092ee:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f4:	1c9a      	adds	r2, r3, #2
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	665a      	str	r2, [r3, #100]	; 0x64
 80092fa:	e00d      	b.n	8009318 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009308:	7812      	ldrb	r2, [r2, #0]
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009330:	b29b      	uxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1c2      	bne.n	80092bc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f998 	bl	800966c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f914 	bl	800957c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8009354:	e0e3      	b.n	800951e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009356:	7cfb      	ldrb	r3, [r7, #19]
 8009358:	2b05      	cmp	r3, #5
 800935a:	d103      	bne.n	8009364 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8f9 	bl	8009554 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009362:	e0d9      	b.n	8009518 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009364:	7cfb      	ldrb	r3, [r7, #19]
 8009366:	2b04      	cmp	r3, #4
 8009368:	d103      	bne.n	8009372 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f8e8 	bl	8009540 <HAL_SPI_RxCpltCallback>
    return;
 8009370:	e0d2      	b.n	8009518 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009372:	7cfb      	ldrb	r3, [r7, #19]
 8009374:	2b03      	cmp	r3, #3
 8009376:	f040 80cf 	bne.w	8009518 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8d6 	bl	800952c <HAL_SPI_TxCpltCallback>
    return;
 8009380:	e0ca      	b.n	8009518 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00d      	beq.n	80093a8 <HAL_SPI_IRQHandler+0x23c>
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a4:	619a      	str	r2, [r3, #24]

    return;
 80093a6:	e0ba      	b.n	800951e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 80b5 	beq.w	800951e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00f      	beq.n	80093de <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c4:	f043 0204 	orr.w	r2, r3, #4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00f      	beq.n	8009408 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ee:	f043 0201 	orr.w	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009406:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00f      	beq.n	8009432 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009418:	f043 0208 	orr.w	r2, r3, #8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	699a      	ldr	r2, [r3, #24]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009430:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	f003 0320 	and.w	r3, r3, #32
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00f      	beq.n	800945c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009442:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0220 	orr.w	r2, r2, #32
 800945a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009462:	2b00      	cmp	r3, #0
 8009464:	d05a      	beq.n	800951c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6919      	ldr	r1, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	4b28      	ldr	r3, [pc, #160]	; (8009524 <HAL_SPI_IRQHandler+0x3b8>)
 8009482:	400b      	ands	r3, r1
 8009484:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800948c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009490:	d138      	bne.n	8009504 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80094a0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d013      	beq.n	80094d2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ae:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <HAL_SPI_IRQHandler+0x3bc>)
 80094b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f9 fec0 	bl	800323c <HAL_DMA_Abort_IT>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d020      	beq.n	800951c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094de:	4a12      	ldr	r2, [pc, #72]	; (8009528 <HAL_SPI_IRQHandler+0x3bc>)
 80094e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f9 fea8 	bl	800323c <HAL_DMA_Abort_IT>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d014      	beq.n	800951c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009502:	e00b      	b.n	800951c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f835 	bl	800957c <HAL_SPI_ErrorCallback>
    return;
 8009512:	e003      	b.n	800951c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8009514:	bf00      	nop
 8009516:	e002      	b.n	800951e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800951c:	bf00      	nop
  }
}
 800951e:	3728      	adds	r7, #40	; 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	fffffc94 	.word	0xfffffc94
 8009528:	08009639 	.word	0x08009639

0800952c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	d011      	beq.n	80095ce <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b4:	d103      	bne.n	80095be <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f7ff ffb8 	bl	800952c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80095bc:	e007      	b.n	80095ce <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0208 	orr.w	r2, r2, #8
 80095cc:	611a      	str	r2, [r3, #16]
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff ffbf 	bl	8009568 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fa ff89 	bl	8004518 <HAL_DMA_GetError>
 8009606:	4603      	mov	r3, r0
 8009608:	2b02      	cmp	r3, #2
 800960a:	d011      	beq.n	8009630 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f82d 	bl	800966c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009618:	f043 0210 	orr.w	r2, r3, #16
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff ffa6 	bl	800957c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff ff8c 	bl	800957c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0208 	orr.w	r2, r2, #8
 800968a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0210 	orr.w	r2, r2, #16
 800969a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0201 	bic.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6919      	ldr	r1, [r3, #16]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	4b3c      	ldr	r3, [pc, #240]	; (80097a8 <SPI_CloseTransfer+0x13c>)
 80096b8:	400b      	ands	r3, r1
 80096ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80096ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d014      	beq.n	8009702 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0320 	and.w	r3, r3, #32
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00f      	beq.n	8009702 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	699a      	ldr	r2, [r3, #24]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f042 0220 	orr.w	r2, r2, #32
 8009700:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b03      	cmp	r3, #3
 800970c:	d014      	beq.n	8009738 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00f      	beq.n	8009738 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800971e:	f043 0204 	orr.w	r2, r3, #4
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009736:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00f      	beq.n	8009762 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009748:	f043 0201 	orr.w	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	699a      	ldr	r2, [r3, #24]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009760:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00f      	beq.n	800978c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009772:	f043 0208 	orr.w	r2, r3, #8
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800978a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800979c:	bf00      	nop
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	fffffc90 	.word	0xfffffc90

080097ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	4613      	mov	r3, r2
 80097ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80097bc:	e010      	b.n	80097e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097be:	f7f8 faf9 	bl	8001db4 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d803      	bhi.n	80097d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d102      	bne.n	80097dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e00f      	b.n	8009800 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695a      	ldr	r2, [r3, #20]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4013      	ands	r3, r2
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	bf0c      	ite	eq
 80097f0:	2301      	moveq	r3, #1
 80097f2:	2300      	movne	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d0df      	beq.n	80097be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009814:	095b      	lsrs	r3, r3, #5
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	3301      	adds	r3, #1
 8009820:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3307      	adds	r3, #7
 8009826:	08db      	lsrs	r3, r3, #3
 8009828:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e042      	b.n	80098d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7f8 f83e 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2224      	movs	r2, #36	; 0x24
 800986c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fbeb 	bl	800a05c <UART_SetConfig>
 8009886:	4603      	mov	r3, r0
 8009888:	2b01      	cmp	r3, #1
 800988a:	d101      	bne.n	8009890 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e022      	b.n	80098d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 f93f 	bl	800ab1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0201 	orr.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 f9c6 	bl	800ac60 <UART_CheckIdleState>
 80098d4:	4603      	mov	r3, r0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b0ba      	sub	sp, #232	; 0xe8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009906:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800990a:	f640 030f 	movw	r3, #2063	; 0x80f
 800990e:	4013      	ands	r3, r2
 8009910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11b      	bne.n	8009954 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800991c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d015      	beq.n	8009954 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d105      	bne.n	8009940 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 835a 	beq.w	8009ffe <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
      }
      return;
 8009952:	e354      	b.n	8009ffe <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 811f 	beq.w	8009b9c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800995e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009962:	4b8b      	ldr	r3, [pc, #556]	; (8009b90 <HAL_UART_IRQHandler+0x2b0>)
 8009964:	4013      	ands	r3, r2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800996a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800996e:	4b89      	ldr	r3, [pc, #548]	; (8009b94 <HAL_UART_IRQHandler+0x2b4>)
 8009970:	4013      	ands	r3, r2
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 8112 	beq.w	8009b9c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d011      	beq.n	80099a8 <HAL_UART_IRQHandler+0xc8>
 8009984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2201      	movs	r2, #1
 8009996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800999e:	f043 0201 	orr.w	r2, r3, #1
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d011      	beq.n	80099d8 <HAL_UART_IRQHandler+0xf8>
 80099b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2202      	movs	r2, #2
 80099c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ce:	f043 0204 	orr.w	r2, r3, #4
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d011      	beq.n	8009a08 <HAL_UART_IRQHandler+0x128>
 80099e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2204      	movs	r2, #4
 80099f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fe:	f043 0202 	orr.w	r2, r3, #2
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d017      	beq.n	8009a44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d105      	bne.n	8009a2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a24:	4b5a      	ldr	r3, [pc, #360]	; (8009b90 <HAL_UART_IRQHandler+0x2b0>)
 8009a26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2208      	movs	r2, #8
 8009a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3a:	f043 0208 	orr.w	r2, r3, #8
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d012      	beq.n	8009a76 <HAL_UART_IRQHandler+0x196>
 8009a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00c      	beq.n	8009a76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a6c:	f043 0220 	orr.w	r2, r3, #32
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 82c0 	beq.w	800a002 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d013      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d105      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aca:	2b40      	cmp	r3, #64	; 0x40
 8009acc:	d005      	beq.n	8009ada <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04f      	beq.n	8009b7a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 f9d4 	bl	800ae88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d141      	bne.n	8009b72 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3308      	adds	r3, #8
 8009b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1d9      	bne.n	8009aee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d013      	beq.n	8009b6a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b46:	4a14      	ldr	r2, [pc, #80]	; (8009b98 <HAL_UART_IRQHandler+0x2b8>)
 8009b48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f9 fb74 	bl	800323c <HAL_DMA_Abort_IT>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d017      	beq.n	8009b8a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	e00f      	b.n	8009b8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa60 	bl	800a030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b70:	e00b      	b.n	8009b8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa5c 	bl	800a030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b78:	e007      	b.n	8009b8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa58 	bl	800a030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009b88:	e23b      	b.n	800a002 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8a:	bf00      	nop
    return;
 8009b8c:	e239      	b.n	800a002 <HAL_UART_IRQHandler+0x722>
 8009b8e:	bf00      	nop
 8009b90:	10000001 	.word	0x10000001
 8009b94:	04000120 	.word	0x04000120
 8009b98:	0800af55 	.word	0x0800af55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	f040 81ce 	bne.w	8009f42 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 81c7 	beq.w	8009f42 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 81c0 	beq.w	8009f42 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	f040 813b 	bne.w	8009e50 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a8b      	ldr	r2, [pc, #556]	; (8009e10 <HAL_UART_IRQHandler+0x530>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d059      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a89      	ldr	r2, [pc, #548]	; (8009e14 <HAL_UART_IRQHandler+0x534>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d053      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a87      	ldr	r2, [pc, #540]	; (8009e18 <HAL_UART_IRQHandler+0x538>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d04d      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a85      	ldr	r2, [pc, #532]	; (8009e1c <HAL_UART_IRQHandler+0x53c>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d047      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a83      	ldr	r2, [pc, #524]	; (8009e20 <HAL_UART_IRQHandler+0x540>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d041      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a81      	ldr	r2, [pc, #516]	; (8009e24 <HAL_UART_IRQHandler+0x544>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d03b      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a7f      	ldr	r2, [pc, #508]	; (8009e28 <HAL_UART_IRQHandler+0x548>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d035      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a7d      	ldr	r2, [pc, #500]	; (8009e2c <HAL_UART_IRQHandler+0x54c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d02f      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a7b      	ldr	r2, [pc, #492]	; (8009e30 <HAL_UART_IRQHandler+0x550>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d029      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a79      	ldr	r2, [pc, #484]	; (8009e34 <HAL_UART_IRQHandler+0x554>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d023      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a77      	ldr	r2, [pc, #476]	; (8009e38 <HAL_UART_IRQHandler+0x558>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01d      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a75      	ldr	r2, [pc, #468]	; (8009e3c <HAL_UART_IRQHandler+0x55c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d017      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a73      	ldr	r2, [pc, #460]	; (8009e40 <HAL_UART_IRQHandler+0x560>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d011      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a71      	ldr	r2, [pc, #452]	; (8009e44 <HAL_UART_IRQHandler+0x564>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00b      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a6f      	ldr	r2, [pc, #444]	; (8009e48 <HAL_UART_IRQHandler+0x568>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d005      	beq.n	8009c9a <HAL_UART_IRQHandler+0x3ba>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a6d      	ldr	r2, [pc, #436]	; (8009e4c <HAL_UART_IRQHandler+0x56c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d105      	bne.n	8009ca6 <HAL_UART_IRQHandler+0x3c6>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	e004      	b.n	8009cb0 <HAL_UART_IRQHandler+0x3d0>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 81a4 	beq.w	800a006 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	f080 819c 	bcs.w	800a006 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ce2:	f000 8086 	beq.w	8009df2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cf2:	e853 3f00 	ldrex	r3, [r3]
 8009cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1da      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3308      	adds	r3, #8
 8009d36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d42:	f023 0301 	bic.w	r3, r3, #1
 8009d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e1      	bne.n	8009d30 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3308      	adds	r3, #8
 8009d72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e3      	bne.n	8009d6c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc2:	f023 0310 	bic.w	r3, r3, #16
 8009dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7f8 ff07 	bl	8002c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f91c 	bl	800a044 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e0c:	e0fb      	b.n	800a006 <HAL_UART_IRQHandler+0x726>
 8009e0e:	bf00      	nop
 8009e10:	40020010 	.word	0x40020010
 8009e14:	40020028 	.word	0x40020028
 8009e18:	40020040 	.word	0x40020040
 8009e1c:	40020058 	.word	0x40020058
 8009e20:	40020070 	.word	0x40020070
 8009e24:	40020088 	.word	0x40020088
 8009e28:	400200a0 	.word	0x400200a0
 8009e2c:	400200b8 	.word	0x400200b8
 8009e30:	40020410 	.word	0x40020410
 8009e34:	40020428 	.word	0x40020428
 8009e38:	40020440 	.word	0x40020440
 8009e3c:	40020458 	.word	0x40020458
 8009e40:	40020470 	.word	0x40020470
 8009e44:	40020488 	.word	0x40020488
 8009e48:	400204a0 	.word	0x400204a0
 8009e4c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 80cc 	beq.w	800a00a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 80c7 	beq.w	800a00a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1e4      	bne.n	8009e7c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	4b54      	ldr	r3, [pc, #336]	; (800a018 <HAL_UART_IRQHandler+0x738>)
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e3      	bne.n	8009eb2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	e853 3f00 	ldrex	r3, [r3]
 8009f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f023 0310 	bic.w	r3, r3, #16
 8009f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f20:	61fb      	str	r3, [r7, #28]
 8009f22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	69b9      	ldr	r1, [r7, #24]
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e4      	bne.n	8009efe <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f882 	bl	800a044 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f40:	e063      	b.n	800a00a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00e      	beq.n	8009f6c <HAL_UART_IRQHandler+0x68c>
 8009f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f836 	bl	800afd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f6a:	e051      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d014      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d105      	bne.n	8009f90 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d008      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d03a      	beq.n	800a00e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	4798      	blx	r3
    }
    return;
 8009fa0:	e035      	b.n	800a00e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x6e2>
 8009fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 ffe0 	bl	800af80 <UART_EndTransmit_IT>
    return;
 8009fc0:	e026      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d009      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x702>
 8009fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 f80f 	bl	800affe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fe0:	e016      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d010      	beq.n	800a010 <HAL_UART_IRQHandler+0x730>
 8009fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	da0c      	bge.n	800a010 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fff7 	bl	800afea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ffc:	e008      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
      return;
 8009ffe:	bf00      	nop
 800a000:	e006      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
    return;
 800a002:	bf00      	nop
 800a004:	e004      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
      return;
 800a006:	bf00      	nop
 800a008:	e002      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
      return;
 800a00a:	bf00      	nop
 800a00c:	e000      	b.n	800a010 <HAL_UART_IRQHandler+0x730>
    return;
 800a00e:	bf00      	nop
  }
}
 800a010:	37e8      	adds	r7, #232	; 0xe8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	effffffe 	.word	0xeffffffe

0800a01c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	431a      	orrs	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	4313      	orrs	r3, r2
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	4bbf      	ldr	r3, [pc, #764]	; (800a388 <UART_SetConfig+0x32c>)
 800a08a:	4013      	ands	r3, r2
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6812      	ldr	r2, [r2, #0]
 800a090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a092:	430b      	orrs	r3, r1
 800a094:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4ab5      	ldr	r2, [pc, #724]	; (800a38c <UART_SetConfig+0x330>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d004      	beq.n	800a0c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	4bb0      	ldr	r3, [pc, #704]	; (800a390 <UART_SetConfig+0x334>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	f023 010f 	bic.w	r1, r3, #15
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4aa7      	ldr	r2, [pc, #668]	; (800a394 <UART_SetConfig+0x338>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d176      	bne.n	800a1e8 <UART_SetConfig+0x18c>
 800a0fa:	4ba7      	ldr	r3, [pc, #668]	; (800a398 <UART_SetConfig+0x33c>)
 800a0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a102:	2b28      	cmp	r3, #40	; 0x28
 800a104:	d86c      	bhi.n	800a1e0 <UART_SetConfig+0x184>
 800a106:	a201      	add	r2, pc, #4	; (adr r2, 800a10c <UART_SetConfig+0xb0>)
 800a108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10c:	0800a1b1 	.word	0x0800a1b1
 800a110:	0800a1e1 	.word	0x0800a1e1
 800a114:	0800a1e1 	.word	0x0800a1e1
 800a118:	0800a1e1 	.word	0x0800a1e1
 800a11c:	0800a1e1 	.word	0x0800a1e1
 800a120:	0800a1e1 	.word	0x0800a1e1
 800a124:	0800a1e1 	.word	0x0800a1e1
 800a128:	0800a1e1 	.word	0x0800a1e1
 800a12c:	0800a1b9 	.word	0x0800a1b9
 800a130:	0800a1e1 	.word	0x0800a1e1
 800a134:	0800a1e1 	.word	0x0800a1e1
 800a138:	0800a1e1 	.word	0x0800a1e1
 800a13c:	0800a1e1 	.word	0x0800a1e1
 800a140:	0800a1e1 	.word	0x0800a1e1
 800a144:	0800a1e1 	.word	0x0800a1e1
 800a148:	0800a1e1 	.word	0x0800a1e1
 800a14c:	0800a1c1 	.word	0x0800a1c1
 800a150:	0800a1e1 	.word	0x0800a1e1
 800a154:	0800a1e1 	.word	0x0800a1e1
 800a158:	0800a1e1 	.word	0x0800a1e1
 800a15c:	0800a1e1 	.word	0x0800a1e1
 800a160:	0800a1e1 	.word	0x0800a1e1
 800a164:	0800a1e1 	.word	0x0800a1e1
 800a168:	0800a1e1 	.word	0x0800a1e1
 800a16c:	0800a1c9 	.word	0x0800a1c9
 800a170:	0800a1e1 	.word	0x0800a1e1
 800a174:	0800a1e1 	.word	0x0800a1e1
 800a178:	0800a1e1 	.word	0x0800a1e1
 800a17c:	0800a1e1 	.word	0x0800a1e1
 800a180:	0800a1e1 	.word	0x0800a1e1
 800a184:	0800a1e1 	.word	0x0800a1e1
 800a188:	0800a1e1 	.word	0x0800a1e1
 800a18c:	0800a1d1 	.word	0x0800a1d1
 800a190:	0800a1e1 	.word	0x0800a1e1
 800a194:	0800a1e1 	.word	0x0800a1e1
 800a198:	0800a1e1 	.word	0x0800a1e1
 800a19c:	0800a1e1 	.word	0x0800a1e1
 800a1a0:	0800a1e1 	.word	0x0800a1e1
 800a1a4:	0800a1e1 	.word	0x0800a1e1
 800a1a8:	0800a1e1 	.word	0x0800a1e1
 800a1ac:	0800a1d9 	.word	0x0800a1d9
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b6:	e222      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1be:	e21e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1c0:	2308      	movs	r3, #8
 800a1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c6:	e21a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ce:	e216      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d6:	e212      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1d8:	2340      	movs	r3, #64	; 0x40
 800a1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1de:	e20e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1e0:	2380      	movs	r3, #128	; 0x80
 800a1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e6:	e20a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a6b      	ldr	r2, [pc, #428]	; (800a39c <UART_SetConfig+0x340>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d130      	bne.n	800a254 <UART_SetConfig+0x1f8>
 800a1f2:	4b69      	ldr	r3, [pc, #420]	; (800a398 <UART_SetConfig+0x33c>)
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d826      	bhi.n	800a24c <UART_SetConfig+0x1f0>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0x1a8>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a21d 	.word	0x0800a21d
 800a208:	0800a225 	.word	0x0800a225
 800a20c:	0800a22d 	.word	0x0800a22d
 800a210:	0800a235 	.word	0x0800a235
 800a214:	0800a23d 	.word	0x0800a23d
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	2300      	movs	r3, #0
 800a21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a222:	e1ec      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a224:	2304      	movs	r3, #4
 800a226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22a:	e1e8      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a22c:	2308      	movs	r3, #8
 800a22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a232:	e1e4      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a234:	2310      	movs	r3, #16
 800a236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23a:	e1e0      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a23c:	2320      	movs	r3, #32
 800a23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a242:	e1dc      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24a:	e1d8      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a24c:	2380      	movs	r3, #128	; 0x80
 800a24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a252:	e1d4      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a51      	ldr	r2, [pc, #324]	; (800a3a0 <UART_SetConfig+0x344>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d130      	bne.n	800a2c0 <UART_SetConfig+0x264>
 800a25e:	4b4e      	ldr	r3, [pc, #312]	; (800a398 <UART_SetConfig+0x33c>)
 800a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b05      	cmp	r3, #5
 800a268:	d826      	bhi.n	800a2b8 <UART_SetConfig+0x25c>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x214>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a9 	.word	0x0800a2a9
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28e:	e1b6      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a290:	2304      	movs	r3, #4
 800a292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a296:	e1b2      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a298:	2308      	movs	r3, #8
 800a29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29e:	e1ae      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a6:	e1aa      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ae:	e1a6      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b6:	e1a2      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a2b8:	2380      	movs	r3, #128	; 0x80
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e19e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a37      	ldr	r2, [pc, #220]	; (800a3a4 <UART_SetConfig+0x348>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d130      	bne.n	800a32c <UART_SetConfig+0x2d0>
 800a2ca:	4b33      	ldr	r3, [pc, #204]	; (800a398 <UART_SetConfig+0x33c>)
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	d826      	bhi.n	800a324 <UART_SetConfig+0x2c8>
 800a2d6:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0x280>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a2f5 	.word	0x0800a2f5
 800a2e0:	0800a2fd 	.word	0x0800a2fd
 800a2e4:	0800a305 	.word	0x0800a305
 800a2e8:	0800a30d 	.word	0x0800a30d
 800a2ec:	0800a315 	.word	0x0800a315
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fa:	e180      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a302:	e17c      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30a:	e178      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a312:	e174      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a314:	2320      	movs	r3, #32
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e170      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a31c:	2340      	movs	r3, #64	; 0x40
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	e16c      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a324:	2380      	movs	r3, #128	; 0x80
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32a:	e168      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a1d      	ldr	r2, [pc, #116]	; (800a3a8 <UART_SetConfig+0x34c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d142      	bne.n	800a3bc <UART_SetConfig+0x360>
 800a336:	4b18      	ldr	r3, [pc, #96]	; (800a398 <UART_SetConfig+0x33c>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d838      	bhi.n	800a3b4 <UART_SetConfig+0x358>
 800a342:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <UART_SetConfig+0x2ec>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a361 	.word	0x0800a361
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	0800a371 	.word	0x0800a371
 800a354:	0800a379 	.word	0x0800a379
 800a358:	0800a381 	.word	0x0800a381
 800a35c:	0800a3ad 	.word	0x0800a3ad
 800a360:	2300      	movs	r3, #0
 800a362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a366:	e14a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36e:	e146      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a376:	e142      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37e:	e13e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a380:	2320      	movs	r3, #32
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e13a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a388:	cfff69f3 	.word	0xcfff69f3
 800a38c:	58000c00 	.word	0x58000c00
 800a390:	11fff4ff 	.word	0x11fff4ff
 800a394:	40011000 	.word	0x40011000
 800a398:	58024400 	.word	0x58024400
 800a39c:	40004400 	.word	0x40004400
 800a3a0:	40004800 	.word	0x40004800
 800a3a4:	40004c00 	.word	0x40004c00
 800a3a8:	40005000 	.word	0x40005000
 800a3ac:	2340      	movs	r3, #64	; 0x40
 800a3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b2:	e124      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a3b4:	2380      	movs	r3, #128	; 0x80
 800a3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ba:	e120      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4acc      	ldr	r2, [pc, #816]	; (800a6f4 <UART_SetConfig+0x698>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d176      	bne.n	800a4b4 <UART_SetConfig+0x458>
 800a3c6:	4bcc      	ldr	r3, [pc, #816]	; (800a6f8 <UART_SetConfig+0x69c>)
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ce:	2b28      	cmp	r3, #40	; 0x28
 800a3d0:	d86c      	bhi.n	800a4ac <UART_SetConfig+0x450>
 800a3d2:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x37c>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a47d 	.word	0x0800a47d
 800a3dc:	0800a4ad 	.word	0x0800a4ad
 800a3e0:	0800a4ad 	.word	0x0800a4ad
 800a3e4:	0800a4ad 	.word	0x0800a4ad
 800a3e8:	0800a4ad 	.word	0x0800a4ad
 800a3ec:	0800a4ad 	.word	0x0800a4ad
 800a3f0:	0800a4ad 	.word	0x0800a4ad
 800a3f4:	0800a4ad 	.word	0x0800a4ad
 800a3f8:	0800a485 	.word	0x0800a485
 800a3fc:	0800a4ad 	.word	0x0800a4ad
 800a400:	0800a4ad 	.word	0x0800a4ad
 800a404:	0800a4ad 	.word	0x0800a4ad
 800a408:	0800a4ad 	.word	0x0800a4ad
 800a40c:	0800a4ad 	.word	0x0800a4ad
 800a410:	0800a4ad 	.word	0x0800a4ad
 800a414:	0800a4ad 	.word	0x0800a4ad
 800a418:	0800a48d 	.word	0x0800a48d
 800a41c:	0800a4ad 	.word	0x0800a4ad
 800a420:	0800a4ad 	.word	0x0800a4ad
 800a424:	0800a4ad 	.word	0x0800a4ad
 800a428:	0800a4ad 	.word	0x0800a4ad
 800a42c:	0800a4ad 	.word	0x0800a4ad
 800a430:	0800a4ad 	.word	0x0800a4ad
 800a434:	0800a4ad 	.word	0x0800a4ad
 800a438:	0800a495 	.word	0x0800a495
 800a43c:	0800a4ad 	.word	0x0800a4ad
 800a440:	0800a4ad 	.word	0x0800a4ad
 800a444:	0800a4ad 	.word	0x0800a4ad
 800a448:	0800a4ad 	.word	0x0800a4ad
 800a44c:	0800a4ad 	.word	0x0800a4ad
 800a450:	0800a4ad 	.word	0x0800a4ad
 800a454:	0800a4ad 	.word	0x0800a4ad
 800a458:	0800a49d 	.word	0x0800a49d
 800a45c:	0800a4ad 	.word	0x0800a4ad
 800a460:	0800a4ad 	.word	0x0800a4ad
 800a464:	0800a4ad 	.word	0x0800a4ad
 800a468:	0800a4ad 	.word	0x0800a4ad
 800a46c:	0800a4ad 	.word	0x0800a4ad
 800a470:	0800a4ad 	.word	0x0800a4ad
 800a474:	0800a4ad 	.word	0x0800a4ad
 800a478:	0800a4a5 	.word	0x0800a4a5
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e0bc      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a484:	2304      	movs	r3, #4
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e0b8      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a48c:	2308      	movs	r3, #8
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e0b4      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a494:	2310      	movs	r3, #16
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e0b0      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a49c:	2320      	movs	r3, #32
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e0ac      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e0a8      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e0a4      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a90      	ldr	r2, [pc, #576]	; (800a6fc <UART_SetConfig+0x6a0>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d130      	bne.n	800a520 <UART_SetConfig+0x4c4>
 800a4be:	4b8e      	ldr	r3, [pc, #568]	; (800a6f8 <UART_SetConfig+0x69c>)
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b05      	cmp	r3, #5
 800a4c8:	d826      	bhi.n	800a518 <UART_SetConfig+0x4bc>
 800a4ca:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <UART_SetConfig+0x474>)
 800a4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d0:	0800a4e9 	.word	0x0800a4e9
 800a4d4:	0800a4f1 	.word	0x0800a4f1
 800a4d8:	0800a4f9 	.word	0x0800a4f9
 800a4dc:	0800a501 	.word	0x0800a501
 800a4e0:	0800a509 	.word	0x0800a509
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e086      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e082      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e07e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a500:	2310      	movs	r3, #16
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a506:	e07a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a508:	2320      	movs	r3, #32
 800a50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50e:	e076      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a510:	2340      	movs	r3, #64	; 0x40
 800a512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a516:	e072      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a518:	2380      	movs	r3, #128	; 0x80
 800a51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51e:	e06e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a76      	ldr	r2, [pc, #472]	; (800a700 <UART_SetConfig+0x6a4>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d130      	bne.n	800a58c <UART_SetConfig+0x530>
 800a52a:	4b73      	ldr	r3, [pc, #460]	; (800a6f8 <UART_SetConfig+0x69c>)
 800a52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	2b05      	cmp	r3, #5
 800a534:	d826      	bhi.n	800a584 <UART_SetConfig+0x528>
 800a536:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <UART_SetConfig+0x4e0>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a555 	.word	0x0800a555
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	0800a575 	.word	0x0800a575
 800a550:	0800a57d 	.word	0x0800a57d
 800a554:	2300      	movs	r3, #0
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e050      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a55c:	2304      	movs	r3, #4
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e04c      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a564:	2308      	movs	r3, #8
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e048      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a56c:	2310      	movs	r3, #16
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e044      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a574:	2320      	movs	r3, #32
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e040      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a57c:	2340      	movs	r3, #64	; 0x40
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e03c      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a584:	2380      	movs	r3, #128	; 0x80
 800a586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58a:	e038      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a5c      	ldr	r2, [pc, #368]	; (800a704 <UART_SetConfig+0x6a8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d130      	bne.n	800a5f8 <UART_SetConfig+0x59c>
 800a596:	4b58      	ldr	r3, [pc, #352]	; (800a6f8 <UART_SetConfig+0x69c>)
 800a598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	2b05      	cmp	r3, #5
 800a5a0:	d826      	bhi.n	800a5f0 <UART_SetConfig+0x594>
 800a5a2:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <UART_SetConfig+0x54c>)
 800a5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a8:	0800a5c1 	.word	0x0800a5c1
 800a5ac:	0800a5c9 	.word	0x0800a5c9
 800a5b0:	0800a5d1 	.word	0x0800a5d1
 800a5b4:	0800a5d9 	.word	0x0800a5d9
 800a5b8:	0800a5e1 	.word	0x0800a5e1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e01a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e016      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d6:	e012      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5de:	e00e      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e00a      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e006      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5f0:	2380      	movs	r3, #128	; 0x80
 800a5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f6:	e002      	b.n	800a5fe <UART_SetConfig+0x5a2>
 800a5f8:	2380      	movs	r3, #128	; 0x80
 800a5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a40      	ldr	r2, [pc, #256]	; (800a704 <UART_SetConfig+0x6a8>)
 800a604:	4293      	cmp	r3, r2
 800a606:	f040 80ef 	bne.w	800a7e8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a60a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a60e:	2b20      	cmp	r3, #32
 800a610:	dc46      	bgt.n	800a6a0 <UART_SetConfig+0x644>
 800a612:	2b02      	cmp	r3, #2
 800a614:	f2c0 8081 	blt.w	800a71a <UART_SetConfig+0x6be>
 800a618:	3b02      	subs	r3, #2
 800a61a:	2b1e      	cmp	r3, #30
 800a61c:	d87d      	bhi.n	800a71a <UART_SetConfig+0x6be>
 800a61e:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <UART_SetConfig+0x5c8>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a6a7 	.word	0x0800a6a7
 800a628:	0800a71b 	.word	0x0800a71b
 800a62c:	0800a6af 	.word	0x0800a6af
 800a630:	0800a71b 	.word	0x0800a71b
 800a634:	0800a71b 	.word	0x0800a71b
 800a638:	0800a71b 	.word	0x0800a71b
 800a63c:	0800a6bf 	.word	0x0800a6bf
 800a640:	0800a71b 	.word	0x0800a71b
 800a644:	0800a71b 	.word	0x0800a71b
 800a648:	0800a71b 	.word	0x0800a71b
 800a64c:	0800a71b 	.word	0x0800a71b
 800a650:	0800a71b 	.word	0x0800a71b
 800a654:	0800a71b 	.word	0x0800a71b
 800a658:	0800a71b 	.word	0x0800a71b
 800a65c:	0800a6cf 	.word	0x0800a6cf
 800a660:	0800a71b 	.word	0x0800a71b
 800a664:	0800a71b 	.word	0x0800a71b
 800a668:	0800a71b 	.word	0x0800a71b
 800a66c:	0800a71b 	.word	0x0800a71b
 800a670:	0800a71b 	.word	0x0800a71b
 800a674:	0800a71b 	.word	0x0800a71b
 800a678:	0800a71b 	.word	0x0800a71b
 800a67c:	0800a71b 	.word	0x0800a71b
 800a680:	0800a71b 	.word	0x0800a71b
 800a684:	0800a71b 	.word	0x0800a71b
 800a688:	0800a71b 	.word	0x0800a71b
 800a68c:	0800a71b 	.word	0x0800a71b
 800a690:	0800a71b 	.word	0x0800a71b
 800a694:	0800a71b 	.word	0x0800a71b
 800a698:	0800a71b 	.word	0x0800a71b
 800a69c:	0800a70d 	.word	0x0800a70d
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d036      	beq.n	800a712 <UART_SetConfig+0x6b6>
 800a6a4:	e039      	b.n	800a71a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6a6:	f7fd f9e3 	bl	8007a70 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a6ac:	e03b      	b.n	800a726 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ae:	f107 0314 	add.w	r3, r7, #20
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fd f9f2 	bl	8007a9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6bc:	e033      	b.n	800a726 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6be:	f107 0308 	add.w	r3, r7, #8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd fb3e 	bl	8007d44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6cc:	e02b      	b.n	800a726 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <UART_SetConfig+0x69c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d009      	beq.n	800a6ee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6da:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <UART_SetConfig+0x69c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	08db      	lsrs	r3, r3, #3
 800a6e0:	f003 0303 	and.w	r3, r3, #3
 800a6e4:	4a08      	ldr	r2, [pc, #32]	; (800a708 <UART_SetConfig+0x6ac>)
 800a6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6ec:	e01b      	b.n	800a726 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a6ee:	4b06      	ldr	r3, [pc, #24]	; (800a708 <UART_SetConfig+0x6ac>)
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6f2:	e018      	b.n	800a726 <UART_SetConfig+0x6ca>
 800a6f4:	40011400 	.word	0x40011400
 800a6f8:	58024400 	.word	0x58024400
 800a6fc:	40007800 	.word	0x40007800
 800a700:	40007c00 	.word	0x40007c00
 800a704:	58000c00 	.word	0x58000c00
 800a708:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a70c:	4bc4      	ldr	r3, [pc, #784]	; (800aa20 <UART_SetConfig+0x9c4>)
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a710:	e009      	b.n	800a726 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a718:	e005      	b.n	800a726 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 81da 	beq.w	800aae2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	4abc      	ldr	r2, [pc, #752]	; (800aa24 <UART_SetConfig+0x9c8>)
 800a734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a738:	461a      	mov	r2, r3
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a740:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	4413      	add	r3, r2
 800a74c:	6a3a      	ldr	r2, [r7, #32]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d305      	bcc.n	800a75e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a758:	6a3a      	ldr	r2, [r7, #32]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d903      	bls.n	800a766 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a764:	e1bd      	b.n	800aae2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	4618      	mov	r0, r3
 800a76a:	f04f 0100 	mov.w	r1, #0
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a772:	4aac      	ldr	r2, [pc, #688]	; (800aa24 <UART_SetConfig+0x9c8>)
 800a774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a778:	b29a      	uxth	r2, r3
 800a77a:	f04f 0300 	mov.w	r3, #0
 800a77e:	f7f5 fdab 	bl	80002d8 <__aeabi_uldivmod>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4610      	mov	r0, r2
 800a788:	4619      	mov	r1, r3
 800a78a:	f04f 0200 	mov.w	r2, #0
 800a78e:	f04f 0300 	mov.w	r3, #0
 800a792:	020b      	lsls	r3, r1, #8
 800a794:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a798:	0202      	lsls	r2, r0, #8
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	6849      	ldr	r1, [r1, #4]
 800a79e:	0849      	lsrs	r1, r1, #1
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	f04f 0100 	mov.w	r1, #0
 800a7a6:	1814      	adds	r4, r2, r0
 800a7a8:	eb43 0501 	adc.w	r5, r3, r1
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f5 fd8d 	bl	80002d8 <__aeabi_uldivmod>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7cc:	d308      	bcc.n	800a7e0 <UART_SetConfig+0x784>
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7d4:	d204      	bcs.n	800a7e0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7dc:	60da      	str	r2, [r3, #12]
 800a7de:	e180      	b.n	800aae2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7e6:	e17c      	b.n	800aae2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7f0:	f040 80be 	bne.w	800a970 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a7f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7f8:	2b20      	cmp	r3, #32
 800a7fa:	dc49      	bgt.n	800a890 <UART_SetConfig+0x834>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	db7c      	blt.n	800a8fa <UART_SetConfig+0x89e>
 800a800:	2b20      	cmp	r3, #32
 800a802:	d87a      	bhi.n	800a8fa <UART_SetConfig+0x89e>
 800a804:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <UART_SetConfig+0x7b0>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a897 	.word	0x0800a897
 800a810:	0800a89f 	.word	0x0800a89f
 800a814:	0800a8fb 	.word	0x0800a8fb
 800a818:	0800a8fb 	.word	0x0800a8fb
 800a81c:	0800a8a7 	.word	0x0800a8a7
 800a820:	0800a8fb 	.word	0x0800a8fb
 800a824:	0800a8fb 	.word	0x0800a8fb
 800a828:	0800a8fb 	.word	0x0800a8fb
 800a82c:	0800a8b7 	.word	0x0800a8b7
 800a830:	0800a8fb 	.word	0x0800a8fb
 800a834:	0800a8fb 	.word	0x0800a8fb
 800a838:	0800a8fb 	.word	0x0800a8fb
 800a83c:	0800a8fb 	.word	0x0800a8fb
 800a840:	0800a8fb 	.word	0x0800a8fb
 800a844:	0800a8fb 	.word	0x0800a8fb
 800a848:	0800a8fb 	.word	0x0800a8fb
 800a84c:	0800a8c7 	.word	0x0800a8c7
 800a850:	0800a8fb 	.word	0x0800a8fb
 800a854:	0800a8fb 	.word	0x0800a8fb
 800a858:	0800a8fb 	.word	0x0800a8fb
 800a85c:	0800a8fb 	.word	0x0800a8fb
 800a860:	0800a8fb 	.word	0x0800a8fb
 800a864:	0800a8fb 	.word	0x0800a8fb
 800a868:	0800a8fb 	.word	0x0800a8fb
 800a86c:	0800a8fb 	.word	0x0800a8fb
 800a870:	0800a8fb 	.word	0x0800a8fb
 800a874:	0800a8fb 	.word	0x0800a8fb
 800a878:	0800a8fb 	.word	0x0800a8fb
 800a87c:	0800a8fb 	.word	0x0800a8fb
 800a880:	0800a8fb 	.word	0x0800a8fb
 800a884:	0800a8fb 	.word	0x0800a8fb
 800a888:	0800a8fb 	.word	0x0800a8fb
 800a88c:	0800a8ed 	.word	0x0800a8ed
 800a890:	2b40      	cmp	r3, #64	; 0x40
 800a892:	d02e      	beq.n	800a8f2 <UART_SetConfig+0x896>
 800a894:	e031      	b.n	800a8fa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a896:	f7fc f97f 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800a89a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a89c:	e033      	b.n	800a906 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a89e:	f7fc f991 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 800a8a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8a4:	e02f      	b.n	800a906 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a6:	f107 0314 	add.w	r3, r7, #20
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fd f8f6 	bl	8007a9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8b4:	e027      	b.n	800a906 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b6:	f107 0308 	add.w	r3, r7, #8
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fd fa42 	bl	8007d44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c4:	e01f      	b.n	800a906 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8c6:	4b58      	ldr	r3, [pc, #352]	; (800aa28 <UART_SetConfig+0x9cc>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8d2:	4b55      	ldr	r3, [pc, #340]	; (800aa28 <UART_SetConfig+0x9cc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	4a53      	ldr	r2, [pc, #332]	; (800aa2c <UART_SetConfig+0x9d0>)
 800a8de:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8e4:	e00f      	b.n	800a906 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a8e6:	4b51      	ldr	r3, [pc, #324]	; (800aa2c <UART_SetConfig+0x9d0>)
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8ea:	e00c      	b.n	800a906 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	; (800aa20 <UART_SetConfig+0x9c4>)
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8f0:	e009      	b.n	800a906 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8f8:	e005      	b.n	800a906 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a904:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 80ea 	beq.w	800aae2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	4a44      	ldr	r2, [pc, #272]	; (800aa24 <UART_SetConfig+0x9c8>)
 800a914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a918:	461a      	mov	r2, r3
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a920:	005a      	lsls	r2, r3, #1
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	085b      	lsrs	r3, r3, #1
 800a928:	441a      	add	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	2b0f      	cmp	r3, #15
 800a938:	d916      	bls.n	800a968 <UART_SetConfig+0x90c>
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a940:	d212      	bcs.n	800a968 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	b29b      	uxth	r3, r3
 800a946:	f023 030f 	bic.w	r3, r3, #15
 800a94a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	b29b      	uxth	r3, r3
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	b29a      	uxth	r2, r3
 800a958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a95a:	4313      	orrs	r3, r2
 800a95c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a964:	60da      	str	r2, [r3, #12]
 800a966:	e0bc      	b.n	800aae2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a96e:	e0b8      	b.n	800aae2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a974:	2b20      	cmp	r3, #32
 800a976:	dc4b      	bgt.n	800aa10 <UART_SetConfig+0x9b4>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f2c0 8087 	blt.w	800aa8c <UART_SetConfig+0xa30>
 800a97e:	2b20      	cmp	r3, #32
 800a980:	f200 8084 	bhi.w	800aa8c <UART_SetConfig+0xa30>
 800a984:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <UART_SetConfig+0x930>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800aa17 	.word	0x0800aa17
 800a990:	0800aa31 	.word	0x0800aa31
 800a994:	0800aa8d 	.word	0x0800aa8d
 800a998:	0800aa8d 	.word	0x0800aa8d
 800a99c:	0800aa39 	.word	0x0800aa39
 800a9a0:	0800aa8d 	.word	0x0800aa8d
 800a9a4:	0800aa8d 	.word	0x0800aa8d
 800a9a8:	0800aa8d 	.word	0x0800aa8d
 800a9ac:	0800aa49 	.word	0x0800aa49
 800a9b0:	0800aa8d 	.word	0x0800aa8d
 800a9b4:	0800aa8d 	.word	0x0800aa8d
 800a9b8:	0800aa8d 	.word	0x0800aa8d
 800a9bc:	0800aa8d 	.word	0x0800aa8d
 800a9c0:	0800aa8d 	.word	0x0800aa8d
 800a9c4:	0800aa8d 	.word	0x0800aa8d
 800a9c8:	0800aa8d 	.word	0x0800aa8d
 800a9cc:	0800aa59 	.word	0x0800aa59
 800a9d0:	0800aa8d 	.word	0x0800aa8d
 800a9d4:	0800aa8d 	.word	0x0800aa8d
 800a9d8:	0800aa8d 	.word	0x0800aa8d
 800a9dc:	0800aa8d 	.word	0x0800aa8d
 800a9e0:	0800aa8d 	.word	0x0800aa8d
 800a9e4:	0800aa8d 	.word	0x0800aa8d
 800a9e8:	0800aa8d 	.word	0x0800aa8d
 800a9ec:	0800aa8d 	.word	0x0800aa8d
 800a9f0:	0800aa8d 	.word	0x0800aa8d
 800a9f4:	0800aa8d 	.word	0x0800aa8d
 800a9f8:	0800aa8d 	.word	0x0800aa8d
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aa8d 	.word	0x0800aa8d
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aa7f 	.word	0x0800aa7f
 800aa10:	2b40      	cmp	r3, #64	; 0x40
 800aa12:	d037      	beq.n	800aa84 <UART_SetConfig+0xa28>
 800aa14:	e03a      	b.n	800aa8c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa16:	f7fc f8bf 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800aa1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa1c:	e03c      	b.n	800aa98 <UART_SetConfig+0xa3c>
 800aa1e:	bf00      	nop
 800aa20:	003d0900 	.word	0x003d0900
 800aa24:	0800b920 	.word	0x0800b920
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa30:	f7fc f8c8 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 800aa34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa36:	e02f      	b.n	800aa98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa38:	f107 0314 	add.w	r3, r7, #20
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd f82d 	bl	8007a9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa46:	e027      	b.n	800aa98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa48:	f107 0308 	add.w	r3, r7, #8
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fd f979 	bl	8007d44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa56:	e01f      	b.n	800aa98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa58:	4b2c      	ldr	r3, [pc, #176]	; (800ab0c <UART_SetConfig+0xab0>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0320 	and.w	r3, r3, #32
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa64:	4b29      	ldr	r3, [pc, #164]	; (800ab0c <UART_SetConfig+0xab0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	08db      	lsrs	r3, r3, #3
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	4a28      	ldr	r2, [pc, #160]	; (800ab10 <UART_SetConfig+0xab4>)
 800aa70:	fa22 f303 	lsr.w	r3, r2, r3
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa76:	e00f      	b.n	800aa98 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800aa78:	4b25      	ldr	r3, [pc, #148]	; (800ab10 <UART_SetConfig+0xab4>)
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa7c:	e00c      	b.n	800aa98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa7e:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <UART_SetConfig+0xab8>)
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa82:	e009      	b.n	800aa98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa8a:	e005      	b.n	800aa98 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa96:	bf00      	nop
    }

    if (pclk != 0U)
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d021      	beq.n	800aae2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa2:	4a1d      	ldr	r2, [pc, #116]	; (800ab18 <UART_SetConfig+0xabc>)
 800aaa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	fbb3 f2f2 	udiv	r2, r3, r2
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	441a      	add	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	2b0f      	cmp	r3, #15
 800aac6:	d909      	bls.n	800aadc <UART_SetConfig+0xa80>
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aace:	d205      	bcs.n	800aadc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60da      	str	r2, [r3, #12]
 800aada:	e002      	b.n	800aae2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aafe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3738      	adds	r7, #56	; 0x38
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bdb0      	pop	{r4, r5, r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	58024400 	.word	0x58024400
 800ab10:	03d09000 	.word	0x03d09000
 800ab14:	003d0900 	.word	0x003d0900
 800ab18:	0800b920 	.word	0x0800b920

0800ab1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00a      	beq.n	800ab46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4a:	f003 0302 	and.w	r3, r3, #2
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00a      	beq.n	800ab8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8e:	f003 0308 	and.w	r3, r3, #8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00a      	beq.n	800abac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb0:	f003 0310 	and.w	r3, r3, #16
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00a      	beq.n	800abce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01a      	beq.n	800ac32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac1a:	d10a      	bne.n	800ac32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	430a      	orrs	r2, r1
 800ac30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	605a      	str	r2, [r3, #4]
  }
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac70:	f7f7 f8a0 	bl	8001db4 <HAL_GetTick>
 800ac74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b08      	cmp	r3, #8
 800ac82:	d10e      	bne.n	800aca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f82f 	bl	800acf6 <UART_WaitOnFlagUntilTimeout>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e025      	b.n	800acee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0304 	and.w	r3, r3, #4
 800acac:	2b04      	cmp	r3, #4
 800acae:	d10e      	bne.n	800acce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f819 	bl	800acf6 <UART_WaitOnFlagUntilTimeout>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e00f      	b.n	800acee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2220      	movs	r2, #32
 800acda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b09c      	sub	sp, #112	; 0x70
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	60b9      	str	r1, [r7, #8]
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4613      	mov	r3, r2
 800ad04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad06:	e0a9      	b.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	f000 80a5 	beq.w	800ae5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad12:	f7f7 f84f 	bl	8001db4 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d302      	bcc.n	800ad28 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d140      	bne.n	800adaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad3c:	667b      	str	r3, [r7, #100]	; 0x64
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e6      	bne.n	800ad28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	f023 0301 	bic.w	r3, r3, #1
 800ad70:	663b      	str	r3, [r7, #96]	; 0x60
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3308      	adds	r3, #8
 800ad78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad82:	e841 2300 	strex	r3, r2, [r1]
 800ad86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e5      	bne.n	800ad5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e069      	b.n	800ae7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0304 	and.w	r3, r3, #4
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d051      	beq.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adc6:	d149      	bne.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800add0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ade6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	461a      	mov	r2, r3
 800adee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf0:	637b      	str	r3, [r7, #52]	; 0x34
 800adf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adf8:	e841 2300 	strex	r3, r2, [r1]
 800adfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e6      	bne.n	800add2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3308      	adds	r3, #8
 800ae0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	613b      	str	r3, [r7, #16]
   return(result);
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f023 0301 	bic.w	r3, r3, #1
 800ae1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3308      	adds	r3, #8
 800ae22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae24:	623a      	str	r2, [r7, #32]
 800ae26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae28:	69f9      	ldr	r1, [r7, #28]
 800ae2a:	6a3a      	ldr	r2, [r7, #32]
 800ae2c:	e841 2300 	strex	r3, r2, [r1]
 800ae30:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e5      	bne.n	800ae04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e010      	b.n	800ae7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	69da      	ldr	r2, [r3, #28]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	4013      	ands	r3, r2
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2301      	moveq	r3, #1
 800ae6e:	2300      	movne	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	f43f af46 	beq.w	800ad08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3770      	adds	r7, #112	; 0x70
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
	...

0800ae88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b095      	sub	sp, #84	; 0x54
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeae:	643b      	str	r3, [r7, #64]	; 0x40
 800aeb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aeb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e6      	bne.n	800ae90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	e853 3f00 	ldrex	r3, [r3]
 800aed0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aed2:	69fa      	ldr	r2, [r7, #28]
 800aed4:	4b1e      	ldr	r3, [pc, #120]	; (800af50 <UART_EndRxTransfer+0xc8>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e5      	bne.n	800aec2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d118      	bne.n	800af30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	e853 3f00 	ldrex	r3, [r3]
 800af0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f023 0310 	bic.w	r3, r3, #16
 800af12:	647b      	str	r3, [r7, #68]	; 0x44
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	461a      	mov	r2, r3
 800af1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af20:	6979      	ldr	r1, [r7, #20]
 800af22:	69ba      	ldr	r2, [r7, #24]
 800af24:	e841 2300 	strex	r3, r2, [r1]
 800af28:	613b      	str	r3, [r7, #16]
   return(result);
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e6      	bne.n	800aefe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2220      	movs	r2, #32
 800af34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	671a      	str	r2, [r3, #112]	; 0x70
}
 800af44:	bf00      	nop
 800af46:	3754      	adds	r7, #84	; 0x54
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	effffffe 	.word	0xeffffffe

0800af54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f7ff f85c 	bl	800a030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af78:	bf00      	nop
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	60bb      	str	r3, [r7, #8]
   return(result);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	61bb      	str	r3, [r7, #24]
 800afa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6979      	ldr	r1, [r7, #20]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	613b      	str	r3, [r7, #16]
   return(result);
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e6      	bne.n	800af88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff f827 	bl	800a01c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afce:	bf00      	nop
 800afd0:	3720      	adds	r7, #32
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aff2:	bf00      	nop
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b012:	b480      	push	{r7}
 800b014:	b085      	sub	sp, #20
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UARTEx_DisableFifoMode+0x16>
 800b024:	2302      	movs	r3, #2
 800b026:	e027      	b.n	800b078 <HAL_UARTEx_DisableFifoMode+0x66>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2224      	movs	r2, #36	; 0x24
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0201 	bic.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2220      	movs	r2, #32
 800b06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b094:	2b01      	cmp	r3, #1
 800b096:	d101      	bne.n	800b09c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b098:	2302      	movs	r3, #2
 800b09a:	e02d      	b.n	800b0f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2224      	movs	r2, #36	; 0x24
 800b0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0201 	bic.w	r2, r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f84f 	bl	800b17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b110:	2b01      	cmp	r3, #1
 800b112:	d101      	bne.n	800b118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b114:	2302      	movs	r3, #2
 800b116:	e02d      	b.n	800b174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2224      	movs	r2, #36	; 0x24
 800b124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 0201 	bic.w	r2, r2, #1
 800b13e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f811 	bl	800b17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d108      	bne.n	800b19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b19c:	e031      	b.n	800b202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b19e:	2310      	movs	r3, #16
 800b1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1a2:	2310      	movs	r3, #16
 800b1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	0e5b      	lsrs	r3, r3, #25
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	0f5b      	lsrs	r3, r3, #29
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0307 	and.w	r3, r3, #7
 800b1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	7b3a      	ldrb	r2, [r7, #12]
 800b1ca:	4911      	ldr	r1, [pc, #68]	; (800b210 <UARTEx_SetNbDataToProcess+0x94>)
 800b1cc:	5c8a      	ldrb	r2, [r1, r2]
 800b1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1d2:	7b3a      	ldrb	r2, [r7, #12]
 800b1d4:	490f      	ldr	r1, [pc, #60]	; (800b214 <UARTEx_SetNbDataToProcess+0x98>)
 800b1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
 800b1e6:	7b7a      	ldrb	r2, [r7, #13]
 800b1e8:	4909      	ldr	r1, [pc, #36]	; (800b210 <UARTEx_SetNbDataToProcess+0x94>)
 800b1ea:	5c8a      	ldrb	r2, [r1, r2]
 800b1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1f0:	7b7a      	ldrb	r2, [r7, #13]
 800b1f2:	4908      	ldr	r1, [pc, #32]	; (800b214 <UARTEx_SetNbDataToProcess+0x98>)
 800b1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	0800b938 	.word	0x0800b938
 800b214:	0800b940 	.word	0x0800b940

0800b218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b218:	b084      	sub	sp, #16
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	f107 001c 	add.w	r0, r7, #28
 800b226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d120      	bne.n	800b272 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <USB_CoreInit+0xd4>)
 800b242:	4013      	ands	r3, r2
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b256:	2b01      	cmp	r3, #1
 800b258:	d105      	bne.n	800b266 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 faa8 	bl	800b7bc <USB_CoreReset>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73fb      	strb	r3, [r7, #15]
 800b270:	e01a      	b.n	800b2a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa9c 	bl	800b7bc <USB_CoreReset>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	639a      	str	r2, [r3, #56]	; 0x38
 800b29a:	e005      	b.n	800b2a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d116      	bne.n	800b2dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2bc:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <USB_CoreInit+0xd8>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f043 0206 	orr.w	r2, r3, #6
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f043 0220 	orr.w	r2, r3, #32
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2e8:	b004      	add	sp, #16
 800b2ea:	4770      	bx	lr
 800b2ec:	ffbdffbf 	.word	0xffbdffbf
 800b2f0:	03ee0000 	.word	0x03ee0000

0800b2f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f023 0201 	bic.w	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b322:	2300      	movs	r3, #0
 800b324:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b332:	78fb      	ldrb	r3, [r7, #3]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d115      	bne.n	800b364 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b344:	2001      	movs	r0, #1
 800b346:	f7f6 fd41 	bl	8001dcc <HAL_Delay>
      ms++;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3301      	adds	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fa25 	bl	800b7a0 <USB_GetMode>
 800b356:	4603      	mov	r3, r0
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d01e      	beq.n	800b39a <USB_SetCurrentMode+0x84>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b31      	cmp	r3, #49	; 0x31
 800b360:	d9f0      	bls.n	800b344 <USB_SetCurrentMode+0x2e>
 800b362:	e01a      	b.n	800b39a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b364:	78fb      	ldrb	r3, [r7, #3]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d115      	bne.n	800b396 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b376:	2001      	movs	r0, #1
 800b378:	f7f6 fd28 	bl	8001dcc <HAL_Delay>
      ms++;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa0c 	bl	800b7a0 <USB_GetMode>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d005      	beq.n	800b39a <USB_SetCurrentMode+0x84>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b31      	cmp	r3, #49	; 0x31
 800b392:	d9f0      	bls.n	800b376 <USB_SetCurrentMode+0x60>
 800b394:	e001      	b.n	800b39a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e005      	b.n	800b3a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b32      	cmp	r3, #50	; 0x32
 800b39e:	d101      	bne.n	800b3a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b086      	sub	sp, #24
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b3be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	613b      	str	r3, [r7, #16]
 800b3ce:	e009      	b.n	800b3e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	3340      	adds	r3, #64	; 0x40
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	2200      	movs	r2, #0
 800b3dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2b0e      	cmp	r3, #14
 800b3e8:	d9f2      	bls.n	800b3d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d11c      	bne.n	800b42a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3fe:	f043 0302 	orr.w	r3, r3, #2
 800b402:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	e005      	b.n	800b436 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b43c:	461a      	mov	r2, r3
 800b43e:	2300      	movs	r3, #0
 800b440:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b448:	4619      	mov	r1, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b450:	461a      	mov	r2, r3
 800b452:	680b      	ldr	r3, [r1, #0]
 800b454:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d10c      	bne.n	800b476 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d104      	bne.n	800b46c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b462:	2100      	movs	r1, #0
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f961 	bl	800b72c <USB_SetDevSpeed>
 800b46a:	e008      	b.n	800b47e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b46c:	2101      	movs	r1, #1
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f95c 	bl	800b72c <USB_SetDevSpeed>
 800b474:	e003      	b.n	800b47e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b476:	2103      	movs	r1, #3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f957 	bl	800b72c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b47e:	2110      	movs	r1, #16
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f8f3 	bl	800b66c <USB_FlushTxFifo>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f91d 	bl	800b6d0 <USB_FlushRxFifo>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	613b      	str	r3, [r7, #16]
 800b4c8:	e043      	b.n	800b552 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4e0:	d118      	bne.n	800b514 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10a      	bne.n	800b4fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	e013      	b.n	800b526 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4413      	add	r3, r2
 800b506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50a:	461a      	mov	r2, r3
 800b50c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	e008      	b.n	800b526 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b520:	461a      	mov	r2, r3
 800b522:	2300      	movs	r3, #0
 800b524:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b532:	461a      	mov	r2, r3
 800b534:	2300      	movs	r3, #0
 800b536:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b544:	461a      	mov	r2, r3
 800b546:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b54a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3301      	adds	r3, #1
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	429a      	cmp	r2, r3
 800b558:	d3b7      	bcc.n	800b4ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b55a:	2300      	movs	r3, #0
 800b55c:	613b      	str	r3, [r7, #16]
 800b55e:	e043      	b.n	800b5e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b576:	d118      	bne.n	800b5aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10a      	bne.n	800b594 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	015a      	lsls	r2, r3, #5
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4413      	add	r3, r2
 800b586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58a:	461a      	mov	r2, r3
 800b58c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	e013      	b.n	800b5bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	e008      	b.n	800b5bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	613b      	str	r3, [r7, #16]
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d3b7      	bcc.n	800b560 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b602:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b610:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	2b00      	cmp	r3, #0
 800b616:	d105      	bne.n	800b624 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	f043 0210 	orr.w	r2, r3, #16
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	699a      	ldr	r2, [r3, #24]
 800b628:	4b0e      	ldr	r3, [pc, #56]	; (800b664 <USB_DevInit+0x2b4>)
 800b62a:	4313      	orrs	r3, r2
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	f043 0208 	orr.w	r2, r3, #8
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b644:	2b01      	cmp	r3, #1
 800b646:	d105      	bne.n	800b654 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <USB_DevInit+0x2b8>)
 800b64e:	4313      	orrs	r3, r2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b654:	7dfb      	ldrb	r3, [r7, #23]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b660:	b004      	add	sp, #16
 800b662:	4770      	bx	lr
 800b664:	803c3800 	.word	0x803c3800
 800b668:	40000004 	.word	0x40000004

0800b66c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3301      	adds	r3, #1
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	4a12      	ldr	r2, [pc, #72]	; (800b6cc <USB_FlushTxFifo+0x60>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d901      	bls.n	800b68a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e01a      	b.n	800b6c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	daf3      	bge.n	800b67a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	019b      	lsls	r3, r3, #6
 800b69a:	f043 0220 	orr.w	r2, r3, #32
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	4a08      	ldr	r2, [pc, #32]	; (800b6cc <USB_FlushTxFifo+0x60>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d901      	bls.n	800b6b2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e006      	b.n	800b6c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	f003 0320 	and.w	r3, r3, #32
 800b6ba:	2b20      	cmp	r3, #32
 800b6bc:	d0f1      	beq.n	800b6a2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	00030d40 	.word	0x00030d40

0800b6d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	4a11      	ldr	r2, [pc, #68]	; (800b728 <USB_FlushRxFifo+0x58>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d901      	bls.n	800b6ec <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e017      	b.n	800b71c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	daf3      	bge.n	800b6dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3301      	adds	r3, #1
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	4a08      	ldr	r2, [pc, #32]	; (800b728 <USB_FlushRxFifo+0x58>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d901      	bls.n	800b70e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e006      	b.n	800b71c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	f003 0310 	and.w	r3, r3, #16
 800b716:	2b10      	cmp	r3, #16
 800b718:	d0f1      	beq.n	800b6fe <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	00030d40 	.word	0x00030d40

0800b72c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	460b      	mov	r3, r1
 800b736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	68f9      	ldr	r1, [r7, #12]
 800b748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b74c:	4313      	orrs	r3, r2
 800b74e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b75e:	b480      	push	{r7}
 800b760:	b085      	sub	sp, #20
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b778:	f023 0303 	bic.w	r3, r3, #3
 800b77c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b78c:	f043 0302 	orr.w	r3, r3, #2
 800b790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	f003 0301 	and.w	r3, r3, #1
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	4a13      	ldr	r2, [pc, #76]	; (800b81c <USB_CoreReset+0x60>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d901      	bls.n	800b7d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e01a      	b.n	800b80e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	daf3      	bge.n	800b7c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	f043 0201 	orr.w	r2, r3, #1
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	4a09      	ldr	r2, [pc, #36]	; (800b81c <USB_CoreReset+0x60>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d901      	bls.n	800b800 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e006      	b.n	800b80e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d0f1      	beq.n	800b7f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	00030d40 	.word	0x00030d40

0800b820 <__libc_init_array>:
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	4d0d      	ldr	r5, [pc, #52]	; (800b858 <__libc_init_array+0x38>)
 800b824:	4c0d      	ldr	r4, [pc, #52]	; (800b85c <__libc_init_array+0x3c>)
 800b826:	1b64      	subs	r4, r4, r5
 800b828:	10a4      	asrs	r4, r4, #2
 800b82a:	2600      	movs	r6, #0
 800b82c:	42a6      	cmp	r6, r4
 800b82e:	d109      	bne.n	800b844 <__libc_init_array+0x24>
 800b830:	4d0b      	ldr	r5, [pc, #44]	; (800b860 <__libc_init_array+0x40>)
 800b832:	4c0c      	ldr	r4, [pc, #48]	; (800b864 <__libc_init_array+0x44>)
 800b834:	f000 f820 	bl	800b878 <_init>
 800b838:	1b64      	subs	r4, r4, r5
 800b83a:	10a4      	asrs	r4, r4, #2
 800b83c:	2600      	movs	r6, #0
 800b83e:	42a6      	cmp	r6, r4
 800b840:	d105      	bne.n	800b84e <__libc_init_array+0x2e>
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	f855 3b04 	ldr.w	r3, [r5], #4
 800b848:	4798      	blx	r3
 800b84a:	3601      	adds	r6, #1
 800b84c:	e7ee      	b.n	800b82c <__libc_init_array+0xc>
 800b84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b852:	4798      	blx	r3
 800b854:	3601      	adds	r6, #1
 800b856:	e7f2      	b.n	800b83e <__libc_init_array+0x1e>
 800b858:	0800b950 	.word	0x0800b950
 800b85c:	0800b950 	.word	0x0800b950
 800b860:	0800b950 	.word	0x0800b950
 800b864:	0800b954 	.word	0x0800b954

0800b868 <memset>:
 800b868:	4402      	add	r2, r0
 800b86a:	4603      	mov	r3, r0
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d100      	bne.n	800b872 <memset+0xa>
 800b870:	4770      	bx	lr
 800b872:	f803 1b01 	strb.w	r1, [r3], #1
 800b876:	e7f9      	b.n	800b86c <memset+0x4>

0800b878 <_init>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	bf00      	nop
 800b87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b87e:	bc08      	pop	{r3}
 800b880:	469e      	mov	lr, r3
 800b882:	4770      	bx	lr

0800b884 <_fini>:
 800b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b886:	bf00      	nop
 800b888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b88a:	bc08      	pop	{r3}
 800b88c:	469e      	mov	lr, r3
 800b88e:	4770      	bx	lr
